import logging

from django.core.exceptions import PermissionDenied
from django.core.context_processors import csrf
from django.core.urlresolvers import reverse
from django.utils import timezone
from django.utils.decorators import method_decorator
from django.shortcuts import render, redirect, render_to_response
from django.views import generic
from django.template import RequestContext
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required

from blog.models import Post
from blog.forms import LoginForm, NewPostForm

class RecentView(generic.ListView):
    template_name = 'blog/recent.html'
    context_object_name = 'latest_post_list'

    def get_queryset(self):
        return Post.objects.filter(
            post_date__lte=timezone.now()).order_by("-post_date")

def handle_login(request):
    c = {}
    c.update(csrf(request))
    if request.method == "POST":
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            l = logging.getLogger(__name__)
            l.debug("Username {} Password {}".format(username, password))
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect(reverse("blog:recent"))
            else:
                raise PermissionDenied
    elif request.method == "GET":
        form = LoginForm()
        return render_to_response('blog/login.html', {'form': form},
                                  context_instance=RequestContext(request))
        # Rendering this way makes CSRF work somehow.
    else:
        raise Http404

def handle_logout(request):
    logout(request)
    return redirect(reverse('blog:recent'))
    
@login_required
def add_post(request):
    """
    Serve a form with logged in user's info on it,
    for adding a new post under that user.
    """
    if request.method == "POST":
        form = NewPostForm(request.POST)
        if form.is_valid():
            text = form.cleaned_data['post_text']
            p = Post(user=request.user, post_date=timezone.now(),
                     post_text=text)
            p.save()
            return redirect(reverse("blog:get", args=[p.id]))
        else:
            l = logging.getLogger(__name__)
            l.debug("New post failed; form invalid.\n{}".format(text))
            raise Http404
    elif request.method == "GET":
        l = logging.getLogger(__name__)
        l.debug("Going to send the form.")
        form = NewPostForm()
        return render_to_response('blog/new_post.html', { 'form' : form },
                                  context_instance=RequestContext(request))
    else:
        raise Http404

def get_post(request, post_id):
    p = Post.objects.get(id=post_id)
    return render(request, "blog/post.html", { 'post' : p })

class Show(generic.ListView):
    template_name = 'blog/profile.html'
    context_object_name = 'posts_list'
    
    def get_queryset(self):
        return Post.objects.filter(
            post_date__lte=timezone.now(),
            user=self.user.id).order_by('-post_date')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        self.user = args[0].user
        assert self.user.username
        return super(Show, self).dispatch(*args, **kwargs)
