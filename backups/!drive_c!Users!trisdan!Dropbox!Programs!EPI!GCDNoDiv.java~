/* Problem 5.15 of EPI.
   See CLRS Problem 31-1.
*/
import java.util.Random;

public class GCDNoDiv {
    public static int gcd(int a, int b) {
        assert 2147483647 > a && a > 0 &&
               2147483647 > b && b > 0 : "Overflow occurred";
        //System.out.printf("%-10s%d%n%-10s%d%n", "a", a, "b", b);
        if (a < b) {
            int temp = a;
            a = b;
            b = temp;
        }
        if (a == 1 || b == 1) {
            return 1;
        }
        else if (isEven(a) && isEven(b)) {
            return gcd(a >> 1, b >> 1) << 1;
        }
        else if (isEven(a)) {
            return gcd(a >> 1, b);
        }
        else if (isEven(b)) {
            return gcd(a, b >> 1);
        }
        else {
            return gcd((a-b) >> 1, b);
        }
    }

    public static boolean isEven(int x) {
        return (x & 1) == 0;
    }

    public static int gcdEuclid(int a, int b) {
        assert 2147483647 > a && a > 0 &&
               2147483647 > b && b > 0 : "Overflow occurred";
        //System.out.printf("%-10s%d%n%-10s%d%n", "a", a, "b", b);
        int temp;
        if (a < b) {
            temp = a;
            a = b;
            b = temp;
        }
        while (a % b > 0) {
            temp = a;
            a = b;
            b = temp % b;
        }
        return b;
    }
    
    public static void main(String[] args) {
        try {
            System.out.println(gcd(12, 4));  // gcd is 3
            System.out.println(gcd(103, 10));  // gcd is 1
            //System.out.println(gcd(2147483647, 64));  // overflow

            System.out.println(gcdEuclid(12, 4));
            System.out.println(gcdEuclid(103, 10));
        } catch (StackOverflowError soe) {
            System.err.println("OOOOOOVERFLOOOOOOOW");
        }

        int[] divs = new int[20000];
        Random r = new Random();

        for (int i = 0; i < divs.length; ++i) {
            divs[i] = Math.abs(r.nextInt());
        }

        System.out.println("With Euclid");
        long delta, t = System.currentTimeMillis();
        for (int i = 0; i < divs.length - 1; ++i) {
            gcdEuclid(divs[i], divs[i+1]);
        }
        delta = System.currentTimeMillis() - t;
        System.out.println("With Euclid took " + delta + " milliseconds.");

        System.out.println("Without Euclid");
        t = System.currentTimeMillis();
        for (int i = 0; i < divs.length - 1; ++i) {
            gcd(divs[i], divs[i+1]);
        }
        delta = System.currentTimeMillis() - t;
        System.out.println("Without Euclid took " + delta + " milliseconds.");        
    }
}
