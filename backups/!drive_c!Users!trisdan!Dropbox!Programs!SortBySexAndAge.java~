/*
  This file is an example of how to use compareTo and Comparable.
  In particular it shows how you can use secondary keys. The Person
  class here sorts women before men, and then sorts by age within
  this groups. It works just as well with an enum or whatever for
  the sex, but it's a little nicer to write with an int.
*/
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class SortBySexAndAge {
    static class Person implements Comparable<Person> {
        final int sex;  // 0 for F, 1 for M.
        int age;

        public Person(int sex, int age) {
            this.sex = sex;
            this.age = age;
        }

        @Override
        public int compareTo(Person other) {
            assert sex == 0 || sex == 1 &&
                other.sex == 0 || other.sex == 1;
            if (sex < other.sex) {
                return -1;
            }
            else if (sex > other.sex) {
                return 1;
            }
            else {
                assert age >= 0 && other.age >= 0;
                return age - other.age;
            }
        }
    }

    public static void main(String[] args) {
        List<Person> people = new ArrayList<>();
        people.add(new Person(0, 10));
        people.add(new Person(1, 20));
        people.add(new Person(1, 5));
        people.add(new Person(0, 35));
        people.add(new Person(0, 22));
        people.add(new Person(1, 10));
        people.add(new Person(1, 13));
        people.add(new Person(0, 11));
        people.add(new Person(0, 96));
        people.add(new Person(1, 102));
        people.add(new Person(1, 196));  // Boris of the Yogurt
        people.add(new Person(0, 10));

        Collections.sort(people);
        System.out.printf("%s%4s%n", "Sex", "Age");
        System.out.println("----------");
        for (Person p : people) {
            System.out.printf("%d%4d%n", p.sex, p.age);
        }
    }
}
