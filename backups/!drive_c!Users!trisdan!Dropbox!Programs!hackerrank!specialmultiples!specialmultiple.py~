import sys

# Optimization digest:
# Changing digit not in ('0', '9') to digit != '0' and digit != '9'
# makes it ever so slightly slower.
# Changing int to long makes it slower (I guess because 64-bit math is
# slower?)
# Adding the check for divisibility by 9 makes it much, much faster.
# Choosing the multiples randomly makes it never end.

def check_digits(digitstr):
  for digit in digitstr:
    if digit not in ('0', '9'): return False 
  return True

def zero_nine(multstring):
  multiplier = current = int(multstring)
  check = check_digits(multstring)
  while not check:
    current += multiplier
    # Anything with just 9's and 0's has a digit sum divisible by
    # 9, so is itself divisible by 9. But not everything divisible
    # by 9 has just 0's and 9's, so we have to check the digits.
    # Adding this check reduces the number of calls to check_digits by
    # about 9/10s, so it's worth it.
    if current % 9 == 0:
        check = check_digits(str(current))
  return current

def zero_nine_random(multstring):
    '''
    Instead of checking them all from one*mult to n*mult, in order,
    check them at random.
    Never finishes.
    '''
    import random
    multiplier = current = long(multstring)
    check = check_digits(multstring)
    while not check:
        current = multiplier * random.randint(2, 2**64)
        if current % 9 == 0:
            check = check_digits(str(current))
    return current

if __name__ == "__main__":
  tests = sys.stdin.readlines()[1:]
  for test in tests:
    print(zero_nine_random(test))
