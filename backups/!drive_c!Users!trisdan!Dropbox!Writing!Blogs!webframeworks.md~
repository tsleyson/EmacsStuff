A while ago, I bought the book <em>Learning PHP, MySQL, and Javascript </em>and messed around with PHP on Apache for websites. It was a pain, for three reasons: I didn't really know what I was doing (the main reason), cross-browser incompatibility, and PHP is just not a very nice language. It reminds me a lot of Matlab, but specialized for websites instead of matrix calculations: it has lots of shortcuts for web-related stuff, but they're implemented in weird, hacky ways that make everything seem like a code golf voodoo spell. For example, PHP has built-in global variables that hold request parameters. This makes it quick and easy to handle request parameters, but then there's just this weird variable coming out of nowhere in all your functions. The standard library is similar: it doesn't use any kind of module system, so you just have all these functions that pop up from nowhere. It's like if every single library function in Python was a built-in, like <code>len</code>, and you could just call it from anywhere in your program without referring to anything. Which is fine if you just want to hack together a quick website using a few primitive operations, but think about how many libraries Python has: you'd have built-ins for obscure libraries like <code>ctypes</code> and <code>curses</code>, and you wouldn't be able to name your own functions simple things like <code>raw</code> or <code>wrapper</code> because those names are already taken by <code>curses</code>, unless we had some awful system like naming those functions <code>__curses_raw____</code> (oh, wait...) By the time I was using it, PHP had grown well beyond a simple web hack and had over 500 built-in functions, with long, unintuitive names like <code>mysql_real_escape_string</code> and no consistent style standards, so I constantly had to look up whether it was <code>query_mysql</code> or <code>query_my_sql</code> or <code>queryMySQL</code> or...

(I actually like Javascript, even though I acknowledge it also has some guilt in the unpleasantness of this kind of web development. This was also before the answer to every problem was "use JQuery". The book introduces YUI, which isn't bad; it's not quite as nice as JQuery, although I like how its last name could be Hirasawa. But YUI didn't help, because I had no idea what I was doing.)

But, like I said, the main problem wasn't PHP; it was that I had no idea what I was doing. So last year, I decided to test if my schooling had taught me anything by trying out web programming again. Since I was pretty sure PHP hadn't gotten any better, I decided to try out a framework, but as a consummate language dabbler, I couldn't stick with just one, so I ended up trying out three of them, and even though I ended up sort of picking one, I'll probably change my mind three or four times.

Below, I'll go over my experience with each framework, which is totally biased and not at all objective, and discuss some of the facets of my experience that influenced my opinion of the framework.

<h1>Ruby on Rails: The Web Framework of Heroes</h1>
The first framework I tried was Ruby on Rails. For some reason I keep on coming back to Ruby, even though I never end up seriously learning it because it feels so redundant when I know Python. Steve Yegge loved Ruby for a while, and he wrote all about how great Rails was and how easy it made getting started, and lots of other people and companies were using it, including companies I might want to work at someday like Scribd, so I decided to give Rails a try first.

I followed Michael Hartl's Rails tutorial, which is an impressive achievement in itself and seems to be the most commonly used tutorial for people starting out with Rails. One of the nice things about learning Rails, especially with Hartl's tutorial, is that it had so many people trying it in recent history that almost every beginner problem has been discussed on Stack Overflow. In fact, half the problems I had while following the tutorial had already been exactly answered for the benefit of other people following Hartl's tutorial. Eventually, I could just Google "Rails tutorial Hartl Chapter 7.3", and it would turn out that whatever I'd done wrong in that section was something lots of other people had also done wrong, or something that had changed in a newer release of Rails or one of the other components. So that part was pretty nice. 

But obviously, I wouldn't have tried the other two frameworks if Rails had been exactly what I was looking for.

<h2>Installation</h2>
Installing Rails was an unmitigated nightmare. It was absolutely one of the most frustrating installation procedures I've ever gone through. 

Hartl's tutorial very patiently explains how to install everything. Hartl does his best to make it easy for you, and I think with any other software on the planet, Hartl would have succeeded at making it easy enough that someone in a coma can do it, because he just is that good at explaining things. But Rails's installation is so vile, so evil, so pernicious, that not even Hartl could actually make it pain-free.

Since I was working on Windows 8, I started by following Hartl's advice to use RailsInstaller. Unfortunately, it turns out that RailsInstaller uses an outdated version of Rails that doesn't work with newer versions of Ruby. I had just finished (stupidly) compiling Ruby 2.1 from source, but it wouldn't work with the version that Rails Installer included, so I had to go get Ruby 1.9 from somewhere and install it. 
