<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-2.html">previous</a>, <a href="book-Z-H-4.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>This book is dedicated, in respect and admiration, to the spirit that lives in the computer.</p>
<p></p>
<p></p>
<p></p>
<p>``I think that it's extraordinarily important that we in computer science keep fun in computing. When it started out, it was an awful lot of fun. Of course, the paying customers got shafted every now and then, and after a while we began to take their complaints seriously. We began to feel as if we really were responsible for the successful, error-free perfect use of these machines. I don't think we are. I think we're responsible for stretching them, setting them off in new directions, and keeping fun in the house. I hope the field of computer science never loses its sense of fun. Above all, I hope we don't become missionaries. Don't feel as if you're Bible salesmen. The world has too many of those already. What you know about computing other people will learn. Don't feel as if the key to successful computing is only in your hands. What's in your hands, I think and hope, is intelligence: the ability to see the machine as more than when you were first led up to it, that you can make it more.''</p>
<p></p>
<p></p>
<p>Alan J. Perlis (April 1, 1922-February 7, 1990)</p>
<p></p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-2.html">previous</a>, <a href="book-Z-H-4.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-4.html">previous</a>, <a href="book-Z-H-6.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h1 class="chapter"></h1>
<p> </p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_Temp_2">Foreword</a></p>
<p>Educators, generals, dieticians, psychologists, and parents program. Armies, students, and some societies are programmed. An assault on large problems employs a succession of programs, most of which spring into existence en route. These programs are rife with issues that appear to be particular to the problem at hand. To appreciate programming as an intellectual activity in its own right you must turn to computer programming; you must read and write computer programs -- many of them. It doesn't matter much what the programs are about or what applications they serve. What does matter is how well they perform and how smoothly they fit with other programs in the creation of still greater programs. The programmer must seek both perfection of part and adequacy of collection. In this book the use of ``program'' is focused on the creation, execution, and study of programs written in a dialect of Lisp for execution on a digital computer. Using Lisp we restrict or limit not what we may program, but only the notation for our program descriptions.</p>
<p>Our traffic with the subject matter of this book involves us with three foci of phenomena: the human mind, collections of computer programs, and the computer. Every computer program is a model, hatched in the mind, of a real or mental process. These processes, arising from human experience and thought, are huge in number, intricate in detail, and at any time only partially understood. They are modeled to our permanent satisfaction rarely by our computer programs. Thus even though our programs are carefully handcrafted discrete collections of symbols, mosaics of interlocking functions, they continually evolve: we change them as our perception of the model deepens, enlarges, generalizes until the model ultimately attains a metastable place within still another model with which we struggle. The source of the exhilaration associated with computer programming is the continual unfolding within the mind and on the computer of mechanisms expressed as programs and the explosion of perception they generate. If art interprets our dreams, the computer executes them in the guise of programs!</p>
<p>For all its power, the computer is a harsh taskmaster. Its programs must be correct, and what we wish to say must be said accurately in every detail. As in every other symbolic activity, we become convinced of program truth through argument. Lisp itself can be assigned a semantics (another model, by the way), and if a program's function can be specified, say, in the predicate calculus, the proof methods of logic can be used to make an acceptable correctness argument. Unfortunately, as programs get large and complicated, as they almost always do, the adequacy, consistency, and correctness of the specifications themselves become open to doubt, so that complete formal arguments of correctness seldom accompany large programs. Since large programs grow from small ones, it is crucial that we develop an arsenal of standard program structures of whose correctness we have become sure -- we call them idioms -- and learn to combine them into larger structures using organizational techniques of proven value. These techniques are treated at length in this book, and understanding them is essential to participation in the Promethean enterprise called programming. More than anything else, the uncovering and mastery of powerful organizational techniques accelerates our ability to create large, significant programs. Conversely, since writing large programs is very taxing, we are stimulated to invent new methods of reducing the mass of function and detail to be fitted into large programs.</p>
<p>Unlike programs, computers must obey the laws of physics. If they wish to perform rapidly -- a few nanoseconds per state change -- they must transmit electrons only small distances (at most 1 <sup>1</sup>/2 feet). The heat generated by the huge number of devices so concentrated in space has to be removed. An exquisite engineering art has been developed balancing between multiplicity of function and density of devices. In any event, hardware always operates at a level more primitive than that at which we care to program. The processes that transform our Lisp programs to ``machine'' programs are themselves abstract models which we program. Their study and creation give a great deal of insight into the organizational programs associated with programming arbitrary models. Of course the computer itself can be so modeled. Think of it: the behavior of the smallest physical switching element is modeled by quantum mechanics described by differential equations whose detailed behavior is captured by numerical approximations represented in computer programs executing on computers composed of <code>...</code>!</p>
<p>It is not merely a matter of tactical convenience to separately identify the three foci. Even though, as they say, it's all in the head, this logical separation induces an acceleration of symbolic traffic between these foci whose richness, vitality, and potential is exceeded in human experience only by the evolution of life itself. At best, relationships between the foci are metastable. The computers are never large enough or fast enough. Each breakthrough in hardware technology leads to more massive programming enterprises, new organizational principles, and an enrichment of abstract models. Every reader should ask himself periodically ``Toward what end, toward what end?'' -- but do not ask it too often lest you pass up the fun of programming for the constipation of bittersweet philosophy.</p>
<p>Among the programs we write, some (but never enough) perform a precise mathematical function such as sorting or finding the maximum of a sequence of numbers, determining primality, or finding the square root. We call such programs algorithms, and a great deal is known of their optimal behavior, particularly with respect to the two important parameters of execution time and data storage requirements. A programmer should acquire good algorithms and idioms. Even though some programs resist precise specifications, it is the responsibility of the programmer to estimate, and always to attempt to improve, their performance.</p>
<p>Lisp is a survivor, having been in use for about a quarter of a century. Among the active programming languages only Fortran has had a longer life. Both languages have supported the programming needs of important areas of application, Fortran for scientific and engineering computation and Lisp for artificial intelligence. These two areas continue to be important, and their programmers are so devoted to these two languages that Lisp and Fortran may well continue in active use for at least another quarter-century.</p>
<p>Lisp changes. The Scheme dialect used in this text has evolved from the original Lisp and differs from the latter in several important ways, including static scoping for variable binding and permitting functions to yield functions as values. In its semantic structure Scheme is as closely akin to Algol 60 as to early Lisps. Algol 60, never to be an active language again, lives on in the genes of Scheme and Pascal. It would be difficult to find two languages that are the communicating coin of two more different cultures than those gathered around these two languages. Pascal is for building pyramids -- imposing, breathtaking, static structures built by armies pushing heavy blocks into place. Lisp is for building organisms -- imposing, breathtaking, dynamic structures built by squads fitting fluctuating myriads of simpler organisms into place. The organizing principles used are the same in both cases, except for one extraordinarily important difference: The discretionary exportable functionality entrusted to the individual Lisp programmer is more than an order of magnitude greater than that to be found within Pascal enterprises. Lisp programs inflate libraries with functions whose utility transcends the application that produced them. The list, Lisp's native data structure, is largely responsible for such growth of utility. The simple structure and natural applicability of lists are reflected in functions that are amazingly nonidiosyncratic. In Pascal the plethora of declarable data structures induces a specialization within functions that inhibits and penalizes casual cooperation. It is better to have 100 functions operate on one data structure than to have 10 functions operate on 10 data structures. As a result the pyramid must stand unchanged for a millennium; the organism must evolve or perish.</p>
<p>To illustrate this difference, compare the treatment of material and exercises within this book with that in any first-course text using Pascal. Do not labor under the illusion that this is a text digestible at MIT only, peculiar to the breed found there. It is precisely what a serious book on programming Lisp must be, no matter who the student is or where it is used.</p>
<p>Note that this is a text about programming, unlike most Lisp books, which are used as a preparation for work in artificial intelligence. After all, the critical programming concerns of software engineering and artificial intelligence tend to coalesce as the systems under investigation become larger. This explains why there is such growing interest in Lisp outside of artificial intelligence.</p>
<p>As one would expect from its goals, artificial intelligence research generates many significant programming problems. In other programming cultures this spate of problems spawns new languages. Indeed, in any very large programming task a useful organizing principle is to control and isolate traffic within the task modules via the invention of language. These languages tend to become less primitive as one approaches the boundaries of the system where we humans interact most often. As a result, such systems contain complex language-processing functions replicated many times. Lisp has such a simple syntax and semantics that parsing can be treated as an elementary task. Thus parsing technology plays almost no role in Lisp programs, and the construction of language processors is rarely an impediment to the rate of growth and change of large Lisp systems. Finally, it is this very simplicity of syntax and semantics that is responsible for the burden and freedom borne by all Lisp programmers. No Lisp program of any size beyond a few lines can be written without being saturated with discretionary functions. Invent and fit; have fits and reinvent! We toast the Lisp programmer who pens his thoughts within nests of parentheses.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<table>
<tbody>
<tr class="odd">
<td align="left">Alan J. Perlis<br /> New Haven, Connecticut</td>
</tr>
</tbody>
</table>
<p></p>
<p></p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-4.html">previous</a>, <a href="book-Z-H-6.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-5.html">previous</a>, <a href="book-Z-H-7.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h1 class="chapter"></h1>
<p> </p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_Temp_3">Preface to the Second Edition</a></p>
<p></p>
<p></p>
<table>
<col width="100%" />
<tbody>
<tr class="odd">
<td align="left"><p>Is it possible that software is not like anything else, that it is meant to be discarded: that the whole point is to always see it as a soap bubble?</p>
<p>Alan J. Perlis</p></td>
</tr>
</tbody>
</table>
<p></p>
<p>The material in this book has been the basis of MIT's entry-level computer science subject since 1980. We had been teaching this material for four years when the first edition was published, and twelve more years have elapsed until the appearance of this second edition. We are pleased that our work has been widely adopted and incorporated into other texts. We have seen our students take the ideas and programs in this book and build them in as the core of new computer systems and languages. In literal realization of an ancient Talmudic pun, our students have become our builders. We are lucky to have such capable students and such accomplished builders.</p>
<p>In preparing this edition, we have incorporated hundreds of clarifications suggested by our own teaching experience and the comments of colleagues at MIT and elsewhere. We have redesigned most of the major programming systems in the book, including the generic-arithmetic system, the interpreters, the register-machine simulator, and the compiler; and we have rewritten all the program examples to ensure that any Scheme implementation conforming to the IEEE Scheme standard (IEEE 1990) will be able to run the code.</p>
<p>This edition emphasizes several new themes. The most important of these is the central role played by different approaches to dealing with time in computational models: objects with state, concurrent programming, functional programming, lazy evaluation, and nondeterministic programming. We have included new sections on concurrency and nondeterminism, and we have tried to integrate this theme throughout the book.</p>
<p>The first edition of the book closely followed the syllabus of our MIT one-semester subject. With all the new material in the second edition, it will not be possible to cover everything in a single semester, so the instructor will have to pick and choose. In our own teaching, we sometimes skip the section on logic programming (section <a href="book-Z-H-29.html#%_sec_4.4">4.4</a>), we have students use the register-machine simulator but we do not cover its implementation (section <a href="book-Z-H-32.html#%_sec_5.2">5.2</a>), and we give only a cursory overview of the compiler (section <a href="book-Z-H-35.html#%_sec_5.5">5.5</a>). Even so, this is still an intense course. Some instructors may wish to cover only the first three or four chapters, leaving the other material for subsequent courses.</p>
<p>The World-Wide-Web site <code>www-mitpress.mit.edu/sicp</code> provides support for users of this book. This includes programs from the book, sample programming assignments, supplementary materials, and downloadable implementations of the Scheme dialect of Lisp.</p>
<p></p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-5.html">previous</a>, <a href="book-Z-H-7.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-6.html">previous</a>, <a href="book-Z-H-8.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h1 class="chapter"></h1>
<p> </p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_Temp_4">Preface to the First Edition</a></p>
<p></p>
<p></p>
<table>
<col width="100%" />
<tbody>
<tr class="odd">
<td align="left"><p>A computer is like a violin. You can imagine a novice trying first a phonograph and then a violin. The latter, he says, sounds terrible. That is the argument we have heard from our humanists and most of our computer scientists. Computer programs are good, they say, for particular purposes, but they aren't flexible. Neither is a violin, or a typewriter, until you learn how to use it.</p>
<p>Marvin Minsky, ``Why Programming Is a Good<br /> Medium for Expressing Poorly-Understood and Sloppily-Formulated Ideas''</p></td>
</tr>
</tbody>
</table>
<p></p>
<p>``The Structure and Interpretation of Computer Programs'' is the entry-level subject in computer science at the Massachusetts Institute of Technology. It is required of all students at MIT who major in electrical engineering or in computer science, as one-fourth of the ``common core curriculum,'' which also includes two subjects on circuits and linear systems and a subject on the design of digital systems. We have been involved in the development of this subject since 1978, and we have taught this material in its present form since the fall of 1980 to between 600 and 700 students each year. Most of these students have had little or no prior formal training in computation, although many have played with computers a bit and a few have had extensive programming or hardware-design experience.</p>
<p>Our design of this introductory computer-science subject reflects two major concerns. First, we want to establish the idea that a computer language is not just a way of getting a computer to perform operations but rather that it is a novel formal medium for expressing ideas about methodology. Thus, programs must be written for people to read, and only incidentally for machines to execute. Second, we believe that the essential material to be addressed by a subject at this level is not the syntax of particular programming-language constructs, nor clever algorithms for computing particular functions efficiently, nor even the mathematical analysis of algorithms and the foundations of computing, but rather the techniques used to control the intellectual complexity of large software systems.</p>
<p>Our goal is that students who complete this subject should have a good feel for the elements of style and the aesthetics of programming. They should have command of the major techniques for controlling complexity in a large system. They should be capable of reading a 50-page-long program, if it is written in an exemplary style. They should know what not to read, and what they need not understand at any moment. They should feel secure about modifying a program, retaining the spirit and style of the original author.</p>
<p>These skills are by no means unique to computer programming. The techniques we teach and draw upon are common to all of engineering design. We control complexity by building abstractions that hide details when appropriate. We control complexity by establishing conventional interfaces that enable us to construct systems by combining standard, well-understood pieces in a ``mix and match'' way. We control complexity by establishing new languages for describing a design, each of which emphasizes particular aspects of the design and deemphasizes others.</p>
<p>Underlying our approach to this subject is our conviction that ``computer science'' is not a science and that its significance has little to do with computers. The computer revolution is a revolution in the way we think and in the way we express what we think. The essence of this change is the emergence of what might best be called <em>procedural epistemology</em> -- the study of the structure of knowledge from an imperative point of view, as opposed to the more declarative point of view taken by classical mathematical subjects. Mathematics provides a framework for dealing precisely with notions of ``what is.'' Computation provides a framework for dealing precisely with notions of ``how to.''</p>
<p>In teaching our material we use a dialect of the programming language Lisp. We never formally teach the language, because we don't have to. We just use it, and students pick it up in a few days. This is one great advantage of Lisp-like languages: They have very few ways of forming compound expressions, and almost no syntactic structure. All of the formal properties can be covered in an hour, like the rules of chess. After a short time we forget about syntactic details of the language (because there are none) and get on with the real issues -- figuring out what we want to compute, how we will decompose problems into manageable parts, and how we will work on the parts. Another advantage of Lisp is that it supports (but does not enforce) more of the large-scale strategies for modular decomposition of programs than any other language we know. We can make procedural and data abstractions, we can use higher-order functions to capture common patterns of usage, we can model local state using assignment and data mutation, we can link parts of a program with streams and delayed evaluation, and we can easily implement embedded languages. All of this is embedded in an interactive environment with excellent support for incremental program design, construction, testing, and debugging. We thank all the generations of Lisp wizards, starting with John McCarthy, who have fashioned a fine tool of unprecedented power and elegance.</p>
<p>Scheme, the dialect of Lisp that we use, is an attempt to bring together the power and elegance of Lisp and Algol. From Lisp we take the metalinguistic power that derives from the simple syntax, the uniform representation of programs as data objects, and the garbage-collected heap-allocated data. From Algol we take lexical scoping and block structure, which are gifts from the pioneers of programming-language design who were on the Algol committee. We wish to cite John Reynolds and Peter Landin for their insights into the relationship of Church's lambda calculus to the structure of programming languages. We also recognize our debt to the mathematicians who scouted out this territory decades before computers appeared on the scene. These pioneers include Alonzo Church, Barkley Rosser, Stephen Kleene, and Haskell Curry.</p>
<p></p>
<p></p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-6.html">previous</a>, <a href="book-Z-H-8.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-7.html">previous</a>, <a href="book-Z-H-9.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h1 class="chapter"></h1>
<p> </p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_Temp_5">Acknowledgments</a></p>
<p>We would like to thank the many people who have helped us develop this book and this curriculum.</p>
<p>Our subject is a clear intellectual descendant of ``6.231,'' a wonderful subject on programming linguistics and the lambda calculus taught at MIT in the late 1960s by Jack Wozencraft and Arthur Evans, Jr.</p>
<p>We owe a great debt to Robert Fano, who reorganized MIT's introductory curriculum in electrical engineering and computer science to emphasize the principles of engineering design. He led us in starting out on this enterprise and wrote the first set of subject notes from which this book evolved.</p>
<p>Much of the style and aesthetics of programming that we try to teach were developed in conjunction with Guy Lewis Steele Jr., who collaborated with Gerald Jay Sussman in the initial development of the Scheme language. In addition, David Turner, Peter Henderson, Dan Friedman, David Wise, and Will Clinger have taught us many of the techniques of the functional programming community that appear in this book.</p>
<p>Joel Moses taught us about structuring large systems. His experience with the Macsyma system for symbolic computation provided the insight that one should avoid complexities of control and concentrate on organizing the data to reflect the real structure of the world being modeled.</p>
<p>Marvin Minsky and Seymour Papert formed many of our attitudes about programming and its place in our intellectual lives. To them we owe the understanding that computation provides a means of expression for exploring ideas that would otherwise be too complex to deal with precisely. They emphasize that a student's ability to write and modify programs provides a powerful medium in which exploring becomes a natural activity.</p>
<p>We also strongly agree with Alan Perlis that programming is lots of fun and we had better be careful to support the joy of programming. Part of this joy derives from observing great masters at work. We are fortunate to have been apprentice programmers at the feet of Bill Gosper and Richard Greenblatt.</p>
<p>It is difficult to identify all the people who have contributed to the development of our curriculum. We thank all the lecturers, recitation instructors, and tutors who have worked with us over the past fifteen years and put in many extra hours on our subject, especially Bill Siebert, Albert Meyer, Joe Stoy, Randy Davis, Louis Braida, Eric Grimson, Rod Brooks, Lynn Stein, and Peter Szolovits. We would like to specially acknowledge the outstanding teaching contributions of Franklyn Turbak, now at Wellesley; his work in undergraduate instruction set a standard that we can all aspire to. We are grateful to Jerry Saltzer and Jim Miller for helping us grapple with the mysteries of concurrency, and to Peter Szolovits and David McAllester for their contributions to the exposition of nondeterministic evaluation in chapter 4.</p>
<p>Many people have put in significant effort presenting this material at other universities. Some of the people we have worked closely with are Jacob Katzenelson at the Technion, Hardy Mayer at the University of California at Irvine, Joe Stoy at Oxford, Elisha Sacks at Purdue, and Jan Komorowski at the Norwegian University of Science and Technology. We are exceptionally proud of our colleagues who have received major teaching awards for their adaptations of this subject at other universities, including Kenneth Yip at Yale, Brian Harvey at the University of California at Berkeley, and Dan Huttenlocher at Cornell.</p>
<p>Al Moyé arranged for us to teach this material to engineers at Hewlett-Packard, and for the production of videotapes of these lectures. We would like to thank the talented instructors -- in particular Jim Miller, Bill Siebert, and Mike Eisenberg -- who have designed continuing education courses incorporating these tapes and taught them at universities and industry all over the world.</p>
<p>Many educators in other countries have put in significant work translating the first edition. Michel Briand, Pierre Chamard, and André Pic produced a French edition; Susanne Daniels-Herold produced a German edition; and Fumio Motoyoshi produced a Japanese edition. We do not know who produced the Chinese edition, but we consider it an honor to have been selected as the subject of an ``unauthorized'' translation.</p>
<p>It is hard to enumerate all the people who have made technical contributions to the development of the Scheme systems we use for instructional purposes. In addition to Guy Steele, principal wizards have included Chris Hanson, Joe Bowbeer, Jim Miller, Guillermo Rozas, and Stephen Adams. Others who have put in significant time are Richard Stallman, Alan Bawden, Kent Pitman, Jon Taft, Neil Mayle, John Lamping, Gwyn Osnos, Tracy Larrabee, George Carrette, Soma Chaudhuri, Bill Chiarchiaro, Steven Kirsch, Leigh Klotz, Wayne Noss, Todd Cass, Patrick O'Donnell, Kevin Theobald, Daniel Weise, Kenneth Sinclair, Anthony Courtemanche, Henry M. Wu, Andrew Berlin, and Ruth Shyu.</p>
<p>Beyond the MIT implementation, we would like to thank the many people who worked on the IEEE Scheme standard, including William Clinger and Jonathan Rees, who edited the R<sup>4</sup>RS, and Chris Haynes, David Bartley, Chris Hanson, and Jim Miller, who prepared the IEEE standard.</p>
<p>Dan Friedman has been a long-time leader of the Scheme community. The community's broader work goes beyond issues of language design to encompass significant educational innovations, such as the high-school curriculum based on EdScheme by Schemer's Inc., and the wonderful books by Mike Eisenberg and by Brian Harvey and Matthew Wright.</p>
<p>We appreciate the work of those who contributed to making this a real book, especially Terry Ehling, Larry Cohen, and Paul Bethge at the MIT Press. Ella Mazel found the wonderful cover image. For the second edition we are particularly grateful to Bernard and Ella Mazel for help with the book design, and to David Jones, TEX wizard extraordinaire. We also are indebted to those readers who made penetrating comments on the new draft: Jacob Katzenelson, Hardy Mayer, Jim Miller, and especially Brian Harvey, who did unto this book as Julie did unto his book <em>Simply Scheme</em>.</p>
<p>Finally, we would like to acknowledge the support of the organizations that have encouraged this work over the years, including support from Hewlett-Packard, made possible by Ira Goldstein and Joel Birnbaum, and support from DARPA, made possible by Bob Kahn.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-7.html">previous</a>, <a href="book-Z-H-9.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-8.html">previous</a>, <a href="book-Z-H-10.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h1 class="chapter"></h1>
<p><a href="book-Z-H-4.html#%_toc_%_chap_1">Chapter 1</a></p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_1">Building Abstractions with Procedures</a></p>
<p></p>
<p></p>
<table>
<col width="100%" />
<tbody>
<tr class="odd">
<td align="left"><p>The acts of the mind, wherein it exerts its power over simple ideas, are chiefly these three: 1. Combining several simple ideas into one compound one, and thus all complex ideas are made. 2. The second is bringing two ideas, whether simple or complex, together, and setting them by one another so as to take a view of them at once, without uniting them into one, by which it gets all its ideas of relations. 3. The third is separating them from all other ideas that accompany them in their real existence: this is called abstraction, and thus all its general ideas are made.</p>
<p>John Locke, <em>An Essay Concerning Human Understanding</em> (1690)</p></td>
</tr>
</tbody>
</table>
<p></p>
<p>We are about to study the idea of a <em>computational process</em>. Computational processes are abstract beings that inhabit computers. As they evolve, processes manipulate other abstract things called <em>data</em>. The evolution of a process is directed by a pattern of rules called a <em>program</em>. People create programs to direct processes. In effect, we conjure the spirits of the computer with our spells.</p>
<p>A computational process is indeed much like a sorcerer's idea of a spirit. It cannot be seen or touched. It is not composed of matter at all. However, it is very real. It can perform intellectual work. It can answer questions. It can affect the world by disbursing money at a bank or by controlling a robot arm in a factory. The programs we use to conjure processes are like a sorcerer's spells. They are carefully composed from symbolic expressions in arcane and esoteric <em>programming languages</em> that prescribe the tasks we want our processes to perform.</p>
<p>A computational process, in a correctly working computer, executes programs precisely and accurately. Thus, like the sorcerer's apprentice, novice programmers must learn to understand and to anticipate the consequences of their conjuring. Even small errors (usually called <em>bugs</em> or <em>glitches</em>) in programs can have complex and unanticipated consequences.</p>
<p>Fortunately, learning to program is considerably less dangerous than learning sorcery, because the spirits we deal with are conveniently contained in a secure way. Real-world programming, however, requires care, expertise, and wisdom. A small bug in a computer-aided design program, for example, can lead to the catastrophic collapse of an airplane or a dam or the self-destruction of an industrial robot.</p>
<p>Master software engineers have the ability to organize programs so that they can be reasonably sure that the resulting processes will perform the tasks intended. They can visualize the behavior of their systems in advance. They know how to structure programs so that unanticipated problems do not lead to catastrophic consequences, and when problems do arise, they can <em>debug</em> their programs. Well-designed computational systems, like well-designed automobiles or nuclear reactors, are designed in a modular manner, so that the parts can be constructed, replaced, and debugged separately.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_6">Programming in Lisp</a></h4>
<p>We need an appropriate language for describing processes, and we will use for this purpose the programming language Lisp. Just as our everyday thoughts are usually expressed in our natural language (such as English, French, or Japanese), and descriptions of quantitative phenomena are expressed with mathematical notations, our procedural thoughts will be expressed in Lisp. Lisp was invented in the late 1950s as a formalism for reasoning about the use of certain kinds of logical expressions, called <em>recursion equations</em>, as a model for computation. The language was conceived by John McCarthy and is based on his paper ``Recursive Functions of Symbolic Expressions and Their Computation by Machine'' (McCarthy 1960).</p>
<p>Despite its inception as a mathematical formalism, Lisp is a practical programming language. A Lisp <em>interpreter</em> is a machine that carries out processes described in the Lisp language. The first Lisp interpreter was implemented by McCarthy with the help of colleagues and students in the Artificial Intelligence Group of the MIT Research Laboratory of Electronics and in the MIT Computation Center.<a href="#footnote_Temp_7"><sup>1</sup></a> Lisp, whose name is an acronym for LISt Processing, was designed to provide symbol-manipulating capabilities for attacking programming problems such as the symbolic differentiation and integration of algebraic expressions. It included for this purpose new data objects known as atoms and lists, which most strikingly set it apart from all other languages of the period.</p>
<p>Lisp was not the product of a concerted design effort. Instead, it evolved informally in an experimental manner in response to users' needs and to pragmatic implementation considerations. Lisp's informal evolution has continued through the years, and the community of Lisp users has traditionally resisted attempts to promulgate any ``official'' definition of the language. This evolution, together with the flexibility and elegance of the initial conception, has enabled Lisp, which is the second oldest language in widespread use today (only Fortran is older), to continually adapt to encompass the most modern ideas about program design. Thus, Lisp is by now a family of dialects, which, while sharing most of the original features, may differ from one another in significant ways. The dialect of Lisp used in this book is called Scheme.<a href="#footnote_Temp_8"><sup>2</sup></a></p>
<p>Because of its experimental character and its emphasis on symbol manipulation, Lisp was at first very inefficient for numerical computations, at least in comparison with Fortran. Over the years, however, Lisp compilers have been developed that translate programs into machine code that can perform numerical computations reasonably efficiently. And for special applications, Lisp has been used with great effectiveness.<a href="#footnote_Temp_9"><sup>3</sup></a> Although Lisp has not yet overcome its old reputation as hopelessly inefficient, Lisp is now used in many applications where efficiency is not the central concern. For example, Lisp has become a language of choice for operating-system shell languages and for extension languages for editors and computer-aided design systems.</p>
<p>If Lisp is not a mainstream language, why are we using it as the framework for our discussion of programming? Because the language possesses unique features that make it an excellent medium for studying important programming constructs and data structures and for relating them to the linguistic features that support them. The most significant of these features is the fact that Lisp descriptions of processes, called <em>procedures</em>, can themselves be represented and manipulated as Lisp data. The importance of this is that there are powerful program-design techniques that rely on the ability to blur the traditional distinction between ``passive'' data and ``active'' processes. As we shall discover, Lisp's flexibility in handling procedures as data makes it one of the most convenient languages in existence for exploring these techniques. The ability to represent procedures as data also makes Lisp an excellent language for writing programs that must manipulate other programs as data, such as the interpreters and compilers that support computer languages. Above and beyond these considerations, programming in Lisp is great fun.</p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_7"><sup>1</sup></a> The <em>Lisp 1 Programmer's Manual</em> appeared in 1960, and the <em>Lisp 1.5 Programmer's Manual</em> (McCarthy 1965) was published in 1962. The early history of Lisp is described in McCarthy 1978.</p>
<p><a href="#call_footnote_Temp_8"><sup>2</sup></a> The two dialects in which most major Lisp programs of the 1970s were written are MacLisp (Moon 1978; Pitman 1983), developed at the MIT Project MAC, and Interlisp (Teitelman 1974), developed at Bolt Beranek and Newman Inc. and the Xerox Palo Alto Research Center. Portable Standard Lisp (Hearn 1969; Griss 1981) was a Lisp dialect designed to be easily portable between different machines. MacLisp spawned a number of subdialects, such as Franz Lisp, which was developed at the University of California at Berkeley, and Zetalisp (Moon 1981), which was based on a special-purpose processor designed at the MIT Artificial Intelligence Laboratory to run Lisp very efficiently. The Lisp dialect used in this book, called Scheme (Steele 1975), was invented in 1975 by Guy Lewis Steele Jr. and Gerald Jay Sussman of the MIT Artificial Intelligence Laboratory and later reimplemented for instructional use at MIT. Scheme became an IEEE standard in 1990 (IEEE 1990). The Common Lisp dialect (Steele 1982, Steele 1990) was developed by the Lisp community to combine features from the earlier Lisp dialects to make an industrial standard for Lisp. Common Lisp became an ANSI standard in 1994 (ANSI 1994).</p>
<p><a href="#call_footnote_Temp_9"><sup>3</sup></a> One such special application was a breakthrough computation of scientific importance -- an integration of the motion of the Solar System that extended previous results by nearly two orders of magnitude, and demonstrated that the dynamics of the Solar System is chaotic. This computation was made possible by new integration algorithms, a special-purpose compiler, and a special-purpose computer all implemented with the aid of software tools written in Lisp (Abelson et al. 1992; Sussman and Wisdom 1992).</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-8.html">previous</a>, <a href="book-Z-H-10.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-9.html">previous</a>, <a href="book-Z-H-11.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_1.1">1.1  The Elements of Programming</a></h2>
<p>A powerful programming language is more than just a means for instructing a computer to perform tasks. The language also serves as a framework within which we organize our ideas about processes. Thus, when we describe a language, we should pay particular attention to the means that the language provides for combining simple ideas to form more complex ideas. Every powerful language has three mechanisms for accomplishing this:</p>
<p></p>
<p></p>
<ul>
<li><strong>primitive expressions</strong>, which represent the simplest entities the language is concerned with,</li>
<li><strong>means of combination</strong>, by which compound elements are built from simpler ones, and</li>
<li><strong>means of abstraction</strong>, by which compound elements can be named and manipulated as units.</li>
</ul>
<p></p>
<p>In programming, we deal with two kinds of elements: procedures and data. (Later we will discover that they are really not so distinct.) Informally, data is ``stuff'' that we want to manipulate, and procedures are descriptions of the rules for manipulating the data. Thus, any powerful programming language should be able to describe primitive data and primitive procedures and should have methods for combining and abstracting procedures and data.</p>
<p>In this chapter we will deal only with simple numerical data so that we can focus on the rules for building procedures.<a href="#footnote_Temp_10"><sup>4</sup></a> In later chapters we will see that these same rules allow us to build procedures to manipulate compound data as well.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.1.1">1.1.1  Expressions</a></h3>
<p></p>
<p>One easy way to get started at programming is to examine some typical interactions with an interpreter for the Scheme dialect of Lisp. Imagine that you are sitting at a computer terminal. You type an <em>expression</em>, and the interpreter responds by displaying the result of its <em>evaluating</em> that expression.</p>
<p>One kind of primitive expression you might type is a number. (More precisely, the expression that you type consists of the numerals that represent the number in base 10.) If you present Lisp with a number</p>
<p></p>
<p></p>
<p><code>486</code></p>
<p></p>
<p>the interpreter will respond by printing<a href="#footnote_Temp_11"><sup>5</sup></a></p>
<p></p>
<p></p>
<p><code>486</code></p>
<p></p>
<p></p>
<p>Expressions representing numbers may be combined with an expression representing a primitive procedure (such as <code>+</code> or <code>*</code>) to form a compound expression that represents the application of the procedure to those numbers. For example:</p>
<p></p>
<p></p>
<p><code>(+ 137 349) 486 (- 1000 334) 666 (* 5 99) 495 (/ 10 5) 2 (+ 2.7 10) 12.7</code></p>
<p></p>
<p></p>
<p>Expressions such as these, formed by delimiting a list of expressions within parentheses in order to denote procedure application, are called <em>combinations</em>. The leftmost element in the list is called the <em>operator</em>, and the other elements are called <em>operands</em>. The value of a combination is obtained by applying the procedure specified by the operator to the <em>arguments</em> that are the values of the operands.</p>
<p>The convention of placing the operator to the left of the operands is known as <em>prefix notation</em>, and it may be somewhat confusing at first because it departs significantly from the customary mathematical convention. Prefix notation has several advantages, however. One of them is that it can accommodate procedures that may take an arbitrary number of arguments, as in the following examples:</p>
<p></p>
<p></p>
<p><code>(+ 21 35 12 7) 75  (* 25 4 12) 1200</code></p>
<p></p>
<p>No ambiguity can arise, because the operator is always the leftmost element and the entire combination is delimited by the parentheses.</p>
<p>A second advantage of prefix notation is that it extends in a straightforward way to allow combinations to be <em>nested</em>, that is, to have combinations whose elements are themselves combinations:</p>
<p></p>
<p></p>
<p><code>(+ (* 3 5) (- 10 6)) 19</code></p>
<p></p>
<p></p>
<p>There is no limit (in principle) to the depth of such nesting and to the overall complexity of the expressions that the Lisp interpreter can evaluate. It is we humans who get confused by still relatively simple expressions such as</p>
<p></p>
<p></p>
<p><code>(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))</code></p>
<p></p>
<p>which the interpreter would readily evaluate to be 57. We can help ourselves by writing such an expression in the form</p>
<p></p>
<p></p>
<p><code>(+ (* 3       (+ (* 2 4)          (+ 3 5)))    (+ (- 10 7)       6))</code></p>
<p></p>
<p>following a formatting convention known as <em>pretty-printing</em>, in which each long combination is written so that the operands are aligned vertically. The resulting indentations display clearly the structure of the expression.<a href="#footnote_Temp_12"><sup>6</sup></a></p>
<p>Even with complex expressions, the interpreter always operates in the same basic cycle: It reads an expression from the terminal, evaluates the expression, and prints the result. This mode of operation is often expressed by saying that the interpreter runs in a <em>read-eval-print loop</em>. Observe in particular that it is not necessary to explicitly instruct the interpreter to print the value of the expression.<a href="#footnote_Temp_13"><sup>7</sup></a></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.1.2">1.1.2  Naming and the Environment</a></h3>
<p>A critical aspect of a programming language is the means it provides for using names to refer to computational objects. We say that the name identifies a <em>variable</em> whose <em>value</em> is the object.</p>
<p>In the Scheme dialect of Lisp, we name things with <code>define</code>. Typing</p>
<p></p>
<p></p>
<p><code>(define size 2)</code></p>
<p></p>
<p>causes the interpreter to associate the value 2 with the name <code>size</code>.<a href="#footnote_Temp_14"><sup>8</sup></a> Once the name <code>size</code> has been associated with the number 2, we can refer to the value 2 by name:</p>
<p></p>
<p></p>
<p><code>size 2 (* 5 size) 10</code></p>
<p></p>
<p></p>
<p>Here are further examples of the use of <code>define</code>:</p>
<p></p>
<p></p>
<p><code>(define pi 3.14159) (define radius 10) (* pi (* radius radius)) 314.159 (define circumference (* 2 pi radius)) circumference 62.8318</code></p>
<p></p>
<p></p>
<p><code>Define</code> is our language's simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the <code>circumference</code> computed above. In general, computational objects may have very complex structures, and it would be extremely inconvenient to have to remember and repeat their details each time we want to use them. Indeed, complex programs are constructed by building, step by step, computational objects of increasing complexity. The interpreter makes this step-by-step program construction particularly convenient because name-object associations can be created incrementally in successive interactions. This feature encourages the incremental development and testing of programs and is largely responsible for the fact that a Lisp program usually consists of a large number of relatively simple procedures.</p>
<p>It should be clear that the possibility of associating values with symbols and later retrieving them means that the interpreter must maintain some sort of memory that keeps track of the name-object pairs. This memory is called the <em>environment</em> (more precisely the <em>global environment</em>, since we will see later that a computation may involve a number of different environments).<a href="#footnote_Temp_15"><sup>9</sup></a></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.1.3">1.1.3  Evaluating Combinations</a></h3>
<p>One of our goals in this chapter is to isolate issues about thinking procedurally. As a case in point, let us consider that, in evaluating combinations, the interpreter is itself following a procedure.</p>
<p></p>
<p></p>
<ul>
<li>To evaluate a combination, do the following:</li>
</ul>
<p></p>
<blockquote>
<p>1.  Evaluate the subexpressions of the combination.</p>
<p></p>
<p>2.  Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands).</p>
</blockquote>
<p>Even this simple rule illustrates some important points about processes in general. First, observe that the first step dictates that in order to accomplish the evaluation process for a combination we must first perform the evaluation process on each element of the combination. Thus, the evaluation rule is <em>recursive</em> in nature; that is, it includes, as one of its steps, the need to invoke the rule itself.<a href="#footnote_Temp_16"><sup>10</sup></a></p>
<p>Notice how succinctly the idea of recursion can be used to express what, in the case of a deeply nested combination, would otherwise be viewed as a rather complicated process. For example, evaluating</p>
<p></p>
<p></p>
<p><code>(* (+ 2 (* 4 6))    (+ 3 5 7))</code></p>
<p></p>
<p>requires that the evaluation rule be applied to four different combinations. We can obtain a picture of this process by representing the combination in the form of a tree, as shown in figure <a href="#%_fig_1.1">1.1</a>. Each combination is represented by a node with branches corresponding to the operator and the operands of the combination stemming from it. The terminal nodes (that is, nodes with no branches stemming from them) represent either operators or numbers. Viewing evaluation in terms of the tree, we can imagine that the values of the operands percolate upward, starting from the terminal nodes and then combining at higher and higher levels. In general, we shall see that recursion is a very powerful technique for dealing with hierarchical, treelike objects. In fact, the ``percolate values upward'' form of the evaluation rule is an example of a general kind of process known as <em>tree accumulation</em>.</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-1.gif" /></p>
<p><strong>Figure 1.1:</strong>  Tree representation, showing the value of each subcombination.</p>
<p></p>
<p>Next, observe that the repeated application of the first step brings us to the point where we need to evaluate, not combinations, but primitive expressions such as numerals, built-in operators, or other names. We take care of the primitive cases by stipulating that</p>
<p></p>
<p></p>
<ul>
<li>the values of numerals are the numbers that they name,</li>
<li>the values of built-in operators are the machine instruction sequences that carry out the corresponding operations, and</li>
<li>the values of other names are the objects associated with those names in the environment.</li>
</ul>
<p></p>
<p>We may regard the second rule as a special case of the third one by stipulating that symbols such as <code>+</code> and <code>*</code> are also included in the global environment, and are associated with the sequences of machine instructions that are their ``values.'' The key point to notice is the role of the environment in determining the meaning of the symbols in expressions. In an interactive language such as Lisp, it is meaningless to speak of the value of an expression such as <code>(+ x 1)</code> without specifying any information about the environment that would provide a meaning for the symbol <code>x</code> (or even for the symbol <code>+</code>). As we shall see in chapter 3, the general notion of the environment as providing a context in which evaluation takes place will play an important role in our understanding of program execution.</p>
<p>Notice that the evaluation rule given above does not handle definitions. For instance, evaluating <code>(define x 3)</code> does not apply <code>define</code> to two arguments, one of which is the value of the symbol <code>x</code> and the other of which is 3, since the purpose of the <code>define</code> is precisely to associate <code>x</code> with a value. (That is, <code>(define x 3)</code> is not a combination.)</p>
<p>Such exceptions to the general evaluation rule are called <em>special forms</em>. <code>Define</code> is the only example of a special form that we have seen so far, but we will meet others shortly. Each special form has its own evaluation rule. The various kinds of expressions (each with its associated evaluation rule) constitute the syntax of the programming language. In comparison with most other programming languages, Lisp has a very simple syntax; that is, the evaluation rule for expressions can be described by a simple general rule together with specialized rules for a small number of special forms.<a href="#footnote_Temp_17"><sup>11</sup></a></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.1.4">1.1.4  Compound Procedures</a></h3>
<p></p>
<p>We have identified in Lisp some of the elements that must appear in any powerful programming language:</p>
<p></p>
<p></p>
<ul>
<li>Numbers and arithmetic operations are primitive data and procedures.</li>
<li>Nesting of combinations provides a means of combining operations.</li>
<li>Definitions that associate names with values provide a limited means of abstraction.</li>
</ul>
<p></p>
<p>Now we will learn about <em>procedure definitions</em>, a much more powerful abstraction technique by which a compound operation can be given a name and then referred to as a unit.</p>
<p>We begin by examining how to express the idea of ``squaring.'' We might say, ``To square something, multiply it by itself.'' This is expressed in our language as</p>
<p></p>
<p></p>
<p><code>(define (square x) (* x x))</code></p>
<p></p>
<p></p>
<p>We can understand this in the following way:</p>
<p></p>
<p></p>
<p><code>(define (square  x)        (*         x     x))                                          To      square something, multiply   it by itself.</code></p>
<p></p>
<p>We have here a <em>compound procedure</em>, which has been given the name <code>square</code>. The procedure represents the operation of multiplying something by itself. The thing to be multiplied is given a local name, <code>x</code>, which plays the same role that a pronoun plays in natural language. Evaluating the definition creates this compound procedure and associates it with the name <code>square</code>.<a href="#footnote_Temp_18"><sup>12</sup></a></p>
<p>The general form of a procedure definition is</p>
<p></p>
<p></p>
<p><code>(define (&lt;name&gt; &lt;formal parameters&gt;) &lt;body&gt;)</code></p>
<p></p>
<p>The &lt;<em>name</em>&gt; is a symbol to be associated with the procedure definition in the environment.<a href="#footnote_Temp_19"><sup>13</sup></a> The &lt;<em>formal parameters</em>&gt; are the names used within the body of the procedure to refer to the corresponding arguments of the procedure. The &lt;<em>body</em>&gt; is an expression that will yield the value of the procedure application when the formal parameters are replaced by the actual arguments to which the procedure is applied.<a href="#footnote_Temp_20"><sup>14</sup></a> The &lt;<em>name</em>&gt; and the &lt;<em>formal parameters</em>&gt; are grouped within parentheses, just as they would be in an actual call to the procedure being defined.</p>
<p>Having defined <code>square</code>, we can now use it:</p>
<p></p>
<p></p>
<p><code>(square 21) 441  (square (+ 2 5)) 49  (square (square 3)) 81</code></p>
<p></p>
<p></p>
<p>We can also use <code>square</code> as a building block in defining other procedures. For example, <em>x</em><sup>2</sup> + <em>y</em><sup>2</sup> can be expressed as</p>
<p></p>
<p></p>
<p><code>(+ (square x) (square y))</code></p>
<p></p>
<p>We can easily define a procedure <code>sum-of-squares</code> that, given any two numbers as arguments, produces the sum of their squares:</p>
<p></p>
<p></p>
<p><code>(define (sum-of-squares x y)   (+ (square x) (square y)))  (sum-of-squares 3 4) 25</code></p>
<p></p>
<p>Now we can use <code>sum-of-squares</code> as a building block in constructing further procedures:</p>
<p></p>
<p></p>
<p><code>(define (f a)   (sum-of-squares (+ a 1) (* a 2)))  (f 5) 136</code></p>
<p></p>
<p>Compound procedures are used in exactly the same way as primitive procedures. Indeed, one could not tell by looking at the definition of <code>sum-of-squares</code> given above whether <code>square</code> was built into the interpreter, like <code>+</code> and <code>*</code>, or defined as a compound procedure.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.1.5">1.1.5  The Substitution Model for Procedure Application</a></h3>
<p>To evaluate a combination whose operator names a compound procedure, the interpreter follows much the same process as for combinations whose operators name primitive procedures, which we described in section <a href="#%_sec_1.1.3">1.1.3</a>. That is, the interpreter evaluates the elements of the combination and applies the procedure (which is the value of the operator of the combination) to the arguments (which are the values of the operands of the combination).</p>
<p>We can assume that the mechanism for applying primitive procedures to arguments is built into the interpreter. For compound procedures, the application process is as follows:</p>
<p></p>
<p></p>
<ul>
<li>To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument.</li>
</ul>
<p></p>
<p>To illustrate this process, let's evaluate the combination</p>
<p></p>
<p></p>
<p><code>(f 5)</code></p>
<p></p>
<p>where <code>f</code> is the procedure defined in section <a href="#%_sec_1.1.4">1.1.4</a>. We begin by retrieving the body of <code>f</code>:</p>
<p></p>
<p></p>
<p><code>(sum-of-squares (+ a 1) (* a 2))</code></p>
<p></p>
<p>Then we replace the formal parameter <code>a</code> by the argument 5:</p>
<p></p>
<p></p>
<p><code>(sum-of-squares (+ 5 1) (* 5 2))</code></p>
<p></p>
<p>Thus the problem reduces to the evaluation of a combination with two operands and an operator <code>sum-of-squares</code>. Evaluating this combination involves three subproblems. We must evaluate the operator to get the procedure to be applied, and we must evaluate the operands to get the arguments. Now <code>(+ 5 1)</code> produces 6 and <code>(* 5 2)</code> produces 10, so we must apply the <code>sum-of-squares</code> procedure to 6 and 10. These values are substituted for the formal parameters <code>x</code> and <code>y</code> in the body of <code>sum-of-squares</code>, reducing the expression to</p>
<p></p>
<p></p>
<p><code>(+ (square 6) (square 10))</code></p>
<p></p>
<p>If we use the definition of <code>square</code>, this reduces to</p>
<p></p>
<p></p>
<p><code>(+ (* 6 6) (* 10 10))</code></p>
<p></p>
<p>which reduces by multiplication to</p>
<p></p>
<p></p>
<p><code>(+ 36 100)</code></p>
<p></p>
<p>and finally to</p>
<p></p>
<p></p>
<p><code>136</code></p>
<p></p>
<p></p>
<p>The process we have just described is called the <em>substitution model</em> for procedure application. It can be taken as a model that determines the ``meaning'' of procedure application, insofar as the procedures in this chapter are concerned. However, there are two points that should be stressed:</p>
<p></p>
<p></p>
<ul>
<li>The purpose of the substitution is to help us think about procedure application, not to provide a description of how the interpreter really works. Typical interpreters do not evaluate procedure applications by manipulating the text of a procedure to substitute values for the formal parameters. In practice, the ``substitution'' is accomplished by using a local environment for the formal parameters. We will discuss this more fully in chapters 3 and 4 when we examine the implementation of an interpreter in detail.</li>
<li>Over the course of this book, we will present a sequence of increasingly elaborate models of how interpreters work, culminating with a complete implementation of an interpreter and compiler in chapter 5. The substitution model is only the first of these models -- a way to get started thinking formally about the evaluation process. In general, when modeling phenomena in science and engineering, we begin with simplified, incomplete models. As we examine things in greater detail, these simple models become inadequate and must be replaced by more refined models. The substitution model is no exception. In particular, when we address in chapter 3 the use of procedures with ``mutable data,'' we will see that the substitution model breaks down and must be replaced by a more complicated model of procedure application.<a href="#footnote_Temp_21"><sup>15</sup></a></li>
</ul>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_22">Applicative order versus normal order</a></h4>
<p>According to the description of evaluation given in section <a href="#%_sec_1.1.3">1.1.3</a>, the interpreter first evaluates the operator and operands and then applies the resulting procedure to the resulting arguments. This is not the only way to perform evaluation. An alternative evaluation model would not evaluate the operands until their values were needed. Instead it would first substitute operand expressions for parameters until it obtained an expression involving only primitive operators, and would then perform the evaluation. If we used this method, the evaluation of</p>
<p></p>
<p></p>
<p><code>(f 5)</code></p>
<p></p>
<p>would proceed according to the sequence of expansions</p>
<p></p>
<p></p>
<p><code>(sum-of-squares (+ 5 1) (* 5 2))  (+    (square (+ 5 1))      (square (* 5 2))  )  (+    (* (+ 5 1) (+ 5 1))   (* (* 5 2) (* 5 2)))</code></p>
<p></p>
<p>followed by the reductions</p>
<p></p>
<p></p>
<p><code>(+         (* 6 6)             (* 10 10))  (+           36                   100)                      136</code></p>
<p></p>
<p>This gives the same answer as our previous evaluation model, but the process is different. In particular, the evaluations of <code>(+ 5 1)</code> and <code>(* 5 2)</code> are each performed twice here, corresponding to the reduction of the expression</p>
<p></p>
<p></p>
<p><code>(* x x)</code></p>
<p></p>
<p>with <code>x</code> replaced respectively by <code>(+ 5 1)</code> and <code>(* 5 2)</code>.</p>
<p>This alternative ``fully expand and then reduce'' evaluation method is known as <em>normal-order evaluation</em>, in contrast to the ``evaluate the arguments and then apply'' method that the interpreter actually uses, which is called <em>applicative-order evaluation</em>. It can be shown that, for procedure applications that can be modeled using substitution (including all the procedures in the first two chapters of this book) and that yield legitimate values, normal-order and applicative-order evaluation produce the same value. (See exercise <a href="#%_thm_1.5">1.5</a> for an instance of an ``illegitimate'' value where normal-order and applicative-order evaluation do not give the same result.)</p>
<p>Lisp uses applicative-order evaluation, partly because of the additional efficiency obtained from avoiding multiple evaluations of expressions such as those illustrated with <code>(+ 5 1)</code> and <code>(* 5 2)</code> above and, more significantly, because normal-order evaluation becomes much more complicated to deal with when we leave the realm of procedures that can be modeled by substitution. On the other hand, normal-order evaluation can be an extremely valuable tool, and we will investigate some of its implications in chapters 3 and 4.<a href="#footnote_Temp_23"><sup>16</sup></a></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.1.6">1.1.6  Conditional Expressions and Predicates</a></h3>
<p></p>
<p>The expressive power of the class of procedures that we can define at this point is very limited, because we have no way to make tests and to perform different operations depending on the result of a test. For instance, we cannot define a procedure that computes the absolute value of a number by testing whether the number is positive, negative, or zero and taking different actions in the different cases according to the rule</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-2.gif" /></p>
<p></p>
<p>This construct is called a <em>case analysis</em>, and there is a special form in Lisp for notating such a case analysis. It is called <code>cond</code> (which stands for ``conditional''), and it is used as follows:</p>
<p></p>
<p></p>
<p><code>(define (abs x)   (cond ((&gt; x 0) x)         ((= x 0) 0)         ((&lt; x 0) (- x))))</code></p>
<p></p>
<p>The general form of a conditional expression is</p>
<p></p>
<p></p>
<p><code>(cond (&lt;p1&gt; &lt;e1&gt;)       (&lt;p2&gt; &lt;e2&gt;)              (&lt;pn&gt; &lt;en&gt;))</code></p>
<p></p>
<p>consisting of the symbol <code>cond</code> followed by parenthesized pairs of expressions <code>(&lt;p&gt; &lt;e&gt;)</code> called <em>clauses</em>. The first expression in each pair is a <em>predicate</em> -- that is, an expression whose value is interpreted as either true or false.<a href="#footnote_Temp_24"><sup>17</sup></a></p>
<p>Conditional expressions are evaluated as follows. The predicate &lt;<em>p<sub>1</sub></em>&gt; is evaluated first. If its value is false, then &lt;<em>p<sub>2</sub></em>&gt; is evaluated. If &lt;<em>p<sub>2</sub></em>&gt;'s value is also false, then &lt;<em>p<sub>3</sub></em>&gt; is evaluated. This process continues until a predicate is found whose value is true, in which case the interpreter returns the value of the corresponding <em>consequent expression</em> &lt;<em>e</em>&gt; of the clause as the value of the conditional expression. If none of the &lt;<em>p</em>&gt;'s is found to be true, the value of the <code>cond</code> is undefined.</p>
<p>The word <em>predicate</em> is used for procedures that return true or false, as well as for expressions that evaluate to true or false. The absolute-value procedure <code>abs</code> makes use of the primitive predicates <code>&gt;</code>, <code>&lt;</code>, and <code>=</code>.<a href="#footnote_Temp_25"><sup>18</sup></a> These take two numbers as arguments and test whether the first number is, respectively, greater than, less than, or equal to the second number, returning true or false accordingly.</p>
<p>Another way to write the absolute-value procedure is</p>
<p></p>
<p></p>
<p><code>(define (abs x)   (cond ((&lt; x 0) (- x))         (else x)))</code></p>
<p></p>
<p>which could be expressed in English as ``If <em>x</em> is less than zero return - <em>x</em>; otherwise return <em>x</em>.'' <code>Else</code> is a special symbol that can be used in place of the &lt;<em>p</em>&gt; in the final clause of a <code>cond</code>. This causes the <code>cond</code> to return as its value the value of the corresponding &lt;<em>e</em>&gt; whenever all previous clauses have been bypassed. In fact, any expression that always evaluates to a true value could be used as the &lt;<em>p</em>&gt; here.</p>
<p>Here is yet another way to write the absolute-value procedure:</p>
<p></p>
<p></p>
<p><code>(define (abs x)   (if (&lt; x 0)       (- x)       x))</code></p>
<p></p>
<p>This uses the special form <code>if</code>, a restricted type of conditional that can be used when there are precisely two cases in the case analysis. The general form of an <code>if</code> expression is</p>
<p></p>
<p></p>
<p><code>(if &lt;predicate&gt; &lt;consequent&gt; &lt;alternative&gt;)</code></p>
<p></p>
<p>To evaluate an <code>if</code> expression, the interpreter starts by evaluating the &lt;<em>predicate</em>&gt; part of the expression. If the &lt;<em>predicate</em>&gt; evaluates to a true value, the interpreter then evaluates the &lt;<em>consequent</em>&gt; and returns its value. Otherwise it evaluates the &lt;<em>alternative</em>&gt; and returns its value.<a href="#footnote_Temp_26"><sup>19</sup></a></p>
<p>In addition to primitive predicates such as <code>&lt;</code>, <code>=</code>, and <code>&gt;</code>, there are logical composition operations, which enable us to construct compound predicates. The three most frequently used are these:</p>
<p></p>
<p></p>
<ul>
<li><p><code>(and &lt;e1&gt; ...</code> &lt;<em>e<sub><em>n</em></sub></em>&gt;)</p>
<p>The interpreter evaluates the expressions &lt;<em>e</em>&gt; one at a time, in left-to-right order. If any &lt;<em>e</em>&gt; evaluates to false, the value of the <code>and</code> expression is false, and the rest of the &lt;<em>e</em>&gt;'s are not evaluated. If all &lt;<em>e</em>&gt;'s evaluate to true values, the value of the <code>and</code> expression is the value of the last one.</p></li>
<li><p><code>(or &lt;e1&gt; ...</code> &lt;<em>e<sub><em>n</em></sub></em>&gt;)</p>
<p>The interpreter evaluates the expressions &lt;<em>e</em>&gt; one at a time, in left-to-right order. If any &lt;<em>e</em>&gt; evaluates to a true value, that value is returned as the value of the <code>or</code> expression, and the rest of the &lt;<em>e</em>&gt;'s are not evaluated. If all &lt;<em>e</em>&gt;'s evaluate to false, the value of the <code>or</code> expression is false.</p></li>
<li><code>(not &lt;e&gt;)</code>
The value of a <code>not</code> expression is true when the expression &lt;<em>e</em>&gt; evaluates to false, and false otherwise.</li>
</ul>
<p></p>
<p>Notice that <code>and</code> and <code>or</code> are special forms, not procedures, because the subexpressions are not necessarily all evaluated. <code>Not</code> is an ordinary procedure.</p>
<p>As an example of how these are used, the condition that a number <em>x</em> be in the range 5 &lt; <em>x</em> &lt; 10 may be expressed as</p>
<p></p>
<p></p>
<p><code>(and (&gt; x 5) (&lt; x 10))</code></p>
<p></p>
<p>As another example, we can define a predicate to test whether one number is greater than or equal to another as</p>
<p></p>
<p></p>
<p><code>(define (&gt;= x y)   (or (&gt; x y) (= x y)))</code></p>
<p></p>
<p>or alternatively as</p>
<p></p>
<p></p>
<p><code>(define (&gt;= x y)   (not (&lt; x y)))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 1.1.</strong>  Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.</p>
<p></p>
<p></p>
<p><code>10 (+ 5 3 4) (- 9 1) (/ 6 2) (+ (* 2 4) (- 4 6)) (define a 3) (define b (+ a 1)) (+ a b (* a b)) (= a b) (if (and (&gt; b a) (&lt; b (* a b)))     b     a) (cond ((= a 4) 6)       ((= b 4) (+ 6 7 a))       (else 25)) (+ 2 (if (&gt; b a) b a)) (* (cond ((&gt; a b) a)          ((&lt; a b) b)          (else -1))    (+ a 1))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 1.2.</strong>  Translate the following expression into prefix form</p>
<p></p>
<p><img src="ch1-Z-G-3.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 1.3.</strong>  Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.4.</strong>  Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:</p>
<p></p>
<p><code>(define (a-plus-abs-b a b)   ((if (&gt; b 0) + -) a b))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 1.5.</strong>  Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:</p>
<p></p>
<p><code>(define (p) (p))  (define (test x y)   (if (= x 0)       0       y))</code></p>
<p></p>
<p>Then he evaluates the expression</p>
<p></p>
<p><code>(test 0 (p))</code></p>
<p></p>
<p>What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form <code>if</code> is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.1.7">1.1.7  Example: Square Roots by Newton's Method</a></h3>
<p></p>
<p>Procedures, as introduced above, are much like ordinary mathematical functions. They specify a value that is determined by one or more parameters. But there is an important difference between mathematical functions and computer procedures. Procedures must be effective.</p>
<p>As a case in point, consider the problem of computing square roots. We can define the square-root function as</p>
<p></p>
<p><img src="ch1-Z-G-4.gif" /></p>
<p></p>
<p>This describes a perfectly legitimate mathematical function. We could use it to recognize whether one number is the square root of another, or to derive facts about square roots in general. On the other hand, the definition does not describe a procedure. Indeed, it tells us almost nothing about how to actually find the square root of a given number. It will not help matters to rephrase this definition in pseudo-Lisp:</p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (the y (and (&gt;= y 0)               (= (square y) x))))</code></p>
<p></p>
<p>This only begs the question.</p>
<p>The contrast between function and procedure is a reflection of the general distinction between describing properties of things and describing how to do things, or, as it is sometimes referred to, the distinction between declarative knowledge and imperative knowledge. In mathematics we are usually concerned with declarative (what is) descriptions, whereas in computer science we are usually concerned with imperative (how to) descriptions.<a href="#footnote_Temp_32"><sup>20</sup></a></p>
<p>How does one compute square roots? The most common way is to use Newton's method of successive approximations, which says that whenever we have a guess <em>y</em> for the value of the square root of a number <em>x</em>, we can perform a simple manipulation to get a better guess (one closer to the actual square root) by averaging <em>y</em> with <em>x</em>/<em>y</em>.<a href="#footnote_Temp_33"><sup>21</sup></a> For example, we can compute the square root of 2 as follows. Suppose our initial guess is 1:</p>
<p></p>
<p>Guess</p>
<p>Quotient</p>
<p>Average</p>
<p>  </p>
<p>1</p>
<p>(2/1) = 2</p>
<p>((2 + 1)/2) = 1.5</p>
<p>  </p>
<p>1.5</p>
<p>(2/1.5) = 1.3333</p>
<p>((1.3333 + 1.5)/2) = 1.4167</p>
<p>  </p>
<p>1.4167</p>
<p>(2/1.4167) = 1.4118</p>
<p>((1.4167 + 1.4118)/2) = 1.4142</p>
<p>  </p>
<p>1.4142</p>
<p><code>...</code></p>
<p><code>...</code></p>
<p>Continuing this process, we obtain better and better approximations to the square root.</p>
<p>Now let's formalize the process in terms of procedures. We start with a value for the radicand (the number whose square root we are trying to compute) and a value for the guess. If the guess is good enough for our purposes, we are done; if not, we must repeat the process with an improved guess. We write this basic strategy as a procedure:</p>
<p></p>
<p></p>
<p><code>(define (sqrt-iter guess x)   (if (good-enough? guess x)       guess       (sqrt-iter (improve guess x)                  x)))</code></p>
<p></p>
<p>A guess is improved by averaging it with the quotient of the radicand and the old guess:</p>
<p></p>
<p></p>
<p><code>(define (improve guess x)   (average guess (/ x guess)))</code></p>
<p></p>
<p>where</p>
<p></p>
<p></p>
<p><code>(define (average x y)   (/ (+ x y) 2))</code></p>
<p></p>
<p>We also have to say what we mean by ``good enough.'' The following will do for illustration, but it is not really a very good test. (See exercise <a href="#%_thm_1.7">1.7</a>.) The idea is to improve the answer until it is close enough so that its square differs from the radicand by less than a predetermined tolerance (here 0.001):<a href="#footnote_Temp_34"><sup>22</sup></a></p>
<p></p>
<p></p>
<p><code>(define (good-enough? guess x)   (&lt; (abs (- (square guess) x)) 0.001))</code></p>
<p></p>
<p>Finally, we need a way to get started. For instance, we can always guess that the square root of any number is 1:<a href="#footnote_Temp_35"><sup>23</sup></a></p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (sqrt-iter 1.0 x))</code></p>
<p></p>
<p>If we type these definitions to the interpreter, we can use <code>sqrt</code> just as we can use any procedure:</p>
<p></p>
<p></p>
<p><code>(sqrt 9) 3.00009155413138 (sqrt (+ 100 37)) 11.704699917758145 (sqrt (+ (sqrt 2) (sqrt 3))) 1.7739279023207892 (square (sqrt 1000)) 1000.000369924366</code></p>
<p></p>
<p></p>
<p>The <code>sqrt</code> program also illustrates that the simple procedural language we have introduced so far is sufficient for writing any purely numerical program that one could write in, say, C or Pascal. This might seem surprising, since we have not included in our language any iterative (looping) constructs that direct the computer to do something over and over again. <code>Sqrt-iter</code>, on the other hand, demonstrates how iteration can be accomplished using no special construct other than the ordinary ability to call a procedure.<a href="#footnote_Temp_36"><sup>24</sup></a></p>
<p><strong>Exercise 1.6.</strong>  Alyssa P. Hacker doesn't see why <code>if</code> needs to be provided as a special form. ``Why can't I just define it as an ordinary procedure in terms of <code>cond</code>?'' she asks. Alyssa's friend Eva Lu Ator claims this can indeed be done, and she defines a new version of <code>if</code>:</p>
<p></p>
<p></p>
<p><code>(define (new-if predicate then-clause else-clause)   (cond (predicate then-clause)         (else else-clause)))</code></p>
<p></p>
<p>Eva demonstrates the program for Alyssa:</p>
<p></p>
<p></p>
<p><code>(new-if (= 2 3) 0 5) 5  (new-if (= 1 1) 0 5) 0</code></p>
<p></p>
<p>Delighted, Alyssa uses <code>new-if</code> to rewrite the square-root program:</p>
<p></p>
<p></p>
<p><code>(define (sqrt-iter guess x)   (new-if (good-enough? guess x)           guess           (sqrt-iter (improve guess x)                      x)))</code></p>
<p></p>
<p>What happens when Alyssa attempts to use this to compute square roots? Explain.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.7.</strong>  The <code>good-enough?</code> test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing <code>good-enough?</code> is to watch how <code>guess</code> changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?</p>
<p></p>
<p></p>
<p><strong>Exercise 1.8.</strong>  Newton's method for cube roots is based on the fact that if <em>y</em> is an approximation to the cube root of <em>x</em>, then a better approximation is given by the value</p>
<p></p>
<p><img src="ch1-Z-G-5.gif" /></p>
<p>Use this formula to implement a cube-root procedure analogous to the square-root procedure. (In section <a href="book-Z-H-12.html#%_sec_1.3.4">1.3.4</a> we will see how to implement Newton's method in general as an abstraction of these square-root and cube-root procedures.)</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.1.8">1.1.8  Procedures as Black-Box Abstractions</a></h3>
<p></p>
<p><code>Sqrt</code> is our first example of a process defined by a set of mutually defined procedures. Notice that the definition of <code>sqrt-iter</code> is <em>recursive</em>; that is, the procedure is defined in terms of itself. The idea of being able to define a procedure in terms of itself may be disturbing; it may seem unclear how such a ``circular'' definition could make sense at all, much less specify a well-defined process to be carried out by a computer. This will be addressed more carefully in section <a href="book-Z-H-11.html#%_sec_1.2">1.2</a>. But first let's consider some other important points illustrated by the <code>sqrt</code> example.</p>
<p>Observe that the problem of computing square roots breaks up naturally into a number of subproblems: how to tell whether a guess is good enough, how to improve a guess, and so on. Each of these tasks is accomplished by a separate procedure. The entire <code>sqrt</code> program can be viewed as a cluster of procedures (shown in figure <a href="#%_fig_1.2">1.2</a>) that mirrors the decomposition of the problem into subproblems.</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-6.gif" /></p>
<p><strong>Figure 1.2:</strong>  Procedural decomposition of the <code>sqrt</code> program.</p>
<p></p>
<p>The importance of this decomposition strategy is not simply that one is dividing the program into parts. After all, we could take any large program and divide it into parts -- the first ten lines, the next ten lines, the next ten lines, and so on. Rather, it is crucial that each procedure accomplishes an identifiable task that can be used as a module in defining other procedures. For example, when we define the <code>good-enough?</code> procedure in terms of <code>square</code>, we are able to regard the <code>square</code> procedure as a ``black box.'' We are not at that moment concerned with <em>how</em> the procedure computes its result, only with the fact that it computes the square. The details of how the square is computed can be suppressed, to be considered at a later time. Indeed, as far as the <code>good-enough?</code> procedure is concerned, <code>square</code> is not quite a procedure but rather an abstraction of a procedure, a so-called <em>procedural abstraction</em>. At this level of abstraction, any procedure that computes the square is equally good.</p>
<p>Thus, considering only the values they return, the following two procedures for squaring a number should be indistinguishable. Each takes a numerical argument and produces the square of that number as the value.<a href="#footnote_Temp_40"><sup>25</sup></a></p>
<p></p>
<p></p>
<p><code>(define (square x) (* x x))  (define (square x)    (exp (double (log x))))  (define (double x) (+ x x))</code></p>
<p></p>
<p></p>
<p>So a procedure definition should be able to suppress detail. The users of the procedure may not have written the procedure themselves, but may have obtained it from another programmer as a black box. A user should not need to know how the procedure is implemented in order to use it.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_41">Local names</a></h4>
<p>One detail of a procedure's implementation that should not matter to the user of the procedure is the implementer's choice of names for the procedure's formal parameters. Thus, the following procedures should not be distinguishable:</p>
<p></p>
<p></p>
<p><code>(define (square x) (* x x))  (define (square y) (* y y))</code></p>
<p></p>
<p>This principle -- that the meaning of a procedure should be independent of the parameter names used by its author -- seems on the surface to be self-evident, but its consequences are profound. The simplest consequence is that the parameter names of a procedure must be local to the body of the procedure. For example, we used <code>square</code> in the definition of <code>good-enough?</code> in our square-root procedure:</p>
<p></p>
<p></p>
<p><code>(define (good-enough? guess x)   (&lt; (abs (- (square guess) x)) 0.001))</code></p>
<p></p>
<p>The intention of the author of <code>good-enough?</code> is to determine if the square of the first argument is within a given tolerance of the second argument. We see that the author of <code>good-enough?</code> used the name <code>guess</code> to refer to the first argument and <code>x</code> to refer to the second argument. The argument of <code>square</code> is <code>guess</code>. If the author of <code>square</code> used <code>x</code> (as above) to refer to that argument, we see that the <code>x</code> in <code>good-enough?</code> must be a different <code>x</code> than the one in <code>square</code>. Running the procedure <code>square</code> must not affect the value of <code>x</code> that is used by <code>good-enough?</code>, because that value of <code>x</code> may be needed by <code>good-enough?</code> after <code>square</code> is done computing.</p>
<p>If the parameters were not local to the bodies of their respective procedures, then the parameter <code>x</code> in <code>square</code> could be confused with the parameter <code>x</code> in <code>good-enough?</code>, and the behavior of <code>good-enough?</code> would depend upon which version of <code>square</code> we used. Thus, <code>square</code> would not be the black box we desired.</p>
<p>A formal parameter of a procedure has a very special role in the procedure definition, in that it doesn't matter what name the formal parameter has. Such a name is called a <em>bound variable</em>, and we say that the procedure definition <em>binds</em> its formal parameters. The meaning of a procedure definition is unchanged if a bound variable is consistently renamed throughout the definition.<a href="#footnote_Temp_42"><sup>26</sup></a> If a variable is not bound, we say that it is <em>free</em>. The set of expressions for which a binding defines a name is called the <em>scope</em> of that name. In a procedure definition, the bound variables declared as the formal parameters of the procedure have the body of the procedure as their scope.</p>
<p>In the definition of <code>good-enough?</code> above, <code>guess</code> and <code>x</code> are bound variables but <code>&lt;</code>, <code>-</code>, <code>abs</code>, and <code>square</code> are free. The meaning of <code>good-enough?</code> should be independent of the names we choose for <code>guess</code> and <code>x</code> so long as they are distinct and different from <code>&lt;</code>, <code>-</code>, <code>abs</code>, and <code>square</code>. (If we renamed <code>guess</code> to <code>abs</code> we would have introduced a bug by <em>capturing</em> the variable <code>abs</code>. It would have changed from free to bound.) The meaning of <code>good-enough?</code> is not independent of the names of its free variables, however. It surely depends upon the fact (external to this definition) that the symbol <code>abs</code> names a procedure for computing the absolute value of a number. <code>Good-enough?</code> will compute a different function if we substitute <code>cos</code> for <code>abs</code> in its definition.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_43">Internal definitions and block structure</a></h4>
<p></p>
<p>We have one kind of name isolation available to us so far: The formal parameters of a procedure are local to the body of the procedure. The square-root program illustrates another way in which we would like to control the use of names. The existing program consists of separate procedures:</p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (sqrt-iter 1.0 x)) (define (sqrt-iter guess x)   (if (good-enough? guess x)       guess       (sqrt-iter (improve guess x) x))) (define (good-enough? guess x)   (&lt; (abs (- (square guess) x)) 0.001)) (define (improve guess x)   (average guess (/ x guess)))</code></p>
<p></p>
<p></p>
<p>The problem with this program is that the only procedure that is important to users of <code>sqrt</code> is <code>sqrt</code>. The other procedures (<code>sqrt-iter</code>, <code>good-enough?</code>, and <code>improve</code>) only clutter up their minds. They may not define any other procedure called <code>good-enough?</code> as part of another program to work together with the square-root program, because <code>sqrt</code> needs it. The problem is especially severe in the construction of large systems by many separate programmers. For example, in the construction of a large library of numerical procedures, many numerical functions are computed as successive approximations and thus might have procedures named <code>good-enough?</code> and <code>improve</code> as auxiliary procedures. We would like to localize the subprocedures, hiding them inside <code>sqrt</code> so that <code>sqrt</code> could coexist with other successive approximations, each having its own private <code>good-enough?</code> procedure. To make this possible, we allow a procedure to have internal definitions that are local to that procedure. For example, in the square-root problem we can write</p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (define (good-enough? guess x)     (&lt; (abs (- (square guess) x)) 0.001))   (define (improve guess x)     (average guess (/ x guess)))   (define (sqrt-iter guess x)     (if (good-enough? guess x)         guess         (sqrt-iter (improve guess x) x)))   (sqrt-iter 1.0 x))</code></p>
<p></p>
<p></p>
<p>Such nesting of definitions, called <em>block structure</em>, is basically the right solution to the simplest name-packaging problem. But there is a better idea lurking here. In addition to internalizing the definitions of the auxiliary procedures, we can simplify them. Since <code>x</code> is bound in the definition of <code>sqrt</code>, the procedures <code>good-enough?</code>, <code>improve</code>, and <code>sqrt-iter</code>, which are defined internally to <code>sqrt</code>, are in the scope of <code>x</code>. Thus, it is not necessary to pass <code>x</code> explicitly to each of these procedures. Instead, we allow <code>x</code> to be a free variable in the internal definitions, as shown below. Then <code>x</code> gets its value from the argument with which the enclosing procedure <code>sqrt</code> is called. This discipline is called <em>lexical scoping</em>.<a href="#footnote_Temp_44"><sup>27</sup></a></p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (define (good-enough? guess)     (&lt; (abs (- (square guess) x)) 0.001))   (define (improve guess)     (average guess (/ x guess)))   (define (sqrt-iter guess)     (if (good-enough? guess)         guess         (sqrt-iter (improve guess))))   (sqrt-iter 1.0))</code></p>
<p></p>
<p></p>
<p>We will use block structure extensively to help us break up large programs into tractable pieces.<a href="#footnote_Temp_45"><sup>28</sup></a> The idea of block structure originated with the programming language Algol 60. It appears in most advanced programming languages and is an important tool for helping to organize the construction of large programs.</p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_10"><sup>4</sup></a> The characterization of numbers as ``simple data'' is a barefaced bluff. In fact, the treatment of numbers is one of the trickiest and most confusing aspects of any programming language. Some typical issues involved are these: Some computer systems distinguish <em>integers</em>, such as 2, from <em>real numbers</em>, such as 2.71. Is the real number 2.00 different from the integer 2? Are the arithmetic operations used for integers the same as the operations used for real numbers? Does 6 divided by 2 produce 3, or 3.0? How large a number can we represent? How many decimal places of accuracy can we represent? Is the range of integers the same as the range of real numbers? Above and beyond these questions, of course, lies a collection of issues concerning roundoff and truncation errors -- the entire science of numerical analysis. Since our focus in this book is on large-scale program design rather than on numerical techniques, we are going to ignore these problems. The numerical examples in this chapter will exhibit the usual roundoff behavior that one observes when using arithmetic operations that preserve a limited number of decimal places of accuracy in noninteger operations.</p>
<p><a href="#call_footnote_Temp_11"><sup>5</sup></a> Throughout this book, when we wish to emphasize the distinction between the input typed by the user and the response printed by the interpreter, we will show the latter in slanted characters.</p>
<p><a href="#call_footnote_Temp_12"><sup>6</sup></a> Lisp systems typically provide features to aid the user in formatting expressions. Two especially useful features are one that automatically indents to the proper pretty-print position whenever a new line is started and one that highlights the matching left parenthesis whenever a right parenthesis is typed.</p>
<p><a href="#call_footnote_Temp_13"><sup>7</sup></a> Lisp obeys the convention that every expression has a value. This convention, together with the old reputation of Lisp as an inefficient language, is the source of the quip by Alan Perlis (paraphrasing Oscar Wilde) that ``Lisp programmers know the value of everything but the cost of nothing.''</p>
<p><a href="#call_footnote_Temp_14"><sup>8</sup></a> In this book, we do not show the interpreter's response to evaluating definitions, since this is highly implementation-dependent.</p>
<p><a href="#call_footnote_Temp_15"><sup>9</sup></a> Chapter 3 will show that this notion of environment is crucial, both for understanding how the interpreter works and for implementing interpreters.</p>
<p><a href="#call_footnote_Temp_16"><sup>10</sup></a> It may seem strange that the evaluation rule says, as part of the first step, that we should evaluate the leftmost element of a combination, since at this point that can only be an operator such as <code>+</code> or <code>*</code> representing a built-in primitive procedure such as addition or multiplication. We will see later that it is useful to be able to work with combinations whose operators are themselves compound expressions.</p>
<p><a href="#call_footnote_Temp_17"><sup>11</sup></a> Special syntactic forms that are simply convenient alternative surface structures for things that can be written in more uniform ways are sometimes called <em>syntactic sugar</em>, to use a phrase coined by Peter Landin. In comparison with users of other languages, Lisp programmers, as a rule, are less concerned with matters of syntax. (By contrast, examine any Pascal manual and notice how much of it is devoted to descriptions of syntax.) This disdain for syntax is due partly to the flexibility of Lisp, which makes it easy to change surface syntax, and partly to the observation that many ``convenient'' syntactic constructs, which make the language less uniform, end up causing more trouble than they are worth when programs become large and complex. In the words of Alan Perlis, ``Syntactic sugar causes cancer of the semicolon.''</p>
<p><a href="#call_footnote_Temp_18"><sup>12</sup></a> Observe that there are two different operations being combined here: we are creating the procedure, and we are giving it the name <code>square</code>. It is possible, indeed important, to be able to separate these two notions -- to create procedures without naming them, and to give names to procedures that have already been created. We will see how to do this in section <a href="book-Z-H-12.html#%_sec_1.3.2">1.3.2</a>.</p>
<p><a href="#call_footnote_Temp_19"><sup>13</sup></a> Throughout this book, we will describe the general syntax of expressions by using italic symbols delimited by angle brackets -- e.g., &lt;<em>name</em>&gt; -- to denote the ``slots'' in the expression to be filled in when such an expression is actually used.</p>
<p><a href="#call_footnote_Temp_20"><sup>14</sup></a> More generally, the body of the procedure can be a sequence of expressions. In this case, the interpreter evaluates each expression in the sequence in turn and returns the value of the final expression as the value of the procedure application.</p>
<p><a href="#call_footnote_Temp_21"><sup>15</sup></a> Despite the simplicity of the substitution idea, it turns out to be surprisingly complicated to give a rigorous mathematical definition of the substitution process. The problem arises from the possibility of confusion between the names used for the formal parameters of a procedure and the (possibly identical) names used in the expressions to which the procedure may be applied. Indeed, there is a long history of erroneous definitions of <em>substitution</em> in the literature of logic and programming semantics. See Stoy 1977 for a careful discussion of substitution.</p>
<p><a href="#call_footnote_Temp_23"><sup>16</sup></a> In chapter 3 we will introduce <em>stream processing</em>, which is a way of handling apparently ``infinite'' data structures by incorporating a limited form of normal-order evaluation. In section <a href="book-Z-H-27.html#%_sec_4.2">4.2</a> we will modify the Scheme interpreter to produce a normal-order variant of Scheme.</p>
<p><a href="#call_footnote_Temp_24"><sup>17</sup></a> ``Interpreted as either true or false'' means this: In Scheme, there are two distinguished values that are denoted by the constants <code>#t</code> and <code>#f</code>. When the interpreter checks a predicate's value, it interprets <code>#f</code> as false. Any other value is treated as true. (Thus, providing <code>#t</code> is logically unnecessary, but it is convenient.) In this book we will use names <code>true</code> and <code>false</code>, which are associated with the values <code>#t</code> and <code>#f</code> respectively.</p>
<p><a href="#call_footnote_Temp_25"><sup>18</sup></a> <code>Abs</code> also uses the ``minus'' operator <code>-</code>, which, when used with a single operand, as in <code>(- x)</code>, indicates negation.</p>
<p><a href="#call_footnote_Temp_26"><sup>19</sup></a> A minor difference between <code>if</code> and <code>cond</code> is that the &lt;<em>e</em>&gt; part of each <code>cond</code> clause may be a sequence of expressions. If the corresponding &lt;<em>p</em>&gt; is found to be true, the expressions &lt;<em>e</em>&gt; are evaluated in sequence and the value of the final expression in the sequence is returned as the value of the <code>cond</code>. In an <code>if</code> expression, however, the &lt;<em>consequent</em>&gt; and &lt;<em>alternative</em>&gt; must be single expressions.</p>
<p><a href="#call_footnote_Temp_32"><sup>20</sup></a> Declarative and imperative descriptions are intimately related, as indeed are mathematics and computer science. For instance, to say that the answer produced by a program is ``correct'' is to make a declarative statement about the program. There is a large amount of research aimed at establishing techniques for proving that programs are correct, and much of the technical difficulty of this subject has to do with negotiating the transition between imperative statements (from which programs are constructed) and declarative statements (which can be used to deduce things). In a related vein, an important current area in programming-language design is the exploration of so-called very high-level languages, in which one actually programs in terms of declarative statements. The idea is to make interpreters sophisticated enough so that, given ``what is'' knowledge specified by the programmer, they can generate ``how to'' knowledge automatically. This cannot be done in general, but there are important areas where progress has been made. We shall revisit this idea in chapter 4.</p>
<p><a href="#call_footnote_Temp_33"><sup>21</sup></a> This square-root algorithm is actually a special case of Newton's method, which is a general technique for finding roots of equations. The square-root algorithm itself was developed by Heron of Alexandria in the first century A.D. We will see how to express the general Newton's method as a Lisp procedure in section <a href="book-Z-H-12.html#%_sec_1.3.4">1.3.4</a>.</p>
<p><a href="#call_footnote_Temp_34"><sup>22</sup></a> We will usually give predicates names ending with question marks, to help us remember that they are predicates. This is just a stylistic convention. As far as the interpreter is concerned, the question mark is just an ordinary character.</p>
<p><a href="#call_footnote_Temp_35"><sup>23</sup></a> Observe that we express our initial guess as 1.0 rather than 1. This would not make any difference in many Lisp implementations. MIT Scheme, however, distinguishes between exact integers and decimal values, and dividing two integers produces a rational number rather than a decimal. For example, dividing 10 by 6 yields 5/3, while dividing 10.0 by 6.0 yields 1.6666666666666667. (We will learn how to implement arithmetic on rational numbers in section <a href="book-Z-H-14.html#%_sec_2.1.1">2.1.1</a>.) If we start with an initial guess of 1 in our square-root program, and <em>x</em> is an exact integer, all subsequent values produced in the square-root computation will be rational numbers rather than decimals. Mixed operations on rational numbers and decimals always yield decimals, so starting with an initial guess of 1.0 forces all subsequent values to be decimals.</p>
<p><a href="#call_footnote_Temp_36"><sup>24</sup></a> Readers who are worried about the efficiency issues involved in using procedure calls to implement iteration should note the remarks on ``tail recursion'' in section <a href="book-Z-H-11.html#%_sec_1.2.1">1.2.1</a>.</p>
<p><a href="#call_footnote_Temp_40"><sup>25</sup></a> It is not even clear which of these procedures is a more efficient implementation. This depends upon the hardware available. There are machines for which the ``obvious'' implementation is the less efficient one. Consider a machine that has extensive tables of logarithms and antilogarithms stored in a very efficient manner.</p>
<p><a href="#call_footnote_Temp_42"><sup>26</sup></a> The concept of consistent renaming is actually subtle and difficult to define formally. Famous logicians have made embarrassing errors here.</p>
<p><a href="#call_footnote_Temp_44"><sup>27</sup></a> Lexical scoping dictates that free variables in a procedure are taken to refer to bindings made by enclosing procedure definitions; that is, they are looked up in the environment in which the procedure was defined. We will see how this works in detail in chapter 3 when we study environments and the detailed behavior of the interpreter.</p>
<p><a href="#call_footnote_Temp_45"><sup>28</sup></a> Embedded definitions must come first in a procedure body. The management is not responsible for the consequences of running programs that intertwine definition and use.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-9.html">previous</a>, <a href="book-Z-H-11.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-10.html">previous</a>, <a href="book-Z-H-12.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_1.2">1.2  Procedures and the Processes They Generate</a></h2>
<p></p>
<p>We have now considered the elements of programming: We have used primitive arithmetic operations, we have combined these operations, and we have abstracted these composite operations by defining them as compound procedures. But that is not enough to enable us to say that we know how to program. Our situation is analogous to that of someone who has learned the rules for how the pieces move in chess but knows nothing of typical openings, tactics, or strategy. Like the novice chess player, we don't yet know the common patterns of usage in the domain. We lack the knowledge of which moves are worth making (which procedures are worth defining). We lack the experience to predict the consequences of making a move (executing a procedure).</p>
<p>The ability to visualize the consequences of the actions under consideration is crucial to becoming an expert programmer, just as it is in any synthetic, creative activity. In becoming an expert photographer, for example, one must learn how to look at a scene and know how dark each region will appear on a print for each possible choice of exposure and development conditions. Only then can one reason backward, planning framing, lighting, exposure, and development to obtain the desired effects. So it is with programming, where we are planning the course of action to be taken by a process and where we control the process by means of a program. To become experts, we must learn to visualize the processes generated by various types of procedures. Only after we have developed such a skill can we learn to reliably construct programs that exhibit the desired behavior.</p>
<p>A procedure is a pattern for the <em>local evolution</em> of a computational process. It specifies how each stage of the process is built upon the previous stage. We would like to be able to make statements about the overall, or <em>global</em>, behavior of a process whose local evolution has been specified by a procedure. This is very difficult to do in general, but we can at least try to describe some typical patterns of process evolution.</p>
<p>In this section we will examine some common ``shapes'' for processes generated by simple procedures. We will also investigate the rates at which these processes consume the important computational resources of time and space. The procedures we will consider are very simple. Their role is like that played by test patterns in photography: as oversimplified prototypical patterns, rather than practical examples in their own right.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.2.1">1.2.1  Linear Recursion and Iteration</a></h3>
<p></p>
<p></p>
<p><img src="ch1-Z-G-7.gif" /></p>
<p><strong>Figure 1.3:</strong>  A linear recursive process for computing 6!.</p>
<p></p>
<p>We begin by considering the factorial function, defined by</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-8.gif" /></p>
<p></p>
<p>There are many ways to compute factorials. One way is to make use of the observation that <em>n</em>! is equal to <em>n</em> times (<em>n</em> - 1)! for any positive integer <em>n</em>:</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-9.gif" /></p>
<p></p>
<p>Thus, we can compute <em>n</em>! by computing (<em>n</em> - 1)! and multiplying the result by <em>n</em>. If we add the stipulation that 1! is equal to 1, this observation translates directly into a procedure:</p>
<p></p>
<p></p>
<p><code>(define (factorial n)   (if (= n 1)       1       (* n (factorial (- n 1)))))</code></p>
<p></p>
<p>We can use the substitution model of section <a href="book-Z-H-10.html#%_sec_1.1.5">1.1.5</a> to watch this procedure in action computing 6!, as shown in figure <a href="#%_fig_1.3">1.3</a>.</p>
<p>Now let's take a different perspective on computing factorials. We could describe a rule for computing <em>n</em>! by specifying that we first multiply 1 by 2, then multiply the result by 3, then by 4, and so on until we reach <em>n</em>. More formally, we maintain a running product, together with a counter that counts from 1 up to <em>n</em>. We can describe the computation by saying that the counter and the product simultaneously change from one step to the next according to the rule</p>
<p></p>
<p></p>
<p>product <img src="book-Z-G-D-14.gif" /> counter · product</p>
<p></p>
<p></p>
<p>counter <img src="book-Z-G-D-14.gif" /> counter + 1</p>
<p></p>
<p></p>
<p></p>
<p>and stipulating that <em>n</em>! is the value of the product when the counter exceeds <em>n</em>.</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-10.gif" /></p>
<p><strong>Figure 1.4:</strong>  A linear iterative process for computing 6!.</p>
<p></p>
<p>Once again, we can recast our description as a procedure for computing factorials:<a href="#footnote_Temp_46"><sup>29</sup></a></p>
<p></p>
<p></p>
<p><code>(define (factorial n)   (fact-iter 1 1 n))  (define (fact-iter product counter max-count)   (if (&gt; counter max-count)       product       (fact-iter (* counter product)                  (+ counter 1)                  max-count)))</code></p>
<p></p>
<p></p>
<p>As before, we can use the substitution model to visualize the process of computing 6!, as shown in figure <a href="#%_fig_1.4">1.4</a>.</p>
<p>Compare the two processes. From one point of view, they seem hardly different at all. Both compute the same mathematical function on the same domain, and each requires a number of steps proportional to <em>n</em> to compute <em>n</em>!. Indeed, both processes even carry out the same sequence of multiplications, obtaining the same sequence of partial products. On the other hand, when we consider the ``shapes'' of the two processes, we find that they evolve quite differently.</p>
<p>Consider the first process. The substitution model reveals a shape of expansion followed by contraction, indicated by the arrow in figure <a href="#%_fig_1.3">1.3</a>. The expansion occurs as the process builds up a chain of <em>deferred operations</em> (in this case, a chain of multiplications). The contraction occurs as the operations are actually performed. This type of process, characterized by a chain of deferred operations, is called a <em>recursive process</em>. Carrying out this process requires that the interpreter keep track of the operations to be performed later on. In the computation of <em>n</em>!, the length of the chain of deferred multiplications, and hence the amount of information needed to keep track of it, grows linearly with <em>n</em> (is proportional to <em>n</em>), just like the number of steps. Such a process is called a <em>linear recursive process</em>.</p>
<p>By contrast, the second process does not grow and shrink. At each step, all we need to keep track of, for any <em>n</em>, are the current values of the variables <code>product</code>, <code>counter</code>, and <code>max-count</code>. We call this an <em>iterative process</em>. In general, an iterative process is one whose state can be summarized by a fixed number of <em>state variables</em>, together with a fixed rule that describes how the state variables should be updated as the process moves from state to state and an (optional) end test that specifies conditions under which the process should terminate. In computing <em>n</em>!, the number of steps required grows linearly with <em>n</em>. Such a process is called a <em>linear iterative process</em>.</p>
<p>The contrast between the two processes can be seen in another way. In the iterative case, the program variables provide a complete description of the state of the process at any point. If we stopped the computation between steps, all we would need to do to resume the computation is to supply the interpreter with the values of the three program variables. Not so with the recursive process. In this case there is some additional ``hidden'' information, maintained by the interpreter and not contained in the program variables, which indicates ``where the process is'' in negotiating the chain of deferred operations. The longer the chain, the more information must be maintained.<a href="#footnote_Temp_47"><sup>30</sup></a></p>
<p>In contrasting iteration and recursion, we must be careful not to confuse the notion of a recursive <em>process</em> with the notion of a recursive <em>procedure</em>. When we describe a procedure as recursive, we are referring to the syntactic fact that the procedure definition refers (either directly or indirectly) to the procedure itself. But when we describe a process as following a pattern that is, say, linearly recursive, we are speaking about how the process evolves, not about the syntax of how a procedure is written. It may seem disturbing that we refer to a recursive procedure such as <code>fact-iter</code> as generating an iterative process. However, the process really is iterative: Its state is captured completely by its three state variables, and an interpreter need keep track of only three variables in order to execute the process.</p>
<p>One reason that the distinction between process and procedure may be confusing is that most implementations of common languages (including Ada, Pascal, and C) are designed in such a way that the interpretation of any recursive procedure consumes an amount of memory that grows with the number of procedure calls, even when the process described is, in principle, iterative. As a consequence, these languages can describe iterative processes only by resorting to special-purpose ``looping constructs'' such as <code>do</code>, <code>repeat</code>, <code>until</code>, <code>for</code>, and <code>while</code>. The implementation of Scheme we shall consider in chapter 5 does not share this defect. It will execute an iterative process in constant space, even if the iterative process is described by a recursive procedure. An implementation with this property is called <em>tail-recursive</em>. With a tail-recursive implementation, iteration can be expressed using the ordinary procedure call mechanism, so that special iteration constructs are useful only as syntactic sugar.<a href="#footnote_Temp_48"><sup>31</sup></a></p>
<p></p>
<p><strong>Exercise 1.9.</strong>  Each of the following two procedures defines a method for adding two positive integers in terms of the procedures <code>inc</code>, which increments its argument by 1, and <code>dec</code>, which decrements its argument by 1.</p>
<p></p>
<p></p>
<p><code>(define (+ a b)   (if (= a 0)       b       (inc (+ (dec a) b))))  (define (+ a b)   (if (= a 0)       b       (+ (dec a) (inc b))))</code></p>
<p></p>
<p>Using the substitution model, illustrate the process generated by each procedure in evaluating <code>(+ 4 5)</code>. Are these processes iterative or recursive?</p>
<p></p>
<p></p>
<p><strong>Exercise 1.10.</strong>  The following procedure computes a mathematical function called Ackermann's function.</p>
<p></p>
<p></p>
<p><code>(define (A x y)   (cond ((= y 0) 0)         ((= x 0) (* 2 y))         ((= y 1) 2)         (else (A (- x 1)                  (A x (- y 1))))))</code></p>
<p></p>
<p>What are the values of the following expressions?</p>
<p></p>
<p></p>
<p><code>(A 1 10)  (A 2 4)  (A 3 3)</code></p>
<p></p>
<p>Consider the following procedures, where <code>A</code> is the procedure defined above:</p>
<p></p>
<p><code>(define (f n) (A 0 n))  (define (g n) (A 1 n))  (define (h n) (A 2 n))  (define (k n) (* 5 n n))</code></p>
<p></p>
<p>Give concise mathematical definitions for the functions computed by the procedures <code>f</code>, <code>g</code>, and <code>h</code> for positive integer values of <em>n</em>. For example, <code>(k n)</code> computes 5<em>n</em><sup>2</sup>.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.2.2">1.2.2  Tree Recursion</a></h3>
<p>Another common pattern of computation is called <em>tree recursion</em>. As an example, consider computing the sequence of Fibonacci numbers, in which each number is the sum of the preceding two:</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-11.gif" /></p>
<p></p>
<p>In general, the Fibonacci numbers can be defined by the rule</p>
<p></p>
<p><img src="ch1-Z-G-12.gif" /></p>
<p>We can immediately translate this definition into a recursive procedure for computing Fibonacci numbers:</p>
<p></p>
<p></p>
<p><code>(define (fib n)   (cond ((= n 0) 0)         ((= n 1) 1)         (else (+ (fib (- n 1))                  (fib (- n 2))))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-13.gif" /></p>
<p><strong>Figure 1.5:</strong>  The tree-recursive process generated in computing <code>(fib 5)</code>.</p>
<p></p>
<p>Consider the pattern of this computation. To compute <code>(fib 5)</code>, we compute <code>(fib 4)</code> and <code>(fib 3)</code>. To compute <code>(fib 4)</code>, we compute <code>(fib 3)</code> and <code>(fib 2)</code>. In general, the evolved process looks like a tree, as shown in figure <a href="#%_fig_1.5">1.5</a>. Notice that the branches split into two at each level (except at the bottom); this reflects the fact that the <code>fib</code> procedure calls itself twice each time it is invoked.</p>
<p>This procedure is instructive as a prototypical tree recursion, but it is a terrible way to compute Fibonacci numbers because it does so much redundant computation. Notice in figure <a href="#%_fig_1.5">1.5</a> that the entire computation of <code>(fib 3)</code> -- almost half the work -- is duplicated. In fact, it is not hard to show that the number of times the procedure will compute <code>(fib 1)</code> or <code>(fib 0)</code> (the number of leaves in the above tree, in general) is precisely <em>F</em><em>i</em><em>b</em>(<em>n</em> + 1). To get an idea of how bad this is, one can show that the value of <em>F</em><em>i</em><em>b</em>(<em>n</em>) grows exponentially with <em>n</em>. More precisely (see exercise <a href="#%_thm_1.13">1.13</a>), <em>F</em><em>i</em><em>b</em>(<em>n</em>) is the closest integer to <img src="book-Z-G-D-11.gif" /><sup><em>n</em></sup> /<img src="book-Z-G-D-13.gif" />5, where</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-14.gif" /></p>
<p>is the <em>golden ratio</em>, which satisfies the equation</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-15.gif" /></p>
<p>Thus, the process uses a number of steps that grows exponentially with the input. On the other hand, the space required grows only linearly with the input, because we need keep track only of which nodes are above us in the tree at any point in the computation. In general, the number of steps required by a tree-recursive process will be proportional to the number of nodes in the tree, while the space required will be proportional to the maximum depth of the tree.</p>
<p>We can also formulate an iterative process for computing the Fibonacci numbers. The idea is to use a pair of integers <em>a</em> and <em>b</em>, initialized to <em>F</em><em>i</em><em>b</em>(1) = 1 and <em>F</em><em>i</em><em>b</em>(0) = 0, and to repeatedly apply the simultaneous transformations</p>
<p></p>
<p><img src="ch1-Z-G-16.gif" /></p>
<p>It is not hard to show that, after applying this transformation <em>n</em> times, <em>a</em> and <em>b</em> will be equal, respectively, to <em>F</em><em>i</em><em>b</em>(<em>n</em> + 1) and <em>F</em><em>i</em><em>b</em>(<em>n</em>). Thus, we can compute Fibonacci numbers iteratively using the procedure</p>
<p></p>
<p></p>
<p><code>(define (fib n)   (fib-iter 1 0 n))  (define (fib-iter a b count)   (if (= count 0)       b       (fib-iter (+ a b) a (- count 1))))</code></p>
<p></p>
<p>This second method for computing <em>F</em><em>i</em><em>b</em>(<em>n</em>) is a linear iteration. The difference in number of steps required by the two methods -- one linear in <em>n</em>, one growing as fast as <em>F</em><em>i</em><em>b</em>(<em>n</em>) itself -- is enormous, even for small inputs.</p>
<p>One should not conclude from this that tree-recursive processes are useless. When we consider processes that operate on hierarchically structured data rather than numbers, we will find that tree recursion is a natural and powerful tool.<a href="#footnote_Temp_51"><sup>32</sup></a> But even in numerical operations, tree-recursive processes can be useful in helping us to understand and design programs. For instance, although the first <code>fib</code> procedure is much less efficient than the second one, it is more straightforward, being little more than a translation into Lisp of the definition of the Fibonacci sequence. To formulate the iterative algorithm required noticing that the computation could be recast as an iteration with three state variables.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_52">Example: Counting change</a></h4>
<p>It takes only a bit of cleverness to come up with the iterative Fibonacci algorithm. In contrast, consider the following problem: How many different ways can we make change of $ 1.00, given half-dollars, quarters, dimes, nickels, and pennies? More generally, can we write a procedure to compute the number of ways to change any given amount of money?</p>
<p>This problem has a simple solution as a recursive procedure. Suppose we think of the types of coins available as arranged in some order. Then the following relation holds:</p>
<p></p>
<p></p>
<p>The number of ways to change amount <em>a</em> using <em>n</em> kinds of coins equals</p>
<p></p>
<p></p>
<ul>
<li>the number of ways to change amount <em>a</em> using all but the first kind of coin, plus</li>
<li>the number of ways to change amount <em>a</em> - <em>d</em> using all <em>n</em> kinds of coins, where <em>d</em> is the denomination of the first kind of coin.</li>
</ul>
<p></p>
<p>To see why this is true, observe that the ways to make change can be divided into two groups: those that do not use any of the first kind of coin, and those that do. Therefore, the total number of ways to make change for some amount is equal to the number of ways to make change for the amount without using any of the first kind of coin, plus the number of ways to make change assuming that we do use the first kind of coin. But the latter number is equal to the number of ways to make change for the amount that remains after using a coin of the first kind.</p>
<p>Thus, we can recursively reduce the problem of changing a given amount to the problem of changing smaller amounts using fewer kinds of coins. Consider this reduction rule carefully, and convince yourself that we can use it to describe an algorithm if we specify the following degenerate cases:<a href="#footnote_Temp_53"><sup>33</sup></a></p>
<p></p>
<p></p>
<ul>
<li>If <em>a</em> is exactly 0, we should count that as 1 way to make change.</li>
<li>If <em>a</em> is less than 0, we should count that as 0 ways to make change.</li>
<li>If <em>n</em> is 0, we should count that as 0 ways to make change.</li>
</ul>
<p></p>
<p>We can easily translate this description into a recursive procedure:</p>
<p></p>
<p></p>
<p><code>(define (count-change amount)   (cc amount 5)) (define (cc amount kinds-of-coins)   (cond ((= amount 0) 1)         ((or (&lt; amount 0) (= kinds-of-coins 0)) 0)         (else (+ (cc amount                      (- kinds-of-coins 1))                  (cc (- amount                         (first-denomination kinds-of-coins))                      kinds-of-coins))))) (define (first-denomination kinds-of-coins)   (cond ((= kinds-of-coins 1) 1)         ((= kinds-of-coins 2) 5)         ((= kinds-of-coins 3) 10)         ((= kinds-of-coins 4) 25)         ((= kinds-of-coins 5) 50)))</code></p>
<p></p>
<p>(The <code>first-denomination</code> procedure takes as input the number of kinds of coins available and returns the denomination of the first kind. Here we are thinking of the coins as arranged in order from largest to smallest, but any order would do as well.) We can now answer our original question about changing a dollar:</p>
<p></p>
<p></p>
<p><code>(count-change 100) 292</code></p>
<p></p>
<p></p>
<p><code>Count-change</code> generates a tree-recursive process with redundancies similar to those in our first implementation of <code>fib</code>. (It will take quite a while for that 292 to be computed.) On the other hand, it is not obvious how to design a better algorithm for computing the result, and we leave this problem as a challenge. The observation that a tree-recursive process may be highly inefficient but often easy to specify and understand has led people to propose that one could get the best of both worlds by designing a ``smart compiler'' that could transform tree-recursive procedures into more efficient procedures that compute the same result.<a href="#footnote_Temp_54"><sup>34</sup></a></p>
<p></p>
<p><strong>Exercise 1.11.</strong>  A function <em>f</em> is defined by the rule that <em>f</em>(<em>n</em>) = <em>n</em> if <em>n</em>&lt;3 and <em>f</em>(<em>n</em>) = <em>f</em>(<em>n</em> - 1) + 2<em>f</em>(<em>n</em> - 2) + 3<em>f</em>(<em>n</em> - 3) if <em>n</em>&gt; 3. Write a procedure that computes <em>f</em> by means of a recursive process. Write a procedure that computes <em>f</em> by means of an iterative process.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.12.</strong>  The following pattern of numbers is called <em>Pascal's triangle</em>.</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-17.gif" /></p>
<p>The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it.<a href="#footnote_Temp_57"><sup>35</sup></a> Write a procedure that computes elements of Pascal's triangle by means of a recursive process.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.13.</strong>  Prove that <em>F</em><em>i</em><em>b</em>(<em>n</em>) is the closest integer to <img src="book-Z-G-D-11.gif" /><sup><em>n</em></sup>/<img src="book-Z-G-D-13.gif" />5, where <img src="book-Z-G-D-11.gif" /> = (1 + <img src="book-Z-G-D-13.gif" />5)/2. Hint: Let <img src="book-Z-G-D-12.gif" /> = (1 - <img src="book-Z-G-D-13.gif" />5)/2. Use induction and the definition of the Fibonacci numbers (see section <a href="#%_sec_1.2.2">1.2.2</a>) to prove that <em>F</em><em>i</em><em>b</em>(<em>n</em>) = (<img src="book-Z-G-D-11.gif" /><sup><em>n</em></sup> - <img src="book-Z-G-D-12.gif" /><sup><em>n</em></sup>)/<img src="book-Z-G-D-13.gif" />5.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.2.3">1.2.3  Orders of Growth</a></h3>
<p>The previous examples illustrate that processes can differ considerably in the rates at which they consume computational resources. One convenient way to describe this difference is to use the notion of <em>order of growth</em> to obtain a gross measure of the resources required by a process as the inputs become larger.</p>
<p>Let <em>n</em> be a parameter that measures the size of the problem, and let <em>R</em>(<em>n</em>) be the amount of resources the process requires for a problem of size <em>n</em>. In our previous examples we took <em>n</em> to be the number for which a given function is to be computed, but there are other possibilities. For instance, if our goal is to compute an approximation to the square root of a number, we might take <em>n</em> to be the number of digits accuracy required. For matrix multiplication we might take <em>n</em> to be the number of rows in the matrices. In general there are a number of properties of the problem with respect to which it will be desirable to analyze a given process. Similarly, <em>R</em>(<em>n</em>) might measure the number of internal storage registers used, the number of elementary machine operations performed, and so on. In computers that do only a fixed number of operations at a time, the time required will be proportional to the number of elementary machine operations performed.</p>
<p>We say that <em>R</em>(<em>n</em>) has order of growth <img src="book-Z-G-D-3.gif" />(<em>f</em>(<em>n</em>)), written <em>R</em>(<em>n</em>) = <img src="book-Z-G-D-3.gif" />(<em>f</em>(<em>n</em>)) (pronounced ``theta of <em>f</em>(<em>n</em>)''), if there are positive constants <em>k</em><sub>1</sub> and <em>k</em><sub>2</sub> independent of <em>n</em> such that</p>
<p></p>
<p><img src="ch1-Z-G-18.gif" /></p>
<p>for any sufficiently large value of <em>n</em>. (In other words, for large <em>n</em>, the value <em>R</em>(<em>n</em>) is sandwiched between <em>k</em><sub>1</sub><em>f</em>(<em>n</em>) and <em>k</em><sub>2</sub><em>f</em>(<em>n</em>).)</p>
<p>For instance, with the linear recursive process for computing factorial described in section <a href="#%_sec_1.2.1">1.2.1</a> the number of steps grows proportionally to the input <em>n</em>. Thus, the steps required for this process grows as <img src="book-Z-G-D-3.gif" />(<em>n</em>). We also saw that the space required grows as <img src="book-Z-G-D-3.gif" />(<em>n</em>). For the iterative factorial, the number of steps is still <img src="book-Z-G-D-3.gif" />(<em>n</em>) but the space is <img src="book-Z-G-D-3.gif" />(1) -- that is, constant.<a href="#footnote_Temp_59"><sup>36</sup></a> The tree-recursive Fibonacci computation requires <img src="book-Z-G-D-3.gif" />(<img src="book-Z-G-D-11.gif" /><sup><em>n</em></sup>) steps and space <img src="book-Z-G-D-3.gif" />(<em>n</em>), where <img src="book-Z-G-D-11.gif" /> is the golden ratio described in section <a href="#%_sec_1.2.2">1.2.2</a>.</p>
<p>Orders of growth provide only a crude description of the behavior of a process. For example, a process requiring <em>n</em><sup>2</sup> steps and a process requiring 1000<em>n</em><sup>2</sup> steps and a process requiring 3<em>n</em><sup>2</sup> + 10<em>n</em> + 17 steps all have <img src="book-Z-G-D-3.gif" />(<em>n</em><sup>2</sup>) order of growth. On the other hand, order of growth provides a useful indication of how we may expect the behavior of the process to change as we change the size of the problem. For a <img src="book-Z-G-D-3.gif" />(<em>n</em>) (linear) process, doubling the size will roughly double the amount of resources used. For an exponential process, each increment in problem size will multiply the resource utilization by a constant factor. In the remainder of section <a href="#%_sec_1.2">1.2</a> we will examine two algorithms whose order of growth is logarithmic, so that doubling the problem size increases the resource requirement by a constant amount.</p>
<p></p>
<p><strong>Exercise 1.14.</strong>  Draw the tree illustrating the process generated by the <code>count-change</code> procedure of section <a href="#%_sec_1.2.2">1.2.2</a> in making change for 11 cents. What are the orders of growth of the space and number of steps used by this process as the amount to be changed increases?</p>
<p></p>
<p></p>
<p><strong>Exercise 1.15.</strong>  The sine of an angle (specified in radians) can be computed by making use of the approximation <code>sin</code> <em>x</em> <img src="book-Z-G-D-20.gif" /> <em>x</em> if <em>x</em> is sufficiently small, and the trigonometric identity</p>
<p></p>
<p><img src="ch1-Z-G-19.gif" /></p>
<p>to reduce the size of the argument of <code>sin</code>. (For purposes of this exercise an angle is considered ``sufficiently small'' if its magnitude is not greater than 0.1 radians.) These ideas are incorporated in the following procedures:</p>
<p></p>
<p></p>
<p><code>(define (cube x) (* x x x)) (define (p x) (- (* 3 x) (* 4 (cube x)))) (define (sine angle)    (if (not (&gt; (abs angle) 0.1))        angle        (p (sine (/ angle 3.0)))))</code></p>
<p></p>
<p></p>
<p>a.  How many times is the procedure <code>p</code> applied when <code>(sine 12.15)</code> is evaluated?</p>
<p>b.  What is the order of growth in space and number of steps (as a function of <em>a</em>) used by the process generated by the <code>sine</code> procedure when <code>(sine a)</code> is evaluated?</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.2.4">1.2.4  Exponentiation</a></h3>
<p>Consider the problem of computing the exponential of a given number. We would like a procedure that takes as arguments a base <em>b</em> and a positive integer exponent <em>n</em> and computes <em>b</em><sup><em>n</em></sup>. One way to do this is via the recursive definition</p>
<p></p>
<p><img src="ch1-Z-G-20.gif" /></p>
<p>which translates readily into the procedure</p>
<p></p>
<p></p>
<p><code>(define (expt b n)   (if (= n 0)       1       (* b (expt b (- n 1)))))</code></p>
<p></p>
<p>This is a linear recursive process, which requires <img src="book-Z-G-D-3.gif" />(<em>n</em>) steps and <img src="book-Z-G-D-3.gif" />(<em>n</em>) space. Just as with factorial, we can readily formulate an equivalent linear iteration:</p>
<p></p>
<p></p>
<p><code>(define (expt b n)   (expt-iter b n 1))  (define (expt-iter b counter product)   (if (= counter 0)       product       (expt-iter b                 (- counter 1)                 (* b product)))) </code></p>
<p></p>
<p>This version requires <img src="book-Z-G-D-3.gif" />(<em>n</em>) steps and <img src="book-Z-G-D-3.gif" />(1) space.</p>
<p>We can compute exponentials in fewer steps by using successive squaring. For instance, rather than computing <em>b</em><sup>8</sup> as</p>
<p></p>
<p><img src="ch1-Z-G-21.gif" /></p>
<p>we can compute it using three multiplications:</p>
<p></p>
<p><img src="ch1-Z-G-22.gif" /></p>
<p></p>
<p>This method works fine for exponents that are powers of 2. We can also take advantage of successive squaring in computing exponentials in general if we use the rule</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-23.gif" /></p>
<p>We can express this method as a procedure:</p>
<p></p>
<p></p>
<p><code>(define (fast-expt b n)   (cond ((= n 0) 1)         ((even? n) (square (fast-expt b (/ n 2))))         (else (* b (fast-expt b (- n 1))))))</code></p>
<p></p>
<p>where the predicate to test whether an integer is even is defined in terms of the primitive procedure <code>remainder</code> by</p>
<p></p>
<p></p>
<p><code>(define (even? n)   (= (remainder n 2) 0))</code></p>
<p></p>
<p>The process evolved by <code>fast-expt</code> grows logarithmically with <em>n</em> in both space and number of steps. To see this, observe that computing <em>b</em><sup>2<em>n</em></sup> using <code>fast-expt</code> requires only one more multiplication than computing <em>b</em><sup><em>n</em></sup>. The size of the exponent we can compute therefore doubles (approximately) with every new multiplication we are allowed. Thus, the number of multiplications required for an exponent of <em>n</em> grows about as fast as the logarithm of <em>n</em> to the base 2. The process has <img src="book-Z-G-D-3.gif" />(<code>log</code> <em>n</em>) growth.<a href="#footnote_Temp_62"><sup>37</sup></a></p>
<p>The difference between <img src="book-Z-G-D-3.gif" />(<code>log</code> <em>n</em>) growth and <img src="book-Z-G-D-3.gif" />(<em>n</em>) growth becomes striking as <em>n</em> becomes large. For example, <code>fast-expt</code> for <em>n</em> = 1000 requires only 14 multiplications.<a href="#footnote_Temp_63"><sup>38</sup></a> It is also possible to use the idea of successive squaring to devise an iterative algorithm that computes exponentials with a logarithmic number of steps (see exercise <a href="#%_thm_1.16">1.16</a>), although, as is often the case with iterative algorithms, this is not written down so straightforwardly as the recursive algorithm.<a href="#footnote_Temp_64"><sup>39</sup></a></p>
<p></p>
<p><strong>Exercise 1.16.</strong>  Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does <code>fast-expt</code>. (Hint: Using the observation that (<em>b</em><sup><em>n</em>/2</sup>)<sup>2</sup> = (<em>b</em><sup>2</sup>)<sup><em>n</em>/2</sup>, keep, along with the exponent <em>n</em> and the base <em>b</em>, an additional state variable <em>a</em>, and define the state transformation in such a way that the product <em>a</em> <em>b</em><sup><em>n</em></sup> is unchanged from state to state. At the beginning of the process <em>a</em> is taken to be 1, and the answer is given by the value of <em>a</em> at the end of the process. In general, the technique of defining an <em>invariant quantity</em> that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.)</p>
<p></p>
<p></p>
<p><strong>Exercise 1.17.</strong>  The exponentiation algorithms in this section are based on performing exponentiation by means of repeated multiplication. In a similar way, one can perform integer multiplication by means of repeated addition. The following multiplication procedure (in which it is assumed that our language can only add, not multiply) is analogous to the <code>expt</code> procedure:</p>
<p></p>
<p></p>
<p><code>(define (* a b)   (if (= b 0)       0       (+ a (* a (- b 1)))))</code></p>
<p></p>
<p>This algorithm takes a number of steps that is linear in <code>b</code>. Now suppose we include, together with addition, operations <code>double</code>, which doubles an integer, and <code>halve</code>, which divides an (even) integer by 2. Using these, design a multiplication procedure analogous to <code>fast-expt</code> that uses a logarithmic number of steps.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.18.</strong>  Using the results of exercises <a href="#%_thm_1.16">1.16</a> and <a href="#%_thm_1.17">1.17</a>, devise a procedure that generates an iterative process for multiplying two integers in terms of adding, doubling, and halving and uses a logarithmic number of steps.<a href="#footnote_Temp_68"><sup>40</sup></a></p>
<p></p>
<p></p>
<p><strong>Exercise 1.19.</strong>   There is a clever algorithm for computing the Fibonacci numbers in a logarithmic number of steps. Recall the transformation of the state variables <em>a</em> and <em>b</em> in the <code>fib-iter</code> process of section <a href="#%_sec_1.2.2">1.2.2</a>: <em>a</em> <img src="book-Z-G-D-14.gif" /> <em>a</em> + <em>b</em> and <em>b</em> <img src="book-Z-G-D-14.gif" /> <em>a</em>. Call this transformation <em>T</em>, and observe that applying <em>T</em> over and over again <em>n</em> times, starting with 1 and 0, produces the pair <em>F</em><em>i</em><em>b</em>(<em>n</em> + 1) and <em>F</em><em>i</em><em>b</em>(<em>n</em>). In other words, the Fibonacci numbers are produced by applying <em>T</em><sup><em>n</em></sup>, the <em>n</em>th power of the transformation <em>T</em>, starting with the pair (1,0). Now consider <em>T</em> to be the special case of <em>p</em> = 0 and <em>q</em> = 1 in a family of transformations <em>T</em><sub><em>p</em><em>q</em></sub>, where <em>T</em><sub><em>p</em><em>q</em></sub> transforms the pair (<em>a</em>,<em>b</em>) according to <em>a</em> <img src="book-Z-G-D-14.gif" /> <em>b</em><em>q</em> + <em>a</em><em>q</em> + <em>a</em><em>p</em> and <em>b</em> <img src="book-Z-G-D-14.gif" /> <em>b</em><em>p</em> + <em>a</em><em>q</em>. Show that if we apply such a transformation <em>T</em><sub><em>p</em><em>q</em></sub> twice, the effect is the same as using a single transformation <em>T</em><sub><em>p</em>'<em>q</em>'</sub> of the same form, and compute <em>p</em>' and <em>q</em>' in terms of <em>p</em> and <em>q</em>. This gives us an explicit way to square these transformations, and thus we can compute <em>T</em><sup><em>n</em></sup> using successive squaring, as in the <code>fast-expt</code> procedure. Put this all together to complete the following procedure, which runs in a logarithmic number of steps:<a href="#footnote_Temp_70"><sup>41</sup></a></p>
<p></p>
<p></p>
<p><code>(define (fib n)   (fib-iter 1 0 0 1 n)) (define (fib-iter a b p q count)   (cond ((= count 0) b)         ((even? count)          (fib-iter a                    b                    &lt;??&gt;      ; compute p'                    &lt;??&gt;      ; compute q'                    (/ count 2)))         (else (fib-iter (+ (* b q) (* a q) (* a p))                         (+ (* b p) (* a q))                         p                         q                         (- count 1)))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.2.5">1.2.5  Greatest Common Divisors</a></h3>
<p>The greatest common divisor (GCD) of two integers <em>a</em> and <em>b</em> is defined to be the largest integer that divides both <em>a</em> and <em>b</em> with no remainder. For example, the GCD of 16 and 28 is 4. In chapter 2, when we investigate how to implement rational-number arithmetic, we will need to be able to compute GCDs in order to reduce rational numbers to lowest terms. (To reduce a rational number to lowest terms, we must divide both the numerator and the denominator by their GCD. For example, 16/28 reduces to 4/7.) One way to find the GCD of two integers is to factor them and search for common factors, but there is a famous algorithm that is much more efficient.</p>
<p>The idea of the algorithm is based on the observation that, if <em>r</em> is the remainder when <em>a</em> is divided by <em>b</em>, then the common divisors of <em>a</em> and <em>b</em> are precisely the same as the common divisors of <em>b</em> and <em>r</em>. Thus, we can use the equation</p>
<p></p>
<p><img src="ch1-Z-G-24.gif" /></p>
<p>to successively reduce the problem of computing a GCD to the problem of computing the GCD of smaller and smaller pairs of integers. For example,</p>
<p></p>
<p><img src="ch1-Z-G-25.gif" /></p>
<p>reduces GCD(206,40) to GCD(2,0), which is 2. It is possible to show that starting with any two positive integers and performing repeated reductions will always eventually produce a pair where the second number is 0. Then the GCD is the other number in the pair. This method for computing the GCD is known as <em>Euclid's Algorithm</em>.<a href="#footnote_Temp_71"><sup>42</sup></a></p>
<p>It is easy to express Euclid's Algorithm as a procedure:</p>
<p></p>
<p><code>(define (gcd a b)   (if (= b 0)       a       (gcd b (remainder a b))))</code></p>
<p></p>
<p>This generates an iterative process, whose number of steps grows as the logarithm of the numbers involved.</p>
<p>The fact that the number of steps required by Euclid's Algorithm has logarithmic growth bears an interesting relation to the Fibonacci numbers:</p>
<p></p>
<p></p>
<p><strong>Lamé's Theorem:</strong> If Euclid's Algorithm requires <em>k</em> steps to compute the GCD of some pair, then the smaller number in the pair must be greater than or equal to the <em>k</em>th Fibonacci number.<a href="#footnote_Temp_72"><sup>43</sup></a></p>
<p></p>
<p></p>
<p></p>
<p>We can use this theorem to get an order-of-growth estimate for Euclid's Algorithm. Let <em>n</em> be the smaller of the two inputs to the procedure. If the process takes <em>k</em> steps, then we must have <em>n</em>&gt; <em>F</em><em>i</em><em>b</em> (<em>k</em>) <img src="book-Z-G-D-20.gif" /> <img src="book-Z-G-D-11.gif" /><sup><em>k</em></sup>/<img src="book-Z-G-D-13.gif" />5. Therefore the number of steps <em>k</em> grows as the logarithm (to the base <img src="book-Z-G-D-11.gif" />) of <em>n</em>. Hence, the order of growth is <img src="book-Z-G-D-3.gif" />(<code>log</code> <em>n</em>).</p>
<p></p>
<p><strong>Exercise 1.20.</strong>  The process that a procedure generates is of course dependent on the rules used by the interpreter. As an example, consider the iterative <code>gcd</code> procedure given above. Suppose we were to interpret this procedure using normal-order evaluation, as discussed in section <a href="book-Z-H-10.html#%_sec_1.1.5">1.1.5</a>. (The normal-order-evaluation rule for <code>if</code> is described in exercise <a href="book-Z-H-10.html#%_thm_1.5">1.5</a>.) Using the substitution method (for normal order), illustrate the process generated in evaluating <code>(gcd 206 40)</code> and indicate the <code>remainder</code> operations that are actually performed. How many <code>remainder</code> operations are actually performed in the normal-order evaluation of <code>(gcd 206 40)</code>? In the applicative-order evaluation?</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.2.6">1.2.6  Example: Testing for Primality</a></h3>
<p>This section describes two methods for checking the primality of an integer <em>n</em>, one with order of growth <img src="book-Z-G-D-3.gif" />(<img src="book-Z-G-D-13.gif" /><em>n</em>), and a ``probabilistic'' algorithm with order of growth <img src="book-Z-G-D-3.gif" />(<code>log</code> <em>n</em>). The exercises at the end of this section suggest programming projects based on these algorithms.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_74">Searching for divisors</a></h4>
<p>Since ancient times, mathematicians have been fascinated by problems concerning prime numbers, and many people have worked on the problem of determining ways to test if numbers are prime. One way to test if a number is prime is to find the number's divisors. The following program finds the smallest integral divisor (greater than 1) of a given number <em>n</em>. It does this in a straightforward way, by testing <em>n</em> for divisibility by successive integers starting with 2.</p>
<p></p>
<p></p>
<p><code>(define (smallest-divisor n)   (find-divisor n 2)) (define (find-divisor n test-divisor)   (cond ((&gt; (square test-divisor) n) n)         ((divides? test-divisor n) test-divisor)         (else (find-divisor n (+ test-divisor 1))))) (define (divides? a b)   (= (remainder b a) 0))</code></p>
<p></p>
<p></p>
<p>We can test whether a number is prime as follows: <em>n</em> is prime if and only if <em>n</em> is its own smallest divisor.</p>
<p></p>
<p></p>
<p><code>(define (prime? n)   (= n (smallest-divisor n)))</code></p>
<p></p>
<p></p>
<p>The end test for <code>find-divisor</code> is based on the fact that if <em>n</em> is not prime it must have a divisor less than or equal to <img src="book-Z-G-D-13.gif" /><em>n</em>.<a href="#footnote_Temp_75"><sup>44</sup></a> This means that the algorithm need only test divisors between 1 and <img src="book-Z-G-D-13.gif" /><em>n</em>. Consequently, the number of steps required to identify <em>n</em> as prime will have order of growth <img src="book-Z-G-D-3.gif" />(<img src="book-Z-G-D-13.gif" /><em>n</em>).</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_76">The Fermat test</a></h4>
<p>The <img src="book-Z-G-D-3.gif" />(<code>log</code> <em>n</em>) primality test is based on a result from number theory known as Fermat's Little Theorem.<a href="#footnote_Temp_77"><sup>45</sup></a></p>
<p></p>
<p></p>
<p><strong>Fermat's Little Theorem:</strong> If <em>n</em> is a prime number and <em>a</em> is any positive integer less than <em>n</em>, then <em>a</em> raised to the <em>n</em>th power is congruent to <em>a</em> modulo <em>n</em>.</p>
<p></p>
<p></p>
<p>(Two numbers are said to be <em>congruent modulo</em> <em>n</em> if they both have the same remainder when divided by <em>n</em>. The remainder of a number <em>a</em> when divided by <em>n</em> is also referred to as the <em>remainder of</em> <em>a</em> <em>modulo</em> <em>n</em>, or simply as <em>a</em> <em>modulo</em> <em>n</em>.)</p>
<p>If <em>n</em> is not prime, then, in general, most of the numbers <em>a</em>&lt; <em>n</em> will not satisfy the above relation. This leads to the following algorithm for testing primality: Given a number <em>n</em>, pick a random number <em>a</em> &lt; <em>n</em> and compute the remainder of <em>a</em><sup><em>n</em></sup> modulo <em>n</em>. If the result is not equal to <em>a</em>, then <em>n</em> is certainly not prime. If it is <em>a</em>, then chances are good that <em>n</em> is prime. Now pick another random number <em>a</em> and test it with the same method. If it also satisfies the equation, then we can be even more confident that <em>n</em> is prime. By trying more and more values of <em>a</em>, we can increase our confidence in the result. This algorithm is known as the Fermat test.</p>
<p>To implement the Fermat test, we need a procedure that computes the exponential of a number modulo another number:</p>
<p></p>
<p></p>
<p><code>(define (expmod base exp m)   (cond ((= exp 0) 1)         ((even? exp)          (remainder (square (expmod base (/ exp 2) m))                     m))         (else          (remainder (* base (expmod base (- exp 1) m))                     m))))        </code></p>
<p></p>
<p>This is very similar to the <code>fast-expt</code> procedure of section <a href="#%_sec_1.2.4">1.2.4</a>. It uses successive squaring, so that the number of steps grows logarithmically with the exponent.<a href="#footnote_Temp_78"><sup>46</sup></a></p>
<p>The Fermat test is performed by choosing at random a number <em>a</em> between 1 and <em>n</em> - 1 inclusive and checking whether the remainder modulo <em>n</em> of the <em>n</em>th power of <em>a</em> is equal to <em>a</em>. The random number <em>a</em> is chosen using the procedure <code>random</code>, which we assume is included as a primitive in Scheme. <code>Random</code> returns a nonnegative integer less than its integer input. Hence, to obtain a random number between 1 and <em>n</em> - 1, we call <code>random</code> with an input of <em>n</em> - 1 and add 1 to the result:</p>
<p></p>
<p></p>
<p><code>(define (fermat-test n)   (define (try-it a)     (= (expmod a n n) a))   (try-it (+ 1 (random (- n 1)))))</code></p>
<p></p>
<p></p>
<p>The following procedure runs the test a given number of times, as specified by a parameter. Its value is true if the test succeeds every time, and false otherwise.</p>
<p></p>
<p></p>
<p><code>(define (fast-prime? n times)   (cond ((= times 0) true)         ((fermat-test n) (fast-prime? n (- times 1)))         (else false)))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_79">Probabilistic methods</a></h4>
<p>The Fermat test differs in character from most familiar algorithms, in which one computes an answer that is guaranteed to be correct. Here, the answer obtained is only probably correct. More precisely, if <em>n</em> ever fails the Fermat test, we can be certain that <em>n</em> is not prime. But the fact that <em>n</em> passes the test, while an extremely strong indication, is still not a guarantee that <em>n</em> is prime. What we would like to say is that for any number <em>n</em>, if we perform the test enough times and find that <em>n</em> always passes the test, then the probability of error in our primality test can be made as small as we like.</p>
<p>Unfortunately, this assertion is not quite correct. There do exist numbers that fool the Fermat test: numbers <em>n</em> that are not prime and yet have the property that <em>a</em><sup><em>n</em></sup> is congruent to <em>a</em> modulo <em>n</em> for all integers <em>a</em> &lt; <em>n</em>. Such numbers are extremely rare, so the Fermat test is quite reliable in practice.<a href="#footnote_Temp_80"><sup>47</sup></a> There are variations of the Fermat test that cannot be fooled. In these tests, as with the Fermat method, one tests the primality of an integer <em>n</em> by choosing a random integer <em>a</em>&lt;<em>n</em> and checking some condition that depends upon <em>n</em> and <em>a</em>. (See exercise <a href="#%_thm_1.28">1.28</a> for an example of such a test.) On the other hand, in contrast to the Fermat test, one can prove that, for any <em>n</em>, the condition does not hold for most of the integers <em>a</em>&lt;<em>n</em> unless <em>n</em> is prime. Thus, if <em>n</em> passes the test for some random choice of <em>a</em>, the chances are better than even that <em>n</em> is prime. If <em>n</em> passes the test for two random choices of <em>a</em>, the chances are better than 3 out of 4 that <em>n</em> is prime. By running the test with more and more randomly chosen values of <em>a</em> we can make the probability of error as small as we like.</p>
<p>The existence of tests for which one can prove that the chance of error becomes arbitrarily small has sparked interest in algorithms of this type, which have come to be known as <em>probabilistic algorithms</em>. There is a great deal of research activity in this area, and probabilistic algorithms have been fruitfully applied to many fields.<a href="#footnote_Temp_81"><sup>48</sup></a></p>
<p></p>
<p><strong>Exercise 1.21.</strong>  Use the <code>smallest-divisor</code> procedure to find the smallest divisor of each of the following numbers: 199, 1999, 19999.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.22.</strong>  Most Lisp implementations include a primitive called <code>runtime</code> that returns an integer that specifies the amount of time the system has been running (measured, for example, in microseconds). The following <code>timed-prime-test</code> procedure, when called with an integer <em>n</em>, prints <em>n</em> and checks to see if <em>n</em> is prime. If <em>n</em> is prime, the procedure prints three asterisks followed by the amount of time used in performing the test.</p>
<p></p>
<p></p>
<p><code>(define (timed-prime-test n)   (newline)   (display n)   (start-prime-test n (runtime))) (define (start-prime-test n start-time)   (if (prime? n)       (report-prime (- (runtime) start-time)))) (define (report-prime elapsed-time)   (display &quot; *** &quot;)   (display elapsed-time))</code></p>
<p></p>
<p>Using this procedure, write a procedure <code>search-for-primes</code> that checks the primality of consecutive odd integers in a specified range. Use your procedure to find the three smallest primes larger than 1000; larger than 10,000; larger than 100,000; larger than 1,000,000. Note the time needed to test each prime. Since the testing algorithm has order of growth of <img src="book-Z-G-D-3.gif" />(<img src="book-Z-G-D-13.gif" /><em>n</em>), you should expect that testing for primes around 10,000 should take about <img src="book-Z-G-D-13.gif" />10 times as long as testing for primes around 1000. Do your timing data bear this out? How well do the data for 100,000 and 1,000,000 support the <img src="book-Z-G-D-13.gif" /><em>n</em> prediction? Is your result compatible with the notion that programs on your machine run in time proportional to the number of steps required for the computation?</p>
<p></p>
<p></p>
<p><strong>Exercise 1.23.</strong>  The <code>smallest-divisor</code> procedure shown at the start of this section does lots of needless testing: After it checks to see if the number is divisible by 2 there is no point in checking to see if it is divisible by any larger even numbers. This suggests that the values used for <code>test-divisor</code> should not be 2, 3, 4, 5, 6, <code>...</code>, but rather 2, 3, 5, 7, 9, <code>...</code>. To implement this change, define a procedure <code>next</code> that returns 3 if its input is equal to 2 and otherwise returns its input plus 2. Modify the <code>smallest-divisor</code> procedure to use <code>(next test-divisor)</code> instead of <code>(+ test-divisor 1)</code>. With <code>timed-prime-test</code> incorporating this modified version of <code>smallest-divisor</code>, run the test for each of the 12 primes found in exercise <a href="#%_thm_1.22">1.22</a>. Since this modification halves the number of test steps, you should expect it to run about twice as fast. Is this expectation confirmed? If not, what is the observed ratio of the speeds of the two algorithms, and how do you explain the fact that it is different from 2?</p>
<p></p>
<p></p>
<p><strong>Exercise 1.24.</strong>  Modify the <code>timed-prime-test</code> procedure of exercise <a href="#%_thm_1.22">1.22</a> to use <code>fast-prime?</code> (the Fermat method), and test each of the 12 primes you found in that exercise. Since the Fermat test has <img src="book-Z-G-D-3.gif" />(<code>log</code> <em>n</em>) growth, how would you expect the time to test primes near 1,000,000 to compare with the time needed to test primes near 1000? Do your data bear this out? Can you explain any discrepancy you find?</p>
<p></p>
<p></p>
<p><strong>Exercise 1.25.</strong>  Alyssa P. Hacker complains that we went to a lot of extra work in writing <code>expmod</code>. After all, she says, since we already know how to compute exponentials, we could have simply written</p>
<p></p>
<p></p>
<p><code>(define (expmod base exp m)   (remainder (fast-expt base exp) m))</code></p>
<p></p>
<p>Is she correct? Would this procedure serve as well for our fast prime tester? Explain.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.26.</strong>  Louis Reasoner is having great difficulty doing exercise <a href="#%_thm_1.24">1.24</a>. His <code>fast-prime?</code> test seems to run more slowly than his <code>prime?</code> test. Louis calls his friend Eva Lu Ator over to help. When they examine Louis's code, they find that he has rewritten the <code>expmod</code> procedure to use an explicit multiplication, rather than calling <code>square</code>:</p>
<p></p>
<p></p>
<p><code>(define (expmod base exp m)   (cond ((= exp 0) 1)         ((even? exp)          (remainder (* (expmod base (/ exp 2) m)                        (expmod base (/ exp 2) m))                     m))         (else          (remainder (* base (expmod base (- exp 1) m))                     m))))</code></p>
<p></p>
<p>``I don't see what difference that could make,'' says Louis. ``I do.'' says Eva. ``By writing the procedure like that, you have transformed the <img src="book-Z-G-D-3.gif" />(<code>log</code> <em>n</em>) process into a <img src="book-Z-G-D-3.gif" />(<em>n</em>) process.'' Explain.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.27.</strong>  Demonstrate that the Carmichael numbers listed in footnote <a href="#footnote_Temp_80">47</a> really do fool the Fermat test. That is, write a procedure that takes an integer <em>n</em> and tests whether <em>a</em><sup><em>n</em></sup> is congruent to <em>a</em> modulo <em>n</em> for every <em>a</em>&lt;<em>n</em>, and try your procedure on the given Carmichael numbers.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.28.</strong>  One variant of the Fermat test that cannot be fooled is called the <em>Miller-Rabin test</em> (Miller 1976; Rabin 1980). This starts from an alternate form of Fermat's Little Theorem, which states that if <em>n</em> is a prime number and <em>a</em> is any positive integer less than <em>n</em>, then <em>a</em> raised to the (<em>n</em> - 1)st power is congruent to 1 modulo <em>n</em>. To test the primality of a number <em>n</em> by the Miller-Rabin test, we pick a random number <em>a</em>&lt;<em>n</em> and raise <em>a</em> to the (<em>n</em> - 1)st power modulo <em>n</em> using the <code>expmod</code> procedure. However, whenever we perform the squaring step in <code>expmod</code>, we check to see if we have discovered a ``nontrivial square root of 1 modulo <em>n</em>,'' that is, a number not equal to 1 or <em>n</em> - 1 whose square is equal to 1 modulo <em>n</em>. It is possible to prove that if such a nontrivial square root of 1 exists, then <em>n</em> is not prime. It is also possible to prove that if <em>n</em> is an odd number that is not prime, then, for at least half the numbers <em>a</em>&lt;<em>n</em>, computing <em>a</em><sup><em>n</em>-1</sup> in this way will reveal a nontrivial square root of 1 modulo <em>n</em>. (This is why the Miller-Rabin test cannot be fooled.) Modify the <code>expmod</code> procedure to signal if it discovers a nontrivial square root of 1, and use this to implement the Miller-Rabin test with a procedure analogous to <code>fermat-test</code>. Check your procedure by testing various known primes and non-primes. Hint: One convenient way to make <code>expmod</code> signal is to have it return 0.</p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_46"><sup>29</sup></a> In a real program we would probably use the block structure introduced in the last section to hide the definition of <code>fact-iter</code>:</p>
<p></p>
<p><code>(define (factorial n)   (define (iter product counter)     (if (&gt; counter n)         product         (iter (* counter product)               (+ counter 1))))   (iter 1 1))</code></p>
<p></p>
<p>We avoided doing this here so as to minimize the number of things to think about at once.</p>
<p><a href="#call_footnote_Temp_47"><sup>30</sup></a> When we discuss the implementation of procedures on register machines in chapter 5, we will see that any iterative process can be realized ``in hardware'' as a machine that has a fixed set of registers and no auxiliary memory. In contrast, realizing a recursive process requires a machine that uses an auxiliary data structure known as a <em>stack</em>.</p>
<p><a href="#call_footnote_Temp_48"><sup>31</sup></a> Tail recursion has long been known as a compiler optimization trick. A coherent semantic basis for tail recursion was provided by Carl Hewitt (1977), who explained it in terms of the ``message-passing'' model of computation that we shall discuss in chapter 3. Inspired by this, Gerald Jay Sussman and Guy Lewis Steele Jr. (see Steele 1975) constructed a tail-recursive interpreter for Scheme. Steele later showed how tail recursion is a consequence of the natural way to compile procedure calls (Steele 1977). The IEEE standard for Scheme requires that Scheme implementations be tail-recursive.</p>
<p><a href="#call_footnote_Temp_51"><sup>32</sup></a> An example of this was hinted at in section <a href="book-Z-H-10.html#%_sec_1.1.3">1.1.3</a>: The interpreter itself evaluates expressions using a tree-recursive process.</p>
<p><a href="#call_footnote_Temp_53"><sup>33</sup></a> For example, work through in detail how the reduction rule applies to the problem of making change for 10 cents using pennies and nickels.</p>
<p><a href="#call_footnote_Temp_54"><sup>34</sup></a> One approach to coping with redundant computations is to arrange matters so that we automatically construct a table of values as they are computed. Each time we are asked to apply the procedure to some argument, we first look to see if the value is already stored in the table, in which case we avoid performing the redundant computation. This strategy, known as <em>tabulation</em> or <em>memoization</em>, can be implemented in a straightforward way. Tabulation can sometimes be used to transform processes that require an exponential number of steps (such as <code>count-change</code>) into processes whose space and time requirements grow linearly with the input. See exercise <a href="book-Z-H-22.html#%_thm_3.27">3.27</a>.</p>
<p><a href="#call_footnote_Temp_57"><sup>35</sup></a> The elements of Pascal's triangle are called the <em>binomial coefficients</em>, because the <em>n</em>th row consists of the coefficients of the terms in the expansion of (<em>x</em> + <em>y</em>)<sup><em>n</em></sup>. This pattern for computing the coefficients appeared in Blaise Pascal's 1653 seminal work on probability theory, <em>Traité du triangle arithmétique</em>. According to Knuth (1973), the same pattern appears in the <em>Szu-yuen Yü-chien</em> (``The Precious Mirror of the Four Elements''), published by the Chinese mathematician Chu Shih-chieh in 1303, in the works of the twelfth-century Persian poet and mathematician Omar Khayyam, and in the works of the twelfth-century Hindu mathematician Bháscara Áchárya.</p>
<p><a href="#call_footnote_Temp_59"><sup>36</sup></a> These statements mask a great deal of oversimplification. For instance, if we count process steps as ``machine operations'' we are making the assumption that the number of machine operations needed to perform, say, a multiplication is independent of the size of the numbers to be multiplied, which is false if the numbers are sufficiently large. Similar remarks hold for the estimates of space. Like the design and description of a process, the analysis of a process can be carried out at various levels of abstraction.</p>
<p><a href="#call_footnote_Temp_62"><sup>37</sup></a> More precisely, the number of multiplications required is equal to 1 less than the log base 2 of <em>n</em> plus the number of ones in the binary representation of <em>n</em>. This total is always less than twice the log base 2 of <em>n</em>. The arbitrary constants <em>k</em><sub>1</sub> and <em>k</em><sub>2</sub> in the definition of order notation imply that, for a logarithmic process, the base to which logarithms are taken does not matter, so all such processes are described as <img src="book-Z-G-D-3.gif" />(<code>log</code> <em>n</em>).</p>
<p><a href="#call_footnote_Temp_63"><sup>38</sup></a> You may wonder why anyone would care about raising numbers to the 1000th power. See section <a href="#%_sec_1.2.6">1.2.6</a>.</p>
<p><a href="#call_footnote_Temp_64"><sup>39</sup></a> This iterative algorithm is ancient. It appears in the <em>Chandah-sutra</em> by Áchárya Pingala, written before 200 B.C. See Knuth 1981, section 4.6.3, for a full discussion and analysis of this and other methods of exponentiation.</p>
<p><a href="#call_footnote_Temp_68"><sup>40</sup></a> This algorithm, which is sometimes known as the ``Russian peasant method'' of multiplication, is ancient. Examples of its use are found in the Rhind Papyrus, one of the two oldest mathematical documents in existence, written about 1700 B.C. (and copied from an even older document) by an Egyptian scribe named A'h-mose.</p>
<p><a href="#call_footnote_Temp_70"><sup>41</sup></a> This exercise was suggested to us by Joe Stoy, based on an example in Kaldewaij 1990.</p>
<p><a href="#call_footnote_Temp_71"><sup>42</sup></a> Euclid's Algorithm is so called because it appears in Euclid's <em>Elements</em> (Book 7, ca. 300 B.C.). According to Knuth (1973), it can be considered the oldest known nontrivial algorithm. The ancient Egyptian method of multiplication (exercise <a href="#%_thm_1.18">1.18</a>) is surely older, but, as Knuth explains, Euclid's algorithm is the oldest known to have been presented as a general algorithm, rather than as a set of illustrative examples.</p>
<p><a href="#call_footnote_Temp_72"><sup>43</sup></a> This theorem was proved in 1845 by Gabriel Lamé, a French mathematician and engineer known chiefly for his contributions to mathematical physics. To prove the theorem, we consider pairs (<em>a</em><sub><em>k</em></sub> ,<em>b</em><sub><em>k</em></sub>), where <em>a</em><sub><em>k</em></sub>&gt; <em>b</em><sub><em>k</em></sub>, for which Euclid's Algorithm terminates in <em>k</em> steps. The proof is based on the claim that, if (<em>a</em><sub><em>k</em>+1</sub>, <em>b</em><sub><em>k</em>+1</sub>) <img src="book-Z-G-D-15.gif" /> (<em>a</em><sub><em>k</em></sub>, <em>b</em><sub><em>k</em></sub>) <img src="book-Z-G-D-15.gif" /> (<em>a</em><sub><em>k</em>-1</sub>, <em>b</em><sub><em>k</em>-1</sub>) are three successive pairs in the reduction process, then we must have <em>b</em><sub><em>k</em>+1</sub>&gt; <em>b</em><sub><em>k</em></sub> + <em>b</em><sub><em>k</em>-1</sub>. To verify the claim, consider that a reduction step is defined by applying the transformation <em>a</em><sub><em>k</em>-1</sub> = <em>b</em><sub><em>k</em></sub>, <em>b</em><sub><em>k</em>-1</sub> = remainder of <em>a</em><sub><em>k</em></sub> divided by <em>b</em><sub><em>k</em></sub>. The second equation means that <em>a</em><sub><em>k</em></sub> = <em>q</em><em>b</em><sub><em>k</em></sub> + <em>b</em><sub><em>k</em>-1</sub> for some positive integer <em>q</em>. And since <em>q</em> must be at least 1 we have <em>a</em><sub><em>k</em></sub> = <em>q</em><em>b</em><sub><em>k</em></sub> + <em>b</em><sub><em>k</em>-1</sub> &gt; <em>b</em><sub><em>k</em></sub> + <em>b</em><sub><em>k</em>-1</sub>. But in the previous reduction step we have <em>b</em><sub><em>k</em>+1</sub> = <em>a</em><sub><em>k</em></sub>. Therefore, <em>b</em><sub><em>k</em>+1</sub> = <em>a</em><sub><em>k</em></sub>&gt; <em>b</em><sub><em>k</em></sub> + <em>b</em><sub><em>k</em>-1</sub>. This verifies the claim. Now we can prove the theorem by induction on <em>k</em>, the number of steps that the algorithm requires to terminate. The result is true for <em>k</em> = 1, since this merely requires that <em>b</em> be at least as large as <em>F</em><em>i</em><em>b</em>(1) = 1. Now, assume that the result is true for all integers less than or equal to <em>k</em> and establish the result for <em>k</em> + 1. Let (<em>a</em><sub><em>k</em>+1</sub>, <em>b</em><sub><em>k</em>+1</sub>) <img src="book-Z-G-D-15.gif" /> (<em>a</em><sub><em>k</em></sub>, <em>b</em><sub><em>k</em></sub>) <img src="book-Z-G-D-15.gif" /> (<em>a</em><sub><em>k</em>-1</sub>, <em>b</em><sub><em>k</em>-1</sub>) be successive pairs in the reduction process. By our induction hypotheses, we have <em>b</em><sub><em>k</em>-1</sub>&gt; <em>F</em><em>i</em><em>b</em>(<em>k</em> - 1) and <em>b</em><sub><em>k</em></sub>&gt; <em>F</em><em>i</em><em>b</em>(<em>k</em>). Thus, applying the claim we just proved together with the definition of the Fibonacci numbers gives <em>b</em><sub><em>k</em>+1</sub> &gt; <em>b</em><sub><em>k</em></sub> + <em>b</em><sub><em>k</em>-1</sub>&gt; <em>F</em><em>i</em><em>b</em>(<em>k</em>) + <em>F</em><em>i</em><em>b</em>(<em>k</em> - 1) = <em>F</em><em>i</em><em>b</em>(<em>k</em> + 1), which completes the proof of Lamé's Theorem.</p>
<p><a href="#call_footnote_Temp_75"><sup>44</sup></a> If <em>d</em> is a divisor of <em>n</em>, then so is <em>n</em>/<em>d</em>. But <em>d</em> and <em>n</em>/<em>d</em> cannot both be greater than <img src="book-Z-G-D-13.gif" /><em>n</em>.</p>
<p><a href="#call_footnote_Temp_77"><sup>45</sup></a> Pierre de Fermat (1601-1665) is considered to be the founder of modern number theory. He obtained many important number-theoretic results, but he usually announced just the results, without providing his proofs. Fermat's Little Theorem was stated in a letter he wrote in 1640. The first published proof was given by Euler in 1736 (and an earlier, identical proof was discovered in the unpublished manuscripts of Leibniz). The most famous of Fermat's results -- known as Fermat's Last Theorem -- was jotted down in 1637 in his copy of the book <em>Arithmetic</em> (by the third-century Greek mathematician Diophantus) with the remark ``I have discovered a truly remarkable proof, but this margin is too small to contain it.'' Finding a proof of Fermat's Last Theorem became one of the most famous challenges in number theory. A complete solution was finally given in 1995 by Andrew Wiles of Princeton University.</p>
<p><a href="#call_footnote_Temp_78"><sup>46</sup></a> The reduction steps in the cases where the exponent <em>e</em> is greater than 1 are based on the fact that, for any integers <em>x</em>, <em>y</em>, and <em>m</em>, we can find the remainder of <em>x</em> times <em>y</em> modulo <em>m</em> by computing separately the remainders of <em>x</em> modulo <em>m</em> and <em>y</em> modulo <em>m</em>, multiplying these, and then taking the remainder of the result modulo <em>m</em>. For instance, in the case where <em>e</em> is even, we compute the remainder of <em>b</em><sup><em>e</em>/2</sup> modulo <em>m</em>, square this, and take the remainder modulo <em>m</em>. This technique is useful because it means we can perform our computation without ever having to deal with numbers much larger than <em>m</em>. (Compare exercise <a href="#%_thm_1.25">1.25</a>.)</p>
<p><a href="#call_footnote_Temp_80"><sup>47</sup></a> Numbers that fool the Fermat test are called <em>Carmichael numbers</em>, and little is known about them other than that they are extremely rare. There are 255 Carmichael numbers below 100,000,000. The smallest few are 561, 1105, 1729, 2465, 2821, and 6601. In testing primality of very large numbers chosen at random, the chance of stumbling upon a value that fools the Fermat test is less than the chance that cosmic radiation will cause the computer to make an error in carrying out a ``correct'' algorithm. Considering an algorithm to be inadequate for the first reason but not for the second illustrates the difference between mathematics and engineering.</p>
<p><a href="#call_footnote_Temp_81"><sup>48</sup></a> One of the most striking applications of probabilistic prime testing has been to the field of cryptography. Although it is now computationally infeasible to factor an arbitrary 200-digit number, the primality of such a number can be checked in a few seconds with the Fermat test. This fact forms the basis of a technique for constructing ``unbreakable codes'' suggested by Rivest, Shamir, and Adleman (1977). The resulting <em>RSA algorithm</em> has become a widely used technique for enhancing the security of electronic communications. Because of this and related developments, the study of prime numbers, once considered the epitome of a topic in ``pure'' mathematics to be studied only for its own sake, now turns out to have important practical applications to cryptography, electronic funds transfer, and information retrieval.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-10.html">previous</a>, <a href="book-Z-H-12.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-11.html">previous</a>, <a href="book-Z-H-13.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_1.3">1.3  Formulating Abstractions with Higher-Order Procedures</a></h2>
<p></p>
<p>We have seen that procedures are, in effect, abstractions that describe compound operations on numbers independent of the particular numbers. For example, when we</p>
<p></p>
<p></p>
<p><code>(define (cube x) (* x x x))</code></p>
<p></p>
<p>we are not talking about the cube of a particular number, but rather about a method for obtaining the cube of any number. Of course we could get along without ever defining this procedure, by always writing expressions such as</p>
<p></p>
<p></p>
<p><code>(* 3 3 3) (* x x x) (* y y y)        </code></p>
<p></p>
<p>and never mentioning <code>cube</code> explicitly. This would place us at a serious disadvantage, forcing us to work always at the level of the particular operations that happen to be primitives in the language (multiplication, in this case) rather than in terms of higher-level operations. Our programs would be able to compute cubes, but our language would lack the ability to express the concept of cubing. One of the things we should demand from a powerful programming language is the ability to build abstractions by assigning names to common patterns and then to work in terms of the abstractions directly. Procedures provide this ability. This is why all but the most primitive programming languages include mechanisms for defining procedures.</p>
<p>Yet even in numerical processing we will be severely limited in our ability to create abstractions if we are restricted to procedures whose parameters must be numbers. Often the same programming pattern will be used with a number of different procedures. To express such patterns as concepts, we will need to construct procedures that can accept procedures as arguments or return procedures as values. Procedures that manipulate procedures are called <em>higher-order procedures</em>. This section shows how higher-order procedures can serve as powerful abstraction mechanisms, vastly increasing the expressive power of our language.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.3.1">1.3.1  Procedures as Arguments</a></h3>
<p>Consider the following three procedures. The first computes the sum of the integers from <code>a</code> through <code>b</code>:</p>
<p></p>
<p></p>
<p><code>(define (sum-integers a b)   (if (&gt; a b)       0       (+ a (sum-integers (+ a 1) b))))</code></p>
<p></p>
<p>The second computes the sum of the cubes of the integers in the given range:</p>
<p></p>
<p></p>
<p><code>(define (sum-cubes a b)   (if (&gt; a b)       0       (+ (cube a) (sum-cubes (+ a 1) b))))</code></p>
<p></p>
<p>The third computes the sum of a sequence of terms in the series</p>
<p></p>
<p><img src="ch1-Z-G-26.gif" /></p>
<p>which converges to <img src="book-Z-G-D-9.gif" />/8 (very slowly):<a href="#footnote_Temp_90"><sup>49</sup></a></p>
<p></p>
<p></p>
<p><code>(define (pi-sum a b)   (if (&gt; a b)       0       (+ (/ 1.0 (* a (+ a 2))) (pi-sum (+ a 4) b))))</code></p>
<p></p>
<p></p>
<p>These three procedures clearly share a common underlying pattern. They are for the most part identical, differing only in the name of the procedure, the function of <code>a</code> used to compute the term to be added, and the function that provides the next value of <code>a</code>. We could generate each of the procedures by filling in slots in the same template:</p>
<p></p>
<p></p>
<p><code>(define (&lt;name&gt; a b)   (if (&gt; a b)       0       (+ (&lt;term&gt; a)          (&lt;name&gt; (&lt;next&gt; a) b))))</code></p>
<p></p>
<p></p>
<p>The presence of such a common pattern is strong evidence that there is a useful abstraction waiting to be brought to the surface. Indeed, mathematicians long ago identified the abstraction of <em>summation of a series</em> and invented ``sigma notation,'' for example</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-27.gif" /></p>
<p></p>
<p>to express this concept. The power of sigma notation is that it allows mathematicians to deal with the concept of summation itself rather than only with particular sums -- for example, to formulate general results about sums that are independent of the particular series being summed.</p>
<p>Similarly, as program designers, we would like our language to be powerful enough so that we can write a procedure that expresses the concept of summation itself rather than only procedures that compute particular sums. We can do so readily in our procedural language by taking the common template shown above and transforming the ``slots'' into formal parameters:</p>
<p></p>
<p></p>
<p><code>(define (sum term a next b)   (if (&gt; a b)       0       (+ (term a)          (sum term (next a) next b))))</code></p>
<p></p>
<p>Notice that <code>sum</code> takes as its arguments the lower and upper bounds <code>a</code> and <code>b</code> together with the procedures <code>term</code> and <code>next</code>. We can use <code>sum</code> just as we would any procedure. For example, we can use it (along with a procedure <code>inc</code> that increments its argument by 1) to define <code>sum-cubes</code>:</p>
<p></p>
<p></p>
<p><code>(define (inc n) (+ n 1)) (define (sum-cubes a b)   (sum cube a inc b))</code></p>
<p></p>
<p>Using this, we can compute the sum of the cubes of the integers from 1 to 10:</p>
<p></p>
<p></p>
<p><code>(sum-cubes 1 10) 3025</code></p>
<p></p>
<p>With the aid of an identity procedure to compute the term, we can define <code>sum-integers</code> in terms of <code>sum</code>:</p>
<p></p>
<p></p>
<p><code>(define (identity x) x)  (define (sum-integers a b)   (sum identity a inc b))</code></p>
<p></p>
<p>Then we can add up the integers from 1 to 10:</p>
<p></p>
<p></p>
<p><code>(sum-integers 1 10) 55</code></p>
<p></p>
<p>We can also define <code>pi-sum</code> in the same way:<a href="#footnote_Temp_91"><sup>50</sup></a></p>
<p></p>
<p></p>
<p><code>(define (pi-sum a b)   (define (pi-term x)     (/ 1.0 (* x (+ x 2))))   (define (pi-next x)     (+ x 4))   (sum pi-term a pi-next b))</code></p>
<p></p>
<p>Using these procedures, we can compute an approximation to <img src="book-Z-G-D-9.gif" />:</p>
<p></p>
<p></p>
<p><code>(* 8 (pi-sum 1 1000)) 3.139592655589783</code></p>
<p></p>
<p></p>
<p>Once we have <code>sum</code>, we can use it as a building block in formulating further concepts. For instance, the definite integral of a function <em>f</em> between the limits <em>a</em> and <em>b</em> can be approximated numerically using the formula</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-28.gif" /></p>
<p>for small values of <em>d</em><em>x</em>. We can express this directly as a procedure:</p>
<p></p>
<p></p>
<p><code>(define (integral f a b dx)   (define (add-dx x) (+ x dx))   (* (sum f (+ a (/ dx 2.0)) add-dx b)      dx)) (integral cube 0 1 0.01) .24998750000000042 (integral cube 0 1 0.001) .249999875000001</code></p>
<p></p>
<p>(The exact value of the integral of <code>cube</code> between 0 and 1 is 1/4.)</p>
<p></p>
<p><strong>Exercise 1.29.</strong>  Simpson's Rule is a more accurate method of numerical integration than the method illustrated above. Using Simpson's Rule, the integral of a function <em>f</em> between <em>a</em> and <em>b</em> is approximated as</p>
<p></p>
<p><img src="ch1-Z-G-29.gif" /></p>
<p></p>
<p>where <em>h</em> = (<em>b</em> - <em>a</em>)/<em>n</em>, for some even integer <em>n</em>, and <em>y</em><sub><em>k</em></sub> = <em>f</em>(<em>a</em> + <em>k</em><em>h</em>). (Increasing <em>n</em> increases the accuracy of the approximation.) Define a procedure that takes as arguments <em>f</em>, <em>a</em>, <em>b</em>, and <em>n</em> and returns the value of the integral, computed using Simpson's Rule. Use your procedure to integrate <code>cube</code> between 0 and 1 (with <em>n</em> = 100 and <em>n</em> = 1000), and compare the results to those of the <code>integral</code> procedure shown above.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.30.</strong>  The <code>sum</code> procedure above generates a linear recursion. The procedure can be rewritten so that the sum is performed iteratively. Show how to do this by filling in the missing expressions in the following definition:</p>
<p></p>
<p></p>
<p><code>(define (sum term a next b)   (define (iter a result)     (if &lt;??&gt;         &lt;??&gt;         (iter &lt;??&gt; &lt;??&gt;)))   (iter &lt;??&gt; &lt;??&gt;))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 1.31.</strong>   <br />a.  The <code>sum</code> procedure is only the simplest of a vast number of similar abstractions that can be captured as higher-order procedures.<a href="#footnote_Temp_95"><sup>51</sup></a> Write an analogous procedure called <code>product</code> that returns the product of the values of a function at points over a given range. Show how to define <code>factorial</code> in terms of <code>product</code>. Also use <code>product</code> to compute approximations to <img src="book-Z-G-D-9.gif" /> using the formula<a href="#footnote_Temp_96"><sup>52</sup></a></p>
<p></p>
<p><img src="ch1-Z-G-30.gif" /></p>
<p></p>
<p>b.  If your <code>product</code> procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.32.</strong>  a. Show that <code>sum</code> and <code>product</code> (exercise <a href="#%_thm_1.31">1.31</a>) are both special cases of a still more general notion called <code>accumulate</code> that combines a collection of terms, using some general accumulation function:</p>
<p></p>
<p></p>
<p><code>(accumulate combiner null-value term a next b)</code></p>
<p></p>
<p><code>Accumulate</code> takes as arguments the same term and range specifications as <code>sum</code> and <code>product</code>, together with a <code>combiner</code> procedure (of two arguments) that specifies how the current term is to be combined with the accumulation of the preceding terms and a <code>null-value</code> that specifies what base value to use when the terms run out. Write <code>accumulate</code> and show how <code>sum</code> and <code>product</code> can both be defined as simple calls to <code>accumulate</code>.</p>
<p></p>
<p></p>
<p>b. If your <code>accumulate</code> procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.33.</strong>  You can obtain an even more general version of <code>accumulate</code> (exercise <a href="#%_thm_1.32">1.32</a>) by introducing the notion of a <em>filter</em> on the terms to be combined. That is, combine only those terms derived from values in the range that satisfy a specified condition. The resulting <code>filtered-accumulate</code> abstraction takes the same arguments as accumulate, together with an additional predicate of one argument that specifies the filter. Write <code>filtered-accumulate</code> as a procedure. Show how to express the following using <code>filtered-accumulate</code>:</p>
<p></p>
<p></p>
<p>a. the sum of the squares of the prime numbers in the interval <em>a</em> to <em>b</em> (assuming that you have a <code>prime?</code> predicate already written)</p>
<p></p>
<p></p>
<p>b. the product of all the positive integers less than <em>n</em> that are relatively prime to <em>n</em> (i.e., all positive integers <em>i</em> &lt; <em>n</em> such that <em>G</em><em>C</em><em>D</em>(<em>i</em>,<em>n</em>) = 1).</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.3.2">1.3.2  Constructing Procedures Using <code>Lambda</code></a></h3>
<p></p>
<p>In using <code>sum</code> as in section <a href="#%_sec_1.3.1">1.3.1</a>, it seems terribly awkward to have to define trivial procedures such as <code>pi-term</code> and <code>pi-next</code> just so we can use them as arguments to our higher-order procedure. Rather than define <code>pi-next</code> and <code>pi-term</code>, it would be more convenient to have a way to directly specify ``the procedure that returns its input incremented by 4'' and ``the procedure that returns the reciprocal of its input times its input plus 2.'' We can do this by introducing the special form <code>lambda</code>, which creates procedures. Using <code>lambda</code> we can describe what we want as</p>
<p></p>
<p></p>
<p><code>(lambda (x) (+ x 4))</code></p>
<p></p>
<p>and</p>
<p></p>
<p></p>
<p><code>(lambda (x) (/ 1.0 (* x (+ x 2))))</code></p>
<p></p>
<p>Then our <code>pi-sum</code> procedure can be expressed without defining any auxiliary procedures as</p>
<p></p>
<p></p>
<p><code>(define (pi-sum a b)   (sum (lambda (x) (/ 1.0 (* x (+ x 2))))        a        (lambda (x) (+ x 4))        b))</code></p>
<p></p>
<p></p>
<p>Again using <code>lambda</code>, we can write the <code>integral</code> procedure without having to define the auxiliary procedure <code>add-dx</code>:</p>
<p></p>
<p></p>
<p><code>(define (integral f a b dx)   (* (sum f           (+ a (/ dx 2.0))           (lambda (x) (+ x dx))           b)      dx))</code></p>
<p></p>
<p></p>
<p>In general, <code>lambda</code> is used to create procedures in the same way as <code>define</code>, except that no name is specified for the procedure:</p>
<p></p>
<p></p>
<p><code>(lambda (&lt;formal-parameters&gt;) &lt;body&gt;)</code></p>
<p></p>
<p>The resulting procedure is just as much a procedure as one that is created using <code>define</code>. The only difference is that it has not been associated with any name in the environment. In fact,</p>
<p></p>
<p></p>
<p><code>(define (plus4 x) (+ x 4))</code></p>
<p></p>
<p>is equivalent to</p>
<p></p>
<p></p>
<p><code>(define plus4 (lambda (x) (+ x 4)))</code></p>
<p></p>
<p>We can read a <code>lambda</code> expression as follows:</p>
<p></p>
<p><code>    (lambda             (x)             (+    x     4))                                                   the procedure   of an argument x</code>  that adds  <code>x</code> and 4<br /></p>
<p></p>
<p>Like any expression that has a procedure as its value, a <code>lambda</code> expression can be used as the operator in a combination such as</p>
<p></p>
<p></p>
<p><code>((lambda (x y z) (+ x y (square z))) 1 2 3) 12</code></p>
<p></p>
<p>or, more generally, in any context where we would normally use a procedure name.<a href="#footnote_Temp_99"><sup>53</sup></a></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_100">Using <code>let</code> to create local variables</a></h4>
<p>Another use of <code>lambda</code> is in creating local variables. We often need local variables in our procedures other than those that have been bound as formal parameters. For example, suppose we wish to compute the function</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-31.gif" /></p>
<p></p>
<p>which we could also express as</p>
<p></p>
<p><img src="ch1-Z-G-32.gif" /></p>
<p>In writing a procedure to compute <em>f</em>, we would like to include as local variables not only <em>x</em> and <em>y</em> but also the names of intermediate quantities like <em>a</em> and <em>b</em>. One way to accomplish this is to use an auxiliary procedure to bind the local variables:</p>
<p></p>
<p></p>
<p><code>(define (f x y)   (define (f-helper a b)     (+ (* x (square a))        (* y b)        (* a b)))   (f-helper (+ 1 (* x y))              (- 1 y)))</code></p>
<p></p>
<p></p>
<p>Of course, we could use a <code>lambda</code> expression to specify an anonymous procedure for binding our local variables. The body of <code>f</code> then becomes a single call to that procedure:</p>
<p></p>
<p></p>
<p><code>(define (f x y)   ((lambda (a b)      (+ (* x (square a))         (* y b)         (* a b)))    (+ 1 (* x y))    (- 1 y)))</code></p>
<p></p>
<p>This construct is so useful that there is a special form called <code>let</code> to make its use more convenient. Using <code>let</code>, the <code>f</code> procedure could be written as</p>
<p></p>
<p></p>
<p><code>(define (f x y)   (let ((a (+ 1 (* x y)))         (b (- 1 y)))     (+ (* x (square a))        (* y b)        (* a b))))</code></p>
<p></p>
<p>The general form of a <code>let</code> expression is</p>
<p></p>
<p></p>
<p><code>(let ((&lt;var1&gt; &lt;exp1&gt;)       (&lt;var2&gt; &lt;exp2&gt;)              (&lt;varn&gt; &lt;expn&gt;))    &lt;body&gt;)</code></p>
<p></p>
<p>which can be thought of as saying</p>
<p></p>
<table>
<tbody>
<tr class="odd">
<td align="left">let</td>
<td align="left">&lt;<em>var<sub>1</sub></em>&gt; have the value &lt;<em>exp<sub>1</sub></em>&gt; and</td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">&lt;<em>var<sub>2</sub></em>&gt; have the value &lt;<em>exp<sub>2</sub></em>&gt; and</td>
</tr>
<tr class="odd">
<td align="left"></td>
<td align="left"><img src="book-Z-G-D-18.gif" /></td>
</tr>
<tr class="even">
<td align="left"></td>
<td align="left">&lt;<em>var<sub><em>n</em></sub></em>&gt; have the value &lt;<em>exp<sub><em>n</em></sub></em>&gt;</td>
</tr>
<tr class="odd">
<td align="left">in</td>
<td align="left">&lt;<em>body</em>&gt;</td>
</tr>
</tbody>
</table>
<p>The first part of the <code>let</code> expression is a list of name-expression pairs. When the <code>let</code> is evaluated, each name is associated with the value of the corresponding expression. The body of the <code>let</code> is evaluated with these names bound as local variables. The way this happens is that the <code>let</code> expression is interpreted as an alternate syntax for</p>
<p></p>
<p></p>
<p><code>((lambda (&lt;var1&gt; ...</code>&lt;<em>var<sub><em>n</em></sub></em>&gt;)<br />     &lt;<em>body</em>&gt;)<br />  &lt;<em>exp<sub>1</sub></em>&gt;<br />  <img src="book-Z-G-D-18.gif" /><br />  &lt;<em>exp<sub><em>n</em></sub></em>&gt;)<br /></p>
<p></p>
<p>No new mechanism is required in the interpreter in order to provide local variables. A <code>let</code> expression is simply syntactic sugar for the underlying <code>lambda</code> application.</p>
<p>We can see from this equivalence that the scope of a variable specified by a <code>let</code> expression is the body of the <code>let</code>. This implies that:</p>
<p></p>
<p></p>
<ul>
<li><p><code>Let</code> allows one to bind variables as locally as possible to where they are to be used. For example, if the value of <code>x</code> is 5, the value of the expression</p>
<p></p>
<p></p>
<p><code>(+ (let ((x 3))      (+ x (* x 10)))    x)</code></p>
<p></p>
<p></p>
<p>is 38. Here, the <code>x</code> in the body of the <code>let</code> is 3, so the value of the <code>let</code> expression is 33. On the other hand, the <code>x</code> that is the second argument to the outermost <code>+</code> is still 5.</p></li>
<li><p>The variables' values are computed outside the <code>let</code>. This matters when the expressions that provide the values for the local variables depend upon variables having the same names as the local variables themselves. For example, if the value of <code>x</code> is 2, the expression</p>
<p></p>
<p></p>
<p><code>(let ((x 3)       (y (+ x 2)))   (* x y))</code></p>
<p></p>
<p>will have the value 12 because, inside the body of the <code>let</code>, <code>x</code> will be 3 and <code>y</code> will be 4 (which is the outer <code>x</code> plus 2).</p></li>
</ul>
<p></p>
<p>Sometimes we can use internal definitions to get the same effect as with <code>let</code>. For example, we could have defined the procedure <code>f</code> above as</p>
<p></p>
<p><code>(define (f x y)   (define a (+ 1 (* x y)))   (define b (- 1 y))   (+ (* x (square a))      (* y b)      (* a b)))</code></p>
<p></p>
<p>We prefer, however, to use <code>let</code> in situations like this and to use internal <code>define</code> only for internal procedures.<a href="#footnote_Temp_101"><sup>54</sup></a></p>
<p></p>
<p><strong>Exercise 1.34.</strong>  Suppose we define the procedure</p>
<p></p>
<p></p>
<p><code>(define (f g)   (g 2))</code></p>
<p></p>
<p>Then we have</p>
<p></p>
<p></p>
<p><code>(f square) 4  (f (lambda (z) (* z (+ z 1)))) 6</code></p>
<p></p>
<p>What happens if we (perversely) ask the interpreter to evaluate the combination <code>(f f)</code>? Explain.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.3.3">1.3.3  Procedures as General Methods</a></h3>
<p>We introduced compound procedures in section <a href="book-Z-H-10.html#%_sec_1.1.4">1.1.4</a> as a mechanism for abstracting patterns of numerical operations so as to make them independent of the particular numbers involved. With higher-order procedures, such as the <code>integral</code> procedure of section <a href="#%_sec_1.3.1">1.3.1</a>, we began to see a more powerful kind of abstraction: procedures used to express general methods of computation, independent of the particular functions involved. In this section we discuss two more elaborate examples -- general methods for finding zeros and fixed points of functions -- and show how these methods can be expressed directly as procedures.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_103">Finding roots of equations by the half-interval method</a></h4>
<p>The <em>half-interval method</em> is a simple but powerful technique for finding roots of an equation <em>f</em>(<em>x</em>) = 0, where <em>f</em> is a continuous function. The idea is that, if we are given points <em>a</em> and <em>b</em> such that <em>f</em>(<em>a</em>) &lt; 0 &lt; <em>f</em>(<em>b</em>), then <em>f</em> must have at least one zero between <em>a</em> and <em>b</em>. To locate a zero, let <em>x</em> be the average of <em>a</em> and <em>b</em> and compute <em>f</em>(<em>x</em>). If <em>f</em>(<em>x</em>) &gt; 0, then <em>f</em> must have a zero between <em>a</em> and <em>x</em>. If <em>f</em>(<em>x</em>) &lt; 0, then <em>f</em> must have a zero between <em>x</em> and <em>b</em>. Continuing in this way, we can identify smaller and smaller intervals on which <em>f</em> must have a zero. When we reach a point where the interval is small enough, the process stops. Since the interval of uncertainty is reduced by half at each step of the process, the number of steps required grows as <img src="book-Z-G-D-3.gif" />(<code>log</code>( <em>L</em>/<em>T</em>)), where <em>L</em> is the length of the original interval and <em>T</em> is the error tolerance (that is, the size of the interval we will consider ``small enough''). Here is a procedure that implements this strategy:</p>
<p></p>
<p></p>
<p><code>(define (search f neg-point pos-point)   (let ((midpoint (average neg-point pos-point)))     (if (close-enough? neg-point pos-point)         midpoint         (let ((test-value (f midpoint)))           (cond ((positive? test-value)                  (search f neg-point midpoint))                 ((negative? test-value)                  (search f midpoint pos-point))                 (else midpoint))))))</code></p>
<p></p>
<p></p>
<p>We assume that we are initially given the function <em>f</em> together with points at which its values are negative and positive. We first compute the midpoint of the two given points. Next we check to see if the given interval is small enough, and if so we simply return the midpoint as our answer. Otherwise, we compute as a test value the value of <em>f</em> at the midpoint. If the test value is positive, then we continue the process with a new interval running from the original negative point to the midpoint. If the test value is negative, we continue with the interval from the midpoint to the positive point. Finally, there is the possibility that the test value is 0, in which case the midpoint is itself the root we are searching for.</p>
<p>To test whether the endpoints are ``close enough'' we can use a procedure similar to the one used in section <a href="book-Z-H-10.html#%_sec_1.1.7">1.1.7</a> for computing square roots:<a href="#footnote_Temp_104"><sup>55</sup></a></p>
<p></p>
<p></p>
<p><code>(define (close-enough? x y)   (&lt; (abs (- x y)) 0.001))</code></p>
<p></p>
<p></p>
<p><code>Search</code> is awkward to use directly, because we can accidentally give it points at which <em>f</em>'s values do not have the required sign, in which case we get a wrong answer. Instead we will use <code>search</code> via the following procedure, which checks to see which of the endpoints has a negative function value and which has a positive value, and calls the <code>search</code> procedure accordingly. If the function has the same sign on the two given points, the half-interval method cannot be used, in which case the procedure signals an error.<a href="#footnote_Temp_105"><sup>56</sup></a></p>
<p></p>
<p></p>
<p><code>(define (half-interval-method f a b)   (let ((a-value (f a))         (b-value (f b)))     (cond ((and (negative? a-value) (positive? b-value))            (search f a b))           ((and (negative? b-value) (positive? a-value))            (search f b a))           (else            (error &quot;Values are not of opposite sign&quot; a b)))))</code></p>
<p></p>
<p></p>
<p>The following example uses the half-interval method to approximate <img src="book-Z-G-D-9.gif" /> as the root between 2 and 4 of <code>sin</code> <em>x</em> = 0:</p>
<p></p>
<p></p>
<p><code>(half-interval-method sin 2.0 4.0) 3.14111328125</code></p>
<p></p>
<p></p>
<p>Here is another example, using the half-interval method to search for a root of the equation <em>x</em><sup>3</sup> - 2<em>x</em> - 3 = 0 between 1 and 2:</p>
<p></p>
<p></p>
<p><code>(half-interval-method (lambda (x) (- (* x x x) (* 2 x) 3))                       1.0                       2.0) 1.89306640625</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_106">Finding fixed points of functions</a></h4>
<p>A number <em>x</em> is called a <em>fixed point</em> of a function <em>f</em> if <em>x</em> satisfies the equation <em>f</em>(<em>x</em>) = <em>x</em>. For some functions <em>f</em> we can locate a fixed point by beginning with an initial guess and applying <em>f</em> repeatedly,</p>
<p></p>
<p></p>
<p><img src="ch1-Z-G-33.gif" /></p>
<p></p>
<p>until the value does not change very much. Using this idea, we can devise a procedure <code>fixed-point</code> that takes as inputs a function and an initial guess and produces an approximation to a fixed point of the function. We apply the function repeatedly until we find two successive values whose difference is less than some prescribed tolerance:</p>
<p></p>
<p></p>
<p><code>(define tolerance 0.00001) (define (fixed-point f first-guess)   (define (close-enough? v1 v2)     (&lt; (abs (- v1 v2)) tolerance))   (define (try guess)     (let ((next (f guess)))       (if (close-enough? guess next)           next           (try next))))   (try first-guess))</code></p>
<p></p>
<p>For example, we can use this method to approximate the fixed point of the cosine function, starting with 1 as an initial approximation:<a href="#footnote_Temp_107"><sup>57</sup></a></p>
<p></p>
<p></p>
<p><code>(fixed-point cos 1.0) .7390822985224023</code></p>
<p></p>
<p>Similarly, we can find a solution to the equation <em>y</em> = <code>sin</code> <em>y</em> + <code>cos</code> <em>y</em>:</p>
<p></p>
<p></p>
<p><code>(fixed-point (lambda (y) (+ (sin y) (cos y)))              1.0) 1.2587315962971173</code></p>
<p></p>
<p></p>
<p>The fixed-point process is reminiscent of the process we used for finding square roots in section <a href="book-Z-H-10.html#%_sec_1.1.7">1.1.7</a>. Both are based on the idea of repeatedly improving a guess until the result satisfies some criterion. In fact, we can readily formulate the square-root computation as a fixed-point search. Computing the square root of some number <em>x</em> requires finding a <em>y</em> such that <em>y</em><sup>2</sup> = <em>x</em>. Putting this equation into the equivalent form <em>y</em> = <em>x</em>/<em>y</em>, we recognize that we are looking for a fixed point of the function<a href="#footnote_Temp_108"><sup>58</sup></a> <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>x</em>/<em>y</em>, and we can therefore try to compute square roots as</p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (fixed-point (lambda (y) (/ x y))                1.0))</code></p>
<p></p>
<p></p>
<p>Unfortunately, this fixed-point search does not converge. Consider an initial guess <em>y</em><sub>1</sub>. The next guess is <em>y</em><sub>2</sub> = <em>x</em>/<em>y</em><sub>1</sub> and the next guess is <em>y</em><sub>3</sub> = <em>x</em>/<em>y</em><sub>2</sub> = <em>x</em>/(<em>x</em>/<em>y</em><sub>1</sub>) = <em>y</em><sub>1</sub>. This results in an infinite loop in which the two guesses <em>y</em><sub>1</sub> and <em>y</em><sub>2</sub> repeat over and over, oscillating about the answer.</p>
<p>One way to control such oscillations is to prevent the guesses from changing so much. Since the answer is always between our guess <em>y</em> and <em>x</em>/<em>y</em>, we can make a new guess that is not as far from <em>y</em> as <em>x</em>/<em>y</em> by averaging <em>y</em> with <em>x</em>/<em>y</em>, so that the next guess after <em>y</em> is (1/2)(<em>y</em> + <em>x</em>/<em>y</em>) instead of <em>x</em>/<em>y</em>. The process of making such a sequence of guesses is simply the process of looking for a fixed point of <em>y</em> <img src="book-Z-G-D-17.gif" /> (1/2)(<em>y</em> + <em>x</em>/<em>y</em>):</p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (fixed-point (lambda (y) (average y (/ x y)))                1.0))</code></p>
<p></p>
<p>(Note that <em>y</em> = (1/2)(<em>y</em> + <em>x</em>/<em>y</em>) is a simple transformation of the equation <em>y</em> = <em>x</em>/<em>y</em>; to derive it, add <em>y</em> to both sides of the equation and divide by 2.)</p>
<p>With this modification, the square-root procedure works. In fact, if we unravel the definitions, we can see that the sequence of approximations to the square root generated here is precisely the same as the one generated by our original square-root procedure of section <a href="book-Z-H-10.html#%_sec_1.1.7">1.1.7</a>. This approach of averaging successive approximations to a solution, a technique we that we call <em>average damping</em>, often aids the convergence of fixed-point searches.</p>
<p></p>
<p><strong>Exercise 1.35.</strong>  Show that the golden ratio <img src="book-Z-G-D-11.gif" /> (section <a href="book-Z-H-11.html#%_sec_1.2.2">1.2.2</a>) is a fixed point of the transformation <em>x</em> <img src="book-Z-G-D-17.gif" /> 1 + 1/<em>x</em>, and use this fact to compute <img src="book-Z-G-D-11.gif" /> by means of the <code>fixed-point</code> procedure.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.36.</strong>  Modify <code>fixed-point</code> so that it prints the sequence of approximations it generates, using the <code>newline</code> and <code>display</code> primitives shown in exercise <a href="book-Z-H-11.html#%_thm_1.22">1.22</a>. Then find a solution to <em>x</em><sup><em>x</em></sup> = 1000 by finding a fixed point of <em>x</em> <img src="book-Z-G-D-17.gif" /> <code>log</code>(1000)/<code>log</code>(<em>x</em>). (Use Scheme's primitive <code>log</code> procedure, which computes natural logarithms.) Compare the number of steps this takes with and without average damping. (Note that you cannot start <code>fixed-point</code> with a guess of 1, as this would cause division by <code>log</code>(1) = 0.)</p>
<p></p>
<p></p>
<p><strong>Exercise 1.37.</strong>  a. An infinite <em>continued fraction</em> is an expression of the form</p>
<p></p>
<p><img src="ch1-Z-G-34.gif" /></p>
<p>As an example, one can show that the infinite continued fraction expansion with the <em>N</em><sub><em>i</em></sub> and the <em>D</em><sub><em>i</em></sub> all equal to 1 produces 1/<img src="book-Z-G-D-11.gif" />, where <img src="book-Z-G-D-11.gif" /> is the golden ratio (described in section <a href="book-Z-H-11.html#%_sec_1.2.2">1.2.2</a>). One way to approximate an infinite continued fraction is to truncate the expansion after a given number of terms. Such a truncation -- a so-called <em><em>k</em>-term finite continued fraction</em> -- has the form</p>
<p></p>
<p><img src="ch1-Z-G-35.gif" /></p>
<p>Suppose that <code>n</code> and <code>d</code> are procedures of one argument (the term index <em>i</em>) that return the <em>N</em><sub><em>i</em></sub> and <em>D</em><sub><em>i</em></sub> of the terms of the continued fraction. Define a procedure <code>cont-frac</code> such that evaluating <code>(cont-frac n d k)</code> computes the value of the <em>k</em>-term finite continued fraction. Check your procedure by approximating 1/<img src="book-Z-G-D-11.gif" /> using</p>
<p></p>
<p><code>(cont-frac (lambda (i) 1.0)            (lambda (i) 1.0)            k)</code></p>
<p></p>
<p>for successive values of <code>k</code>. How large must you make <code>k</code> in order to get an approximation that is accurate to 4 decimal places?</p>
<p></p>
<p></p>
<p>b. If your <code>cont-frac</code> procedure generates a recursive process, write one that generates an iterative process. If it generates an iterative process, write one that generates a recursive process.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.38.</strong>  In 1737, the Swiss mathematician Leonhard Euler published a memoir <em>De Fractionibus Continuis</em>, which included a continued fraction expansion for <em>e</em> - 2, where <em>e</em> is the base of the natural logarithms. In this fraction, the <em>N</em><sub><em>i</em></sub> are all 1, and the <em>D</em><sub><em>i</em></sub> are successively 1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8, <code>...</code>. Write a program that uses your <code>cont-frac</code> procedure from exercise <a href="#%_thm_1.37">1.37</a> to approximate <em>e</em>, based on Euler's expansion.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.39.</strong>  A continued fraction representation of the tangent function was published in 1770 by the German mathematician J.H. Lambert:</p>
<p></p>
<p><img src="ch1-Z-G-36.gif" /></p>
<p>where <em>x</em> is in radians. Define a procedure <code>(tan-cf x k)</code> that computes an approximation to the tangent function based on Lambert's formula. <code>K</code> specifies the number of terms to compute, as in exercise <a href="#%_thm_1.37">1.37</a>.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_1.3.4">1.3.4  Procedures as Returned Values</a></h3>
<p>The above examples demonstrate how the ability to pass procedures as arguments significantly enhances the expressive power of our programming language. We can achieve even more expressive power by creating procedures whose returned values are themselves procedures.</p>
<p>We can illustrate this idea by looking again at the fixed-point example described at the end of section <a href="#%_sec_1.3.3">1.3.3</a>. We formulated a new version of the square-root procedure as a fixed-point search, starting with the observation that <img src="book-Z-G-D-13.gif" /><em>x</em> is a fixed-point of the function <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>x</em>/<em>y</em>. Then we used average damping to make the approximations converge. Average damping is a useful general technique in itself. Namely, given a function <em>f</em>, we consider the function whose value at <em>x</em> is equal to the average of <em>x</em> and <em>f</em>(<em>x</em>).</p>
<p>We can express the idea of average damping by means of the following procedure:</p>
<p></p>
<p></p>
<p><code>(define (average-damp f)   (lambda (x) (average x (f x))))</code></p>
<p></p>
<p><code>Average-damp</code> is a procedure that takes as its argument a procedure <code>f</code> and returns as its value a procedure (produced by the <code>lambda</code>) that, when applied to a number <code>x</code>, produces the average of <code>x</code> and <code>(f x)</code>. For example, applying <code>average-damp</code> to the <code>square</code> procedure produces a procedure whose value at some number <em>x</em> is the average of <em>x</em> and <em>x</em><sup>2</sup>. Applying this resulting procedure to 10 returns the average of 10 and 100, or 55:<a href="#footnote_Temp_114"><sup>59</sup></a></p>
<p></p>
<p></p>
<p><code>((average-damp square) 10) 55</code></p>
<p></p>
<p></p>
<p>Using <code>average-damp</code>, we can reformulate the square-root procedure as follows:</p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (fixed-point (average-damp (lambda (y) (/ x y)))                1.0))</code></p>
<p></p>
<p>Notice how this formulation makes explicit the three ideas in the method: fixed-point search, average damping, and the function <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>x</em>/<em>y</em>. It is instructive to compare this formulation of the square-root method with the original version given in section <a href="book-Z-H-10.html#%_sec_1.1.7">1.1.7</a>. Bear in mind that these procedures express the same process, and notice how much clearer the idea becomes when we express the process in terms of these abstractions. In general, there are many ways to formulate a process as a procedure. Experienced programmers know how to choose procedural formulations that are particularly perspicuous, and where useful elements of the process are exposed as separate entities that can be reused in other applications. As a simple example of reuse, notice that the cube root of <em>x</em> is a fixed point of the function <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>x</em>/<em>y</em><sup>2</sup>, so we can immediately generalize our square-root procedure to one that extracts cube roots:<a href="#footnote_Temp_115"><sup>60</sup></a></p>
<p></p>
<p></p>
<p><code>(define (cube-root x)   (fixed-point (average-damp (lambda (y) (/ x (square y))))                1.0))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_116">Newton's method</a></h4>
<p>When we first introduced the square-root procedure, in section <a href="book-Z-H-10.html#%_sec_1.1.7">1.1.7</a>, we mentioned that this was a special case of <em>Newton's method</em>. If <em>x</em> <img src="book-Z-G-D-17.gif" /> <em>g</em>(<em>x</em>) is a differentiable function, then a solution of the equation <em>g</em>(<em>x</em>) = 0 is a fixed point of the function <em>x</em> <img src="book-Z-G-D-17.gif" /> <em>f</em>(<em>x</em>) where</p>
<p></p>
<p><img src="ch1-Z-G-37.gif" /></p>
<p>and <em>D</em><em>g</em>(<em>x</em>) is the derivative of <em>g</em> evaluated at <em>x</em>. Newton's method is the use of the fixed-point method we saw above to approximate a solution of the equation by finding a fixed point of the function <em>f</em>.<a href="#footnote_Temp_117"><sup>61</sup></a> For many functions <em>g</em> and for sufficiently good initial guesses for <em>x</em>, Newton's method converges very rapidly to a solution of <em>g</em>(<em>x</em>) = 0.<a href="#footnote_Temp_118"><sup>62</sup></a></p>
<p>In order to implement Newton's method as a procedure, we must first express the idea of derivative. Note that ``derivative,'' like average damping, is something that transforms a function into another function. For instance, the derivative of the function <em>x</em> <img src="book-Z-G-D-17.gif" /> <em>x</em><sup>3</sup> is the function <em>x</em> <img src="book-Z-G-D-17.gif" /> 3<em>x</em><sup>2</sup>. In general, if <em>g</em> is a function and <em>d</em><em>x</em> is a small number, then the derivative <em>D</em><em>g</em> of <em>g</em> is the function whose value at any number <em>x</em> is given (in the limit of small <em>d</em><em>x</em>) by</p>
<p></p>
<p><img src="ch1-Z-G-38.gif" /></p>
<p>Thus, we can express the idea of derivative (taking <em>d</em><em>x</em> to be, say, 0.00001) as the procedure</p>
<p></p>
<p></p>
<p><code>(define (deriv g)   (lambda (x)     (/ (- (g (+ x dx)) (g x))        dx)))</code></p>
<p></p>
<p>along with the definition</p>
<p></p>
<p></p>
<p><code>(define dx 0.00001)</code></p>
<p></p>
<p></p>
<p>Like <code>average-damp</code>, <code>deriv</code> is a procedure that takes a procedure as argument and returns a procedure as value. For example, to approximate the derivative of <em>x</em> <img src="book-Z-G-D-17.gif" /> <em>x</em><sup>3</sup> at 5 (whose exact value is 75) we can evaluate</p>
<p></p>
<p></p>
<p><code>(define (cube x) (* x x x)) ((deriv cube) 5) 75.00014999664018</code></p>
<p></p>
<p></p>
<p>With the aid of <code>deriv</code>, we can express Newton's method as a fixed-point process:</p>
<p></p>
<p></p>
<p><code>(define (newton-transform g)   (lambda (x)     (- x (/ (g x) ((deriv g) x))))) (define (newtons-method g guess)   (fixed-point (newton-transform g) guess))</code></p>
<p></p>
<p>The <code>newton-transform</code> procedure expresses the formula at the beginning of this section, and <code>newtons-method</code> is readily defined in terms of this. It takes as arguments a procedure that computes the function for which we want to find a zero, together with an initial guess. For instance, to find the square root of <em>x</em>, we can use Newton's method to find a zero of the function <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>y</em><sup>2</sup> - <em>x</em> starting with an initial guess of 1.<a href="#footnote_Temp_119"><sup>63</sup></a> This provides yet another form of the square-root procedure:</p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (newtons-method (lambda (y) (- (square y) x))                   1.0))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_120">Abstractions and first-class procedures</a></h4>
<p>We've seen two ways to express the square-root computation as an instance of a more general method, once as a fixed-point search and once using Newton's method. Since Newton's method was itself expressed as a fixed-point process, we actually saw two ways to compute square roots as fixed points. Each method begins with a function and finds a fixed point of some transformation of the function. We can express this general idea itself as a procedure:</p>
<p></p>
<p></p>
<p><code>(define (fixed-point-of-transform g transform guess)   (fixed-point (transform g) guess))</code></p>
<p></p>
<p>This very general procedure takes as its arguments a procedure <code>g</code> that computes some function, a procedure that transforms <code>g</code>, and an initial guess. The returned result is a fixed point of the transformed function.</p>
<p>Using this abstraction, we can recast the first square-root computation from this section (where we look for a fixed point of the average-damped version of <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>x</em>/<em>y</em>) as an instance of this general method:</p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (fixed-point-of-transform (lambda (y) (/ x y))                             average-damp                             1.0))</code></p>
<p></p>
<p>Similarly, we can express the second square-root computation from this section (an instance of Newton's method that finds a fixed point of the Newton transform of <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>y</em><sup>2</sup> - <em>x</em>) as</p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (fixed-point-of-transform (lambda (y) (- (square y) x))                             newton-transform                             1.0))</code></p>
<p></p>
<p></p>
<p>We began section <a href="#%_sec_1.3">1.3</a> with the observation that compound procedures are a crucial abstraction mechanism, because they permit us to express general methods of computing as explicit elements in our programming language. Now we've seen how higher-order procedures permit us to manipulate these general methods to create further abstractions.</p>
<p>As programmers, we should be alert to opportunities to identify the underlying abstractions in our programs and to build upon them and generalize them to create more powerful abstractions. This is not to say that one should always write programs in the most abstract way possible; expert programmers know how to choose the level of abstraction appropriate to their task. But it is important to be able to think in terms of these abstractions, so that we can be ready to apply them in new contexts. The significance of higher-order procedures is that they enable us to represent these abstractions explicitly as elements in our programming language, so that they can be handled just like other computational elements.</p>
<p>In general, programming languages impose restrictions on the ways in which computational elements can be manipulated. Elements with the fewest restrictions are said to have <em>first-class</em> status. Some of the ``rights and privileges'' of first-class elements are:<a href="#footnote_Temp_121"><sup>64</sup></a></p>
<p></p>
<ul>
<li>They may be named by variables.</li>
<li>They may be passed as arguments to procedures.</li>
<li>They may be returned as the results of procedures.</li>
<li>They may be included in data structures.<a href="#footnote_Temp_122"><sup>65</sup></a></li>
</ul>
<p>Lisp, unlike other common programming languages, awards procedures full first-class status. This poses challenges for efficient implementation, but the resulting gain in expressive power is enormous.<a href="#footnote_Temp_123"><sup>66</sup></a></p>
<p></p>
<p><strong>Exercise 1.40.</strong>  Define a procedure <code>cubic</code> that can be used together with the <code>newtons-method</code> procedure in expressions of the form</p>
<p></p>
<p></p>
<p><code>(newtons-method (cubic a b c) 1)</code></p>
<p></p>
<p>to approximate zeros of the cubic <em>x</em><sup>3</sup> + <em>a</em><em>x</em><sup>2</sup> + <em>b</em><em>x</em> + <em>c</em>.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.41.</strong>  Define a procedure <code>double</code> that takes a procedure of one argument as argument and returns a procedure that applies the original procedure twice. For example, if <code>inc</code> is a procedure that adds 1 to its argument, then <code>(double inc)</code> should be a procedure that adds 2. What value is returned by</p>
<p></p>
<p></p>
<p><code>(((double (double double)) inc) 5)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 1.42.</strong>  Let <em>f</em> and <em>g</em> be two one-argument functions. The <em>composition</em> <em>f</em> after <em>g</em> is defined to be the function <em>x</em> <img src="book-Z-G-D-17.gif" /> <em>f</em>(<em>g</em>(<em>x</em>)). Define a procedure <code>compose</code> that implements composition. For example, if <code>inc</code> is a procedure that adds 1 to its argument,</p>
<p></p>
<p><code>((compose square inc) 6) 49</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 1.43.</strong>  If <em>f</em> is a numerical function and <em>n</em> is a positive integer, then we can form the <em>n</em>th repeated application of <em>f</em>, which is defined to be the function whose value at <em>x</em> is <em>f</em>(<em>f</em>(<code>...</code>(<em>f</em>(<em>x</em>))<code>...</code>)). For example, if <em>f</em> is the function <em>x</em> <img src="book-Z-G-D-17.gif" /> <em>x</em> + 1, then the <em>n</em>th repeated application of <em>f</em> is the function <em>x</em> <img src="book-Z-G-D-17.gif" /> <em>x</em> + <em>n</em>. If <em>f</em> is the operation of squaring a number, then the <em>n</em>th repeated application of <em>f</em> is the function that raises its argument to the 2<sup><em>n</em></sup>th power. Write a procedure that takes as inputs a procedure that computes <em>f</em> and a positive integer <em>n</em> and returns the procedure that computes the <em>n</em>th repeated application of <em>f</em>. Your procedure should be able to be used as follows:</p>
<p></p>
<p></p>
<p><code>((repeated square 2) 5) 625</code></p>
<p></p>
<p>Hint: You may find it convenient to use <code>compose</code> from exercise <a href="#%_thm_1.42">1.42</a>.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.44.</strong>  The idea of <em>smoothing</em> a function is an important concept in signal processing. If <em>f</em> is a function and <em>d</em><em>x</em> is some small number, then the smoothed version of <em>f</em> is the function whose value at a point <em>x</em> is the average of <em>f</em>(<em>x</em> - <em>d</em><em>x</em>), <em>f</em>(<em>x</em>), and <em>f</em>(<em>x</em> + <em>d</em><em>x</em>). Write a procedure <code>smooth</code> that takes as input a procedure that computes <em>f</em> and returns a procedure that computes the smoothed <em>f</em>. It is sometimes valuable to repeatedly smooth a function (that is, smooth the smoothed function, and so on) to obtained the <em><em>n</em>-fold smoothed function</em>. Show how to generate the <em>n</em>-fold smoothed function of any given function using <code>smooth</code> and <code>repeated</code> from exercise <a href="#%_thm_1.43">1.43</a>.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.45.</strong>  We saw in section <a href="#%_sec_1.3.3">1.3.3</a> that attempting to compute square roots by naively finding a fixed point of <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>x</em>/<em>y</em> does not converge, and that this can be fixed by average damping. The same method works for finding cube roots as fixed points of the average-damped <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>x</em>/<em>y</em><sup>2</sup>. Unfortunately, the process does not work for fourth roots -- a single average damp is not enough to make a fixed-point search for <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>x</em>/<em>y</em><sup>3</sup> converge. On the other hand, if we average damp twice (i.e., use the average damp of the average damp of <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>x</em>/<em>y</em><sup>3</sup>) the fixed-point search does converge. Do some experiments to determine how many average damps are required to compute <em>n</em>th roots as a fixed-point search based upon repeated average damping of <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>x</em>/<em>y</em><sup><em>n</em>-1</sup>. Use this to implement a simple procedure for computing <em>n</em>th roots using <code>fixed-point</code>, <code>average-damp</code>, and the <code>repeated</code> procedure of exercise <a href="#%_thm_1.43">1.43</a>. Assume that any arithmetic operations you need are available as primitives.</p>
<p></p>
<p></p>
<p><strong>Exercise 1.46.</strong>  Several of the numerical methods described in this chapter are instances of an extremely general computational strategy known as <em>iterative improvement</em>. Iterative improvement says that, to compute something, we start with an initial guess for the answer, test if the guess is good enough, and otherwise improve the guess and continue the process using the improved guess as the new guess. Write a procedure <code>iterative-improve</code> that takes two procedures as arguments: a method for telling whether a guess is good enough and a method for improving a guess. <code>Iterative-improve</code> should return as its value a procedure that takes a guess as argument and keeps improving the guess until it is good enough. Rewrite the <code>sqrt</code> procedure of section <a href="book-Z-H-10.html#%_sec_1.1.7">1.1.7</a> and the <code>fixed-point</code> procedure of section <a href="#%_sec_1.3.3">1.3.3</a> in terms of <code>iterative-improve</code>.</p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_90"><sup>49</sup></a> This series, usually written in the equivalent form (<img src="book-Z-G-D-9.gif" />/4) = 1 - (1/3) + (1/5) - (1/7) + <code>···</code>, is due to Leibniz. We'll see how to use this as the basis for some fancy numerical tricks in section <a href="book-Z-H-24.html#%_sec_3.5.3">3.5.3</a>.</p>
<p><a href="#call_footnote_Temp_91"><sup>50</sup></a> Notice that we have used block structure (section <a href="book-Z-H-10.html#%_sec_1.1.8">1.1.8</a>) to embed the definitions of <code>pi-next</code> and <code>pi-term</code> within <code>pi-sum</code>, since these procedures are unlikely to be useful for any other purpose. We will see how to get rid of them altogether in section <a href="#%_sec_1.3.2">1.3.2</a>.</p>
<p><a href="#call_footnote_Temp_95"><sup>51</sup></a> The intent of exercises <a href="#%_thm_1.31">1.31</a>-<a href="#%_thm_1.33">1.33</a> is to demonstrate the expressive power that is attained by using an appropriate abstraction to consolidate many seemingly disparate operations. However, though accumulation and filtering are elegant ideas, our hands are somewhat tied in using them at this point since we do not yet have data structures to provide suitable means of combination for these abstractions. We will return to these ideas in section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a> when we show how to use <em>sequences</em> as interfaces for combining filters and accumulators to build even more powerful abstractions. We will see there how these methods really come into their own as a powerful and elegant approach to designing programs.</p>
<p><a href="#call_footnote_Temp_96"><sup>52</sup></a> This formula was discovered by the seventeenth-century English mathematician John Wallis.</p>
<p><a href="#call_footnote_Temp_99"><sup>53</sup></a> It would be clearer and less intimidating to people learning Lisp if a name more obvious than <code>lambda</code>, such as <code>make-procedure</code>, were used. But the convention is firmly entrenched. The notation is adopted from the <img src="book-Z-G-D-6.gif" /> calculus, a mathematical formalism introduced by the mathematical logician Alonzo Church (1941). Church developed the <img src="book-Z-G-D-6.gif" /> calculus to provide a rigorous foundation for studying the notions of function and function application. The <img src="book-Z-G-D-6.gif" /> calculus has become a basic tool for mathematical investigations of the semantics of programming languages.</p>
<p><a href="#call_footnote_Temp_101"><sup>54</sup></a> Understanding internal definitions well enough to be sure a program means what we intend it to mean requires a more elaborate model of the evaluation process than we have presented in this chapter. The subtleties do not arise with internal definitions of procedures, however. We will return to this issue in section <a href="book-Z-H-26.html#%_sec_4.1.6">4.1.6</a>, after we learn more about evaluation.</p>
<p><a href="#call_footnote_Temp_104"><sup>55</sup></a> We have used 0.001 as a representative ``small'' number to indicate a tolerance for the acceptable error in a calculation. The appropriate tolerance for a real calculation depends upon the problem to be solved and the limitations of the computer and the algorithm. This is often a very subtle consideration, requiring help from a numerical analyst or some other kind of magician.</p>
<p><a href="#call_footnote_Temp_105"><sup>56</sup></a> This can be accomplished using <code>error</code>, which takes as arguments a number of items that are printed as error messages.</p>
<p><a href="#call_footnote_Temp_107"><sup>57</sup></a> Try this during a boring lecture: Set your calculator to radians mode and then repeatedly press the <code>cos</code> button until you obtain the fixed point.</p>
<p><a href="#call_footnote_Temp_108"><sup>58</sup></a> <img src="book-Z-G-D-17.gif" /> (pronounced ``maps to'') is the mathematician's way of writing <code>lambda</code>. <em>y</em> <img src="book-Z-G-D-17.gif" /> <em>x</em>/<em>y</em> means <code>(lambda(y) (/ x y))</code>, that is, the function whose value at <em>y</em> is <em>x</em>/<em>y</em>.</p>
<p><a href="#call_footnote_Temp_114"><sup>59</sup></a> Observe that this is a combination whose operator is itself a combination. Exercise <a href="book-Z-H-10.html#%_thm_1.4">1.4</a> already demonstrated the ability to form such combinations, but that was only a toy example. Here we begin to see the real need for such combinations -- when applying a procedure that is obtained as the value returned by a higher-order procedure.</p>
<p><a href="#call_footnote_Temp_115"><sup>60</sup></a> See exercise <a href="#%_thm_1.45">1.45</a> for a further generalization.</p>
<p><a href="#call_footnote_Temp_117"><sup>61</sup></a> Elementary calculus books usually describe Newton's method in terms of the sequence of approximations <em>x</em><sub><em>n</em>+1</sub> = <em>x</em><sub><em>n</em></sub> - <em>g</em>(<em>x</em><sub><em>n</em></sub>)/<em>D</em><em>g</em>(<em>x</em><sub><em>n</em></sub>). Having language for talking about processes and using the idea of fixed points simplifies the description of the method.</p>
<p><a href="#call_footnote_Temp_118"><sup>62</sup></a> Newton's method does not always converge to an answer, but it can be shown that in favorable cases each iteration doubles the number-of-digits accuracy of the approximation to the solution. In such cases, Newton's method will converge much more rapidly than the half-interval method.</p>
<p><a href="#call_footnote_Temp_119"><sup>63</sup></a> For finding square roots, Newton's method converges rapidly to the correct solution from any starting point.</p>
<p><a href="#call_footnote_Temp_121"><sup>64</sup></a> The notion of first-class status of programming-language elements is due to the British computer scientist Christopher Strachey (1916-1975).</p>
<p><a href="#call_footnote_Temp_122"><sup>65</sup></a> We'll see examples of this after we introduce data structures in chapter 2.</p>
<p><a href="#call_footnote_Temp_123"><sup>66</sup></a> The major implementation cost of first-class procedures is that allowing procedures to be returned as values requires reserving storage for a procedure's free variables even while the procedure is not executing. In the Scheme implementation we will study in section <a href="book-Z-H-26.html#%_sec_4.1">4.1</a>, these variables are stored in the procedure's environment.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-11.html">previous</a>, <a href="book-Z-H-13.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-12.html">previous</a>, <a href="book-Z-H-14.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h1 class="chapter"></h1>
<p><a href="book-Z-H-4.html#%_toc_%_chap_2">Chapter 2</a></p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_2">Building Abstractions with Data</a></p>
<p></p>
<p></p>
<table>
<col width="100%" />
<tbody>
<tr class="odd">
<td align="left"><p>We now come to the decisive step of mathematical abstraction: we forget about what the symbols stand for. <code>...</code>[The mathematician] need not be idle; there are many operations which he may carry out with these symbols, without ever having to look at the things they stand for.</p>
<p>Hermann Weyl, <em>The Mathematical Way of Thinking</em></p></td>
</tr>
</tbody>
</table>
<p></p>
<p>We concentrated in chapter 1 on computational processes and on the role of procedures in program design. We saw how to use primitive data (numbers) and primitive operations (arithmetic operations), how to combine procedures to form compound procedures through composition, conditionals, and the use of parameters, and how to abstract procedures by using <code>define</code>. We saw that a procedure can be regarded as a pattern for the local evolution of a process, and we classified, reasoned about, and performed simple algorithmic analyses of some common patterns for processes as embodied in procedures. We also saw that higher-order procedures enhance the power of our language by enabling us to manipulate, and thereby to reason in terms of, general methods of computation. This is much of the essence of programming.</p>
<p>In this chapter we are going to look at more complex data. All the procedures in chapter 1 operate on simple numerical data, and simple data are not sufficient for many of the problems we wish to address using computation. Programs are typically designed to model complex phenomena, and more often than not one must construct computational objects that have several parts in order to model real-world phenomena that have several aspects. Thus, whereas our focus in chapter 1 was on building abstractions by combining procedures to form compound procedures, we turn in this chapter to another key aspect of any programming language: the means it provides for building abstractions by combining data objects to form <em>compound data</em>.</p>
<p>Why do we want compound data in a programming language? For the same reasons that we want compound procedures: to elevate the conceptual level at which we can design our programs, to increase the modularity of our designs, and to enhance the expressive power of our language. Just as the ability to define procedures enables us to deal with processes at a higher conceptual level than that of the primitive operations of the language, the ability to construct compound data objects enables us to deal with data at a higher conceptual level than that of the primitive data objects of the language.</p>
<p>Consider the task of designing a system to perform arithmetic with rational numbers. We could imagine an operation <code>add-rat</code> that takes two rational numbers and produces their sum. In terms of simple data, a rational number can be thought of as two integers: a numerator and a denominator. Thus, we could design a program in which each rational number would be represented by two integers (a numerator and a denominator) and where <code>add-rat</code> would be implemented by two procedures (one producing the numerator of the sum and one producing the denominator). But this would be awkward, because we would then need to explicitly keep track of which numerators corresponded to which denominators. In a system intended to perform many operations on many rational numbers, such bookkeeping details would clutter the programs substantially, to say nothing of what they would do to our minds. It would be much better if we could ``glue together'' a numerator and denominator to form a pair -- a <em>compound data object</em> -- that our programs could manipulate in a way that would be consistent with regarding a rational number as a single conceptual unit.</p>
<p>The use of compound data also enables us to increase the modularity of our programs. If we can manipulate rational numbers directly as objects in their own right, then we can separate the part of our program that deals with rational numbers per se from the details of how rational numbers may be represented as pairs of integers. The general technique of isolating the parts of a program that deal with how data objects are represented from the parts of a program that deal with how data objects are used is a powerful design methodology called <em>data abstraction</em>. We will see how data abstraction makes programs much easier to design, maintain, and modify.</p>
<p>The use of compound data leads to a real increase in the expressive power of our programming language. Consider the idea of forming a ``linear combination'' <em>a</em><em>x</em> + <em>b</em><em>y</em>. We might like to write a procedure that would accept <em>a</em>, <em>b</em>, <em>x</em>, and <em>y</em> as arguments and return the value of <em>a</em><em>x</em> + <em>b</em><em>y</em>. This presents no difficulty if the arguments are to be numbers, because we can readily define the procedure</p>
<p></p>
<p></p>
<p><code>(define (linear-combination a b x y)    (+ (* a x) (* b y)))</code></p>
<p></p>
<p>But suppose we are not concerned only with numbers. Suppose we would like to express, in procedural terms, the idea that one can form linear combinations whenever addition and multiplication are defined -- for rational numbers, complex numbers, polynomials, or whatever. We could express this as a procedure of the form</p>
<p></p>
<p></p>
<p><code>(define (linear-combination a b x y)        (add (mul a x) (mul b y))) </code></p>
<p></p>
<p>where <code>add</code> and <code>mul</code> are not the primitive procedures <code>+</code> and <code>*</code> but rather more complex things that will perform the appropriate operations for whatever kinds of data we pass in as the arguments <code>a</code>, <code>b</code>, <code>x</code>, and <code>y</code>. The key point is that the only thing <code>linear-combination</code> should need to know about <code>a</code>, <code>b</code>, <code>x</code>, and <code>y</code> is that the procedures <code>add</code> and <code>mul</code> will perform the appropriate manipulations. From the perspective of the procedure <code>linear-combination</code>, it is irrelevant what <code>a</code>, <code>b</code>, <code>x</code>, and <code>y</code> are and even more irrelevant how they might happen to be represented in terms of more primitive data. This same example shows why it is important that our programming language provide the ability to manipulate compound objects directly: Without this, there is no way for a procedure such as <code>linear-combination</code> to pass its arguments along to <code>add</code> and <code>mul</code> without having to know their detailed structure.<a href="#footnote_Temp_131"><sup>1</sup></a> We begin this chapter by implementing the rational-number arithmetic system mentioned above. This will form the background for our discussion of compound data and data abstraction. As with compound procedures, the main issue to be addressed is that of abstraction as a technique for coping with complexity, and we will see how data abstraction enables us to erect suitable <em>abstraction barriers</em> between different parts of a program.</p>
<p>We will see that the key to forming compound data is that a programming language should provide some kind of ``glue'' so that data objects can be combined to form more complex data objects. There are many possible kinds of glue. Indeed, we will discover how to form compound data using no special ``data'' operations at all, only procedures. This will further blur the distinction between ``procedure'' and ``data,'' which was already becoming tenuous toward the end of chapter 1. We will also explore some conventional techniques for representing sequences and trees. One key idea in dealing with compound data is the notion of <em>closure</em> -- that the glue we use for combining data objects should allow us to combine not only primitive data objects, but compound data objects as well. Another key idea is that compound data objects can serve as <em>conventional interfaces</em> for combining program modules in mix-and-match ways. We illustrate some of these ideas by presenting a simple graphics language that exploits closure.</p>
<p>We will then augment the representational power of our language by introducing <em>symbolic expressions</em> -- data whose elementary parts can be arbitrary symbols rather than only numbers. We explore various alternatives for representing sets of objects. We will find that, just as a given numerical function can be computed by many different computational processes, there are many ways in which a given data structure can be represented in terms of simpler objects, and the choice of representation can have significant impact on the time and space requirements of processes that manipulate the data. We will investigate these ideas in the context of symbolic differentiation, the representation of sets, and the encoding of information.</p>
<p>Next we will take up the problem of working with data that may be represented differently by different parts of a program. This leads to the need to implement <em>generic operations</em>, which must handle many different types of data. Maintaining modularity in the presence of generic operations requires more powerful abstraction barriers than can be erected with simple data abstraction alone. In particular, we introduce <em>data-directed programming</em> as a technique that allows individual data representations to be designed in isolation and then combined <em>additively</em> (i.e., without modification). To illustrate the power of this approach to system design, we close the chapter by applying what we have learned to the implementation of a package for performing symbolic arithmetic on polynomials, in which the coefficients of the polynomials can be integers, rational numbers, complex numbers, and even other polynomials.</p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_131"><sup>1</sup></a> The ability to directly manipulate procedures provides an analogous increase in the expressive power of a programming language. For example, in section <a href="book-Z-H-12.html#%_sec_1.3.1">1.3.1</a> we introduced the <code>sum</code> procedure, which takes a procedure <code>term</code> as an argument and computes the sum of the values of <code>term</code> over some specified interval. In order to define <code>sum</code>, it is crucial that we be able to speak of a procedure such as <code>term</code> as an entity in its own right, without regard for how <code>term</code> might be expressed with more primitive operations. Indeed, if we did not have the notion of ``a procedure,'' it is doubtful that we would ever even think of the possibility of defining an operation such as <code>sum</code>. Moreover, insofar as performing the summation is concerned, the details of how <code>term</code> may be constructed from more primitive operations are irrelevant.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-12.html">previous</a>, <a href="book-Z-H-14.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-13.html">previous</a>, <a href="book-Z-H-15.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_2.1">2.1  Introduction to Data Abstraction</a></h2>
<p>In section <a href="book-Z-H-10.html#%_sec_1.1.8">1.1.8</a>, we noted that a procedure used as an element in creating a more complex procedure could be regarded not only as a collection of particular operations but also as a procedural abstraction. That is, the details of how the procedure was implemented could be suppressed, and the particular procedure itself could be replaced by any other procedure with the same overall behavior. In other words, we could make an abstraction that would separate the way the procedure would be used from the details of how the procedure would be implemented in terms of more primitive procedures. The analogous notion for compound data is called <em>data abstraction</em>. Data abstraction is a methodology that enables us to isolate how a compound data object is used from the details of how it is constructed from more primitive data objects.</p>
<p>The basic idea of data abstraction is to structure the programs that are to use compound data objects so that they operate on ``abstract data.'' That is, our programs should use data in such a way as to make no assumptions about the data that are not strictly necessary for performing the task at hand. At the same time, a ``concrete'' data representation is defined independent of the programs that use the data. The interface between these two parts of our system will be a set of procedures, called <em>selectors</em> and <em>constructors</em>, that implement the abstract data in terms of the concrete representation. To illustrate this technique, we will consider how to design a set of procedures for manipulating rational numbers.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.1.1">2.1.1  Example: Arithmetic Operations for Rational Numbers</a></h3>
<p></p>
<p>Suppose we want to do arithmetic with rational numbers. We want to be able to add, subtract, multiply, and divide them and to test whether two rational numbers are equal.</p>
<p>Let us begin by assuming that we already have a way of constructing a rational number from a numerator and a denominator. We also assume that, given a rational number, we have a way of extracting (or selecting) its numerator and its denominator. Let us further assume that the constructor and selectors are available as procedures:</p>
<p></p>
<p></p>
<ul>
<li><code>(make-rat &lt;n&gt; &lt;d&gt;)</code> returns the rational number whose numerator is the integer <code>&lt;n&gt;</code> and whose denominator is the integer <code>&lt;d&gt;</code>.</li>
<li><code>(numer &lt;x&gt;)</code> returns the numerator of the rational number <code>&lt;x&gt;</code>.</li>
<li><code>(denom &lt;x&gt;)</code> returns the denominator of the rational number <code>&lt;x&gt;</code>.</li>
</ul>
<p></p>
<p>We are using here a powerful strategy of synthesis: <em>wishful thinking</em>. We haven't yet said how a rational number is represented, or how the procedures <code>numer</code>, <code>denom</code>, and <code>make-rat</code> should be implemented. Even so, if we did have these three procedures, we could then add, subtract, multiply, divide, and test equality by using the following relations:</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-1.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-2.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-3.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-4.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-5.gif" /></p>
<p></p>
<p>We can express these rules as procedures:</p>
<p></p>
<p></p>
<p><code>(define (add-rat x y)   (make-rat (+ (* (numer x) (denom y))                (* (numer y) (denom x)))             (* (denom x) (denom y)))) (define (sub-rat x y)   (make-rat (- (* (numer x) (denom y))                (* (numer y) (denom x)))             (* (denom x) (denom y)))) (define (mul-rat x y)   (make-rat (* (numer x) (numer y))             (* (denom x) (denom y)))) (define (div-rat x y)   (make-rat (* (numer x) (denom y))             (* (denom x) (numer y)))) (define (equal-rat? x y)   (= (* (numer x) (denom y))      (* (numer y) (denom x))))</code></p>
<p></p>
<p></p>
<p>Now we have the operations on rational numbers defined in terms of the selector and constructor procedures <code>numer</code>, <code>denom</code>, and <code>make-rat</code>. But we haven't yet defined these. What we need is some way to glue together a numerator and a denominator to form a rational number.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_132">Pairs</a></h4>
<p>To enable us to implement the concrete level of our data abstraction, our language provides a compound structure called a <em>pair</em>, which can be constructed with the primitive procedure <code>cons</code>. This procedure takes two arguments and returns a compound data object that contains the two arguments as parts. Given a pair, we can extract the parts using the primitive procedures <code>car</code> and <code>cdr</code>.<a href="#footnote_Temp_133"><sup>2</sup></a> Thus, we can use <code>cons</code>, <code>car</code>, and <code>cdr</code> as follows:</p>
<p></p>
<p></p>
<p><code>(define x (cons 1 2))  (car x) 1  (cdr x) 2</code></p>
<p></p>
<p>Notice that a pair is a data object that can be given a name and manipulated, just like a primitive data object. Moreover, <code>cons</code> can be used to form pairs whose elements are pairs, and so on:</p>
<p></p>
<p></p>
<p><code>(define x (cons 1 2))  (define y (cons 3 4))  (define z (cons x y))  (car (car z)) 1  (car (cdr z)) 3</code></p>
<p></p>
<p>In section <a href="book-Z-H-15.html#%_sec_2.2">2.2</a> we will see how this ability to combine pairs means that pairs can be used as general-purpose building blocks to create all sorts of complex data structures. The single compound-data primitive <em>pair</em>, implemented by the procedures <code>cons</code>, <code>car</code>, and <code>cdr</code>, is the only glue we need. Data objects constructed from pairs are called <em>list-structured</em> data.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_134">Representing rational numbers</a></h4>
<p>Pairs offer a natural way to complete the rational-number system. Simply represent a rational number as a pair of two integers: a numerator and a denominator. Then <code>make-rat</code>, <code>numer</code>, and <code>denom</code> are readily implemented as follows:<a href="#footnote_Temp_135"><sup>3</sup></a></p>
<p></p>
<p></p>
<p><code>(define (make-rat n d) (cons n d))  (define (numer x) (car x))  (define (denom x) (cdr x))</code></p>
<p></p>
<p>Also, in order to display the results of our computations, we can print rational numbers by printing the numerator, a slash, and the denominator:<a href="#footnote_Temp_136"><sup>4</sup></a></p>
<p></p>
<p></p>
<p><code>(define (print-rat x)   (newline)   (display (numer x))   (display &quot;/&quot;)   (display (denom x)))</code></p>
<p></p>
<p>Now we can try our rational-number procedures:</p>
<p></p>
<p></p>
<p><code>(define one-half (make-rat 1 2))  (print-rat one-half) 1/2  (define one-third (make-rat 1 3)) (print-rat (add-rat one-half one-third)) 5/6  (print-rat (mul-rat one-half one-third)) 1/6  (print-rat (add-rat one-third one-third)) 6/9</code></p>
<p></p>
<p></p>
<p>As the final example shows, our rational-number implementation does not reduce rational numbers to lowest terms. We can remedy this by changing <code>make-rat</code>. If we have a <code>gcd</code> procedure like the one in section <a href="book-Z-H-11.html#%_sec_1.2.5">1.2.5</a> that produces the greatest common divisor of two integers, we can use <code>gcd</code> to reduce the numerator and the denominator to lowest terms before constructing the pair:</p>
<p></p>
<p></p>
<p><code>(define (make-rat n d)   (let ((g (gcd n d)))     (cons (/ n g) (/ d g))))</code></p>
<p></p>
<p>Now we have</p>
<p></p>
<p></p>
<p><code>(print-rat (add-rat one-third one-third)) 2/3</code></p>
<p></p>
<p>as desired. This modification was accomplished by changing the constructor <code>make-rat</code> without changing any of the procedures (such as <code>add-rat</code> and <code>mul-rat</code>) that implement the actual operations.</p>
<p></p>
<p><strong>Exercise 2.1.</strong>  Define a better version of <code>make-rat</code> that handles both positive and negative arguments. <code>Make-rat</code> should normalize the sign so that if the rational number is positive, both the numerator and denominator are positive, and if the rational number is negative, only the numerator is negative.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.1.2">2.1.2  Abstraction Barriers</a></h3>
<p></p>
<p>Before continuing with more examples of compound data and data abstraction, let us consider some of the issues raised by the rational-number example. We defined the rational-number operations in terms of a constructor <code>make-rat</code> and selectors <code>numer</code> and <code>denom</code>. In general, the underlying idea of data abstraction is to identify for each type of data object a basic set of operations in terms of which all manipulations of data objects of that type will be expressed, and then to use only those operations in manipulating the data.</p>
<p>We can envision the structure of the rational-number system as shown in figure <a href="#%_fig_2.1">2.1</a>. The horizontal lines represent <em>abstraction barriers</em> that isolate different ``levels'' of the system. At each level, the barrier separates the programs (above) that use the data abstraction from the programs (below) that implement the data abstraction. Programs that use rational numbers manipulate them solely in terms of the procedures supplied ``for public use'' by the rational-number package: <code>add-rat</code>, <code>sub-rat</code>, <code>mul-rat</code>, <code>div-rat</code>, and <code>equal-rat?</code>. These, in turn, are implemented solely in terms of the constructor and selectors <code>make-rat</code>, <code>numer</code>, and <code>denom</code>, which themselves are implemented in terms of pairs. The details of how pairs are implemented are irrelevant to the rest of the rational-number package so long as pairs can be manipulated by the use of <code>cons</code>, <code>car</code>, and <code>cdr</code>. In effect, procedures at each level are the interfaces that define the abstraction barriers and connect the different levels.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-6.gif" /> </p>
<p><strong>Figure 2.1:</strong>  Data-abstraction barriers in the rational-number package.</p>
<p></p>
<p>This simple idea has many advantages. One advantage is that it makes programs much easier to maintain and to modify. Any complex data structure can be represented in a variety of ways with the primitive data structures provided by a programming language. Of course, the choice of representation influences the programs that operate on it; thus, if the representation were to be changed at some later time, all such programs might have to be modified accordingly. This task could be time-consuming and expensive in the case of large programs unless the dependence on the representation were to be confined by design to a very few program modules.</p>
<p>For example, an alternate way to address the problem of reducing rational numbers to lowest terms is to perform the reduction whenever we access the parts of a rational number, rather than when we construct it. This leads to different constructor and selector procedures:</p>
<p></p>
<p></p>
<p><code>(define (make-rat n d)   (cons n d)) (define (numer x)   (let ((g (gcd (car x) (cdr x))))     (/ (car x) g))) (define (denom x)   (let ((g (gcd (car x) (cdr x))))     (/ (cdr x) g)))</code></p>
<p></p>
<p>The difference between this implementation and the previous one lies in when we compute the <code>gcd</code>. If in our typical use of rational numbers we access the numerators and denominators of the same rational numbers many times, it would be preferable to compute the <code>gcd</code> when the rational numbers are constructed. If not, we may be better off waiting until access time to compute the <code>gcd</code>. In any case, when we change from one representation to the other, the procedures <code>add-rat</code>, <code>sub-rat</code>, and so on do not have to be modified at all.</p>
<p>Constraining the dependence on the representation to a few interface procedures helps us design programs as well as modify them, because it allows us to maintain the flexibility to consider alternate implementations. To continue with our simple example, suppose we are designing a rational-number package and we can't decide initially whether to perform the <code>gcd</code> at construction time or at selection time. The data-abstraction methodology gives us a way to defer that decision without losing the ability to make progress on the rest of the system.</p>
<p></p>
<p><strong>Exercise 2.2.</strong>  Consider the problem of representing line segments in a plane. Each segment is represented as a pair of points: a starting point and an ending point. Define a constructor <code>make-segment</code> and selectors <code>start-segment</code> and <code>end-segment</code> that define the representation of segments in terms of points. Furthermore, a point can be represented as a pair of numbers: the <em>x</em> coordinate and the <em>y</em> coordinate. Accordingly, specify a constructor <code>make-point</code> and selectors <code>x-point</code> and <code>y-point</code> that define this representation. Finally, using your selectors and constructors, define a procedure <code>midpoint-segment</code> that takes a line segment as argument and returns its midpoint (the point whose coordinates are the average of the coordinates of the endpoints). To try your procedures, you'll need a way to print points:</p>
<p></p>
<p></p>
<p><code>(define (print-point p)   (newline)   (display &quot;(&quot;)   (display (x-point p))   (display &quot;,&quot;)   (display (y-point p))   (display &quot;)&quot;))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.3.</strong>  Implement a representation for rectangles in a plane. (Hint: You may want to make use of exercise <a href="#%_thm_2.2">2.2</a>.) In terms of your constructors and selectors, create procedures that compute the perimeter and the area of a given rectangle. Now implement a different representation for rectangles. Can you design your system with suitable abstraction barriers, so that the same perimeter and area procedures will work using either representation?</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.1.3">2.1.3  What Is Meant by Data?</a></h3>
<p>We began the rational-number implementation in section <a href="#%_sec_2.1.1">2.1.1</a> by implementing the rational-number operations <code>add-rat</code>, <code>sub-rat</code>, and so on in terms of three unspecified procedures: <code>make-rat</code>, <code>numer</code>, and <code>denom</code>. At that point, we could think of the operations as being defined in terms of data objects -- numerators, denominators, and rational numbers -- whose behavior was specified by the latter three procedures.</p>
<p>But exactly what is meant by <em>data</em>? It is not enough to say ``whatever is implemented by the given selectors and constructors.'' Clearly, not every arbitrary set of three procedures can serve as an appropriate basis for the rational-number implementation. We need to guarantee that, if we construct a rational number <code>x</code> from a pair of integers <code>n</code> and <code>d</code>, then extracting the <code>numer</code> and the <code>denom</code> of <code>x</code> and dividing them should yield the same result as dividing <code>n</code> by <code>d</code>. In other words, <code>make-rat</code>, <code>numer</code>, and <code>denom</code> must satisfy the condition that, for any integer <code>n</code> and any non-zero integer <code>d</code>, if <code>x</code> is (<code>make-rat n d</code>), then</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-7.gif" /></p>
<p></p>
<p>In fact, this is the only condition <code>make-rat</code>, <code>numer</code>, and <code>denom</code> must fulfill in order to form a suitable basis for a rational-number representation. In general, we can think of data as defined by some collection of selectors and constructors, together with specified conditions that these procedures must fulfill in order to be a valid representation.<a href="#footnote_Temp_140"><sup>5</sup></a></p>
<p>This point of view can serve to define not only ``high-level'' data objects, such as rational numbers, but lower-level objects as well. Consider the notion of a pair, which we used in order to define our rational numbers. We never actually said what a pair was, only that the language supplied procedures <code>cons</code>, <code>car</code>, and <code>cdr</code> for operating on pairs. But the only thing we need to know about these three operations is that if we glue two objects together using <code>cons</code> we can retrieve the objects using <code>car</code> and <code>cdr</code>. That is, the operations satisfy the condition that, for any objects <code>x</code> and <code>y</code>, if <code>z</code> is <code>(cons x y)</code> then <code>(car z)</code> is <code>x</code> and <code>(cdr z)</code> is <code>y</code>. Indeed, we mentioned that these three procedures are included as primitives in our language. However, any triple of procedures that satisfies the above condition can be used as the basis for implementing pairs. This point is illustrated strikingly by the fact that we could implement <code>cons</code>, <code>car</code>, and <code>cdr</code> without using any data structures at all but only using procedures. Here are the definitions:</p>
<p></p>
<p></p>
<p><code>(define (cons x y)   (define (dispatch m)     (cond ((= m 0) x)           ((= m 1) y)           (else (error &quot;Argument not 0 or 1 -- CONS&quot; m))))   dispatch)  (define (car z) (z 0))  (define (cdr z) (z 1))</code></p>
<p></p>
<p>This use of procedures corresponds to nothing like our intuitive notion of what data should be. Nevertheless, all we need to do to show that this is a valid way to represent pairs is to verify that these procedures satisfy the condition given above.</p>
<p>The subtle point to notice is that the value returned by <code>(cons x y)</code> is a procedure -- namely the internally defined procedure <code>dispatch</code>, which takes one argument and returns either <code>x</code> or <code>y</code> depending on whether the argument is 0 or 1. Correspondingly, <code>(car z)</code> is defined to apply <code>z</code> to 0. Hence, if <code>z</code> is the procedure formed by <code>(cons x y)</code>, then <code>z</code> applied to 0 will yield <code>x</code>. Thus, we have shown that <code>(car (cons x y))</code> yields <code>x</code>, as desired. Similarly, <code>(cdr (cons x y))</code> applies the procedure returned by <code>(cons x y)</code> to 1, which returns <code>y</code>. Therefore, this procedural implementation of pairs is a valid implementation, and if we access pairs using only <code>cons</code>, <code>car</code>, and <code>cdr</code> we cannot distinguish this implementation from one that uses ``real'' data structures.</p>
<p>The point of exhibiting the procedural representation of pairs is not that our language works this way (Scheme, and Lisp systems in general, implement pairs directly, for efficiency reasons) but that it could work this way. The procedural representation, although obscure, is a perfectly adequate way to represent pairs, since it fulfills the only conditions that pairs need to fulfill. This example also demonstrates that the ability to manipulate procedures as objects automatically provides the ability to represent compound data. This may seem a curiosity now, but procedural representations of data will play a central role in our programming repertoire. This style of programming is often called <em>message passing</em>, and we will be using it as a basic tool in chapter 3 when we address the issues of modeling and simulation.</p>
<p></p>
<p><strong>Exercise 2.4.</strong>  Here is an alternative procedural representation of pairs. For this representation, verify that <code>(car (cons x y))</code> yields <code>x</code> for any objects <code>x</code> and <code>y</code>.</p>
<p></p>
<p></p>
<p><code>(define (cons x y)   (lambda (m) (m x y)))  (define (car z)   (z (lambda (p q) p)))</code></p>
<p></p>
<p>What is the corresponding definition of <code>cdr</code>? (Hint: To verify that this works, make use of the substitution model of section <a href="book-Z-H-10.html#%_sec_1.1.5">1.1.5</a>.)</p>
<p></p>
<p></p>
<p><strong>Exercise 2.5.</strong>  Show that we can represent pairs of nonnegative integers using only numbers and arithmetic operations if we represent the pair <em>a</em> and <em>b</em> as the integer that is the product 2<sup><em>a</em></sup> 3<sup><em>b</em></sup>. Give the corresponding definitions of the procedures <code>cons</code>, <code>car</code>, and <code>cdr</code>.</p>
<p></p>
<p><strong>Exercise 2.6.</strong>  In case representing pairs as procedures wasn't mind-boggling enough, consider that, in a language that can manipulate procedures, we can get by without numbers (at least insofar as nonnegative integers are concerned) by implementing 0 and the operation of adding 1 as</p>
<p></p>
<p></p>
<p><code>(define zero (lambda (f) (lambda (x) x)))  (define (add-1 n)   (lambda (f) (lambda (x) (f ((n f) x)))))</code></p>
<p></p>
<p>This representation is known as <em>Church numerals</em>, after its inventor, Alonzo Church, the logician who invented the <img src="book-Z-G-D-6.gif" /> calculus.</p>
<p>Define <code>one</code> and <code>two</code> directly (not in terms of <code>zero</code> and <code>add-1</code>). (Hint: Use substitution to evaluate <code>(add-1 zero)</code>). Give a direct definition of the addition procedure <code>+</code> (not in terms of repeated application of <code>add-1</code>).</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.1.4">2.1.4  Extended Exercise: Interval Arithmetic</a></h3>
<p>Alyssa P. Hacker is designing a system to help people solve engineering problems. One feature she wants to provide in her system is the ability to manipulate inexact quantities (such as measured parameters of physical devices) with known precision, so that when computations are done with such approximate quantities the results will be numbers of known precision.</p>
<p>Electrical engineers will be using Alyssa's system to compute electrical quantities. It is sometimes necessary for them to compute the value of a parallel equivalent resistance <em>R</em><sub><em>p</em></sub> of two resistors <em>R</em><sub>1</sub> and <em>R</em><sub>2</sub> using the formula</p>
<p></p>
<p><img src="ch2-Z-G-8.gif" /></p>
<p></p>
<p>Resistance values are usually known only up to some tolerance guaranteed by the manufacturer of the resistor. For example, if you buy a resistor labeled ``6.8 ohms with 10% tolerance'' you can only be sure that the resistor has a resistance between 6.8 - 0.68 = 6.12 and 6.8 + 0.68 = 7.48 ohms. Thus, if you have a 6.8-ohm 10% resistor in parallel with a 4.7-ohm 5% resistor, the resistance of the combination can range from about 2.58 ohms (if the two resistors are at the lower bounds) to about 2.97 ohms (if the two resistors are at the upper bounds).</p>
<p>Alyssa's idea is to implement ``interval arithmetic'' as a set of arithmetic operations for combining ``intervals'' (objects that represent the range of possible values of an inexact quantity). The result of adding, subtracting, multiplying, or dividing two intervals is itself an interval, representing the range of the result.</p>
<p>Alyssa postulates the existence of an abstract object called an ``interval'' that has two endpoints: a lower bound and an upper bound. She also presumes that, given the endpoints of an interval, she can construct the interval using the data constructor <code>make-interval</code>. Alyssa first writes a procedure for adding two intervals. She reasons that the minimum value the sum could be is the sum of the two lower bounds and the maximum value it could be is the sum of the two upper bounds:</p>
<p></p>
<p></p>
<p><code>(define (add-interval x y)   (make-interval (+ (lower-bound x) (lower-bound y))                  (+ (upper-bound x) (upper-bound y))))</code></p>
<p></p>
<p>Alyssa also works out the product of two intervals by finding the minimum and the maximum of the products of the bounds and using them as the bounds of the resulting interval. (<code>Min</code> and <code>max</code> are primitives that find the minimum or maximum of any number of arguments.)</p>
<p></p>
<p></p>
<p><code>(define (mul-interval x y)   (let ((p1 (* (lower-bound x) (lower-bound y)))         (p2 (* (lower-bound x) (upper-bound y)))         (p3 (* (upper-bound x) (lower-bound y)))         (p4 (* (upper-bound x) (upper-bound y))))     (make-interval (min p1 p2 p3 p4)                    (max p1 p2 p3 p4))))</code></p>
<p></p>
<p>To divide two intervals, Alyssa multiplies the first by the reciprocal of the second. Note that the bounds of the reciprocal interval are the reciprocal of the upper bound and the reciprocal of the lower bound, in that order.</p>
<p></p>
<p></p>
<p><code>(define (div-interval x y)   (mul-interval x                  (make-interval (/ 1.0 (upper-bound y))                                (/ 1.0 (lower-bound y)))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.7.</strong>  Alyssa's program is incomplete because she has not specified the implementation of the interval abstraction. Here is a definition of the interval constructor:</p>
<p></p>
<p></p>
<p><code>(define (make-interval a b) (cons a b))</code></p>
<p></p>
<p>Define selectors <code>upper-bound</code> and <code>lower-bound</code> to complete the implementation.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.8.</strong>  Using reasoning analogous to Alyssa's, describe how the difference of two intervals may be computed. Define a corresponding subtraction procedure, called <code>sub-interval</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.9.</strong>  The <em>width</em> of an interval is half of the difference between its upper and lower bounds. The width is a measure of the uncertainty of the number specified by the interval. For some arithmetic operations the width of the result of combining two intervals is a function only of the widths of the argument intervals, whereas for others the width of the combination is not a function of the widths of the argument intervals. Show that the width of the sum (or difference) of two intervals is a function only of the widths of the intervals being added (or subtracted). Give examples to show that this is not true for multiplication or division.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.10.</strong>  Ben Bitdiddle, an expert systems programmer, looks over Alyssa's shoulder and comments that it is not clear what it means to divide by an interval that spans zero. Modify Alyssa's code to check for this condition and to signal an error if it occurs.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.11.</strong>  In passing, Ben also cryptically comments: ``By testing the signs of the endpoints of the intervals, it is possible to break <code>mul-interval</code> into nine cases, only one of which requires more than two multiplications.'' Rewrite this procedure using Ben's suggestion.</p>
<p></p>
<p></p>
<p></p>
<p>After debugging her program, Alyssa shows it to a potential user, who complains that her program solves the wrong problem. He wants a program that can deal with numbers represented as a center value and an additive tolerance; for example, he wants to work with intervals such as 3.5± 0.15 rather than [3.35, 3.65]. Alyssa returns to her desk and fixes this problem by supplying an alternate constructor and alternate selectors:</p>
<p></p>
<p></p>
<p><code>(define (make-center-width c w)   (make-interval (- c w) (+ c w))) (define (center i)   (/ (+ (lower-bound i) (upper-bound i)) 2)) (define (width i)   (/ (- (upper-bound i) (lower-bound i)) 2))</code></p>
<p></p>
<p></p>
<p>Unfortunately, most of Alyssa's users are engineers. Real engineering situations usually involve measurements with only a small uncertainty, measured as the ratio of the width of the interval to the midpoint of the interval. Engineers usually specify percentage tolerances on the parameters of devices, as in the resistor specifications given earlier.</p>
<p></p>
<p><strong>Exercise 2.12.</strong>  Define a constructor <code>make-center-percent</code> that takes a center and a percentage tolerance and produces the desired interval. You must also define a selector <code>percent</code> that produces the percentage tolerance for a given interval. The <code>center</code> selector is the same as the one shown above.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.13.</strong>  Show that under the assumption of small percentage tolerances there is a simple formula for the approximate percentage tolerance of the product of two intervals in terms of the tolerances of the factors. You may simplify the problem by assuming that all numbers are positive.</p>
<p></p>
<p></p>
<p></p>
<p>After considerable work, Alyssa P. Hacker delivers her finished system. Several years later, after she has forgotten all about it, she gets a frenzied call from an irate user, Lem E. Tweakit. It seems that Lem has noticed that the formula for parallel resistors can be written in two algebraically equivalent ways:</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-9.gif" /></p>
<p></p>
<p>and</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-10.gif" /></p>
<p></p>
<p>He has written the following two programs, each of which computes the parallel-resistors formula differently:</p>
<p></p>
<p></p>
<p><code>(define (par1 r1 r2)   (div-interval (mul-interval r1 r2)                 (add-interval r1 r2))) (define (par2 r1 r2)   (let ((one (make-interval 1 1)))      (div-interval one                   (add-interval (div-interval one r1)                                 (div-interval one r2)))))</code></p>
<p></p>
<p>Lem complains that Alyssa's program gives different answers for the two ways of computing. This is a serious complaint.</p>
<p></p>
<p><strong>Exercise 2.14.</strong>  Demonstrate that Lem is right. Investigate the behavior of the system on a variety of arithmetic expressions. Make some intervals <em>A</em> and <em>B</em>, and use them in computing the expressions <em>A</em>/<em>A</em> and <em>A</em>/<em>B</em>. You will get the most insight by using intervals whose width is a small percentage of the center value. Examine the results of the computation in center-percent form (see exercise <a href="#%_thm_2.12">2.12</a>).</p>
<p></p>
<p></p>
<p><strong>Exercise 2.15.</strong>  Eva Lu Ator, another user, has also noticed the different intervals computed by different but algebraically equivalent expressions. She says that a formula to compute with intervals using Alyssa's system will produce tighter error bounds if it can be written in such a form that no variable that represents an uncertain number is repeated. Thus, she says, <code>par2</code> is a ``better'' program for parallel resistances than <code>par1</code>. Is she right? Why?</p>
<p></p>
<p></p>
<p><strong>Exercise 2.16.</strong>  Explain, in general, why equivalent algebraic expressions may lead to different answers. Can you devise an interval-arithmetic package that does not have this shortcoming, or is this task impossible? (Warning: This problem is very difficult.)</p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_133"><sup>2</sup></a> The name <code>cons</code> stands for ``construct.'' The names <code>car</code> and <code>cdr</code> derive from the original implementation of Lisp on the IBM 704. That machine had an addressing scheme that allowed one to reference the ``address'' and ``decrement'' parts of a memory location. <code>Car</code> stands for ``Contents of Address part of Register'' and <code>cdr</code> (pronounced ``could-er'') stands for ``Contents of Decrement part of Register.''</p>
<p><a href="#call_footnote_Temp_135"><sup>3</sup></a> Another way to define the selectors and constructor is</p>
<p></p>
<p><code>(define make-rat cons) (define numer car) (define denom cdr)</code></p>
<p></p>
<p>The first definition associates the name <code>make-rat</code> with the value of the expression <code>cons</code>, which is the primitive procedure that constructs pairs. Thus <code>make-rat</code> and <code>cons</code> are names for the same primitive constructor.</p>
<p>Defining selectors and constructors in this way is efficient: Instead of <code>make-rat</code> <em>calling</em> <code>cons</code>, <code>make-rat</code> <em>is</em> <code>cons</code>, so there is only one procedure called, not two, when <code>make-rat</code> is called. On the other hand, doing this defeats debugging aids that trace procedure calls or put breakpoints on procedure calls: You may want to watch <code>make-rat</code> being called, but you certainly don't want to watch every call to <code>cons</code>.</p>
<p>We have chosen not to use this style of definition in this book.</p>
<p><a href="#call_footnote_Temp_136"><sup>4</sup></a> <code>Display</code> is the Scheme primitive for printing data. The Scheme primitive <code>newline</code> starts a new line for printing. Neither of these procedures returns a useful value, so in the uses of <code>print-rat</code> below, we show only what <code>print-rat</code> prints, not what the interpreter prints as the value returned by <code>print-rat</code>.</p>
<p><a href="#call_footnote_Temp_140"><sup>5</sup></a> Surprisingly, this idea is very difficult to formulate rigorously. There are two approaches to giving such a formulation. One, pioneered by C. A. R. Hoare (1972), is known as the method of <em>abstract models</em>. It formalizes the ``procedures plus conditions'' specification as outlined in the rational-number example above. Note that the condition on the rational-number representation was stated in terms of facts about integers (equality and division). In general, abstract models define new kinds of data objects in terms of previously defined types of data objects. Assertions about data objects can therefore be checked by reducing them to assertions about previously defined data objects. Another approach, introduced by Zilles at MIT, by Goguen, Thatcher, Wagner, and Wright at IBM (see Thatcher, Wagner, and Wright 1978), and by Guttag at Toronto (see Guttag 1977), is called <em>algebraic specification</em>. It regards the ``procedures'' as elements of an abstract algebraic system whose behavior is specified by axioms that correspond to our ``conditions,'' and uses the techniques of abstract algebra to check assertions about data objects. Both methods are surveyed in the paper by Liskov and Zilles (1975).</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-13.html">previous</a>, <a href="book-Z-H-15.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-14.html">previous</a>, <a href="book-Z-H-16.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_2.2">2.2  Hierarchical Data and the Closure Property</a></h2>
<p></p>
<p>As we have seen, pairs provide a primitive ``glue'' that we can use to construct compound data objects. Figure <a href="#%_fig_2.2">2.2</a> shows a standard way to visualize a pair -- in this case, the pair formed by <code>(cons 1 2)</code>. In this representation, which is called <em>box-and-pointer notation</em>, each object is shown as a <em>pointer</em> to a box. The box for a primitive object contains a representation of the object. For example, the box for a number contains a numeral. The box for a pair is actually a double box, the left part containing (a pointer to) the <code>car</code> of the pair and the right part containing the <code>cdr</code>.</p>
<p>We have already seen that <code>cons</code> can be used to combine not only numbers but pairs as well. (You made use of this fact, or should have, in doing exercises <a href="book-Z-H-14.html#%_thm_2.2">2.2</a> and <a href="book-Z-H-14.html#%_thm_2.3">2.3</a>.) As a consequence, pairs provide a universal building block from which we can construct all sorts of data structures. Figure <a href="#%_fig_2.3">2.3</a> shows two ways to use pairs to combine the numbers 1, 2, 3, and 4.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-11.gif" /></p>
<p><strong>Figure 2.2:</strong>  Box-and-pointer representation of <code>(cons 1 2)</code>.</p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-12.gif" /></p>
<p><strong>Figure 2.3:</strong>  Two ways to combine 1, 2, 3, and 4 using pairs.</p>
<p></p>
<p>The ability to create pairs whose elements are pairs is the essence of list structure's importance as a representational tool. We refer to this ability as the <em>closure property</em> of <code>cons</code>. In general, an operation for combining data objects satisfies the closure property if the results of combining things with that operation can themselves be combined using the same operation.<a href="#footnote_Temp_154"><sup>6</sup></a> Closure is the key to power in any means of combination because it permits us to create <em>hierarchical</em> structures -- structures made up of parts, which themselves are made up of parts, and so on.</p>
<p>From the outset of chapter 1, we've made essential use of closure in dealing with procedures, because all but the very simplest programs rely on the fact that the elements of a combination can themselves be combinations. In this section, we take up the consequences of closure for compound data. We describe some conventional techniques for using pairs to represent sequences and trees, and we exhibit a graphics language that illustrates closure in a vivid way.<a href="#footnote_Temp_155"><sup>7</sup></a></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.2.1">2.2.1  Representing Sequences</a></h3>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-13.gif" /></p>
<p><strong>Figure 2.4:</strong>  The sequence 1, 2, 3, 4 represented as a chain of pairs.</p>
<p></p>
<p>One of the useful structures we can build with pairs is a <em>sequence</em> -- an ordered collection of data objects. There are, of course, many ways to represent sequences in terms of pairs. One particularly straightforward representation is illustrated in figure <a href="#%_fig_2.4">2.4</a>, where the sequence 1, 2, 3, 4 is represented as a chain of pairs. The <code>car</code> of each pair is the corresponding item in the chain, and the <code>cdr</code> of the pair is the next pair in the chain. The <code>cdr</code> of the final pair signals the end of the sequence by pointing to a distinguished value that is not a pair, represented in box-and-pointer diagrams as a diagonal line and in programs as the value of the variable <code>nil</code>. The entire sequence is constructed by nested <code>cons</code> operations:</p>
<p></p>
<p></p>
<p><code>(cons 1       (cons 2             (cons 3                   (cons 4 nil))))</code></p>
<p></p>
<p></p>
<p>Such a sequence of pairs, formed by nested <code>cons</code>es, is called a <em>list</em>, and Scheme provides a primitive called <code>list</code> to help in constructing lists.<a href="#footnote_Temp_156"><sup>8</sup></a> The above sequence could be produced by <code>(list 1 2 3 4)</code>. In general,</p>
<p></p>
<p></p>
<p><code>(list &lt;a1&gt; &lt;a2&gt; ...</code> &lt;<em>a<sub><em>n</em></sub></em>&gt;)<br /></p>
<p></p>
<p>is equivalent to</p>
<p></p>
<p></p>
<p><code>(cons &lt;a1&gt; (cons &lt;a2&gt; (cons ...</code> (cons &lt;<em>a<sub><em>n</em></sub></em>&gt; nil) <code>...</code>)))<br /></p>
<p></p>
<p>Lisp systems conventionally print lists by printing the sequence of elements, enclosed in parentheses. Thus, the data object in figure <a href="#%_fig_2.4">2.4</a> is printed as <code>(1 2 3 4)</code>:</p>
<p></p>
<p></p>
<p><code>(define one-through-four (list 1 2 3 4))  one-through-four (1 2 3 4)</code></p>
<p></p>
<p>Be careful not to confuse the expression <code>(list 1 2 3 4)</code> with the list <code>(1 2 3 4)</code>, which is the result obtained when the expression is evaluated. Attempting to evaluate the expression <code>(1 2 3 4)</code> will signal an error when the interpreter tries to apply the procedure <code>1</code> to arguments <code>2</code>, <code>3</code>, and <code>4</code>.</p>
<p>We can think of <code>car</code> as selecting the first item in the list, and of <code>cdr</code> as selecting the sublist consisting of all but the first item. Nested applications of <code>car</code> and <code>cdr</code> can be used to extract the second, third, and subsequent items in the list.<a href="#footnote_Temp_157"><sup>9</sup></a> The constructor <code>cons</code> makes a list like the original one, but with an additional item at the beginning.</p>
<p></p>
<p></p>
<p><code>(car one-through-four) 1  (cdr one-through-four) (2 3 4) (car (cdr one-through-four)) 2  (cons 10 one-through-four) (10 1 2 3 4)  (cons 5 one-through-four) (5 1 2 3 4)</code></p>
<p></p>
<p>The value of <code>nil</code>, used to terminate the chain of pairs, can be thought of as a sequence of no elements, the <em>empty list</em>. The word <em>nil</em> is a contraction of the Latin word <em>nihil</em>, which means ``nothing.''<a href="#footnote_Temp_158"><sup>10</sup></a></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_159">List operations</a></h4>
<p>The use of pairs to represent sequences of elements as lists is accompanied by conventional programming techniques for manipulating lists by successively ``<code>cdr</code>ing down'' the lists. For example, the procedure <code>list-ref</code> takes as arguments a list and a number <em>n</em> and returns the <em>n</em>th item of the list. It is customary to number the elements of the list beginning with 0. The method for computing <code>list-ref</code> is the following:</p>
<p></p>
<p></p>
<ul>
<li>For <em>n</em> = 0, <code>list-ref</code> should return the <code>car</code> of the list.</li>
<li>Otherwise, <code>list-ref</code> should return the (<em>n</em> - 1)st item of the <code>cdr</code> of the list.</li>
</ul>
<p></p>
<p></p>
<p></p>
<p><code>(define (list-ref items n)   (if (= n 0)       (car items)       (list-ref (cdr items) (- n 1)))) (define squares (list 1 4 9 16 25))  (list-ref squares 3) 16</code></p>
<p></p>
<p></p>
<p>Often we <code>cdr</code> down the whole list. To aid in this, Scheme includes a primitive predicate <code>null?</code>, which tests whether its argument is the empty list. The procedure <code>length</code>, which returns the number of items in a list, illustrates this typical pattern of use:</p>
<p></p>
<p></p>
<p><code>(define (length items)   (if (null? items)       0       (+ 1 (length (cdr items))))) (define odds (list 1 3 5 7))  (length odds) 4</code></p>
<p></p>
<p>The <code>length</code> procedure implements a simple recursive plan. The reduction step is:</p>
<p></p>
<p></p>
<ul>
<li>The <code>length</code> of any list is 1 plus the <code>length</code> of the <code>cdr</code> of the list.</li>
</ul>
<p></p>
<p>This is applied successively until we reach the base case:</p>
<p></p>
<p></p>
<ul>
<li>The <code>length</code> of the empty list is 0.</li>
</ul>
<p></p>
<p>We could also compute <code>length</code> in an iterative style:</p>
<p></p>
<p></p>
<p><code>(define (length items)   (define (length-iter a count)     (if (null? a)         count         (length-iter (cdr a) (+ 1 count))))   (length-iter items 0))</code></p>
<p></p>
<p></p>
<p>Another conventional programming technique is to ``<code>cons</code> up'' an answer list while <code>cdr</code>ing down a list, as in the procedure <code>append</code>, which takes two lists as arguments and combines their elements to make a new list:</p>
<p></p>
<p></p>
<p><code>(append squares odds) (1 4 9 16 25 1 3 5 7)  (append odds squares) (1 3 5 7 1 4 9 16 25)</code></p>
<p></p>
<p><code>Append</code> is also implemented using a recursive plan. To <code>append</code> lists <code>list1</code> and <code>list2</code>, do the following:</p>
<p></p>
<p></p>
<ul>
<li>If <code>list1</code> is the empty list, then the result is just <code>list2</code>.</li>
<li>Otherwise, <code>append</code> the <code>cdr</code> of <code>list1</code> and <code>list2</code>, and <code>cons</code> the <code>car</code> of <code>list1</code> onto the result:</li>
</ul>
<p></p>
<p></p>
<p></p>
<p><code>(define (append list1 list2)   (if (null? list1)       list2       (cons (car list1) (append (cdr list1) list2))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.17.</strong>  Define a procedure <code>last-pair</code> that returns the list that contains only the last element of a given (nonempty) list:</p>
<p></p>
<p></p>
<p><code>(last-pair (list 23 72 149 34)) (34)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.18.</strong>  Define a procedure <code>reverse</code> that takes a list as argument and returns a list of the same elements in reverse order:</p>
<p></p>
<p></p>
<p><code>(reverse (list 1 4 9 16 25)) (25 16 9 4 1)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.19.</strong>  Consider the change-counting program of section <a href="book-Z-H-11.html#%_sec_1.2.2">1.2.2</a>. It would be nice to be able to easily change the currency used by the program, so that we could compute the number of ways to change a British pound, for example. As the program is written, the knowledge of the currency is distributed partly into the procedure <code>first-denomination</code> and partly into the procedure <code>count-change</code> (which knows that there are five kinds of U.S. coins). It would be nicer to be able to supply a list of coins to be used for making change.</p>
<p>We want to rewrite the procedure <code>cc</code> so that its second argument is a list of the values of the coins to use rather than an integer specifying which coins to use. We could then have lists that defined each kind of currency:</p>
<p></p>
<p></p>
<p><code>(define us-coins (list 50 25 10 5 1)) (define uk-coins (list 100 50 20 10 5 2 1 0.5))</code></p>
<p></p>
<p>We could then call <code>cc</code> as follows:</p>
<p></p>
<p></p>
<p><code>(cc 100 us-coins) 292</code></p>
<p></p>
<p>To do this will require changing the program <code>cc</code> somewhat. It will still have the same form, but it will access its second argument differently, as follows:</p>
<p></p>
<p></p>
<p><code>(define (cc amount coin-values)   (cond ((= amount 0) 1)         ((or (&lt; amount 0) (no-more? coin-values)) 0)         (else          (+ (cc amount                 (except-first-denomination coin-values))             (cc (- amount                    (first-denomination coin-values))                 coin-values)))))</code></p>
<p></p>
<p>Define the procedures <code>first-denomination</code>, <code>except-first-denomination</code>, and <code>no-more?</code> in terms of primitive operations on list structures. Does the order of the list <code>coin-values</code> affect the answer produced by <code>cc</code>? Why or why not?</p>
<p></p>
<p></p>
<p><strong>Exercise 2.20.</strong>  The procedures <code>+</code>, <code>*</code>, and <code>list</code> take arbitrary numbers of arguments. One way to define such procedures is to use <code>define</code> with <em>dotted-tail notation</em>. In a procedure definition, a parameter list that has a dot before the last parameter name indicates that, when the procedure is called, the initial parameters (if any) will have as values the initial arguments, as usual, but the final parameter's value will be a <em>list</em> of any remaining arguments. For instance, given the definition</p>
<p></p>
<p><code>(define (f x y . z) &lt;body&gt;)</code></p>
<p></p>
<p>the procedure <code>f</code> can be called with two or more arguments. If we evaluate</p>
<p></p>
<p><code>(f 1 2 3 4 5 6)</code></p>
<p></p>
<p>then in the body of <code>f</code>, <code>x</code> will be 1, <code>y</code> will be 2, and <code>z</code> will be the list <code>(3 4 5 6)</code>. Given the definition</p>
<p></p>
<p><code>(define (g . w) &lt;body&gt;)</code></p>
<p></p>
<p>the procedure <code>g</code> can be called with zero or more arguments. If we evaluate</p>
<p></p>
<p><code>(g 1 2 3 4 5 6)</code></p>
<p></p>
<p>then in the body of <code>g</code>, <code>w</code> will be the list <code>(1 2 3 4 5 6)</code>.<a href="#footnote_Temp_164"><sup>11</sup></a></p>
<p>Use this notation to write a procedure <code>same-parity</code> that takes one or more integers and returns a list of all the arguments that have the same even-odd parity as the first argument. For example,</p>
<p></p>
<p><code>(same-parity 1 2 3 4 5 6 7) (1 3 5 7)  (same-parity 2 3 4 5 6 7) (2 4 6)</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_165">Mapping over lists</a></h4>
<p>One extremely useful operation is to apply some transformation to each element in a list and generate the list of results. For instance, the following procedure scales each number in a list by a given factor:</p>
<p></p>
<p></p>
<p><code>(define (scale-list items factor)   (if (null? items)       nil       (cons (* (car items) factor)             (scale-list (cdr items) factor)))) (scale-list (list 1 2 3 4 5) 10) (10 20 30 40 50)</code></p>
<p></p>
<p></p>
<p>We can abstract this general idea and capture it as a common pattern expressed as a higher-order procedure, just as in section <a href="book-Z-H-12.html#%_sec_1.3">1.3</a>. The higher-order procedure here is called <code>map</code>. <code>Map</code> takes as arguments a procedure of one argument and a list, and returns a list of the results produced by applying the procedure to each element in the list:<a href="#footnote_Temp_166"><sup>12</sup></a></p>
<p></p>
<p></p>
<p><code>(define (map proc items)   (if (null? items)       nil       (cons (proc (car items))             (map proc (cdr items))))) (map abs (list -10 2.5 -11.6 17)) (10 2.5 11.6 17) (map (lambda (x) (* x x))      (list 1 2 3 4)) (1 4 9 16)</code></p>
<p></p>
<p>Now we can give a new definition of <code>scale-list</code> in terms of <code>map</code>:</p>
<p></p>
<p><code>(define (scale-list items factor)   (map (lambda (x) (* x factor))        items))</code></p>
<p></p>
<p></p>
<p><code>Map</code> is an important construct, not only because it captures a common pattern, but because it establishes a higher level of abstraction in dealing with lists. In the original definition of <code>scale-list</code>, the recursive structure of the program draws attention to the element-by-element processing of the list. Defining <code>scale-list</code> in terms of <code>map</code> suppresses that level of detail and emphasizes that scaling transforms a list of elements to a list of results. The difference between the two definitions is not that the computer is performing a different process (it isn't) but that we think about the process differently. In effect, <code>map</code> helps establish an abstraction barrier that isolates the implementation of procedures that transform lists from the details of how the elements of the list are extracted and combined. Like the barriers shown in figure <a href="book-Z-H-14.html#%_fig_2.1">2.1</a>, this abstraction gives us the flexibility to change the low-level details of how sequences are implemented, while preserving the conceptual framework of operations that transform sequences to sequences. Section <a href="#%_sec_2.2.3">2.2.3</a> expands on this use of sequences as a framework for organizing programs.</p>
<p></p>
<p><strong>Exercise 2.21.</strong>  The procedure <code>square-list</code> takes a list of numbers as argument and returns a list of the squares of those numbers.</p>
<p></p>
<p></p>
<p><code>(square-list (list 1 2 3 4)) (1 4 9 16)</code></p>
<p></p>
<p>Here are two different definitions of <code>square-list</code>. Complete both of them by filling in the missing expressions:</p>
<p></p>
<p></p>
<p><code>(define (square-list items)   (if (null? items)       nil       (cons &lt;??&gt; &lt;??&gt;))) (define (square-list items)   (map &lt;??&gt; &lt;??&gt;))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.22.</strong>  Louis Reasoner tries to rewrite the first <code>square-list</code> procedure of exercise <a href="#%_thm_2.21">2.21</a> so that it evolves an iterative process:</p>
<p></p>
<p></p>
<p><code>(define (square-list items)   (define (iter things answer)     (if (null? things)         answer         (iter (cdr things)                (cons (square (car things))                     answer))))   (iter items nil))</code></p>
<p></p>
<p>Unfortunately, defining <code>square-list</code> this way produces the answer list in the reverse order of the one desired. Why?</p>
<p>Louis then tries to fix his bug by interchanging the arguments to <code>cons</code>:</p>
<p></p>
<p></p>
<p><code>(define (square-list items)   (define (iter things answer)     (if (null? things)         answer         (iter (cdr things)               (cons answer                     (square (car things))))))   (iter items nil))</code></p>
<p></p>
<p>This doesn't work either. Explain.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.23.</strong>  The procedure <code>for-each</code> is similar to <code>map</code>. It takes as arguments a procedure and a list of elements. However, rather than forming a list of the results, <code>for-each</code> just applies the procedure to each of the elements in turn, from left to right. The values returned by applying the procedure to the elements are not used at all -- <code>for-each</code> is used with procedures that perform an action, such as printing. For example,</p>
<p></p>
<p><code>(for-each (lambda (x) (newline) (display x))           (list 57 321 88)) 57 321 88</code></p>
<p></p>
<p>The value returned by the call to <code>for-each</code> (not illustrated above) can be something arbitrary, such as true. Give an implementation of <code>for-each</code>.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.2.2">2.2.2  Hierarchical Structures</a></h3>
<p>The representation of sequences in terms of lists generalizes naturally to represent sequences whose elements may themselves be sequences. For example, we can regard the object <code>((1 2) 3 4)</code> constructed by</p>
<p></p>
<p></p>
<p><code>(cons (list 1 2) (list 3 4))</code></p>
<p></p>
<p>as a list of three items, the first of which is itself a list, <code>(1 2)</code>. Indeed, this is suggested by the form in which the result is printed by the interpreter. Figure <a href="#%_fig_2.5">2.5</a> shows the representation of this structure in terms of pairs.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-15.gif" /></p>
<p><strong>Figure 2.5:</strong>  Structure formed by <code>(cons (list 1 2) (list 3 4))</code>.</p>
<p></p>
<p>Another way to think of sequences whose elements are sequences is as <em>trees</em>. The elements of the sequence are the branches of the tree, and elements that are themselves sequences are subtrees. Figure <a href="#%_fig_2.6">2.6</a> shows the structure in figure <a href="#%_fig_2.5">2.5</a> viewed as a tree.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-16.gif" /></p>
<p><strong>Figure 2.6:</strong>  The list structure in figure <a href="#%_fig_2.5">2.5</a> viewed as a tree.</p>
<p></p>
<p>Recursion is a natural tool for dealing with tree structures, since we can often reduce operations on trees to operations on their branches, which reduce in turn to operations on the branches of the branches, and so on, until we reach the leaves of the tree. As an example, compare the <code>length</code> procedure of section <a href="#%_sec_2.2.1">2.2.1</a> with the <code>count-leaves</code> procedure, which returns the total number of leaves of a tree:</p>
<p></p>
<p></p>
<p><code>(define x (cons (list 1 2) (list 3 4)))  (length x) 3 (count-leaves x) 4  (list x x) (((1 2) 3 4) ((1 2) 3 4))  (length (list x x)) 2  (count-leaves (list x x)) 8</code></p>
<p></p>
<p></p>
<p>To implement <code>count-leaves</code>, recall the recursive plan for computing <code>length</code>:</p>
<p></p>
<p></p>
<ul>
<li><code>Length</code> of a list <code>x</code> is 1 plus <code>length</code> of the <code>cdr</code> of <code>x</code>.</li>
<li><code>Length</code> of the empty list is 0.</li>
</ul>
<p></p>
<p><code>Count-leaves</code> is similar. The value for the empty list is the same:</p>
<p></p>
<p></p>
<ul>
<li><code>Count-leaves</code> of the empty list is 0.</li>
</ul>
<p></p>
<p>But in the reduction step, where we strip off the <code>car</code> of the list, we must take into account that the <code>car</code> may itself be a tree whose leaves we need to count. Thus, the appropriate reduction step is</p>
<p></p>
<p></p>
<ul>
<li><code>Count-leaves</code> of a tree <code>x</code> is <code>count-leaves</code> of the <code>car</code> of <code>x</code> plus <code>count-leaves</code> of the <code>cdr</code> of <code>x</code>.</li>
</ul>
<p></p>
<p>Finally, by taking <code>car</code>s we reach actual leaves, so we need another base case:</p>
<p></p>
<p></p>
<ul>
<li><code>Count-leaves</code> of a leaf is 1.</li>
</ul>
<p></p>
<p>To aid in writing recursive procedures on trees, Scheme provides the primitive predicate <code>pair?</code>, which tests whether its argument is a pair. Here is the complete procedure:<a href="#footnote_Temp_170"><sup>13</sup></a></p>
<p></p>
<p></p>
<p><code>(define (count-leaves x)   (cond ((null? x) 0)           ((not (pair? x)) 1)         (else (+ (count-leaves (car x))                  (count-leaves (cdr x))))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.24.</strong>  Suppose we evaluate the expression <code>(list 1 (list 2 (list 3 4)))</code>. Give the result printed by the interpreter, the corresponding box-and-pointer structure, and the interpretation of this as a tree (as in figure <a href="#%_fig_2.6">2.6</a>).</p>
<p></p>
<p></p>
<p><strong>Exercise 2.25.</strong>  Give combinations of <code>car</code>s and <code>cdr</code>s that will pick 7 from each of the following lists:</p>
<p></p>
<p></p>
<p><code>(1 3 (5 7) 9)  ((7))  (1 (2 (3 (4 (5 (6 7))))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.26.</strong>  Suppose we define <code>x</code> and <code>y</code> to be two lists:</p>
<p></p>
<p></p>
<p><code>(define x (list 1 2 3)) (define y (list 4 5 6))</code></p>
<p></p>
<p>What result is printed by the interpreter in response to evaluating each of the following expressions:</p>
<p></p>
<p></p>
<p><code>(append x y)  (cons x y)  (list x y)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.27.</strong>  Modify your <code>reverse</code> procedure of exercise <a href="#%_thm_2.18">2.18</a> to produce a <code>deep-reverse</code> procedure that takes a list as argument and returns as its value the list with its elements reversed and with all sublists deep-reversed as well. For example,</p>
<p></p>
<p></p>
<p><code>(define x (list (list 1 2) (list 3 4)))  x ((1 2) (3 4))  (reverse x) ((3 4) (1 2))  (deep-reverse x) ((4 3) (2 1))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.28.</strong>  Write a procedure <code>fringe</code> that takes as argument a tree (represented as a list) and returns a list whose elements are all the leaves of the tree arranged in left-to-right order. For example,</p>
<p></p>
<p></p>
<p><code>(define x (list (list 1 2) (list 3 4)))  (fringe x) (1 2 3 4)  (fringe (list x x)) (1 2 3 4 1 2 3 4)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.29.</strong>  A binary mobile consists of two branches, a left branch and a right branch. Each branch is a rod of a certain length, from which hangs either a weight or another binary mobile. We can represent a binary mobile using compound data by constructing it from two branches (for example, using <code>list</code>):</p>
<p></p>
<p></p>
<p><code>(define (make-mobile left right)   (list left right))</code></p>
<p></p>
<p>A branch is constructed from a <code>length</code> (which must be a number) together with a <code>structure</code>, which may be either a number (representing a simple weight) or another mobile:</p>
<p></p>
<p></p>
<p><code>(define (make-branch length structure)   (list length structure))</code></p>
<p></p>
<p></p>
<p>a.  Write the corresponding selectors <code>left-branch</code> and <code>right-branch</code>, which return the branches of a mobile, and <code>branch-length</code> and <code>branch-structure</code>, which return the components of a branch.</p>
<p>b.  Using your selectors, define a procedure <code>total-weight</code> that returns the total weight of a mobile.</p>
<p>c.  A mobile is said to be <em>balanced</em> if the torque applied by its top-left branch is equal to that applied by its top-right branch (that is, if the length of the left rod multiplied by the weight hanging from that rod is equal to the corresponding product for the right side) and if each of the submobiles hanging off its branches is balanced. Design a predicate that tests whether a binary mobile is balanced.</p>
<p>d.  Suppose we change the representation of mobiles so that the constructors are</p>
<p></p>
<p></p>
<p><code>(define (make-mobile left right)   (cons left right)) (define (make-branch length structure)   (cons length structure))</code></p>
<p></p>
<p>How much do you need to change your programs to convert to the new representation?</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_177">Mapping over trees</a></h4>
<p>Just as <code>map</code> is a powerful abstraction for dealing with sequences, <code>map</code> together with recursion is a powerful abstraction for dealing with trees. For instance, the <code>scale-tree</code> procedure, analogous to <code>scale-list</code> of section <a href="#%_sec_2.2.1">2.2.1</a>, takes as arguments a numeric factor and a tree whose leaves are numbers. It returns a tree of the same shape, where each number is multiplied by the factor. The recursive plan for <code>scale-tree</code> is similar to the one for <code>count-leaves</code>:</p>
<p></p>
<p></p>
<p><code>(define (scale-tree tree factor)   (cond ((null? tree) nil)         ((not (pair? tree)) (* tree factor))         (else (cons (scale-tree (car tree) factor)                     (scale-tree (cdr tree) factor))))) (scale-tree (list 1 (list 2 (list 3 4) 5) (list 6 7))             10) (10 (20 (30 40) 50) (60 70))</code></p>
<p></p>
<p></p>
<p>Another way to implement <code>scale-tree</code> is to regard the tree as a sequence of sub-trees and use <code>map</code>. We map over the sequence, scaling each sub-tree in turn, and return the list of results. In the base case, where the tree is a leaf, we simply multiply by the factor:</p>
<p></p>
<p></p>
<p><code>(define (scale-tree tree factor)   (map (lambda (sub-tree)          (if (pair? sub-tree)              (scale-tree sub-tree factor)              (* sub-tree factor)))        tree))</code></p>
<p></p>
<p>Many tree operations can be implemented by similar combinations of sequence operations and recursion.</p>
<p></p>
<p><strong>Exercise 2.30.</strong>  Define a procedure <code>square-tree</code> analogous to the <code>square-list</code> procedure of exercise <a href="#%_thm_2.21">2.21</a>. That is, <code>square-list</code> should behave as follows:</p>
<p></p>
<p></p>
<p><code>(square-tree  (list 1        (list 2 (list 3 4) 5)        (list 6 7))) (1 (4 (9 16) 25) (36 49))</code></p>
<p></p>
<p>Define <code>square-tree</code> both directly (i.e., without using any higher-order procedures) and also by using <code>map</code> and recursion.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.31.</strong>  Abstract your answer to exercise <a href="#%_thm_2.30">2.30</a> to produce a procedure <code>tree-map</code> with the property that <code>square-tree</code> could be defined as</p>
<p></p>
<p></p>
<p><code>(define (square-tree tree) (tree-map square tree))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.32.</strong>  We can represent a set as a list of distinct elements, and we can represent the set of all subsets of the set as a list of lists. For example, if the set is <code>(1 2 3)</code>, then the set of all subsets is <code>(() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3))</code>. Complete the following definition of a procedure that generates the set of subsets of a set and give a clear explanation of why it works:</p>
<p></p>
<p><code>(define (subsets s)   (if (null? s)       (list nil)       (let ((rest (subsets (cdr s))))         (append rest (map &lt;??&gt; rest)))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.2.3">2.2.3  Sequences as Conventional Interfaces</a></h3>
<p>In working with compound data, we've stressed how data abstraction permits us to design programs without becoming enmeshed in the details of data representations, and how abstraction preserves for us the flexibility to experiment with alternative representations. In this section, we introduce another powerful design principle for working with data structures -- the use of <em>conventional interfaces</em>.</p>
<p>In section <a href="book-Z-H-12.html#%_sec_1.3">1.3</a> we saw how program abstractions, implemented as higher-order procedures, can capture common patterns in programs that deal with numerical data. Our ability to formulate analogous operations for working with compound data depends crucially on the style in which we manipulate our data structures. Consider, for example, the following procedure, analogous to the <code>count-leaves</code> procedure of section <a href="#%_sec_2.2.2">2.2.2</a>, which takes a tree as argument and computes the sum of the squares of the leaves that are odd:</p>
<p></p>
<p><code>(define (sum-odd-squares tree)   (cond ((null? tree) 0)           ((not (pair? tree))          (if (odd? tree) (square tree) 0))         (else (+ (sum-odd-squares (car tree))                  (sum-odd-squares (cdr tree))))))</code></p>
<p></p>
<p>On the surface, this procedure is very different from the following one, which constructs a list of all the even Fibonacci numbers <em>F</em><em>i</em><em>b</em>(<em>k</em>), where <em>k</em> is less than or equal to a given integer <em>n</em>:</p>
<p></p>
<p><code>(define (even-fibs n)   (define (next k)     (if (&gt; k n)         nil         (let ((f (fib k)))           (if (even? f)               (cons f (next (+ k 1)))               (next (+ k 1))))))   (next 0))</code></p>
<p></p>
<p></p>
<p>Despite the fact that these two procedures are structurally very different, a more abstract description of the two computations reveals a great deal of similarity. The first program</p>
<p></p>
<ul>
<li>enumerates the leaves of a tree;</li>
<li>filters them, selecting the odd ones;</li>
<li>squares each of the selected ones; and</li>
<li>accumulates the results using <code>+</code>, starting with 0.</li>
</ul>
<p>The second program</p>
<p></p>
<ul>
<li>enumerates the integers from 0 to <em>n</em>;</li>
<li>computes the Fibonacci number for each integer;</li>
<li>filters them, selecting the even ones; and</li>
<li>accumulates the results using <code>cons</code>, starting with the empty list.</li>
</ul>
<p></p>
<p>A signal-processing engineer would find it natural to conceptualize these processes in terms of signals flowing through a cascade of stages, each of which implements part of the program plan, as shown in figure <a href="#%_fig_2.7">2.7</a>. In <code>sum-odd-squares</code>, we begin with an <em>enumerator</em>, which generates a ``signal'' consisting of the leaves of a given tree. This signal is passed through a <em>filter</em>, which eliminates all but the odd elements. The resulting signal is in turn passed through a <em>map</em>, which is a ``transducer'' that applies the <code>square</code> procedure to each element. The output of the map is then fed to an <em>accumulator</em>, which combines the elements using <code>+</code>, starting from an initial 0. The plan for <code>even-fibs</code> is analogous.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-17.gif" /></p>
<p><strong>Figure 2.7:</strong>  The signal-flow plans for the procedures <code>sum-odd-squares</code> (top) and <code>even-fibs</code> (bottom) reveal the commonality between the two programs.</p>
<p></p>
<p>Unfortunately, the two procedure definitions above fail to exhibit this signal-flow structure. For instance, if we examine the <code>sum-odd-squares</code> procedure, we find that the enumeration is implemented partly by the <code>null?</code> and <code>pair?</code> tests and partly by the tree-recursive structure of the procedure. Similarly, the accumulation is found partly in the tests and partly in the addition used in the recursion. In general, there are no distinct parts of either procedure that correspond to the elements in the signal-flow description. Our two procedures decompose the computations in a different way, spreading the enumeration over the program and mingling it with the map, the filter, and the accumulation. If we could organize our programs to make the signal-flow structure manifest in the procedures we write, this would increase the conceptual clarity of the resulting code.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_181">Sequence Operations</a></h4>
<p>The key to organizing programs so as to more clearly reflect the signal-flow structure is to concentrate on the ``signals'' that flow from one stage in the process to the next. If we represent these signals as lists, then we can use list operations to implement the processing at each of the stages. For instance, we can implement the mapping stages of the signal-flow diagrams using the <code>map</code> procedure from section <a href="#%_sec_2.2.1">2.2.1</a>:</p>
<p></p>
<p><code>(map square (list 1 2 3 4 5)) (1 4 9 16 25)</code></p>
<p></p>
<p></p>
<p>Filtering a sequence to select only those elements that satisfy a given predicate is accomplished by</p>
<p></p>
<p><code>(define (filter predicate sequence)   (cond ((null? sequence) nil)         ((predicate (car sequence))          (cons (car sequence)                (filter predicate (cdr sequence))))         (else (filter predicate (cdr sequence)))))</code></p>
<p></p>
<p>For example,</p>
<p></p>
<p><code>(filter odd? (list 1 2 3 4 5)) (1 3 5)</code></p>
<p></p>
<p></p>
<p>Accumulations can be implemented by</p>
<p></p>
<p><code>(define (accumulate op initial sequence)   (if (null? sequence)       initial       (op (car sequence)           (accumulate op initial (cdr sequence))))) (accumulate + 0 (list 1 2 3 4 5)) 15 (accumulate * 1 (list 1 2 3 4 5)) 120 (accumulate cons nil (list 1 2 3 4 5)) (1 2 3 4 5)</code></p>
<p></p>
<p></p>
<p>All that remains to implement signal-flow diagrams is to enumerate the sequence of elements to be processed. For <code>even-fibs</code>, we need to generate the sequence of integers in a given range, which we can do as follows:</p>
<p></p>
<p><code>(define (enumerate-interval low high)   (if (&gt; low high)       nil       (cons low (enumerate-interval (+ low 1) high)))) (enumerate-interval 2 7) (2 3 4 5 6 7)</code></p>
<p></p>
<p>To enumerate the leaves of a tree, we can use<a href="#footnote_Temp_182"><sup>14</sup></a></p>
<p></p>
<p><code>(define (enumerate-tree tree)   (cond ((null? tree) nil)         ((not (pair? tree)) (list tree))         (else (append (enumerate-tree (car tree))                       (enumerate-tree (cdr tree)))))) (enumerate-tree (list 1 (list 2 (list 3 4)) 5)) (1 2 3 4 5)</code></p>
<p></p>
<p></p>
<p>Now we can reformulate <code>sum-odd-squares</code> and <code>even-fibs</code> as in the signal-flow diagrams. For <code>sum-odd-squares</code>, we enumerate the sequence of leaves of the tree, filter this to keep only the odd numbers in the sequence, square each element, and sum the results:</p>
<p></p>
<p><code>(define (sum-odd-squares tree)   (accumulate +               0               (map square                    (filter odd?                            (enumerate-tree tree)))))</code></p>
<p></p>
<p>For <code>even-fibs</code>, we enumerate the integers from 0 to <em>n</em>, generate the Fibonacci number for each of these integers, filter the resulting sequence to keep only the even elements, and accumulate the results into a list:</p>
<p></p>
<p><code>(define (even-fibs n)   (accumulate cons               nil               (filter even?                       (map fib                            (enumerate-interval 0 n)))))</code></p>
<p></p>
<p></p>
<p>The value of expressing programs as sequence operations is that this helps us make program designs that are modular, that is, designs that are constructed by combining relatively independent pieces. We can encourage modular design by providing a library of standard components together with a conventional interface for connecting the components in flexible ways.</p>
<p>Modular construction is a powerful strategy for controlling complexity in engineering design. In real signal-processing applications, for example, designers regularly build systems by cascading elements selected from standardized families of filters and transducers. Similarly, sequence operations provide a library of standard program elements that we can mix and match. For instance, we can reuse pieces from the <code>sum-odd-squares</code> and <code>even-fibs</code> procedures in a program that constructs a list of the squares of the first <em>n</em> + 1 Fibonacci numbers:</p>
<p></p>
<p><code>(define (list-fib-squares n)   (accumulate cons               nil               (map square                    (map fib                         (enumerate-interval 0 n))))) (list-fib-squares 10) (0 1 1 4 9 25 64 169 441 1156 3025)</code></p>
<p></p>
<p>We can rearrange the pieces and use them in computing the product of the odd integers in a sequence:</p>
<p></p>
<p><code>(define (product-of-squares-of-odd-elements sequence)   (accumulate *               1               (map square                    (filter odd? sequence)))) (product-of-squares-of-odd-elements (list 1 2 3 4 5)) 225</code></p>
<p></p>
<p></p>
<p>We can also formulate conventional data-processing applications in terms of sequence operations. Suppose we have a sequence of personnel records and we want to find the salary of the highest-paid programmer. Assume that we have a selector <code>salary</code> that returns the salary of a record, and a predicate <code>programmer?</code> that tests if a record is for a programmer. Then we can write</p>
<p></p>
<p><code>(define (salary-of-highest-paid-programmer records)   (accumulate max               0               (map salary                    (filter programmer? records))))</code></p>
<p></p>
<p>These examples give just a hint of the vast range of operations that can be expressed as sequence operations.<a href="#footnote_Temp_183"><sup>15</sup></a></p>
<p>Sequences, implemented here as lists, serve as a conventional interface that permits us to combine processing modules. Additionally, when we uniformly represent structures as sequences, we have localized the data-structure dependencies in our programs to a small number of sequence operations. By changing these, we can experiment with alternative representations of sequences, while leaving the overall design of our programs intact. We will exploit this capability in section <a href="book-Z-H-24.html#%_sec_3.5">3.5</a>, when we generalize the sequence-processing paradigm to admit infinite sequences.</p>
<p></p>
<p><strong>Exercise 2.33.</strong>  Fill in the missing expressions to complete the following definitions of some basic list-manipulation operations as accumulations:</p>
<p></p>
<p><code>(define (map p sequence)   (accumulate (lambda (x y) &lt;??&gt;) nil sequence)) (define (append seq1 seq2)   (accumulate cons &lt;??&gt; &lt;??&gt;)) (define (length sequence)   (accumulate &lt;??&gt; 0 sequence))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.34.</strong>  Evaluating a polynomial in <em>x</em> at a given value of <em>x</em> can be formulated as an accumulation. We evaluate the polynomial</p>
<p></p>
<p><img src="ch2-Z-G-18.gif" /></p>
<p>using a well-known algorithm called <em>Horner's rule</em>, which structures the computation as</p>
<p></p>
<p><img src="ch2-Z-G-19.gif" /></p>
<p>In other words, we start with <em>a</em><sub><em>n</em></sub>, multiply by <em>x</em>, add <em>a</em><sub><em>n</em>-1</sub>, multiply by <em>x</em>, and so on, until we reach <em>a</em><sub>0</sub>.<a href="#footnote_Temp_186"><sup>16</sup></a> Fill in the following template to produce a procedure that evaluates a polynomial using Horner's rule. Assume that the coefficients of the polynomial are arranged in a sequence, from <em>a</em><sub>0</sub> through <em>a</em><sub><em>n</em></sub>.</p>
<p></p>
<p><code>(define (horner-eval x coefficient-sequence)   (accumulate (lambda (this-coeff higher-terms) &lt;??&gt;)               0               coefficient-sequence))</code></p>
<p></p>
<p>For example, to compute 1 + 3<em>x</em> + 5<em>x</em><sup>3</sup> + <em>x</em><sup>5</sup> at <em>x</em> = 2 you would evaluate</p>
<p></p>
<p><code>(horner-eval 2 (list 1 3 0 5 0 1))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.35.</strong>  Redefine <code>count-leaves</code> from section <a href="#%_sec_2.2.2">2.2.2</a> as an accumulation:</p>
<p></p>
<p><code>(define (count-leaves t)   (accumulate &lt;??&gt; &lt;??&gt; (map &lt;??&gt; &lt;??&gt;)))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.36.</strong>  The procedure <code>accumulate-n</code> is similar to <code>accumulate</code> except that it takes as its third argument a sequence of sequences, which are all assumed to have the same number of elements. It applies the designated accumulation procedure to combine all the first elements of the sequences, all the second elements of the sequences, and so on, and returns a sequence of the results. For instance, if <code>s</code> is a sequence containing four sequences, <code>((1 2 3) (4 5 6) (7 8 9) (10 11 12)),</code> then the value of <code>(accumulate-n + 0 s)</code> should be the sequence <code>(22 26 30)</code>. Fill in the missing expressions in the following definition of <code>accumulate-n</code>:</p>
<p></p>
<p><code>(define (accumulate-n op init seqs)   (if (null? (car seqs))       nil       (cons (accumulate op init &lt;??&gt;)             (accumulate-n op init &lt;??&gt;))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.37.</strong>  Suppose we represent vectors <em>v</em> = (<em>v</em><sub><em>i</em></sub>) as sequences of numbers, and matrices <em>m</em> = (<em>m</em><sub><em>i</em><em>j</em></sub>) as sequences of vectors (the rows of the matrix). For example, the matrix</p>
<p></p>
<p><img src="ch2-Z-G-20.gif" /></p>
<p>is represented as the sequence <code>((1 2 3 4) (4 5 6 6) (6 7 8 9))</code>. With this representation, we can use sequence operations to concisely express the basic matrix and vector operations. These operations (which are described in any book on matrix algebra) are the following:</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-21.gif" /></p>
<p></p>
<p>We can define the dot product as<a href="#footnote_Temp_190"><sup>17</sup></a></p>
<p></p>
<p><code>(define (dot-product v w)   (accumulate + 0 (map * v w)))</code></p>
<p></p>
<p>Fill in the missing expressions in the following procedures for computing the other matrix operations. (The procedure <code>accumulate-n</code> is defined in exercise <a href="#%_thm_2.36">2.36</a>.)</p>
<p></p>
<p><code>(define (matrix-*-vector m v)   (map &lt;??&gt; m)) (define (transpose mat)   (accumulate-n &lt;??&gt; &lt;??&gt; mat)) (define (matrix-*-matrix m n)   (let ((cols (transpose n)))     (map &lt;??&gt; m)))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.38.</strong>  The <code>accumulate</code> procedure is also known as <code>fold-right</code>, because it combines the first element of the sequence with the result of combining all the elements to the right. There is also a <code>fold-left</code>, which is similar to <code>fold-right</code>, except that it combines elements working in the opposite direction:</p>
<p></p>
<p><code>(define (fold-left op initial sequence)   (define (iter result rest)     (if (null? rest)         result         (iter (op result (car rest))               (cdr rest))))   (iter initial sequence))</code></p>
<p></p>
<p>What are the values of</p>
<p></p>
<p><code>(fold-right / 1 (list 1 2 3)) (fold-left / 1 (list 1 2 3)) (fold-right list nil (list 1 2 3)) (fold-left list nil (list 1 2 3))</code></p>
<p></p>
<p>Give a property that <code>op</code> should satisfy to guarantee that <code>fold-right</code> and <code>fold-left</code> will produce the same values for any sequence.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.39.</strong>   Complete the following definitions of <code>reverse</code> (exercise <a href="#%_thm_2.18">2.18</a>) in terms of <code>fold-right</code> and <code>fold-left</code> from exercise <a href="#%_thm_2.38">2.38</a>:</p>
<p></p>
<p><code>(define (reverse sequence)   (fold-right (lambda (x y) &lt;??&gt;) nil sequence)) (define (reverse sequence)   (fold-left (lambda (x y) &lt;??&gt;) nil sequence))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_193">Nested Mappings</a></h4>
<p>We can extend the sequence paradigm to include many computations that are commonly expressed using nested loops.<a href="#footnote_Temp_194"><sup>18</sup></a> Consider this problem: Given a positive integer <em>n</em>, find all ordered pairs of distinct positive integers <em>i</em> and <em>j</em>, where 1&lt; <em>j</em>&lt; <em>i</em>&lt; <em>n</em>, such that <em>i</em> + <em>j</em> is prime. For example, if <em>n</em> is 6, then the pairs are the following:</p>
<p></p>
<p><img src="ch2-Z-G-22.gif" /></p>
<p>A natural way to organize this computation is to generate the sequence of all ordered pairs of positive integers less than or equal to <em>n</em>, filter to select those pairs whose sum is prime, and then, for each pair (<em>i</em>, <em>j</em>) that passes through the filter, produce the triple (<em>i</em>,<em>j</em>,<em>i</em> + <em>j</em>).</p>
<p>Here is a way to generate the sequence of pairs: For each integer <em>i</em>&lt; <em>n</em>, enumerate the integers <em>j</em>&lt;<em>i</em>, and for each such <em>i</em> and <em>j</em> generate the pair (<em>i</em>,<em>j</em>). In terms of sequence operations, we map along the sequence <code>(enumerate-interval 1 n)</code>. For each <em>i</em> in this sequence, we map along the sequence <code>(enumerate-interval 1 (- i 1))</code>. For each <em>j</em> in this latter sequence, we generate the pair <code>(list i j)</code>. This gives us a sequence of pairs for each <em>i</em>. Combining all the sequences for all the <em>i</em> (by accumulating with <code>append</code>) produces the required sequence of pairs:<a href="#footnote_Temp_195"><sup>19</sup></a></p>
<p></p>
<p><code>(accumulate append             nil             (map (lambda (i)                    (map (lambda (j) (list i j))                         (enumerate-interval 1 (- i 1))))                  (enumerate-interval 1 n)))</code></p>
<p></p>
<p>The combination of mapping and accumulating with <code>append</code> is so common in this sort of program that we will isolate it as a separate procedure:</p>
<p></p>
<p><code>(define (flatmap proc seq)   (accumulate append nil (map proc seq)))</code></p>
<p></p>
<p>Now filter this sequence of pairs to find those whose sum is prime. The filter predicate is called for each element of the sequence; its argument is a pair and it must extract the integers from the pair. Thus, the predicate to apply to each element in the sequence is</p>
<p></p>
<p><code>(define (prime-sum? pair)   (prime? (+ (car pair) (cadr pair))))</code></p>
<p></p>
<p>Finally, generate the sequence of results by mapping over the filtered pairs using the following procedure, which constructs a triple consisting of the two elements of the pair along with their sum:</p>
<p></p>
<p><code>(define (make-pair-sum pair)   (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))</code></p>
<p></p>
<p>Combining all these steps yields the complete procedure:</p>
<p></p>
<p><code>(define (prime-sum-pairs n)   (map make-pair-sum        (filter prime-sum?                (flatmap                 (lambda (i)                   (map (lambda (j) (list i j))                        (enumerate-interval 1 (- i 1))))                 (enumerate-interval 1 n)))))</code></p>
<p></p>
<p></p>
<p>Nested mappings are also useful for sequences other than those that enumerate intervals. Suppose we wish to generate all the permutations of a set <em>S</em>; that is, all the ways of ordering the items in the set. For instance, the permutations of {1,2,3} are {1,2,3}, { 1,3,2}, {2,1,3}, { 2,3,1}, { 3,1,2}, and { 3,2,1}. Here is a plan for generating the permutations of <em>S</em>: For each item <em>x</em> in <em>S</em>, recursively generate the sequence of permutations of <em>S</em> - <em>x</em>,<a href="#footnote_Temp_196"><sup>20</sup></a> and adjoin <em>x</em> to the front of each one. This yields, for each <em>x</em> in <em>S</em>, the sequence of permutations of <em>S</em> that begin with <em>x</em>. Combining these sequences for all <em>x</em> gives all the permutations of <em>S</em>:<a href="#footnote_Temp_197"><sup>21</sup></a></p>
<p></p>
<p></p>
<p><code>(define (permutations s)   (if (null? s)                    ; empty set?       (list nil)                   ; sequence containing empty set       (flatmap (lambda (x)                  (map (lambda (p) (cons x p))                       (permutations (remove x s))))                s)))</code></p>
<p></p>
<p>Notice how this strategy reduces the problem of generating permutations of <em>S</em> to the problem of generating the permutations of sets with fewer elements than <em>S</em>. In the terminal case, we work our way down to the empty list, which represents a set of no elements. For this, we generate <code>(list nil)</code>, which is a sequence with one item, namely the set with no elements. The <code>remove</code> procedure used in <code>permutations</code> returns all the items in a given sequence except for a given item. This can be expressed as a simple filter:</p>
<p></p>
<p><code>(define (remove item sequence)   (filter (lambda (x) (not (= x item)))           sequence))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.40.</strong>  Define a procedure <code>unique-pairs</code> that, given an integer <em>n</em>, generates the sequence of pairs (<em>i</em>,<em>j</em>) with 1&lt; <em>j</em>&lt; <em>i</em>&lt; <em>n</em>. Use <code>unique-pairs</code> to simplify the definition of <code>prime-sum-pairs</code> given above.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.41.</strong>  Write a procedure to find all ordered triples of distinct positive integers <em>i</em>, <em>j</em>, and <em>k</em> less than or equal to a given integer <em>n</em> that sum to a given integer <em>s</em>.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.42.</strong>  </p>
<p></p>
<p><img src="ch2-Z-G-23.gif" /></p>
<p><strong>Figure 2.8:</strong>  A solution to the eight-queens puzzle.</p>
<p>The ``eight-queens puzzle'' asks how to place eight queens on a chessboard so that no queen is in check from any other (i.e., no two queens are in the same row, column, or diagonal). One possible solution is shown in figure <a href="#%_fig_2.8">2.8</a>. One way to solve the puzzle is to work across the board, placing a queen in each column. Once we have placed <em>k</em> - 1 queens, we must place the <em>k</em>th queen in a position where it does not check any of the queens already on the board. We can formulate this approach recursively: Assume that we have already generated the sequence of all possible ways to place <em>k</em> - 1 queens in the first <em>k</em> - 1 columns of the board. For each of these ways, generate an extended set of positions by placing a queen in each row of the <em>k</em>th column. Now filter these, keeping only the positions for which the queen in the <em>k</em>th column is safe with respect to the other queens. This produces the sequence of all ways to place <em>k</em> queens in the first <em>k</em> columns. By continuing this process, we will produce not only one solution, but all solutions to the puzzle.</p>
<p>We implement this solution as a procedure <code>queens</code>, which returns a sequence of all solutions to the problem of placing <em>n</em> queens on an <em>n</em>× <em>n</em> chessboard. <code>Queens</code> has an internal procedure <code>queen-cols</code> that returns the sequence of all ways to place queens in the first <em>k</em> columns of the board.</p>
<p></p>
<p><code>(define (queens board-size)   (define (queen-cols k)       (if (= k 0)         (list empty-board)         (filter          (lambda (positions) (safe? k positions))          (flatmap           (lambda (rest-of-queens)             (map (lambda (new-row)                    (adjoin-position new-row k rest-of-queens))                  (enumerate-interval 1 board-size)))           (queen-cols (- k 1))))))   (queen-cols board-size))</code></p>
<p></p>
<p>In this procedure <code>rest-of-queens</code> is a way to place <em>k</em> - 1 queens in the first <em>k</em> - 1 columns, and <code>new-row</code> is a proposed row in which to place the queen for the <em>k</em>th column. Complete the program by implementing the representation for sets of board positions, including the procedure <code>adjoin-position</code>, which adjoins a new row-column position to a set of positions, and <code>empty-board</code>, which represents an empty set of positions. You must also write the procedure <code>safe?</code>, which determines for a set of positions, whether the queen in the <em>k</em>th column is safe with respect to the others. (Note that we need only check whether the new queen is safe -- the other queens are already guaranteed safe with respect to each other.)</p>
<p></p>
<p></p>
<p><strong>Exercise 2.43.</strong>  Louis Reasoner is having a terrible time doing exercise <a href="#%_thm_2.42">2.42</a>. His <code>queens</code> procedure seems to work, but it runs extremely slowly. (Louis never does manage to wait long enough for it to solve even the 6× 6 case.) When Louis asks Eva Lu Ator for help, she points out that he has interchanged the order of the nested mappings in the <code>flatmap</code>, writing it as</p>
<p></p>
<p><code>(flatmap  (lambda (new-row)    (map (lambda (rest-of-queens)           (adjoin-position new-row k rest-of-queens))         (queen-cols (- k 1))))  (enumerate-interval 1 board-size))</code></p>
<p></p>
<p>Explain why this interchange makes the program run slowly. Estimate how long it will take Louis's program to solve the eight-queens puzzle, assuming that the program in exercise <a href="#%_thm_2.42">2.42</a> solves the puzzle in time <em>T</em>.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.2.4">2.2.4  Example: A Picture Language</a></h3>
<p>This section presents a simple language for drawing pictures that illustrates the power of data abstraction and closure, and also exploits higher-order procedures in an essential way. The language is designed to make it easy to experiment with patterns such as the ones in figure <a href="#%_fig_2.9">2.9</a>, which are composed of repeated elements that are shifted and scaled.<a href="#footnote_Temp_202"><sup>22</sup></a> In this language, the data objects being combined are represented as procedures rather than as list structure. Just as <code>cons</code>, which satisfies the closure property, allowed us to easily build arbitrarily complicated list structure, the operations in this language, which also satisfy the closure property, allow us to easily build arbitrarily complicated patterns.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-24.gif" />            <img src="ch2-Z-G-25.gif" /> </p>
<p><strong>Figure 2.9:</strong>  Designs generated with the picture language.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_203">The picture language</a></h4>
<p>When we began our study of programming in section <a href="book-Z-H-10.html#%_sec_1.1">1.1</a>, we emphasized the importance of describing a language by focusing on the language's primitives, its means of combination, and its means of abstraction. We'll follow that framework here.</p>
<p>Part of the elegance of this picture language is that there is only one kind of element, called a <em>painter</em>. A painter draws an image that is shifted and scaled to fit within a designated parallelogram-shaped frame. For example, there's a primitive painter we'll call <code>wave</code> that makes a crude line drawing, as shown in figure <a href="#%_fig_2.10">2.10</a>. The actual shape of the drawing depends on the frame -- all four images in figure <a href="#%_fig_2.10">2.10</a> are produced by the same <code>wave</code> painter, but with respect to four different frames. Painters can be more elaborate than this: The primitive painter called <code>rogers</code> paints a picture of MIT's founder, William Barton Rogers, as shown in figure <a href="#%_fig_2.11">2.11</a>.<a href="#footnote_Temp_204"><sup>23</sup></a> The four images in figure <a href="#%_fig_2.11">2.11</a> are drawn with respect to the same four frames as the <code>wave</code> images in figure <a href="#%_fig_2.10">2.10</a>.</p>
<p>To combine images, we use various operations that construct new painters from given painters. For example, the <code>beside</code> operation takes two painters and produces a new, compound painter that draws the first painter's image in the left half of the frame and the second painter's image in the right half of the frame. Similarly, <code>below</code> takes two painters and produces a compound painter that draws the first painter's image below the second painter's image. Some operations transform a single painter to produce a new painter. For example, <code>flip-vert</code> takes a painter and produces a painter that draws its image upside-down, and <code>flip-horiz</code> produces a painter that draws the original painter's image left-to-right reversed.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-26.gif" />            <img src="ch2-Z-G-27.gif" /> </p>
<p><img src="ch2-Z-G-28.gif" />            <img src="ch2-Z-G-29.gif" /> </p>
<p><strong>Figure 2.10:</strong>  Images produced by the <code>wave</code> painter, with respect to four different frames. The frames, shown with dotted lines, are not part of the images.</p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-30.gif" />            <img src="ch2-Z-G-31.gif" /> </p>
<p><img src="ch2-Z-G-32.gif" />            <img src="ch2-Z-G-33.gif" /> </p>
<p><strong>Figure 2.11:</strong>  Images of William Barton Rogers, founder and first president of MIT, painted with respect to the same four frames as in figure <a href="#%_fig_2.10">2.10</a> (original image reprinted with the permission of the MIT Museum).</p>
<p></p>
<p>Figure <a href="#%_fig_2.12">2.12</a> shows the drawing of a painter called <code>wave4</code> that is built up in two stages starting from <code>wave</code>:</p>
<p></p>
<p><code>(define wave2 (beside wave (flip-vert wave))) (define wave4 (below wave2 wave2))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-34.gif" />            <img src="ch2-Z-G-35.gif" /> </p>
<p></p>
<p><code>(define wave2                         (define wave4   (beside wave (flip-vert wave)))       (below wave2 wave2))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 2.12:</strong>  Creating a complex figure, starting from the <code>wave</code> painter of figure <a href="#%_fig_2.10">2.10</a>.</p>
<p></p>
<p>In building up a complex image in this manner we are exploiting the fact that painters are closed under the language's means of combination. The <code>beside</code> or <code>below</code> of two painters is itself a painter; therefore, we can use it as an element in making more complex painters. As with building up list structure using <code>cons</code>, the closure of our data under the means of combination is crucial to the ability to create complex structures while using only a few operations.</p>
<p>Once we can combine painters, we would like to be able to abstract typical patterns of combining painters. We will implement the painter operations as Scheme procedures. This means that we don't need a special abstraction mechanism in the picture language: Since the means of combination are ordinary Scheme procedures, we automatically have the capability to do anything with painter operations that we can do with procedures. For example, we can abstract the pattern in <code>wave4</code> as</p>
<p></p>
<p></p>
<p><code>(define (flipped-pairs painter)   (let ((painter2 (beside painter (flip-vert painter))))     (below painter2 painter2)))</code></p>
<p></p>
<p>and define <code>wave4</code> as an instance of this pattern:</p>
<p></p>
<p></p>
<p><code>(define wave4 (flipped-pairs wave))</code></p>
<p></p>
<p></p>
<p>We can also define recursive operations. Here's one that makes painters split and branch towards the right as shown in figures <a href="#%_fig_2.13">2.13</a> and  <a href="#%_fig_2.14">2.14</a>:</p>
<p></p>
<p><code>(define (right-split painter n)   (if (= n 0)       painter       (let ((smaller (right-split painter (- n 1))))         (beside painter (below smaller smaller)))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-36.gif" />           <img src="ch2-Z-G-37.gif" /> </p>
<p></p>
<p><code>     right-split n                   corner-split n</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 2.13:</strong>  Recursive plans for <code>right-split</code> and <code>corner-split</code>.</p>
<p></p>
<p>We can produce balanced patterns by branching upwards as well as towards the right (see exercise <a href="#%_thm_2.44">2.44</a> and figures <a href="#%_fig_2.13">2.13</a> and  <a href="#%_fig_2.14">2.14</a>):</p>
<p></p>
<p></p>
<p><code>(define (corner-split painter n)   (if (= n 0)       painter       (let ((up (up-split painter (- n 1)))             (right (right-split painter (- n 1))))         (let ((top-left (beside up up))               (bottom-right (below right right))               (corner (corner-split painter (- n 1))))           (beside (below painter top-left)                   (below bottom-right corner))))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-38.gif" />            <img src="ch2-Z-G-39.gif" /> </p>
<p></p>
<p><code>     (right-split wave 4)         (right-split rogers 4)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-40.gif" />            <img src="ch2-Z-G-41.gif" /> </p>
<p></p>
<p><code>    (corner-split wave 4)         (corner-split rogers 4)</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 2.14:</strong>  The recursive operations <code>right-split</code> and <code>corner-split</code> applied to the painters <code>wave</code> and <code>rogers</code>. Combining four <code>corner-split</code> figures produces symmetric <code>square-limit</code> designs as shown in figure <a href="#%_fig_2.9">2.9</a>.</p>
<p></p>
<p>By placing four copies of a <code>corner-split</code> appropriately, we obtain a pattern called <code>square-limit</code>, whose application to <code>wave</code> and <code>rogers</code> is shown in figure <a href="#%_fig_2.9">2.9</a>:</p>
<p></p>
<p><code>(define (square-limit painter n)   (let ((quarter (corner-split painter n)))     (let ((half (beside (flip-horiz quarter) quarter)))       (below (flip-vert half) half))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.44.</strong>  Define the procedure <code>up-split</code> used by <code>corner-split</code>. It is similar to <code>right-split</code>, except that it switches the roles of <code>below</code> and <code>beside</code>.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_206">Higher-order operations</a></h4>
<p>In addition to abstracting patterns of combining painters, we can work at a higher level, abstracting patterns of combining painter operations. That is, we can view the painter operations as elements to manipulate and can write means of combination for these elements -- procedures that take painter operations as arguments and create new painter operations.</p>
<p>For example, <code>flipped-pairs</code> and <code>square-limit</code> each arrange four copies of a painter's image in a square pattern; they differ only in how they orient the copies. One way to abstract this pattern of painter combination is with the following procedure, which takes four one-argument painter operations and produces a painter operation that transforms a given painter with those four operations and arranges the results in a square. <code>Tl</code>, <code>tr</code>, <code>bl</code>, and <code>br</code> are the transformations to apply to the top left copy, the top right copy, the bottom left copy, and the bottom right copy, respectively.</p>
<p></p>
<p></p>
<p><code>(define (square-of-four tl tr bl br)   (lambda (painter)     (let ((top (beside (tl painter) (tr painter)))           (bottom (beside (bl painter) (br painter))))       (below bottom top))))</code></p>
<p></p>
<p>Then <code>flipped-pairs</code> can be defined in terms of <code>square-of-four</code> as follows:<a href="#footnote_Temp_207"><sup>24</sup></a></p>
<p></p>
<p></p>
<p><code>(define (flipped-pairs painter)   (let ((combine4 (square-of-four identity flip-vert                                   identity flip-vert)))     (combine4 painter)))</code></p>
<p></p>
<p>and <code>square-limit</code> can be expressed as<a href="#footnote_Temp_208"><sup>25</sup></a></p>
<p></p>
<p></p>
<p><code>(define (square-limit painter n)   (let ((combine4 (square-of-four flip-horiz identity                                   rotate180 flip-vert)))     (combine4 (corner-split painter n))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.45.</strong>  <code>Right-split</code> and <code>up-split</code> can be expressed as instances of a general splitting operation. Define a procedure <code>split</code> with the property that evaluating</p>
<p></p>
<p><code>(define right-split (split beside below)) (define up-split (split below beside))</code></p>
<p></p>
<p>produces procedures <code>right-split</code> and <code>up-split</code> with the same behaviors as the ones already defined.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_210">Frames</a></h4>
<p>Before we can show how to implement painters and their means of combination, we must first consider frames. A frame can be described by three vectors -- an origin vector and two edge vectors. The origin vector specifies the offset of the frame's origin from some absolute origin in the plane, and the edge vectors specify the offsets of the frame's corners from its origin. If the edges are perpendicular, the frame will be rectangular. Otherwise the frame will be a more general parallelogram.</p>
<p>Figure <a href="#%_fig_2.15">2.15</a> shows a frame and its associated vectors. In accordance with data abstraction, we need not be specific yet about how frames are represented, other than to say that there is a constructor <code>make-frame</code>, which takes three vectors and produces a frame, and three corresponding selectors <code>origin-frame</code>, <code>edge1-frame</code>, and <code>edge2-frame</code> (see exercise <a href="#%_thm_2.47">2.47</a>).</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-42.gif" /></p>
<p><strong>Figure 2.15:</strong>  A frame is described by three vectors -- an origin and two edges.</p>
<p></p>
<p>We will use coordinates in the unit square (0&lt; <em>x</em>,<em>y</em>&lt; 1) to specify images. With each frame, we associate a <em>frame coordinate map</em>, which will be used to shift and scale images to fit the frame. The map transforms the unit square into the frame by mapping the vector <strong><em>v</em></strong> = (<em>x</em>,<em>y</em>) to the vector sum</p>
<p></p>
<p><img src="ch2-Z-G-43.gif" /></p>
<p>For example, (0,0) is mapped to the origin of the frame, (1,1) to the vertex diagonally opposite the origin, and (0.5,0.5) to the center of the frame. We can create a frame's coordinate map with the following procedure:<a href="#footnote_Temp_211"><sup>26</sup></a></p>
<p></p>
<p></p>
<p><code>(define (frame-coord-map frame)   (lambda (v)     (add-vect      (origin-frame frame)      (add-vect (scale-vect (xcor-vect v)                            (edge1-frame frame))                (scale-vect (ycor-vect v)                            (edge2-frame frame))))))</code></p>
<p></p>
<p>Observe that applying <code>frame-coord-map</code> to a frame returns a procedure that, given a vector, returns a vector. If the argument vector is in the unit square, the result vector will be in the frame. For example,</p>
<p></p>
<p><code>((frame-coord-map a-frame) (make-vect 0 0))</code></p>
<p></p>
<p>returns the same vector as</p>
<p></p>
<p><code>(origin-frame a-frame)</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.46.</strong>  A two-dimensional vector <strong>v</strong> running from the origin to a point can be represented as a pair consisting of an <em>x</em>-coordinate and a <em>y</em>-coordinate. Implement a data abstraction for vectors by giving a constructor <code>make-vect</code> and corresponding selectors <code>xcor-vect</code> and <code>ycor-vect</code>. In terms of your selectors and constructor, implement procedures <code>add-vect</code>, <code>sub-vect</code>, and <code>scale-vect</code> that perform the operations vector addition, vector subtraction, and multiplying a vector by a scalar:</p>
<p></p>
<p><img src="ch2-Z-G-44.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.47.</strong>  Here are two possible constructors for frames:</p>
<p></p>
<p><code>(define (make-frame origin edge1 edge2)   (list origin edge1 edge2))  (define (make-frame origin edge1 edge2)   (cons origin (cons edge1 edge2)))</code></p>
<p></p>
<p>For each constructor supply the appropriate selectors to produce an implementation for frames.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_214">Painters</a></h4>
<p>A painter is represented as a procedure that, given a frame as argument, draws a particular image shifted and scaled to fit the frame. That is to say, if <code>p</code> is a painter and <code>f</code> is a frame, then we produce <code>p</code>'s image in <code>f</code> by calling <code>p</code> with <code>f</code> as argument.</p>
<p>The details of how primitive painters are implemented depend on the particular characteristics of the graphics system and the type of image to be drawn. For instance, suppose we have a procedure <code>draw-line</code> that draws a line on the screen between two specified points. Then we can create painters for line drawings, such as the <code>wave</code> painter in figure <a href="#%_fig_2.10">2.10</a>, from lists of line segments as follows:<a href="#footnote_Temp_215"><sup>27</sup></a></p>
<p></p>
<p><code>(define (segments-&gt;painter segment-list)   (lambda (frame)     (for-each      (lambda (segment)        (draw-line         ((frame-coord-map frame) (start-segment segment))         ((frame-coord-map frame) (end-segment segment))))      segment-list)))</code></p>
<p></p>
<p>The segments are given using coordinates with respect to the unit square. For each segment in the list, the painter transforms the segment endpoints with the frame coordinate map and draws a line between the transformed points.</p>
<p>Representing painters as procedures erects a powerful abstraction barrier in the picture language. We can create and intermix all sorts of primitive painters, based on a variety of graphics capabilities. The details of their implementation do not matter. Any procedure can serve as a painter, provided that it takes a frame as argument and draws something scaled to fit the frame.<a href="#footnote_Temp_216"><sup>28</sup></a></p>
<p><strong>Exercise 2.48.</strong>  A directed line segment in the plane can be represented as a pair of vectors -- the vector running from the origin to the start-point of the segment, and the vector running from the origin to the end-point of the segment. Use your vector representation from exercise <a href="#%_thm_2.46">2.46</a> to define a representation for segments with a constructor <code>make-segment</code> and selectors <code>start-segment</code> and <code>end-segment</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.49.</strong>  Use <code>segments-&gt;painter</code> to define the following primitive painters:</p>
<p>a.  The painter that draws the outline of the designated frame.</p>
<p>b.  The painter that draws an ``X'' by connecting opposite corners of the frame.</p>
<p>c.  The painter that draws a diamond shape by connecting the midpoints of the sides of the frame.</p>
<p>d.  The <code>wave</code> painter.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_219">Transforming and combining painters</a></h4>
<p>An operation on painters (such as <code>flip-vert</code> or <code>beside</code>) works by creating a painter that invokes the original painters with respect to frames derived from the argument frame. Thus, for example, <code>flip-vert</code> doesn't have to know how a painter works in order to flip it -- it just has to know how to turn a frame upside down: The flipped painter just uses the original painter, but in the inverted frame.</p>
<p>Painter operations are based on the procedure <code>transform-painter</code>, which takes as arguments a painter and information on how to transform a frame and produces a new painter. The transformed painter, when called on a frame, transforms the frame and calls the original painter on the transformed frame. The arguments to <code>transform-painter</code> are points (represented as vectors) that specify the corners of the new frame: When mapped into the frame, the first point specifies the new frame's origin and the other two specify the ends of its edge vectors. Thus, arguments within the unit square specify a frame contained within the original frame.</p>
<p></p>
<p></p>
<p><code>(define (transform-painter painter origin corner1 corner2)   (lambda (frame)     (let ((m (frame-coord-map frame)))       (let ((new-origin (m origin)))         (painter          (make-frame new-origin                      (sub-vect (m corner1) new-origin)                      (sub-vect (m corner2) new-origin)))))))</code></p>
<p></p>
<p></p>
<p>Here's how to flip painter images vertically:</p>
<p></p>
<p><code>(define (flip-vert painter)   (transform-painter painter                      (make-vect 0.0 1.0)   ; new origin</code><br />                      (make-vect 1.0 1.0)   <em>; new end of <code>edge1</code></em><br />                      (make-vect 0.0 0.0))) <em>; new end of <code>edge2</code></em><br /></p>
<p></p>
<p>Using <code>transform-painter</code>, we can easily define new transformations. For example, we can define a painter that shrinks its image to the upper-right quarter of the frame it is given:</p>
<p></p>
<p><code>(define (shrink-to-upper-right painter)   (transform-painter painter                      (make-vect 0.5 0.5)                      (make-vect 1.0 0.5)                      (make-vect 0.5 1.0)))</code></p>
<p></p>
<p>Other transformations rotate images counterclockwise by 90 degrees<a href="#footnote_Temp_220"><sup>29</sup></a></p>
<p></p>
<p><code>(define (rotate90 painter)   (transform-painter painter                      (make-vect 1.0 0.0)                      (make-vect 1.0 1.0)                      (make-vect 0.0 0.0)))</code></p>
<p></p>
<p>or squash images towards the center of the frame:<a href="#footnote_Temp_221"><sup>30</sup></a></p>
<p></p>
<p><code>(define (squash-inwards painter)   (transform-painter painter                      (make-vect 0.0 0.0)                      (make-vect 0.65 0.35)                      (make-vect 0.35 0.65)))</code></p>
<p></p>
<p></p>
<p>Frame transformation is also the key to defining means of combining two or more painters. The <code>beside</code> procedure, for example, takes two painters, transforms them to paint in the left and right halves of an argument frame respectively, and produces a new, compound painter. When the compound painter is given a frame, it calls the first transformed painter to paint in the left half of the frame and calls the second transformed painter to paint in the right half of the frame:</p>
<p></p>
<p><code>(define (beside painter1 painter2)   (let ((split-point (make-vect 0.5 0.0)))     (let ((paint-left            (transform-painter painter1                               (make-vect 0.0 0.0)                               split-point                               (make-vect 0.0 1.0)))           (paint-right            (transform-painter painter2                               split-point                               (make-vect 1.0 0.0)                               (make-vect 0.5 1.0))))       (lambda (frame)         (paint-left frame)         (paint-right frame)))))</code></p>
<p></p>
<p></p>
<p>Observe how the painter data abstraction, and in particular the representation of painters as procedures, makes <code>beside</code> easy to implement. The <code>beside</code> procedure need not know anything about the details of the component painters other than that each painter will draw something in its designated frame.</p>
<p></p>
<p><strong>Exercise 2.50.</strong>  Define the transformation <code>flip-horiz</code>, which flips painters horizontally, and transformations that rotate painters counterclockwise by 180 degrees and 270 degrees.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.51.</strong>  Define the <code>below</code> operation for painters. <code>Below</code> takes two painters as arguments. The resulting painter, given a frame, draws with the first painter in the bottom of the frame and with the second painter in the top. Define <code>below</code> in two different ways -- first by writing a procedure that is analogous to the <code>beside</code> procedure given above, and again in terms of <code>beside</code> and suitable rotation operations (from exercise <a href="#%_thm_2.50">2.50</a>).</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_224">Levels of language for robust design</a></h4>
<p>The picture language exercises some of the critical ideas we've introduced about abstraction with procedures and data. The fundamental data abstractions, painters, are implemented using procedural representations, which enables the language to handle different basic drawing capabilities in a uniform way. The means of combination satisfy the closure property, which permits us to easily build up complex designs. Finally, all the tools for abstracting procedures are available to us for abstracting means of combination for painters.</p>
<p>We have also obtained a glimpse of another crucial idea about languages and program design. This is the approach of <em>stratified design</em>, the notion that a complex system should be structured as a sequence of levels that are described using a sequence of languages. Each level is constructed by combining parts that are regarded as primitive at that level, and the parts constructed at each level are used as primitives at the next level. The language used at each level of a stratified design has primitives, means of combination, and means of abstraction appropriate to that level of detail.</p>
<p>Stratified design pervades the engineering of complex systems. For example, in computer engineering, resistors and transistors are combined (and described using a language of analog circuits) to produce parts such as and-gates and or-gates, which form the primitives of a language for digital-circuit design.<a href="#footnote_Temp_225"><sup>31</sup></a> These parts are combined to build processors, bus structures, and memory systems, which are in turn combined to form computers, using languages appropriate to computer architecture. Computers are combined to form distributed systems, using languages appropriate for describing network interconnections, and so on.</p>
<p>As a tiny example of stratification, our picture language uses primitive elements (primitive painters) that are created using a language that specifies points and lines to provide the lists of line segments for <code>segments-&gt;painter</code>, or the shading details for a painter like <code>rogers</code>. The bulk of our description of the picture language focused on combining these primitives, using geometric combiners such as <code>beside</code> and <code>below</code>. We also worked at a higher level, regarding <code>beside</code> and <code>below</code> as primitives to be manipulated in a language whose operations, such as <code>square-of-four</code>, capture common patterns of combining geometric combiners.</p>
<p>Stratified design helps make programs <em>robust</em>, that is, it makes it likely that small changes in a specification will require correspondingly small changes in the program. For instance, suppose we wanted to change the image based on <code>wave</code> shown in figure <a href="#%_fig_2.9">2.9</a>. We could work at the lowest level to change the detailed appearance of the <code>wave</code> element; we could work at the middle level to change the way <code>corner-split</code> replicates the <code>wave</code>; we could work at the highest level to change how <code>square-limit</code> arranges the four copies of the corner. In general, each level of a stratified design provides a different vocabulary for expressing the characteristics of the system, and a different kind of ability to change it.</p>
<p></p>
<p><strong>Exercise 2.52.</strong>  Make changes to the square limit of <code>wave</code> shown in figure <a href="#%_fig_2.9">2.9</a> by working at each of the levels described above. In particular:</p>
<p>a.  Add some segments to the primitive <code>wave</code> painter of exercise  <a href="#%_thm_2.49">2.49</a> (to add a smile, for example).</p>
<p>b.  Change the pattern constructed by <code>corner-split</code> (for example, by using only one copy of the <code>up-split</code> and <code>right-split</code> images instead of two).</p>
<p>c.  Modify the version of <code>square-limit</code> that uses <code>square-of-four</code> so as to assemble the corners in a different pattern. (For example, you might make the big Mr. Rogers look outward from each corner of the square.)</p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_154"><sup>6</sup></a> The use of the word ``closure'' here comes from abstract algebra, where a set of elements is said to be closed under an operation if applying the operation to elements in the set produces an element that is again an element of the set. The Lisp community also (unfortunately) uses the word ``closure'' to describe a totally unrelated concept: A closure is an implementation technique for representing procedures with free variables. We do not use the word ``closure'' in this second sense in this book.</p>
<p><a href="#call_footnote_Temp_155"><sup>7</sup></a> The notion that a means of combination should satisfy closure is a straightforward idea. Unfortunately, the data combiners provided in many popular programming languages do not satisfy closure, or make closure cumbersome to exploit. In Fortran or Basic, one typically combines data elements by assembling them into arrays -- but one cannot form arrays whose elements are themselves arrays. Pascal and C admit structures whose elements are structures. However, this requires that the programmer manipulate pointers explicitly, and adhere to the restriction that each field of a structure can contain only elements of a prespecified form. Unlike Lisp with its pairs, these languages have no built-in general-purpose glue that makes it easy to manipulate compound data in a uniform way. This limitation lies behind Alan Perlis's comment in his foreword to this book: ``In Pascal the plethora of declarable data structures induces a specialization within functions that inhibits and penalizes casual cooperation. It is better to have 100 functions operate on one data structure than to have 10 functions operate on 10 data structures.''</p>
<p><a href="#call_footnote_Temp_156"><sup>8</sup></a> In this book, we use <em>list</em> to mean a chain of pairs terminated by the end-of-list marker. In contrast, the term <em>list structure</em> refers to any data structure made out of pairs, not just to lists.</p>
<p><a href="#call_footnote_Temp_157"><sup>9</sup></a> Since nested applications of <code>car</code> and <code>cdr</code> are cumbersome to write, Lisp dialects provide abbreviations for them -- for instance,</p>
<p></p>
<p><img src="ch2-Z-G-14.gif" /></p>
<p>The names of all such procedures start with <code>c</code> and end with <code>r</code>. Each <code>a</code> between them stands for a <code>car</code> operation and each <code>d</code> for a <code>cdr</code> operation, to be applied in the same order in which they appear in the name. The names <code>car</code> and <code>cdr</code> persist because simple combinations like <code>cadr</code> are pronounceable.</p>
<p><a href="#call_footnote_Temp_158"><sup>10</sup></a> It's remarkable how much energy in the standardization of Lisp dialects has been dissipated in arguments that are literally over nothing: Should <code>nil</code> be an ordinary name? Should the value of <code>nil</code> be a symbol? Should it be a list? Should it be a pair? In Scheme, <code>nil</code> is an ordinary name, which we use in this section as a variable whose value is the end-of-list marker (just as <code>true</code> is an ordinary variable that has a true value). Other dialects of Lisp, including Common Lisp, treat <code>nil</code> as a special symbol. The authors of this book, who have endured too many language standardization brawls, would like to avoid the entire issue. Once we have introduced quotation in section <a href="book-Z-H-16.html#%_sec_2.3">2.3</a>, we will denote the empty list as <code>'()</code> and dispense with the variable <code>nil</code> entirely.</p>
<p><a href="#call_footnote_Temp_164"><sup>11</sup></a> To define <code>f</code> and <code>g</code> using <code>lambda</code> we would write</p>
<p></p>
<p><code>(define f (lambda (x y . z) &lt;body&gt;)) (define g (lambda w &lt;body&gt;))</code></p>
<p></p>
<p></p>
<p><a href="#call_footnote_Temp_166"><sup>12</sup></a> Scheme standardly provides a <code>map</code> procedure that is more general than the one described here. This more general <code>map</code> takes a procedure of <em>n</em> arguments, together with <em>n</em> lists, and applies the procedure to all the first elements of the lists, all the second elements of the lists, and so on, returning a list of the results. For example:</p>
<p></p>
<p><code>(map + (list 1 2 3) (list 40 50 60) (list 700 800 900)) (741 852 963)  (map (lambda (x y) (+ x (* 2 y)))      (list 1 2 3)      (list 4 5 6)) (9 12 15)</code></p>
<p></p>
<p></p>
<p><a href="#call_footnote_Temp_170"><sup>13</sup></a> The order of the first two clauses in the <code>cond</code> matters, since the empty list satisfies <code>null?</code> and also is not a pair.</p>
<p><a href="#call_footnote_Temp_182"><sup>14</sup></a> This is, in fact, precisely the <code>fringe</code> procedure from exercise <a href="#%_thm_2.28">2.28</a>. Here we've renamed it to emphasize that it is part of a family of general sequence-manipulation procedures.</p>
<p><a href="#call_footnote_Temp_183"><sup>15</sup></a> Richard Waters (1979) developed a program that automatically analyzes traditional Fortran programs, viewing them in terms of maps, filters, and accumulations. He found that fully 90 percent of the code in the Fortran Scientific Subroutine Package fits neatly into this paradigm. One of the reasons for the success of Lisp as a programming language is that lists provide a standard medium for expressing ordered collections so that they can be manipulated using higher-order operations. The programming language APL owes much of its power and appeal to a similar choice. In APL all data are represented as arrays, and there is a universal and convenient set of generic operators for all sorts of array operations.</p>
<p><a href="#call_footnote_Temp_186"><sup>16</sup></a> According to Knuth (1981), this rule was formulated by W. G. Horner early in the nineteenth century, but the method was actually used by Newton over a hundred years earlier. Horner's rule evaluates the polynomial using fewer additions and multiplications than does the straightforward method of first computing <em>a</em><sub><em>n</em></sub> <em>x</em><sup><em>n</em></sup>, then adding <em>a</em><sub><em>n</em>-1</sub><em>x</em><sup><em>n</em>-1</sup>, and so on. In fact, it is possible to prove that any algorithm for evaluating arbitrary polynomials must use at least as many additions and multiplications as does Horner's rule, and thus Horner's rule is an optimal algorithm for polynomial evaluation. This was proved (for the number of additions) by A. M. Ostrowski in a 1954 paper that essentially founded the modern study of optimal algorithms. The analogous statement for multiplications was proved by V. Y. Pan in 1966. The book by Borodin and Munro (1975) provides an overview of these and other results about optimal algorithms.</p>
<p><a href="#call_footnote_Temp_190"><sup>17</sup></a> This definition uses the extended version of <code>map</code> described in footnote <a href="#footnote_Temp_166">12</a>.</p>
<p><a href="#call_footnote_Temp_194"><sup>18</sup></a> This approach to nested mappings was shown to us by David Turner, whose languages KRC and Miranda provide elegant formalisms for dealing with these constructs. The examples in this section (see also exercise <a href="#%_thm_2.42">2.42</a>) are adapted from Turner 1981. In section <a href="book-Z-H-24.html#%_sec_3.5.3">3.5.3</a>, we'll see how this approach generalizes to infinite sequences.</p>
<p><a href="#call_footnote_Temp_195"><sup>19</sup></a> We're representing a pair here as a list of two elements rather than as a Lisp pair. Thus, the ``pair'' (<em>i</em>,<em>j</em>) is represented as <code>(list i j)</code>, not <code>(cons i j)</code>.</p>
<p><a href="#call_footnote_Temp_196"><sup>20</sup></a> The set <em>S</em> - <em>x</em> is the set of all elements of <em>S</em>, excluding <em>x</em>.</p>
<p><a href="#call_footnote_Temp_197"><sup>21</sup></a> Semicolons in Scheme code are used to introduce <em>comments</em>. Everything from the semicolon to the end of the line is ignored by the interpreter. In this book we don't use many comments; we try to make our programs self-documenting by using descriptive names.</p>
<p><a href="#call_footnote_Temp_202"><sup>22</sup></a> The picture language is based on the language Peter Henderson created to construct images like M.C. Escher's ``Square Limit'' woodcut (see Henderson 1982). The woodcut incorporates a repeated scaled pattern, similar to the arrangements drawn using the <code>square-limit</code> procedure in this section.</p>
<p><a href="#call_footnote_Temp_204"><sup>23</sup></a> William Barton Rogers (1804-1882) was the founder and first president of MIT. A geologist and talented teacher, he taught at William and Mary College and at the University of Virginia. In 1859 he moved to Boston, where he had more time for research, worked on a plan for establishing a ``polytechnic institute,'' and served as Massachusetts's first State Inspector of Gas Meters.</p>
<p>When MIT was established in 1861, Rogers was elected its first president. Rogers espoused an ideal of ``useful learning'' that was different from the university education of the time, with its overemphasis on the classics, which, as he wrote, ``stand in the way of the broader, higher and more practical instruction and discipline of the natural and social sciences.'' This education was likewise to be different from narrow trade-school education. In Rogers's words:</p>
<blockquote>
The world-enforced distinction between the practical and the scientific worker is utterly futile, and the whole experience of modern times has demonstrated its utter worthlessness.
</blockquote>
<p>Rogers served as president of MIT until 1870, when he resigned due to ill health. In 1878 the second president of MIT, John Runkle, resigned under the pressure of a financial crisis brought on by the Panic of 1873 and strain of fighting off attempts by Harvard to take over MIT. Rogers returned to hold the office of president until 1881.</p>
<p>Rogers collapsed and died while addressing MIT's graduating class at the commencement exercises of 1882. Runkle quoted Rogers's last words in a memorial address delivered that same year:</p>
<blockquote>
<p>``As I stand here today and see what the Institute is, <code>...</code> I call to mind the beginnings of science. I remember one hundred and fifty years ago Stephen Hales published a pamphlet on the subject of illuminating gas, in which he stated that his researches had demonstrated that 128 grains of bituminous coal -- ''</p>
<p>``Bituminous coal,'' these were his last words on earth. Here he bent forward, as if consulting some notes on the table before him, then slowly regaining an erect position, threw up his hands, and was translated from the scene of his earthly labors and triumphs to ``the tomorrow of death,'' where the mysteries of life are solved, and the disembodied spirit finds unending satisfaction in contemplating the new and still unfathomable mysteries of the infinite future.</p>
</blockquote>
<p>In the words of Francis A. Walker (MIT's third president):</p>
<blockquote>
All his life he had borne himself most faithfully and heroically, and he died as so good a knight would surely have wished, in harness, at his post, and in the very part and act of public duty.
</blockquote>
<p><a href="#call_footnote_Temp_207"><sup>24</sup></a> Equivalently, we could write</p>
<p></p>
<p><code>(define flipped-pairs   (square-of-four identity flip-vert identity flip-vert))</code></p>
<p></p>
<p></p>
<p><a href="#call_footnote_Temp_208"><sup>25</sup></a> <code>Rotate180</code> rotates a painter by 180 degrees (see exercise <a href="#%_thm_2.50">2.50</a>). Instead of <code>rotate180</code> we could say <code>(compose flip-vert flip-horiz)</code>, using the <code>compose</code> procedure from exercise <a href="book-Z-H-12.html#%_thm_1.42">1.42</a>.</p>
<p><a href="#call_footnote_Temp_211"><sup>26</sup></a> <code>Frame-coord-map</code> uses the vector operations described in exercise <a href="#%_thm_2.46">2.46</a> below, which we assume have been implemented using some representation for vectors. Because of data abstraction, it doesn't matter what this vector representation is, so long as the vector operations behave correctly.</p>
<p><a href="#call_footnote_Temp_215"><sup>27</sup></a> <code>Segments-&gt;painter</code> uses the representation for line segments described in exercise <a href="#%_thm_2.48">2.48</a> below. It also uses the <code>for-each</code> procedure described in exercise <a href="#%_thm_2.23">2.23</a>.</p>
<p><a href="#call_footnote_Temp_216"><sup>28</sup></a> For example, the <code>rogers</code> painter of figure <a href="#%_fig_2.11">2.11</a> was constructed from a gray-level image. For each point in a given frame, the <code>rogers</code> painter determines the point in the image that is mapped to it under the frame coordinate map, and shades it accordingly. By allowing different types of painters, we are capitalizing on the abstract data idea discussed in section <a href="book-Z-H-14.html#%_sec_2.1.3">2.1.3</a>, where we argued that a rational-number representation could be anything at all that satisfies an appropriate condition. Here we're using the fact that a painter can be implemented in any way at all, so long as it draws something in the designated frame. Section <a href="book-Z-H-14.html#%_sec_2.1.3">2.1.3</a> also showed how pairs could be implemented as procedures. Painters are our second example of a procedural representation for data.</p>
<p><a href="#call_footnote_Temp_220"><sup>29</sup></a> <code>Rotate90</code> is a pure rotation only for square frames, because it also stretches and shrinks the image to fit into the rotated frame.</p>
<p><a href="#call_footnote_Temp_221"><sup>30</sup></a> The diamond-shaped images in figures <a href="#%_fig_2.10">2.10</a> and <a href="#%_fig_2.11">2.11</a> were created with <code>squash-inwards</code> applied to <code>wave</code> and <code>rogers</code>.</p>
<p><a href="#call_footnote_Temp_225"><sup>31</sup></a> Section <a href="book-Z-H-22.html#%_sec_3.3.4">3.3.4</a> describes one such language.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-14.html">previous</a>, <a href="book-Z-H-16.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-15.html">previous</a>, <a href="book-Z-H-17.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_2.3">2.3  Symbolic Data</a></h2>
<p>All the compound data objects we have used so far were constructed ultimately from numbers. In this section we extend the representational capability of our language by introducing the ability to work with arbitrary symbols as data.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.3.1">2.3.1  Quotation</a></h3>
<p>If we can form compound data using symbols, we can have lists such as</p>
<p></p>
<p></p>
<p><code>(a b c d) (23 45 17) ((Norah 12) (Molly 9) (Anna 7) (Lauren 6) (Charlotte 4))</code></p>
<p></p>
<p>Lists containing symbols can look just like the expressions of our language:</p>
<p></p>
<p></p>
<p><code>(* (+ 23 45) (+ x 9))  (define (fact n) (if (= n 1) 1 (* n (fact (- n 1)))))</code></p>
<p></p>
<p></p>
<p>In order to manipulate symbols we need a new element in our language: the ability to <em>quote</em> a data object. Suppose we want to construct the list <code>(a b)</code>. We can't accomplish this with <code>(list a b)</code>, because this expression constructs a list of the <em>values</em> of <code>a</code> and <code>b</code> rather than the symbols themselves. This issue is well known in the context of natural languages, where words and sentences may be regarded either as semantic entities or as character strings (syntactic entities). The common practice in natural languages is to use quotation marks to indicate that a word or a sentence is to be treated literally as a string of characters. For instance, the first letter of ``John'' is clearly ``J.'' If we tell somebody ``say your name aloud,'' we expect to hear that person's name. However, if we tell somebody ``say `your name' aloud,'' we expect to hear the words ``your name.'' Note that we are forced to nest quotation marks to describe what somebody else might say.<a href="#footnote_Temp_227"><sup>32</sup></a></p>
<p>We can follow this same practice to identify lists and symbols that are to be treated as data objects rather than as expressions to be evaluated. However, our format for quoting differs from that of natural languages in that we place a quotation mark (traditionally, the single quote symbol <code>'</code>) only at the beginning of the object to be quoted. We can get away with this in Scheme syntax because we rely on blanks and parentheses to delimit objects. Thus, the meaning of the single quote character is to quote the next object.<a href="#footnote_Temp_228"><sup>33</sup></a></p>
<p>Now we can distinguish between symbols and their values:</p>
<p></p>
<p></p>
<p><code>(define a 1)  (define b 2)  (list a b) (1 2)  (list 'a 'b) (a b)  (list 'a b) (a 2)</code></p>
<p></p>
<p></p>
<p>Quotation also allows us to type in compound objects, using the conventional printed representation for lists:<a href="#footnote_Temp_229"><sup>34</sup></a></p>
<p></p>
<p></p>
<p><code>(car '(a b c)) a  (cdr '(a b c)) (b c)</code></p>
<p></p>
<p>In keeping with this, we can obtain the empty list by evaluating <code>'()</code>, and thus dispense with the variable <code>nil</code>.</p>
<p>One additional primitive used in manipulating symbols is <code>eq?</code>, which takes two symbols as arguments and tests whether they are the same.<a href="#footnote_Temp_230"><sup>35</sup></a> Using <code>eq?</code>, we can implement a useful procedure called <code>memq</code>. This takes two arguments, a symbol and a list. If the symbol is not contained in the list (i.e., is not <code>eq?</code> to any item in the list), then <code>memq</code> returns false. Otherwise, it returns the sublist of the list beginning with the first occurrence of the symbol:</p>
<p></p>
<p></p>
<p><code>(define (memq item x)   (cond ((null? x) false)         ((eq? item (car x)) x)         (else (memq item (cdr x)))))</code></p>
<p></p>
<p>For example, the value of</p>
<p></p>
<p></p>
<p><code>(memq 'apple '(pear banana prune))</code></p>
<p></p>
<p>is false, whereas the value of</p>
<p></p>
<p></p>
<p><code>(memq 'apple '(x (apple sauce) y apple pear))</code></p>
<p></p>
<p>is <code>(apple pear)</code>.</p>
<p></p>
<p><strong>Exercise 2.53.</strong>  What would the interpreter print in response to evaluating each of the following expressions?</p>
<p></p>
<p></p>
<p><code>(list 'a 'b 'c)  (list (list 'george)) (cdr '((x1 x2) (y1 y2)))  (cadr '((x1 x2) (y1 y2))) (pair? (car '(a short list))) (memq 'red '((red shoes) (blue socks)))  (memq 'red '(red shoes blue socks))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.54.</strong>  Two lists are said to be <code>equal?</code> if they contain equal elements arranged in the same order. For example,</p>
<p></p>
<p></p>
<p><code>(equal? '(this is a list) '(this is a list))</code></p>
<p></p>
<p>is true, but</p>
<p></p>
<p></p>
<p><code>(equal? '(this is a list) '(this (is a) list))</code></p>
<p></p>
<p>is false. To be more precise, we can define <code>equal?</code> recursively in terms of the basic <code>eq?</code> equality of symbols by saying that <code>a</code> and <code>b</code> are <code>equal?</code> if they are both symbols and the symbols are <code>eq?</code>, or if they are both lists such that <code>(car a)</code> is <code>equal?</code> to <code>(car b)</code> and <code>(cdr a)</code> is <code>equal?</code> to <code>(cdr b)</code>. Using this idea, implement <code>equal?</code> as a procedure.<a href="#footnote_Temp_233"><sup>36</sup></a></p>
<p></p>
<p></p>
<p><strong>Exercise 2.55.</strong>  Eva Lu Ator types to the interpreter the expression</p>
<p></p>
<p><code>(car ''abracadabra)</code></p>
<p></p>
<p>To her surprise, the interpreter prints back <code>quote</code>. Explain.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.3.2">2.3.2  Example: Symbolic Differentiation</a></h3>
<p>As an illustration of symbol manipulation and a further illustration of data abstraction, consider the design of a procedure that performs symbolic differentiation of algebraic expressions. We would like the procedure to take as arguments an algebraic expression and a variable and to return the derivative of the expression with respect to the variable. For example, if the arguments to the procedure are <em>a</em><em>x</em><sup>2</sup> + <em>b</em><em>x</em> + <em>c</em> and <em>x</em>, the procedure should return 2<em>a</em><em>x</em> + <em>b</em>. Symbolic differentiation is of special historical significance in Lisp. It was one of the motivating examples behind the development of a computer language for symbol manipulation. Furthermore, it marked the beginning of the line of research that led to the development of powerful systems for symbolic mathematical work, which are currently being used by a growing number of applied mathematicians and physicists.</p>
<p>In developing the symbolic-differentiation program, we will follow the same strategy of data abstraction that we followed in developing the rational-number system of section <a href="book-Z-H-14.html#%_sec_2.1.1">2.1.1</a>. That is, we will first define a differentiation algorithm that operates on abstract objects such as ``sums,'' ``products,'' and ``variables'' without worrying about how these are to be represented. Only afterward will we address the representation problem.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_235">The differentiation program with abstract data</a></h4>
<p>In order to keep things simple, we will consider a very simple symbolic-differentiation program that handles expressions that are built up using only the operations of addition and multiplication with two arguments. Differentiation of any such expression can be carried out by applying the following reduction rules:</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-45.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-46.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-47.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-48.gif" /></p>
<p></p>
<p>Observe that the latter two rules are recursive in nature. That is, to obtain the derivative of a sum we first find the derivatives of the terms and add them. Each of the terms may in turn be an expression that needs to be decomposed. Decomposing into smaller and smaller pieces will eventually produce pieces that are either constants or variables, whose derivatives will be either 0 or 1.</p>
<p>To embody these rules in a procedure we indulge in a little wishful thinking, as we did in designing the rational-number implementation. If we had a means for representing algebraic expressions, we should be able to tell whether an expression is a sum, a product, a constant, or a variable. We should be able to extract the parts of an expression. For a sum, for example we want to be able to extract the addend (first term) and the augend (second term). We should also be able to construct expressions from parts. Let us assume that we already have procedures to implement the following selectors, constructors, and predicates:</p>
<p></p>
<table>
<tbody>
<tr class="odd">
<td align="left"><code>(variable? e)</code></td>
<td align="left">Is <code>e</code> a variable?</td>
</tr>
<tr class="even">
<td align="left"><code>(same-variable? v1 v2)</code></td>
<td align="left">Are <code>v1</code> and <code>v2</code> the same variable?</td>
</tr>
<tr class="odd">
<td align="left"><code>(sum? e)</code></td>
<td align="left">Is <code>e</code> a sum?</td>
</tr>
<tr class="even">
<td align="left"><code>(addend e)</code></td>
<td align="left">Addend of the sum <code>e</code>.</td>
</tr>
<tr class="odd">
<td align="left"><code>(augend e)</code></td>
<td align="left">Augend of the sum <code>e</code>.</td>
</tr>
<tr class="even">
<td align="left"><code>(make-sum a1 a2)</code></td>
<td align="left">Construct the sum of <code>a1</code> and <code>a2</code>.</td>
</tr>
<tr class="odd">
<td align="left"><code>(product? e)</code></td>
<td align="left">Is <code>e</code> a product?</td>
</tr>
<tr class="even">
<td align="left"><code>(multiplier e)</code></td>
<td align="left">Multiplier of the product <code>e</code>.</td>
</tr>
<tr class="odd">
<td align="left"><code>(multiplicand e)</code></td>
<td align="left">Multiplicand of the product <code>e</code>.</td>
</tr>
<tr class="even">
<td align="left"><code>(make-product m1 m2)</code></td>
<td align="left">Construct the product of <code>m1</code> and <code>m2</code>.</td>
</tr>
</tbody>
</table>
<p>Using these, and the primitive predicate <code>number?</code>, which identifies numbers, we can express the differentiation rules as the following procedure:</p>
<p></p>
<p></p>
<p><code>(define (deriv exp var)   (cond ((number? exp) 0)         ((variable? exp)          (if (same-variable? exp var) 1 0))         ((sum? exp)          (make-sum (deriv (addend exp) var)                    (deriv (augend exp) var)))         ((product? exp)          (make-sum            (make-product (multiplier exp)                          (deriv (multiplicand exp) var))            (make-product (deriv (multiplier exp) var)                          (multiplicand exp))))         (else          (error &quot;unknown expression type -- DERIV&quot; exp))))</code></p>
<p></p>
<p>This <code>deriv</code> procedure incorporates the complete differentiation algorithm. Since it is expressed in terms of abstract data, it will work no matter how we choose to represent algebraic expressions, as long as we design a proper set of selectors and constructors. This is the issue we must address next.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_236">Representing algebraic expressions</a></h4>
<p>We can imagine many ways to use list structure to represent algebraic expressions. For example, we could use lists of symbols that mirror the usual algebraic notation, representing <em>a</em><em>x</em> + <em>b</em> as the list <code>(a * x + b)</code>. However, one especially straightforward choice is to use the same parenthesized prefix notation that Lisp uses for combinations; that is, to represent <em>a</em><em>x</em> + <em>b</em> as <code>(+ (* a x) b)</code>. Then our data representation for the differentiation problem is as follows:</p>
<p></p>
<p></p>
<ul>
<li><p>The variables are symbols. They are identified by the primitive predicate <code>symbol?</code>:</p>
<p></p>
<p></p>
<p><code>(define (variable? x) (symbol? x))</code></p>
<p></p>
<p></p></li>
<li><p>Two variables are the same if the symbols representing them are <code>eq?</code>:</p>
<p></p>
<p></p>
<p><code>(define (same-variable? v1 v2)   (and (variable? v1) (variable? v2) (eq? v1 v2)))</code></p>
<p></p>
<p></p></li>
<li><p>Sums and products are constructed as lists:</p>
<p></p>
<p></p>
<p><code>(define (make-sum a1 a2) (list '+ a1 a2))  (define (make-product m1 m2) (list '* m1 m2))</code></p>
<p></p>
<p></p></li>
<li><p>A sum is a list whose first element is the symbol <code>+</code>:</p>
<p></p>
<p></p>
<p><code>(define (sum? x)   (and (pair? x) (eq? (car x) '+)))</code></p>
<p></p>
<p></p></li>
<li><p>The addend is the second item of the sum list:</p>
<p></p>
<p></p>
<p><code>(define (addend s) (cadr s))</code></p>
<p></p>
<p></p></li>
<li><p>The augend is the third item of the sum list:</p>
<p></p>
<p></p>
<p><code>(define (augend s) (caddr s))</code></p>
<p></p>
<p></p></li>
<li><p>A product is a list whose first element is the symbol <code>*</code>:</p>
<p></p>
<p></p>
<p><code>(define (product? x)   (and (pair? x) (eq? (car x) '*)))</code></p>
<p></p>
<p></p></li>
<li><p>The multiplier is the second item of the product list:</p>
<p></p>
<p></p>
<p><code>(define (multiplier p) (cadr p))</code></p>
<p></p>
<p></p></li>
<li><p>The multiplicand is the third item of the product list:</p>
<p></p>
<p></p>
<p><code>(define (multiplicand p) (caddr p))</code></p>
<p></p></li>
</ul>
<p></p>
<p>Thus, we need only combine these with the algorithm as embodied by <code>deriv</code> in order to have a working symbolic-differentiation program. Let us look at some examples of its behavior:</p>
<p></p>
<p></p>
<p><code>(deriv '(+ x 3) 'x) (+ 1 0) (deriv '(* x y) 'x) (+ (* x 0) (* 1 y)) (deriv '(* (* x y) (+ x 3)) 'x) (+ (* (* x y) (+ 1 0))    (* (+ (* x 0) (* 1 y))       (+  x 3)))</code></p>
<p></p>
<p>The program produces answers that are correct; however, they are unsimplified. It is true that</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-49.gif" /></p>
<p></p>
<p>but we would like the program to know that <em>x</em> · 0 = 0, 1 · <em>y</em> = <em>y</em>, and 0 + <em>y</em> = <em>y</em>. The answer for the second example should have been simply <code>y</code>. As the third example shows, this becomes a serious issue when the expressions are complex.</p>
<p>Our difficulty is much like the one we encountered with the rational-number implementation: we haven't reduced answers to simplest form. To accomplish the rational-number reduction, we needed to change only the constructors and the selectors of the implementation. We can adopt a similar strategy here. We won't change <code>deriv</code> at all. Instead, we will change <code>make-sum</code> so that if both summands are numbers, <code>make-sum</code> will add them and return their sum. Also, if one of the summands is 0, then <code>make-sum</code> will return the other summand.</p>
<p></p>
<p></p>
<p><code>(define (make-sum a1 a2)   (cond ((=number? a1 0) a2)         ((=number? a2 0) a1)         ((and (number? a1) (number? a2)) (+ a1 a2))         (else (list '+ a1 a2))))</code></p>
<p></p>
<p>This uses the procedure <code>=number?</code>, which checks whether an expression is equal to a given number:</p>
<p></p>
<p></p>
<p><code>(define (=number? exp num)   (and (number? exp) (= exp num)))</code></p>
<p></p>
<p>Similarly, we will change <code>make-product</code> to build in the rules that 0 times anything is 0 and 1 times anything is the thing itself:</p>
<p></p>
<p></p>
<p><code>(define (make-product m1 m2)   (cond ((or (=number? m1 0) (=number? m2 0)) 0)         ((=number? m1 1) m2)         ((=number? m2 1) m1)         ((and (number? m1) (number? m2)) (* m1 m2))         (else (list '* m1 m2))))</code></p>
<p></p>
<p>Here is how this version works on our three examples:</p>
<p></p>
<p></p>
<p><code>(deriv '(+ x 3) 'x) 1 (deriv '(* x y) 'x) y (deriv '(* (* x y) (+ x 3)) 'x) (+ (* x y) (* y (+ x 3)))</code></p>
<p></p>
<p>Although this is quite an improvement, the third example shows that there is still a long way to go before we get a program that puts expressions into a form that we might agree is ``simplest.'' The problem of algebraic simplification is complex because, among other reasons, a form that may be simplest for one purpose may not be for another.</p>
<p><strong>Exercise 2.56.</strong>  Show how to extend the basic differentiator to handle more kinds of expressions. For instance, implement the differentiation rule</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-50.gif" /></p>
<p></p>
<p>by adding a new clause to the <code>deriv</code> program and defining appropriate procedures <code>exponentiation?</code>, <code>base</code>, <code>exponent</code>, and <code>make-exponentiation</code>. (You may use the symbol <code>**</code> to denote exponentiation.) Build in the rules that anything raised to the power 0 is 1 and anything raised to the power 1 is the thing itself.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.57.</strong>  Extend the differentiation program to handle sums and products of arbitrary numbers of (two or more) terms. Then the last example above could be expressed as</p>
<p></p>
<p><code>(deriv '(* x y (+ x 3)) 'x)</code></p>
<p></p>
<p>Try to do this by changing only the representation for sums and products, without changing the <code>deriv</code> procedure at all. For example, the <code>addend</code> of a sum would be the first term, and the <code>augend</code> would be the sum of the rest of the terms.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.58.</strong>  Suppose we want to modify the differentiation program so that it works with ordinary mathematical notation, in which <code>+</code> and <code>*</code> are infix rather than prefix operators. Since the differentiation program is defined in terms of abstract data, we can modify it to work with different representations of expressions solely by changing the predicates, selectors, and constructors that define the representation of the algebraic expressions on which the differentiator is to operate.</p>
<p></p>
<p></p>
<p>a. Show how to do this in order to differentiate algebraic expressions presented in infix form, such as <code>(x + (3 * (x + (y + 2))))</code>. To simplify the task, assume that <code>+</code> and <code>*</code> always take two arguments and that expressions are fully parenthesized.</p>
<p></p>
<p></p>
<p>b. The problem becomes substantially harder if we allow standard algebraic notation, such as <code>(x + 3 * (x + y + 2))</code>, which drops unnecessary parentheses and assumes that multiplication is done before addition. Can you design appropriate predicates, selectors, and constructors for this notation such that our derivative program still works?</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.3.3">2.3.3  Example: Representing Sets</a></h3>
<p>In the previous examples we built representations for two kinds of compound data objects: rational numbers and algebraic expressions. In one of these examples we had the choice of simplifying (reducing) the expressions at either construction time or selection time, but other than that the choice of a representation for these structures in terms of lists was straightforward. When we turn to the representation of sets, the choice of a representation is not so obvious. Indeed, there are a number of possible representations, and they differ significantly from one another in several ways.</p>
<p>Informally, a set is simply a collection of distinct objects. To give a more precise definition we can employ the method of data abstraction. That is, we define ``set'' by specifying the operations that are to be used on sets. These are <code>union-set</code>, <code>intersection-set</code>, <code>element-of-set?</code>, and <code>adjoin-set</code>. <code>Element-of-set?</code> is a predicate that determines whether a given element is a member of a set. <code>Adjoin-set</code> takes an object and a set as arguments and returns a set that contains the elements of the original set and also the adjoined element. <code>Union-set</code> computes the union of two sets, which is the set containing each element that appears in either argument. <code>Intersection-set</code> computes the intersection of two sets, which is the set containing only elements that appear in both arguments. From the viewpoint of data abstraction, we are free to design any representation that implements these operations in a way consistent with the interpretations given above.<a href="#footnote_Temp_240"><sup>37</sup></a></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_241">Sets as unordered lists</a></h4>
<p>One way to represent a set is as a list of its elements in which no element appears more than once. The empty set is represented by the empty list. In this representation, <code>element-of-set?</code> is similar to the procedure <code>memq</code> of section <a href="#%_sec_2.3.1">2.3.1</a>. It uses <code>equal?</code> instead of <code>eq?</code> so that the set elements need not be symbols:</p>
<p></p>
<p></p>
<p><code>(define (element-of-set? x set)   (cond ((null? set) false)         ((equal? x (car set)) true)         (else (element-of-set? x (cdr set)))))</code></p>
<p></p>
<p>Using this, we can write <code>adjoin-set</code>. If the object to be adjoined is already in the set, we just return the set. Otherwise, we use <code>cons</code> to add the object to the list that represents the set:</p>
<p></p>
<p></p>
<p><code>(define (adjoin-set x set)   (if (element-of-set? x set)       set       (cons x set)))</code></p>
<p></p>
<p>For <code>intersection-set</code> we can use a recursive strategy. If we know how to form the intersection of <code>set2</code> and the <code>cdr</code> of <code>set1</code>, we only need to decide whether to include the <code>car</code> of <code>set1</code> in this. But this depends on whether <code>(car set1)</code> is also in <code>set2</code>. Here is the resulting procedure:</p>
<p></p>
<p></p>
<p><code>(define (intersection-set set1 set2)   (cond ((or (null? set1) (null? set2)) '())         ((element-of-set? (car set1) set2)                  (cons (car set1)                (intersection-set (cdr set1) set2)))         (else (intersection-set (cdr set1) set2))))</code></p>
<p></p>
<p></p>
<p>In designing a representation, one of the issues we should be concerned with is efficiency. Consider the number of steps required by our set operations. Since they all use <code>element-of-set?</code>, the speed of this operation has a major impact on the efficiency of the set implementation as a whole. Now, in order to check whether an object is a member of a set, <code>element-of-set?</code> may have to scan the entire set. (In the worst case, the object turns out not to be in the set.) Hence, if the set has <em>n</em> elements, <code>element-of-set?</code> might take up to <em>n</em> steps. Thus, the number of steps required grows as <img src="book-Z-G-D-3.gif" />(<em>n</em>). The number of steps required by <code>adjoin-set</code>, which uses this operation, also grows as <img src="book-Z-G-D-3.gif" />(<em>n</em>). For <code>intersection-set</code>, which does an <code>element-of-set?</code> check for each element of <code>set1</code>, the number of steps required grows as the product of the sizes of the sets involved, or <img src="book-Z-G-D-3.gif" />(<em>n</em><sup>2</sup>) for two sets of size <em>n</em>. The same will be true of <code>union-set</code>.</p>
<p></p>
<p><strong>Exercise 2.59.</strong>  Implement the <code>union-set</code> operation for the unordered-list representation of sets.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.60.</strong>  We specified that a set would be represented as a list with no duplicates. Now suppose we allow duplicates. For instance, the set {1,2,3} could be represented as the list <code>(2 3 2 1 3 2 2)</code>. Design procedures <code>element-of-set?</code>, <code>adjoin-set</code>, <code>union-set</code>, and <code>intersection-set</code> that operate on this representation. How does the efficiency of each compare with the corresponding procedure for the non-duplicate representation? Are there applications for which you would use this representation in preference to the non-duplicate one?</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_244">Sets as ordered lists</a></h4>
<p>One way to speed up our set operations is to change the representation so that the set elements are listed in increasing order. To do this, we need some way to compare two objects so that we can say which is bigger. For example, we could compare symbols lexicographically, or we could agree on some method for assigning a unique number to an object and then compare the elements by comparing the corresponding numbers. To keep our discussion simple, we will consider only the case where the set elements are numbers, so that we can compare elements using <code>&gt;</code> and <code>&lt;</code>. We will represent a set of numbers by listing its elements in increasing order. Whereas our first representation above allowed us to represent the set {1,3,6,10} by listing the elements in any order, our new representation allows only the list <code>(1 3 6 10)</code>.</p>
<p>One advantage of ordering shows up in <code>element-of-set?</code>: In checking for the presence of an item, we no longer have to scan the entire set. If we reach a set element that is larger than the item we are looking for, then we know that the item is not in the set:</p>
<p></p>
<p></p>
<p><code>(define (element-of-set? x set)   (cond ((null? set) false)         ((= x (car set)) true)         ((&lt; x (car set)) false)         (else (element-of-set? x (cdr set)))))</code></p>
<p></p>
<p>How many steps does this save? In the worst case, the item we are looking for may be the largest one in the set, so the number of steps is the same as for the unordered representation. On the other hand, if we search for items of many different sizes we can expect that sometimes we will be able to stop searching at a point near the beginning of the list and that other times we will still need to examine most of the list. On the average we should expect to have to examine about half of the items in the set. Thus, the average number of steps required will be about <em>n</em>/2. This is still <img src="book-Z-G-D-3.gif" />(<em>n</em>) growth, but it does save us, on the average, a factor of 2 in number of steps over the previous implementation.</p>
<p>We obtain a more impressive speedup with <code>intersection-set</code>. In the unordered representation this operation required <img src="book-Z-G-D-3.gif" />(<em>n</em><sup>2</sup>) steps, because we performed a complete scan of <code>set2</code> for each element of <code>set1</code>. But with the ordered representation, we can use a more clever method. Begin by comparing the initial elements, <code>x1</code> and <code>x2</code>, of the two sets. If <code>x1</code> equals <code>x2</code>, then that gives an element of the intersection, and the rest of the intersection is the intersection of the <code>cdr</code>s of the two sets. Suppose, however, that <code>x1</code> is less than <code>x2</code>. Since <code>x2</code> is the smallest element in <code>set2</code>, we can immediately conclude that <code>x1</code> cannot appear anywhere in <code>set2</code> and hence is not in the intersection. Hence, the intersection is equal to the intersection of <code>set2</code> with the <code>cdr</code> of <code>set1</code>. Similarly, if <code>x2</code> is less than <code>x1</code>, then the intersection is given by the intersection of <code>set1</code> with the <code>cdr</code> of <code>set2</code>. Here is the procedure:</p>
<p></p>
<p></p>
<p><code>(define (intersection-set set1 set2)   (if (or (null? set1) (null? set2))       '()           (let ((x1 (car set1)) (x2 (car set2)))         (cond ((= x1 x2)                (cons x1                      (intersection-set (cdr set1)                                        (cdr set2))))               ((&lt; x1 x2)                (intersection-set (cdr set1) set2))               ((&lt; x2 x1)                (intersection-set set1 (cdr set2)))))))</code></p>
<p></p>
<p>To estimate the number of steps required by this process, observe that at each step we reduce the intersection problem to computing intersections of smaller sets -- removing the first element from <code>set1</code> or <code>set2</code> or both. Thus, the number of steps required is at most the sum of the sizes of <code>set1</code> and <code>set2</code>, rather than the product of the sizes as with the unordered representation. This is <img src="book-Z-G-D-3.gif" />(<em>n</em>) growth rather than <img src="book-Z-G-D-3.gif" />(<em>n</em><sup>2</sup>) -- a considerable speedup, even for sets of moderate size.</p>
<p></p>
<p><strong>Exercise 2.61.</strong>  Give an implementation of <code>adjoin-set</code> using the ordered representation. By analogy with <code>element-of-set?</code> show how to take advantage of the ordering to produce a procedure that requires on the average about half as many steps as with the unordered representation.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.62.</strong>  Give a <img src="book-Z-G-D-3.gif" />(<em>n</em>) implementation of <code>union-set</code> for sets represented as ordered lists.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_247">Sets as binary trees</a></h4>
<p>We can do better than the ordered-list representation by arranging the set elements in the form of a tree. Each node of the tree holds one element of the set, called the ``entry'' at that node, and a link to each of two other (possibly empty) nodes. The ``left'' link points to elements smaller than the one at the node, and the ``right'' link to elements greater than the one at the node. Figure <a href="#%_fig_2.16">2.16</a> shows some trees that represent the set {1,3,5,7,9,11}. The same set may be represented by a tree in a number of different ways. The only thing we require for a valid representation is that all elements in the left subtree be smaller than the node entry and that all elements in the right subtree be larger.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-51.gif" /></p>
<p><strong>Figure 2.16:</strong>  Various binary trees that represent the set { 1,3,5,7,9,11 }.</p>
<p></p>
<p>The advantage of the tree representation is this: Suppose we want to check whether a number <em>x</em> is contained in a set. We begin by comparing <em>x</em> with the entry in the top node. If <em>x</em> is less than this, we know that we need only search the left subtree; if <em>x</em> is greater, we need only search the right subtree. Now, if the tree is ``balanced,'' each of these subtrees will be about half the size of the original. Thus, in one step we have reduced the problem of searching a tree of size <em>n</em> to searching a tree of size <em>n</em>/2. Since the size of the tree is halved at each step, we should expect that the number of steps needed to search a tree of size <em>n</em> grows as <img src="book-Z-G-D-3.gif" />(<code>log</code> <em>n</em>).<a href="#footnote_Temp_248"><sup>38</sup></a> For large sets, this will be a significant speedup over the previous representations.</p>
<p>We can represent trees by using lists. Each node will be a list of three items: the entry at the node, the left subtree, and the right subtree. A left or a right subtree of the empty list will indicate that there is no subtree connected there. We can describe this representation by the following procedures:<a href="#footnote_Temp_249"><sup>39</sup></a></p>
<p></p>
<p></p>
<p><code>(define (entry tree) (car tree)) (define (left-branch tree) (cadr tree)) (define (right-branch tree) (caddr tree)) (define (make-tree entry left right)   (list entry left right))</code></p>
<p></p>
<p></p>
<p>Now we can write the <code>element-of-set?</code> procedure using the strategy described above:</p>
<p></p>
<p></p>
<p><code>(define (element-of-set? x set)   (cond ((null? set) false)         ((= x (entry set)) true)         ((&lt; x (entry set))          (element-of-set? x (left-branch set)))         ((&gt; x (entry set))          (element-of-set? x (right-branch set)))))</code></p>
<p></p>
<p></p>
<p>Adjoining an item to a set is implemented similarly and also requires <img src="book-Z-G-D-3.gif" />(<code>log</code> <em>n</em>) steps. To adjoin an item <code>x</code>, we compare <code>x</code> with the node entry to determine whether <code>x</code> should be added to the right or to the left branch, and having adjoined <code>x</code> to the appropriate branch we piece this newly constructed branch together with the original entry and the other branch. If <code>x</code> is equal to the entry, we just return the node. If we are asked to adjoin <code>x</code> to an empty tree, we generate a tree that has <code>x</code> as the entry and empty right and left branches. Here is the procedure:</p>
<p></p>
<p></p>
<p><code>(define (adjoin-set x set)   (cond ((null? set) (make-tree x '() '()))         ((= x (entry set)) set)         ((&lt; x (entry set))          (make-tree (entry set)                      (adjoin-set x (left-branch set))                     (right-branch set)))         ((&gt; x (entry set))          (make-tree (entry set)                     (left-branch set)                     (adjoin-set x (right-branch set))))))</code></p>
<p></p>
<p></p>
<p>The above claim that searching the tree can be performed in a logarithmic number of steps rests on the assumption that the tree is ``balanced,'' i.e., that the left and the right subtree of every tree have approximately the same number of elements, so that each subtree contains about half the elements of its parent. But how can we be certain that the trees we construct will be balanced? Even if we start with a balanced tree, adding elements with <code>adjoin-set</code> may produce an unbalanced result. Since the position of a newly adjoined element depends on how the element compares with the items already in the set, we can expect that if we add elements ``randomly'' the tree will tend to be balanced on the average. But this is not a guarantee. For example, if we start with an empty set and adjoin the numbers 1 through 7 in sequence we end up with the highly unbalanced tree shown in figure <a href="#%_fig_2.17">2.17</a>. In this tree all the left subtrees are empty, so it has no advantage over a simple ordered list. One way to solve this problem is to define an operation that transforms an arbitrary tree into a balanced tree with the same elements. Then we can perform this transformation after every few <code>adjoin-set</code> operations to keep our set in balance. There are also other ways to solve this problem, most of which involve designing new data structures for which searching and insertion both can be done in <img src="book-Z-G-D-3.gif" />(<code>log</code> <em>n</em>) steps.<a href="#footnote_Temp_250"><sup>40</sup></a></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-52.gif" /></p>
<p><strong>Figure 2.17:</strong>  Unbalanced tree produced by adjoining 1 through 7 in sequence.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.63.</strong>  Each of the following two procedures converts a binary tree to a list.</p>
<p></p>
<p><code>(define (tree-&gt;list-1 tree)   (if (null? tree)       '()       (append (tree-&gt;list-1 (left-branch tree))               (cons (entry tree)                     (tree-&gt;list-1 (right-branch tree)))))) (define (tree-&gt;list-2 tree)   (define (copy-to-list tree result-list)     (if (null? tree)         result-list         (copy-to-list (left-branch tree)                       (cons (entry tree)                             (copy-to-list (right-branch tree)                                           result-list)))))   (copy-to-list tree '()))</code></p>
<p></p>
<p></p>
<p></p>
<p>a. Do the two procedures produce the same result for every tree? If not, how do the results differ? What lists do the two procedures produce for the trees in figure <a href="#%_fig_2.16">2.16</a>?</p>
<p></p>
<p>b. Do the two procedures have the same order of growth in the number of steps required to convert a balanced tree with <em>n</em> elements to a list? If not, which one grows more slowly?</p>
<p></p>
<p></p>
<p><strong>Exercise 2.64.</strong>  The following procedure <code>list-&gt;tree</code> converts an ordered list to a balanced binary tree. The helper procedure <code>partial-tree</code> takes as arguments an integer <em>n</em> and list of at least <em>n</em> elements and constructs a balanced tree containing the first <em>n</em> elements of the list. The result returned by <code>partial-tree</code> is a pair (formed with <code>cons</code>) whose <code>car</code> is the constructed tree and whose <code>cdr</code> is the list of elements not included in the tree.</p>
<p></p>
<p></p>
<p><code>(define (list-&gt;tree elements)   (car (partial-tree elements (length elements))))  (define (partial-tree elts n)   (if (= n 0)       (cons '() elts)       (let ((left-size (quotient (- n 1) 2)))         (let ((left-result (partial-tree elts left-size)))           (let ((left-tree (car left-result))                 (non-left-elts (cdr left-result))                 (right-size (- n (+ left-size 1))))             (let ((this-entry (car non-left-elts))                   (right-result (partial-tree (cdr non-left-elts)                                               right-size)))               (let ((right-tree (car right-result))                     (remaining-elts (cdr right-result)))                 (cons (make-tree this-entry left-tree right-tree)                       remaining-elts))))))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>a. Write a short paragraph explaining as clearly as you can how <code>partial-tree</code> works. Draw the tree produced by <code>list-&gt;tree</code> for the list <code>(1 3 5 7 9 11)</code>.</p>
<p></p>
<p>b. What is the order of growth in the number of steps required by <code>list-&gt;tree</code> to convert a list of <em>n</em> elements?</p>
<p></p>
<p></p>
<p><strong>Exercise 2.65.</strong>  Use the results of exercises <a href="#%_thm_2.63">2.63</a> and  <a href="#%_thm_2.64">2.64</a> to give <img src="book-Z-G-D-3.gif" />(<em>n</em>) implementations of <code>union-set</code> and <code>intersection-set</code> for sets implemented as (balanced) binary trees.<a href="#footnote_Temp_254"><sup>41</sup></a></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_255">Sets and information retrieval</a></h4>
<p>We have examined options for using lists to represent sets and have seen how the choice of representation for a data object can have a large impact on the performance of the programs that use the data. Another reason for concentrating on sets is that the techniques discussed here appear again and again in applications involving information retrieval.</p>
<p>Consider a data base containing a large number of individual records, such as the personnel files for a company or the transactions in an accounting system. A typical data-management system spends a large amount of time accessing or modifying the data in the records and therefore requires an efficient method for accessing records. This is done by identifying a part of each record to serve as an identifying <em>key</em>. A key can be anything that uniquely identifies the record. For a personnel file, it might be an employee's ID number. For an accounting system, it might be a transaction number. Whatever the key is, when we define the record as a data structure we should include a <code>key</code> selector procedure that retrieves the key associated with a given record.</p>
<p>Now we represent the data base as a set of records. To locate the record with a given key we use a procedure <code>lookup</code>, which takes as arguments a key and a data base and which returns the record that has that key, or false if there is no such record. <code>Lookup</code> is implemented in almost the same way as <code>element-of-set?</code>. For example, if the set of records is implemented as an unordered list, we could use</p>
<p></p>
<p></p>
<p><code>(define (lookup given-key set-of-records)   (cond ((null? set-of-records) false)         ((equal? given-key (key (car set-of-records)))          (car set-of-records))         (else (lookup given-key (cdr set-of-records)))))</code></p>
<p></p>
<p></p>
<p>Of course, there are better ways to represent large sets than as unordered lists. Information-retrieval systems in which records have to be ``randomly accessed'' are typically implemented by a tree-based method, such as the binary-tree representation discussed previously. In designing such a system the methodology of data abstraction can be a great help. The designer can create an initial implementation using a simple, straightforward representation such as unordered lists. This will be unsuitable for the eventual system, but it can be useful in providing a ``quick and dirty'' data base with which to test the rest of the system. Later on, the data representation can be modified to be more sophisticated. If the data base is accessed in terms of abstract selectors and constructors, this change in representation will not require any changes to the rest of the system.</p>
<p></p>
<p><strong>Exercise 2.66.</strong>  Implement the <code>lookup</code> procedure for the case where the set of records is structured as a binary tree, ordered by the numerical values of the keys.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.3.4">2.3.4  Example: Huffman Encoding Trees</a></h3>
<p>This section provides practice in the use of list structure and data abstraction to manipulate sets and trees. The application is to methods for representing data as sequences of ones and zeros (bits). For example, the ASCII standard code used to represent text in computers encodes each character as a sequence of seven bits. Using seven bits allows us to distinguish 2<sup>7</sup>, or 128, possible different characters. In general, if we want to distinguish <em>n</em> different symbols, we will need to use <code>log</code><sub>2</sub> <em>n</em> bits per symbol. If all our messages are made up of the eight symbols A, B, C, D, E, F, G, and H, we can choose a code with three bits per character, for example</p>
<table>
<tbody>
<tr class="odd">
<td align="left">A 000</td>
<td align="left">C 010</td>
<td align="left">E 100</td>
<td align="left">G 110</td>
</tr>
<tr class="even">
<td align="left">B 001</td>
<td align="left">D 011</td>
<td align="left">F 101</td>
<td align="left">H 111</td>
</tr>
</tbody>
</table>
<p>With this code, the message</p>
<p></p>
<p></p>
<p>BACADAEAFABBAAAGAH</p>
<p></p>
<p></p>
<p>is encoded as the string of 54 bits</p>
<p></p>
<p></p>
<p>001000010000011000100000101000001001000000000110000111</p>
<p></p>
<p></p>
<p>Codes such as ASCII and the A-through-H code above are known as <em>fixed-length</em> codes, because they represent each symbol in the message with the same number of bits. It is sometimes advantageous to use <em>variable-length</em> codes, in which different symbols may be represented by different numbers of bits. For example, Morse code does not use the same number of dots and dashes for each letter of the alphabet. In particular, E, the most frequent letter, is represented by a single dot. In general, if our messages are such that some symbols appear very frequently and some very rarely, we can encode data more efficiently (i.e., using fewer bits per message) if we assign shorter codes to the frequent symbols. Consider the following alternative code for the letters A through H:</p>
<table>
<tbody>
<tr class="odd">
<td align="left">A 0</td>
<td align="left">C 1010</td>
<td align="left">E 1100</td>
<td align="left">G 1110</td>
</tr>
<tr class="even">
<td align="left">B 100</td>
<td align="left">D 1011</td>
<td align="left">F 1101</td>
<td align="left">H 1111</td>
</tr>
</tbody>
</table>
<p>With this code, the same message as above is encoded as the string</p>
<p></p>
<p></p>
<p>100010100101101100011010100100000111001111</p>
<p></p>
<p></p>
<p>This string contains 42 bits, so it saves more than 20% in space in comparison with the fixed-length code shown above.</p>
<p>One of the difficulties of using a variable-length code is knowing when you have reached the end of a symbol in reading a sequence of zeros and ones. Morse code solves this problem by using a special <em>separator code</em> (in this case, a pause) after the sequence of dots and dashes for each letter. Another solution is to design the code in such a way that no complete code for any symbol is the beginning (or <em>prefix</em>) of the code for another symbol. Such a code is called a <em>prefix code</em>. In the example above, A is encoded by 0 and B is encoded by 100, so no other symbol can have a code that begins with 0 or with 100.</p>
<p>In general, we can attain significant savings if we use variable-length prefix codes that take advantage of the relative frequencies of the symbols in the messages to be encoded. One particular scheme for doing this is called the Huffman encoding method, after its discoverer, David Huffman. A Huffman code can be represented as a binary tree whose leaves are the symbols that are encoded. At each non-leaf node of the tree there is a set containing all the symbols in the leaves that lie below the node. In addition, each symbol at a leaf is assigned a weight (which is its relative frequency), and each non-leaf node contains a weight that is the sum of all the weights of the leaves lying below it. The weights are not used in the encoding or the decoding process. We will see below how they are used to help construct the tree.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-53.gif" /></p>
<p><strong>Figure 2.18:</strong>  A Huffman encoding tree.</p>
<p></p>
<p>Figure <a href="#%_fig_2.18">2.18</a> shows the Huffman tree for the A-through-H code given above. The weights at the leaves indicate that the tree was designed for messages in which A appears with relative frequency 8, B with relative frequency 3, and the other letters each with relative frequency 1.</p>
<p>Given a Huffman tree, we can find the encoding of any symbol by starting at the root and moving down until we reach the leaf that holds the symbol. Each time we move down a left branch we add a 0 to the code, and each time we move down a right branch we add a 1. (We decide which branch to follow by testing to see which branch either is the leaf node for the symbol or contains the symbol in its set.) For example, starting from the root of the tree in figure <a href="#%_fig_2.18">2.18</a>, we arrive at the leaf for D by following a right branch, then a left branch, then a right branch, then a right branch; hence, the code for D is 1011.</p>
<p>To decode a bit sequence using a Huffman tree, we begin at the root and use the successive zeros and ones of the bit sequence to determine whether to move down the left or the right branch. Each time we come to a leaf, we have generated a new symbol in the message, at which point we start over from the root of the tree to find the next symbol. For example, suppose we are given the tree above and the sequence 10001010. Starting at the root, we move down the right branch, (since the first bit of the string is 1), then down the left branch (since the second bit is 0), then down the left branch (since the third bit is also 0). This brings us to the leaf for B, so the first symbol of the decoded message is B. Now we start again at the root, and we make a left move because the next bit in the string is 0. This brings us to the leaf for A. Then we start again at the root with the rest of the string 1010, so we move right, left, right, left and reach C. Thus, the entire message is BAC.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_257">Generating Huffman trees</a></h4>
<p>Given an ``alphabet'' of symbols and their relative frequencies, how do we construct the ``best'' code? (In other words, which tree will encode messages with the fewest bits?) Huffman gave an algorithm for doing this and showed that the resulting code is indeed the best variable-length code for messages where the relative frequency of the symbols matches the frequencies with which the code was constructed. We will not prove this optimality of Huffman codes here, but we will show how Huffman trees are constructed.<a href="#footnote_Temp_258"><sup>42</sup></a></p>
<p>The algorithm for generating a Huffman tree is very simple. The idea is to arrange the tree so that the symbols with the lowest frequency appear farthest away from the root. Begin with the set of leaf nodes, containing symbols and their frequencies, as determined by the initial data from which the code is to be constructed. Now find two leaves with the lowest weights and merge them to produce a node that has these two nodes as its left and right branches. The weight of the new node is the sum of the two weights. Remove the two leaves from the original set and replace them by this new node. Now continue this process. At each step, merge two nodes with the smallest weights, removing them from the set and replacing them with a node that has these two as its left and right branches. The process stops when there is only one node left, which is the root of the entire tree. Here is how the Huffman tree of figure <a href="#%_fig_2.18">2.18</a> was generated:</p>
<p></p>
<p>Initial leaves</p>
<p>{(A 8) (B 3) (C 1) (D 1) (E 1) (F 1) (G 1) (H 1)}</p>
<p>Merge</p>
<p>{(A 8) (B 3) ({C D} 2) (E 1) (F 1) (G 1) (H 1)}</p>
<p>Merge</p>
<p>{(A 8) (B 3) ({C D} 2) ({E F} 2) (G 1) (H 1)}</p>
<p>Merge</p>
<p>{(A 8) (B 3) ({C D} 2) ({E F} 2) ({G H} 2)}</p>
<p>Merge</p>
<p>{(A 8) (B 3) ({C D} 2) ({E F G H} 4)}</p>
<p>Merge</p>
<p>{(A 8) ({B C D} 5) ({E F G H} 4)}</p>
<p>Merge</p>
<p>{(A 8) ({B C D E F G H} 9)}</p>
<p>Final merge</p>
<p>{({A B C D E F G H} 17)}</p>
<p>The algorithm does not always specify a unique tree, because there may not be unique smallest-weight nodes at each step. Also, the choice of the order in which the two nodes are merged (i.e., which will be the right branch and which will be the left branch) is arbitrary.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_259">Representing Huffman trees</a></h4>
<p>In the exercises below we will work with a system that uses Huffman trees to encode and decode messages and generates Huffman trees according to the algorithm outlined above. We will begin by discussing how trees are represented.</p>
<p>Leaves of the tree are represented by a list consisting of the symbol <code>leaf</code>, the symbol at the leaf, and the weight:</p>
<p></p>
<p></p>
<p><code>(define (make-leaf symbol weight)   (list 'leaf symbol weight)) (define (leaf? object)   (eq? (car object) 'leaf)) (define (symbol-leaf x) (cadr x)) (define (weight-leaf x) (caddr x))</code></p>
<p></p>
<p>A general tree will be a list of a left branch, a right branch, a set of symbols, and a weight. The set of symbols will be simply a list of the symbols, rather than some more sophisticated set representation. When we make a tree by merging two nodes, we obtain the weight of the tree as the sum of the weights of the nodes, and the set of symbols as the union of the sets of symbols for the nodes. Since our symbol sets are represented as lists, we can form the union by using the <code>append</code> procedure we defined in section <a href="book-Z-H-15.html#%_sec_2.2.1">2.2.1</a>:</p>
<p></p>
<p></p>
<p><code>(define (make-code-tree left right)   (list left         right         (append (symbols left) (symbols right))         (+ (weight left) (weight right))))</code></p>
<p></p>
<p>If we make a tree in this way, we have the following selectors:</p>
<p></p>
<p></p>
<p><code>(define (left-branch tree) (car tree))  (define (right-branch tree) (cadr tree)) (define (symbols tree)   (if (leaf? tree)       (list (symbol-leaf tree))       (caddr tree))) (define (weight tree)   (if (leaf? tree)       (weight-leaf tree)       (cadddr tree)))</code></p>
<p></p>
<p>The procedures <code>symbols</code> and <code>weight</code> must do something slightly different depending on whether they are called with a leaf or a general tree. These are simple examples of <em>generic procedures</em> (procedures that can handle more than one kind of data), which we will have much more to say about in sections <a href="book-Z-H-17.html#%_sec_2.4">2.4</a> and <a href="book-Z-H-18.html#%_sec_2.5">2.5</a>.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_260">The decoding procedure</a></h4>
<p>The following procedure implements the decoding algorithm. It takes as arguments a list of zeros and ones, together with a Huffman tree.</p>
<p></p>
<p></p>
<p><code>(define (decode bits tree)   (define (decode-1 bits current-branch)     (if (null? bits)         '()         (let ((next-branch                (choose-branch (car bits) current-branch)))           (if (leaf? next-branch)               (cons (symbol-leaf next-branch)                     (decode-1 (cdr bits) tree))               (decode-1 (cdr bits) next-branch)))))   (decode-1 bits tree)) (define (choose-branch bit branch)   (cond ((= bit 0) (left-branch branch))         ((= bit 1) (right-branch branch))         (else (error &quot;bad bit -- CHOOSE-BRANCH&quot; bit))))</code></p>
<p></p>
<p>The procedure <code>decode-1</code> takes two arguments: the list of remaining bits and the current position in the tree. It keeps moving ``down'' the tree, choosing a left or a right branch according to whether the next bit in the list is a zero or a one. (This is done with the procedure <code>choose-branch</code>.) When it reaches a leaf, it returns the symbol at that leaf as the next symbol in the message by <code>cons</code>ing it onto the result of decoding the rest of the message, starting at the root of the tree. Note the error check in the final clause of <code>choose-branch</code>, which complains if the procedure finds something other than a zero or a one in the input data.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_261">Sets of weighted elements</a></h4>
<p>In our representation of trees, each non-leaf node contains a set of symbols, which we have represented as a simple list. However, the tree-generating algorithm discussed above requires that we also work with sets of leaves and trees, successively merging the two smallest items. Since we will be required to repeatedly find the smallest item in a set, it is convenient to use an ordered representation for this kind of set.</p>
<p>We will represent a set of leaves and trees as a list of elements, arranged in increasing order of weight. The following <code>adjoin-set</code> procedure for constructing sets is similar to the one described in exercise <a href="#%_thm_2.61">2.61</a>; however, items are compared by their weights, and the element being added to the set is never already in it.</p>
<p></p>
<p></p>
<p><code>(define (adjoin-set x set)   (cond ((null? set) (list x))         ((&lt; (weight x) (weight (car set))) (cons x set))         (else (cons (car set)                     (adjoin-set x (cdr set))))))</code></p>
<p></p>
<p></p>
<p>The following procedure takes a list of symbol-frequency pairs such as <code>((A 4) (B 2) (C 1) (D 1))</code> and constructs an initial ordered set of leaves, ready to be merged according to the Huffman algorithm:</p>
<p></p>
<p></p>
<p><code>(define (make-leaf-set pairs)   (if (null? pairs)       '()       (let ((pair (car pairs)))         (adjoin-set (make-leaf (car pair)    ; symbol                                (cadr pair))  ; frequency                     (make-leaf-set (cdr pairs))))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.67.</strong>  Define an encoding tree and a sample message:</p>
<p></p>
<p></p>
<p><code>(define sample-tree   (make-code-tree (make-leaf 'A 4)                   (make-code-tree                    (make-leaf 'B 2)                    (make-code-tree (make-leaf 'D 1)                                    (make-leaf 'C 1)))))  (define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))</code></p>
<p></p>
<p>Use the <code>decode</code> procedure to decode the message, and give the result.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.68.</strong>  The <code>encode</code> procedure takes as arguments a message and a tree and produces the list of bits that gives the encoded message.</p>
<p></p>
<p></p>
<p><code>(define (encode message tree)   (if (null? message)       '()       (append (encode-symbol (car message) tree)               (encode (cdr message) tree))))</code></p>
<p></p>
<p><code>Encode-symbol</code> is a procedure, which you must write, that returns the list of bits that encodes a given symbol according to a given tree. You should design <code>encode-symbol</code> so that it signals an error if the symbol is not in the tree at all. Test your procedure by encoding the result you obtained in exercise <a href="#%_thm_2.67">2.67</a> with the sample tree and seeing whether it is the same as the original sample message.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.69.</strong>  The following procedure takes as its argument a list of symbol-frequency pairs (where no symbol appears in more than one pair) and generates a Huffman encoding tree according to the Huffman algorithm.</p>
<p></p>
<p></p>
<p><code>(define (generate-huffman-tree pairs)   (successive-merge (make-leaf-set pairs)))</code></p>
<p></p>
<p><code>Make-leaf-set</code> is the procedure given above that transforms the list of pairs into an ordered set of leaves. <code>Successive-merge</code> is the procedure you must write, using <code>make-code-tree</code> to successively merge the smallest-weight elements of the set until there is only one element left, which is the desired Huffman tree. (This procedure is slightly tricky, but not really complicated. If you find yourself designing a complex procedure, then you are almost certainly doing something wrong. You can take significant advantage of the fact that we are using an ordered set representation.)</p>
<p></p>
<p></p>
<p><strong>Exercise 2.70.</strong>  The following eight-symbol alphabet with associated relative frequencies was designed to efficiently encode the lyrics of 1950s rock songs. (Note that the ``symbols'' of an ``alphabet'' need not be individual letters.)</p>
<p></p>
<table>
<tbody>
<tr class="odd">
<td align="left">A</td>
<td align="left">2</td>
<td align="left">NA</td>
<td align="left">16</td>
</tr>
<tr class="even">
<td align="left">BOOM</td>
<td align="left">1</td>
<td align="left">SHA</td>
<td align="left">3</td>
</tr>
<tr class="odd">
<td align="left">GET</td>
<td align="left">2</td>
<td align="left">YIP</td>
<td align="left">9</td>
</tr>
<tr class="even">
<td align="left">JOB</td>
<td align="left">2</td>
<td align="left">WAH</td>
<td align="left">1</td>
</tr>
</tbody>
</table>
<p>Use <code>generate-huffman-tree</code> (exercise <a href="#%_thm_2.69">2.69</a>) to generate a corresponding Huffman tree, and use <code>encode</code> (exercise <a href="#%_thm_2.68">2.68</a>) to encode the following message:</p>
<p></p>
<p></p>
<p>Get a job</p>
<p>Sha na na na na na na na na</p>
<p>Get a job</p>
<p>Sha na na na na na na na na</p>
<p>Wah yip yip yip yip yip yip yip yip yip</p>
<p>Sha boom</p>
<p></p>
<p></p>
<p>How many bits are required for the encoding? What is the smallest number of bits that would be needed to encode this song if we used a fixed-length code for the eight-symbol alphabet?</p>
<p></p>
<p></p>
<p><strong>Exercise 2.71.</strong>  Suppose we have a Huffman tree for an alphabet of <em>n</em> symbols, and that the relative frequencies of the symbols are 1, 2, 4, <code>...</code>, 2<sup><em>n</em>-1</sup>. Sketch the tree for <em>n</em>=5; for <em>n</em>=10. In such a tree (for general <em>n</em>) how many bits are required to encode the most frequent symbol? the least frequent symbol?</p>
<p></p>
<p></p>
<p><strong>Exercise 2.72.</strong>  Consider the encoding procedure that you designed in exercise <a href="#%_thm_2.68">2.68</a>. What is the order of growth in the number of steps needed to encode a symbol? Be sure to include the number of steps needed to search the symbol list at each node encountered. To answer this question in general is difficult. Consider the special case where the relative frequencies of the <em>n</em> symbols are as described in exercise <a href="#%_thm_2.71">2.71</a>, and give the order of growth (as a function of <em>n</em>) of the number of steps needed to encode the most frequent and least frequent symbols in the alphabet.</p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_227"><sup>32</sup></a> Allowing quotation in a language wreaks havoc with the ability to reason about the language in simple terms, because it destroys the notion that equals can be substituted for equals. For example, three is one plus two, but the word ``three'' is not the phrase ``one plus two.'' Quotation is powerful because it gives us a way to build expressions that manipulate other expressions (as we will see when we write an interpreter in chapter 4). But allowing statements in a language that talk about other statements in that language makes it very difficult to maintain any coherent principle of what ``equals can be substituted for equals'' should mean. For example, if we know that the evening star is the morning star, then from the statement ``the evening star is Venus'' we can deduce ``the morning star is Venus.'' However, given that ``John knows that the evening star is Venus'' we cannot infer that ``John knows that the morning star is Venus.''</p>
<p><a href="#call_footnote_Temp_228"><sup>33</sup></a> The single quote is different from the double quote we have been using to enclose character strings to be printed. Whereas the single quote can be used to denote lists or symbols, the double quote is used only with character strings. In this book, the only use for character strings is as items to be printed.</p>
<p><a href="#call_footnote_Temp_229"><sup>34</sup></a> Strictly, our use of the quotation mark violates the general rule that all compound expressions in our language should be delimited by parentheses and look like lists. We can recover this consistency by introducing a special form <code>quote</code>, which serves the same purpose as the quotation mark. Thus, we would type <code>(quote a)</code> instead of <code>'a</code>, and we would type <code>(quote (a b c))</code> instead of <code>'(a b c)</code>. This is precisely how the interpreter works. The quotation mark is just a single-character abbreviation for wrapping the next complete expression with <code>quote</code> to form <code>(quote &lt;expression&gt;)</code>. This is important because it maintains the principle that any expression seen by the interpreter can be manipulated as a data object. For instance, we could construct the expression <code>(car '(a b c))</code>, which is the same as <code>(car (quote (a b c)))</code>, by evaluating <code>(list 'car (list 'quote '(a b c)))</code>.</p>
<p><a href="#call_footnote_Temp_230"><sup>35</sup></a> We can consider two symbols to be ``the same'' if they consist of the same characters in the same order. Such a definition skirts a deep issue that we are not yet ready to address: the meaning of ``sameness'' in a programming language. We will return to this in chapter 3 (section <a href="book-Z-H-20.html#%_sec_3.1.3">3.1.3</a>).</p>
<p><a href="#call_footnote_Temp_233"><sup>36</sup></a> In practice, programmers use <code>equal?</code> to compare lists that contain numbers as well as symbols. Numbers are not considered to be symbols. The question of whether two numerically equal numbers (as tested by <code>=</code>) are also <code>eq?</code> is highly implementation-dependent. A better definition of <code>equal?</code> (such as the one that comes as a primitive in Scheme) would also stipulate that if <code>a</code> and <code>b</code> are both numbers, then <code>a</code> and <code>b</code> are <code>equal?</code> if they are numerically equal.</p>
<p><a href="#call_footnote_Temp_240"><sup>37</sup></a> If we want to be more formal, we can specify ``consistent with the interpretations given above'' to mean that the operations satisfy a collection of rules such as these:</p>
<p></p>
<p></p>
<ul>
<li>For any set <code>S</code> and any object <code>x</code>, <code>(element-of-set? x (adjoin-set x S))</code> is true (informally: ``Adjoining an object to a set produces a set that contains the object'').</li>
<li>For any sets <code>S</code> and <code>T</code> and any object <code>x</code>, <code>(element-of-set? x (union-set S T))</code> is equal to <code>(or (element-of-set? x S) (element-of-set? x T))</code> (informally: ``The elements of <code>(union S T)</code> are the elements that are in <code>S</code> or in <code>T</code>'').</li>
<li>For any object <code>x</code>, <code>(element-of-set? x '())</code> is false (informally: ``No object is an element of the empty set'').</li>
</ul>
<p></p>
<p><a href="#call_footnote_Temp_248"><sup>38</sup></a> Halving the size of the problem at each step is the distinguishing characteristic of logarithmic growth, as we saw with the fast-exponentiation algorithm of section <a href="book-Z-H-11.html#%_sec_1.2.4">1.2.4</a> and the half-interval search method of section <a href="book-Z-H-12.html#%_sec_1.3.3">1.3.3</a>.</p>
<p><a href="#call_footnote_Temp_249"><sup>39</sup></a> We are representing sets in terms of trees, and trees in terms of lists -- in effect, a data abstraction built upon a data abstraction. We can regard the procedures <code>entry</code>, <code>left-branch</code>, <code>right-branch</code>, and <code>make-tree</code> as a way of isolating the abstraction of a ``binary tree'' from the particular way we might wish to represent such a tree in terms of list structure.</p>
<p><a href="#call_footnote_Temp_250"><sup>40</sup></a> Examples of such structures include <em>B-trees</em> and <em>red-black trees</em>. There is a large literature on data structures devoted to this problem. See Cormen, Leiserson, and Rivest 1990.</p>
<p><a href="#call_footnote_Temp_254"><sup>41</sup></a> Exercises <a href="#%_thm_2.63">2.63</a>-<a href="#%_thm_2.65">2.65</a> are due to Paul Hilfinger.</p>
<p><a href="#call_footnote_Temp_258"><sup>42</sup></a> See Hamming 1980 for a discussion of the mathematical properties of Huffman codes.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-15.html">previous</a>, <a href="book-Z-H-17.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-16.html">previous</a>, <a href="book-Z-H-18.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_2.4">2.4  Multiple Representations for Abstract Data</a></h2>
<p>We have introduced data abstraction, a methodology for structuring systems in such a way that much of a program can be specified independent of the choices involved in implementing the data objects that the program manipulates. For example, we saw in section <a href="book-Z-H-14.html#%_sec_2.1.1">2.1.1</a> how to separate the task of designing a program that uses rational numbers from the task of implementing rational numbers in terms of the computer language's primitive mechanisms for constructing compound data. The key idea was to erect an abstraction barrier -- in this case, the selectors and constructors for rational numbers (<code>make-rat</code>, <code>numer</code>, <code>denom</code>) -- that isolates the way rational numbers are used from their underlying representation in terms of list structure. A similar abstraction barrier isolates the details of the procedures that perform rational arithmetic (<code>add-rat</code>, <code>sub-rat</code>, <code>mul-rat</code>, and <code>div-rat</code>) from the ``higher-level'' procedures that use rational numbers. The resulting program has the structure shown in figure <a href="book-Z-H-14.html#%_fig_2.1">2.1</a>.</p>
<p>These data-abstraction barriers are powerful tools for controlling complexity. By isolating the underlying representations of data objects, we can divide the task of designing a large program into smaller tasks that can be performed separately. But this kind of data abstraction is not yet powerful enough, because it may not always make sense to speak of ``the underlying representation'' for a data object.</p>
<p>For one thing, there might be more than one useful representation for a data object, and we might like to design systems that can deal with multiple representations. To take a simple example, complex numbers may be represented in two almost equivalent ways: in rectangular form (real and imaginary parts) and in polar form (magnitude and angle). Sometimes rectangular form is more appropriate and sometimes polar form is more appropriate. Indeed, it is perfectly plausible to imagine a system in which complex numbers are represented in both ways, and in which the procedures for manipulating complex numbers work with either representation.</p>
<p>More importantly, programming systems are often designed by many people working over extended periods of time, subject to requirements that change over time. In such an environment, it is simply not possible for everyone to agree in advance on choices of data representation. So in addition to the data-abstraction barriers that isolate representation from use, we need abstraction barriers that isolate different design choices from each other and permit different choices to coexist in a single program. Furthermore, since large programs are often created by combining pre-existing modules that were designed in isolation, we need conventions that permit programmers to incorporate modules into larger systems <em>additively</em>, that is, without having to redesign or reimplement these modules.</p>
<p>In this section, we will learn how to cope with data that may be represented in different ways by different parts of a program. This requires constructing <em>generic procedures</em> -- procedures that can operate on data that may be represented in more than one way. Our main technique for building generic procedures will be to work in terms of data objects that have <em>type tags</em>, that is, data objects that include explicit information about how they are to be processed. We will also discuss <em>data-directed</em> programming, a powerful and convenient implementation strategy for additively assembling systems with generic operations.</p>
<p>We begin with the simple complex-number example. We will see how type tags and data-directed style enable us to design separate rectangular and polar representations for complex numbers while maintaining the notion of an abstract ``complex-number'' data object. We will accomplish this by defining arithmetic procedures for complex numbers (<code>add-complex</code>, <code>sub-complex</code>, <code>mul-complex</code>, and <code>div-complex</code>) in terms of generic selectors that access parts of a complex number independent of how the number is represented. The resulting complex-number system, as shown in figure <a href="#%_fig_2.19">2.19</a>, contains two different kinds of abstraction barriers. The ``horizontal'' abstraction barriers play the same role as the ones in figure <a href="book-Z-H-14.html#%_fig_2.1">2.1</a>. They isolate ``higher-level'' operations from ``lower-level'' representations. In addition, there is a ``vertical'' barrier that gives us the ability to separately design and install alternative representations.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-54.gif" /></p>
<p><strong>Figure 2.19:</strong>  Data-abstraction barriers in the complex-number system.</p>
<p></p>
<p>In section <a href="book-Z-H-18.html#%_sec_2.5">2.5</a> we will show how to use type tags and data-directed style to develop a generic arithmetic package. This provides procedures (<code>add</code>, <code>mul</code>, and so on) that can be used to manipulate all sorts of ``numbers'' and can be easily extended when a new kind of number is needed. In section <a href="book-Z-H-18.html#%_sec_2.5.3">2.5.3</a>, we'll show how to use generic arithmetic in a system that performs symbolic algebra.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.4.1">2.4.1  Representations for Complex Numbers</a></h3>
<p></p>
<p>We will develop a system that performs arithmetic operations on complex numbers as a simple but unrealistic example of a program that uses generic operations. We begin by discussing two plausible representations for complex numbers as ordered pairs: rectangular form (real part and imaginary part) and polar form (magnitude and angle).<a href="#footnote_Temp_268"><sup>43</sup></a> Section <a href="#%_sec_2.4.2">2.4.2</a> will show how both representations can be made to coexist in a single system through the use of type tags and generic operations.</p>
<p>Like rational numbers, complex numbers are naturally represented as ordered pairs. The set of complex numbers can be thought of as a two-dimensional space with two orthogonal axes, the ``real'' axis and the ``imaginary'' axis. (See figure <a href="#%_fig_2.20">2.20</a>.) From this point of view, the complex number <em>z</em> = <em>x</em> + <em>i</em><em>y</em> (where <em>i</em><sup>2</sup> = - 1) can be thought of as the point in the plane whose real coordinate is <em>x</em> and whose imaginary coordinate is <em>y</em>. Addition of complex numbers reduces in this representation to addition of coordinates:</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-55.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-56.gif" /></p>
<p></p>
<p>When multiplying complex numbers, it is more natural to think in terms of representing a complex number in polar form, as a magnitude and an angle (<em>r</em> and <em>A</em> in figure <a href="#%_fig_2.20">2.20</a>). The product of two complex numbers is the vector obtained by stretching one complex number by the length of the other and then rotating it through the angle of the other:</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-57.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-58.gif" /></p>
<p>Thus, there are two different representations for complex numbers, which are appropriate for different operations. Yet, from the viewpoint of someone writing a program that uses complex numbers, the principle of data abstraction suggests that all the operations for manipulating complex numbers should be available regardless of which representation is used by the computer. For example, it is often useful to be able to find the magnitude of a complex number that is specified by rectangular coordinates. Similarly, it is often useful to be able to determine the real part of a complex number that is specified by polar coordinates.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-59.gif" /></p>
<p><strong>Figure 2.20:</strong>  Complex numbers as points in the plane.</p>
<p></p>
<p>To design such a system, we can follow the same data-abstraction strategy we followed in designing the rational-number package in section <a href="book-Z-H-14.html#%_sec_2.1.1">2.1.1</a>. Assume that the operations on complex numbers are implemented in terms of four selectors: <code>real-part</code>, <code>imag-part</code>, <code>magnitude</code>, and <code>angle</code>. Also assume that we have two procedures for constructing complex numbers: <code>make-from-real-imag</code> returns a complex number with specified real and imaginary parts, and <code>make-from-mag-ang</code> returns a complex number with specified magnitude and angle. These procedures have the property that, for any complex number <code>z</code>, both</p>
<p></p>
<p></p>
<p><code>(make-from-real-imag (real-part z) (imag-part z))</code></p>
<p></p>
<p>and</p>
<p></p>
<p></p>
<p><code>(make-from-mag-ang (magnitude z) (angle z))</code></p>
<p></p>
<p>produce complex numbers that are equal to <code>z</code>.</p>
<p>Using these constructors and selectors, we can implement arithmetic on complex numbers using the ``abstract data'' specified by the constructors and selectors, just as we did for rational numbers in section <a href="book-Z-H-14.html#%_sec_2.1.1">2.1.1</a>. As shown in the formulas above, we can add and subtract complex numbers in terms of real and imaginary parts while multiplying and dividing complex numbers in terms of magnitudes and angles:</p>
<p></p>
<p></p>
<p><code>(define (add-complex z1 z2)   (make-from-real-imag (+ (real-part z1) (real-part z2))                        (+ (imag-part z1) (imag-part z2)))) (define (sub-complex z1 z2)   (make-from-real-imag (- (real-part z1) (real-part z2))                        (- (imag-part z1) (imag-part z2)))) (define (mul-complex z1 z2)   (make-from-mag-ang (* (magnitude z1) (magnitude z2))                      (+ (angle z1) (angle z2)))) (define (div-complex z1 z2)   (make-from-mag-ang (/ (magnitude z1) (magnitude z2))                      (- (angle z1) (angle z2))))</code></p>
<p></p>
<p></p>
<p>To complete the complex-number package, we must choose a representation and we must implement the constructors and selectors in terms of primitive numbers and primitive list structure. There are two obvious ways to do this: We can represent a complex number in ``rectangular form'' as a pair (real part, imaginary part) or in ``polar form'' as a pair (magnitude, angle). Which shall we choose?</p>
<p>In order to make the different choices concrete, imagine that there are two programmers, Ben Bitdiddle and Alyssa P. Hacker, who are independently designing representations for the complex-number system. Ben chooses to represent complex numbers in rectangular form. With this choice, selecting the real and imaginary parts of a complex number is straightforward, as is constructing a complex number with given real and imaginary parts. To find the magnitude and the angle, or to construct a complex number with a given magnitude and angle, he uses the trigonometric relations</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-60.gif" /></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-61.gif" /></p>
<p></p>
<p>which relate the real and imaginary parts (<em>x</em>, <em>y</em>) to the magnitude and the angle (<em>r</em>, <em>A</em>).<a href="#footnote_Temp_269"><sup>44</sup></a> Ben's representation is therefore given by the following selectors and constructors:</p>
<p></p>
<p></p>
<p><code>(define (real-part z) (car z)) (define (imag-part z) (cdr z)) (define (magnitude z)   (sqrt (+ (square (real-part z)) (square (imag-part z))))) (define (angle z)   (atan (imag-part z) (real-part z))) (define (make-from-real-imag x y) (cons x y)) (define (make-from-mag-ang r a)    (cons (* r (cos a)) (* r (sin a))))</code></p>
<p></p>
<p></p>
<p>Alyssa, in contrast, chooses to represent complex numbers in polar form. For her, selecting the magnitude and angle is straightforward, but she has to use the trigonometric relations to obtain the real and imaginary parts. Alyssa's representation is:</p>
<p></p>
<p></p>
<p><code>(define (real-part z)   (* (magnitude z) (cos (angle z)))) (define (imag-part z)   (* (magnitude z) (sin (angle z)))) (define (magnitude z) (car z)) (define (angle z) (cdr z)) (define (make-from-real-imag x y)    (cons (sqrt (+ (square x) (square y)))         (atan y x))) (define (make-from-mag-ang r a) (cons r a))</code></p>
<p></p>
<p></p>
<p>The discipline of data abstraction ensures that the same implementation of <code>add-complex</code>, <code>sub-complex</code>, <code>mul-complex</code>, and <code>div-complex</code> will work with either Ben's representation or Alyssa's representation.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.4.2">2.4.2  Tagged data</a></h3>
<p>One way to view data abstraction is as an application of the ``principle of least commitment.'' In implementing the complex-number system in section <a href="#%_sec_2.4.1">2.4.1</a>, we can use either Ben's rectangular representation or Alyssa's polar representation. The abstraction barrier formed by the selectors and constructors permits us to defer to the last possible moment the choice of a concrete representation for our data objects and thus retain maximum flexibility in our system design.</p>
<p>The principle of least commitment can be carried to even further extremes. If we desire, we can maintain the ambiguity of representation even <em>after</em> we have designed the selectors and constructors, and elect to use both Ben's representation <em>and</em> Alyssa's representation. If both representations are included in a single system, however, we will need some way to distinguish data in polar form from data in rectangular form. Otherwise, if we were asked, for instance, to find the <code>magnitude</code> of the pair (3,4), we wouldn't know whether to answer 5 (interpreting the number in rectangular form) or 3 (interpreting the number in polar form). A straightforward way to accomplish this distinction is to include a <em>type tag</em> -- the symbol <code>rectangular</code> or <code>polar</code> -- as part of each complex number. Then when we need to manipulate a complex number we can use the tag to decide which selector to apply.</p>
<p>In order to manipulate tagged data, we will assume that we have procedures <code>type-tag</code> and <code>contents</code> that extract from a data object the tag and the actual contents (the polar or rectangular coordinates, in the case of a complex number). We will also postulate a procedure <code>attach-tag</code> that takes a tag and contents and produces a tagged data object. A straightforward way to implement this is to use ordinary list structure:</p>
<p></p>
<p></p>
<p><code>(define (attach-tag type-tag contents)   (cons type-tag contents)) (define (type-tag datum)   (if (pair? datum)       (car datum)       (error &quot;Bad tagged datum -- TYPE-TAG&quot; datum))) (define (contents datum)   (if (pair? datum)       (cdr datum)       (error &quot;Bad tagged datum -- CONTENTS&quot; datum)))</code></p>
<p></p>
<p></p>
<p>Using these procedures, we can define predicates <code>rectangular?</code> and <code>polar?</code>, which recognize polar and rectangular numbers, respectively:</p>
<p></p>
<p></p>
<p><code>(define (rectangular? z)   (eq? (type-tag z) 'rectangular)) (define (polar? z)   (eq? (type-tag z) 'polar))</code></p>
<p></p>
<p></p>
<p>With type tags, Ben and Alyssa can now modify their code so that their two different representations can coexist in the same system. Whenever Ben constructs a complex number, he tags it as rectangular. Whenever Alyssa constructs a complex number, she tags it as polar. In addition, Ben and Alyssa must make sure that the names of their procedures do not conflict. One way to do this is for Ben to append the suffix <code>rectangular</code> to the name of each of his representation procedures and for Alyssa to append <code>polar</code> to the names of hers. Here is Ben's revised rectangular representation from section <a href="#%_sec_2.4.1">2.4.1</a>:</p>
<p></p>
<p></p>
<p><code>(define (real-part-rectangular z) (car z)) (define (imag-part-rectangular z) (cdr z)) (define (magnitude-rectangular z)   (sqrt (+ (square (real-part-rectangular z))            (square (imag-part-rectangular z))))) (define (angle-rectangular z)   (atan (imag-part-rectangular z)         (real-part-rectangular z))) (define (make-from-real-imag-rectangular x y)   (attach-tag 'rectangular (cons x y))) (define (make-from-mag-ang-rectangular r a)    (attach-tag 'rectangular               (cons (* r (cos a)) (* r (sin a)))))</code></p>
<p></p>
<p>and here is Alyssa's revised polar representation:</p>
<p></p>
<p></p>
<p><code>(define (real-part-polar z)   (* (magnitude-polar z) (cos (angle-polar z)))) (define (imag-part-polar z)   (* (magnitude-polar z) (sin (angle-polar z)))) (define (magnitude-polar z) (car z)) (define (angle-polar z) (cdr z)) (define (make-from-real-imag-polar x y)    (attach-tag 'polar                (cons (sqrt (+ (square x) (square y)))                      (atan y x)))) (define (make-from-mag-ang-polar r a)   (attach-tag 'polar (cons r a)))</code></p>
<p></p>
<p></p>
<p>Each generic selector is implemented as a procedure that checks the tag of its argument and calls the appropriate procedure for handling data of that type. For example, to obtain the real part of a complex number, <code>real-part</code> examines the tag to determine whether to use Ben's <code>real-part-rectangular</code> or Alyssa's <code>real-part-polar</code>. In either case, we use <code>contents</code> to extract the bare, untagged datum and send this to the rectangular or polar procedure as required:</p>
<p></p>
<p></p>
<p><code>(define (real-part z)   (cond ((rectangular? z)           (real-part-rectangular (contents z)))         ((polar? z)          (real-part-polar (contents z)))         (else (error &quot;Unknown type -- REAL-PART&quot; z)))) (define (imag-part z)   (cond ((rectangular? z)          (imag-part-rectangular (contents z)))         ((polar? z)          (imag-part-polar (contents z)))         (else (error &quot;Unknown type -- IMAG-PART&quot; z)))) (define (magnitude z)   (cond ((rectangular? z)          (magnitude-rectangular (contents z)))         ((polar? z)          (magnitude-polar (contents z)))         (else (error &quot;Unknown type -- MAGNITUDE&quot; z)))) (define (angle z)   (cond ((rectangular? z)          (angle-rectangular (contents z)))         ((polar? z)          (angle-polar (contents z)))         (else (error &quot;Unknown type -- ANGLE&quot; z))))</code></p>
<p></p>
<p></p>
<p>To implement the complex-number arithmetic operations, we can use the same procedures <code>add-complex</code>, <code>sub-complex</code>, <code>mul-complex</code>, and <code>div-complex</code> from section <a href="#%_sec_2.4.1">2.4.1</a>, because the selectors they call are generic, and so will work with either representation. For example, the procedure <code>add-complex</code> is still</p>
<p></p>
<p></p>
<p><code>(define (add-complex z1 z2)   (make-from-real-imag (+ (real-part z1) (real-part z2))                        (+ (imag-part z1) (imag-part z2))))</code></p>
<p></p>
<p></p>
<p>Finally, we must choose whether to construct complex numbers using Ben's representation or Alyssa's representation. One reasonable choice is to construct rectangular numbers whenever we have real and imaginary parts and to construct polar numbers whenever we have magnitudes and angles:</p>
<p></p>
<p></p>
<p><code>(define (make-from-real-imag x y)   (make-from-real-imag-rectangular x y)) (define (make-from-mag-ang r a)   (make-from-mag-ang-polar r a))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-62.gif" /></p>
<p><strong>Figure 2.21:</strong>  Structure of the generic complex-arithmetic system.</p>
<p></p>
<p>The resulting complex-number system has the structure shown in figure <a href="#%_fig_2.21">2.21</a>. The system has been decomposed into three relatively independent parts: the complex-number-arithmetic operations, Alyssa's polar implementation, and Ben's rectangular implementation. The polar and rectangular implementations could have been written by Ben and Alyssa working separately, and both of these can be used as underlying representations by a third programmer implementing the complex-arithmetic procedures in terms of the abstract constructor/selector interface.</p>
<p>Since each data object is tagged with its type, the selectors operate on the data in a generic manner. That is, each selector is defined to have a behavior that depends upon the particular type of data it is applied to. Notice the general mechanism for interfacing the separate representations: Within a given representation implementation (say, Alyssa's polar package) a complex number is an untyped pair (magnitude, angle). When a generic selector operates on a number of <code>polar</code> type, it strips off the tag and passes the contents on to Alyssa's code. Conversely, when Alyssa constructs a number for general use, she tags it with a type so that it can be appropriately recognized by the higher-level procedures. This discipline of stripping off and attaching tags as data objects are passed from level to level can be an important organizational strategy, as we shall see in section <a href="book-Z-H-18.html#%_sec_2.5">2.5</a>.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.4.3">2.4.3  Data-Directed Programming and Additivity</a></h3>
<p>The general strategy of checking the type of a datum and calling an appropriate procedure is called <em>dispatching on type</em>. This is a powerful strategy for obtaining modularity in system design. On the other hand, implementing the dispatch as in section <a href="#%_sec_2.4.2">2.4.2</a> has two significant weaknesses. One weakness is that the generic interface procedures (<code>real-part</code>, <code>imag-part</code>, <code>magnitude</code>, and <code>angle</code>) must know about all the different representations. For instance, suppose we wanted to incorporate a new representation for complex numbers into our complex-number system. We would need to identify this new representation with a type, and then add a clause to each of the generic interface procedures to check for the new type and apply the appropriate selector for that representation.</p>
<p>Another weakness of the technique is that even though the individual representations can be designed separately, we must guarantee that no two procedures in the entire system have the same name. This is why Ben and Alyssa had to change the names of their original procedures from section <a href="#%_sec_2.4.1">2.4.1</a>.</p>
<p>The issue underlying both of these weaknesses is that the technique for implementing generic interfaces is not <em>additive</em>. The person implementing the generic selector procedures must modify those procedures each time a new representation is installed, and the people interfacing the individual representations must modify their code to avoid name conflicts. In each of these cases, the changes that must be made to the code are straightforward, but they must be made nonetheless, and this is a source of inconvenience and error. This is not much of a problem for the complex-number system as it stands, but suppose there were not two but hundreds of different representations for complex numbers. And suppose that there were many generic selectors to be maintained in the abstract-data interface. Suppose, in fact, that no one programmer knew all the interface procedures or all the representations. The problem is real and must be addressed in such programs as large-scale data-base-management systems.</p>
<p>What we need is a means for modularizing the system design even further. This is provided by the programming technique known as <em>data-directed programming</em>. To understand how data-directed programming works, begin with the observation that whenever we deal with a set of generic operations that are common to a set of different types we are, in effect, dealing with a two-dimensional table that contains the possible operations on one axis and the possible types on the other axis. The entries in the table are the procedures that implement each operation for each type of argument presented. In the complex-number system developed in the previous section, the correspondence between operation name, data type, and actual procedure was spread out among the various conditional clauses in the generic interface procedures. But the same information could have been organized in a table, as shown in figure <a href="#%_fig_2.22">2.22</a>.</p>
<p>Data-directed programming is the technique of designing programs to work with such a table directly. Previously, we implemented the mechanism that interfaces the complex-arithmetic code with the two representation packages as a set of procedures that each perform an explicit dispatch on type. Here we will implement the interface as a single procedure that looks up the combination of the operation name and argument type in the table to find the correct procedure to apply, and then applies it to the contents of the argument. If we do this, then to add a new representation package to the system we need not change any existing procedures; we need only add new entries to the table.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-63.gif" /></p>
<p><strong>Figure 2.22:</strong>  Table of operations for the complex-number system.</p>
<p></p>
<p>To implement this plan, assume that we have two procedures, <code>put</code> and <code>get</code>, for manipulating the operation-and-type table:</p>
<p></p>
<ul>
<li><code>(put &lt;op&gt; &lt;type&gt; &lt;item&gt;)</code><br /> installs the <code>&lt;item&gt;</code> in the table, indexed by the <code>&lt;op&gt;</code> and the <code>&lt;type&gt;</code>.</li>
<li><code>(get &lt;op&gt; &lt;type&gt;)</code><br /> looks up the <code>&lt;op&gt;</code>, <code>&lt;type&gt;</code> entry in the table and returns the item found there. If no item is found, <code>get</code> returns false.</li>
</ul>
<p></p>
<p>For now, we can assume that <code>put</code> and <code>get</code> are included in our language. In chapter 3 (section <a href="book-Z-H-22.html#%_sec_3.3.3">3.3.3</a>, exercise <a href="book-Z-H-22.html#%_thm_3.24">3.24</a>) we will see how to implement these and other operations for manipulating tables.</p>
<p>Here is how data-directed programming can be used in the complex-number system. Ben, who developed the rectangular representation, implements his code just as he did originally. He defines a collection of procedures, or a <em>package</em>, and interfaces these to the rest of the system by adding entries to the table that tell the system how to operate on rectangular numbers. This is accomplished by calling the following procedure:</p>
<p></p>
<p><code>(define (install-rectangular-package)   ;; internal procedures   (define (real-part z) (car z))   (define (imag-part z) (cdr z))   (define (make-from-real-imag x y) (cons x y))   (define (magnitude z)     (sqrt (+ (square (real-part z))              (square (imag-part z)))))   (define (angle z)     (atan (imag-part z) (real-part z)))   (define (make-from-mag-ang r a)      (cons (* r (cos a)) (* r (sin a))))   ;; interface to the rest of the system   (define (tag x) (attach-tag 'rectangular x))   (put 'real-part '(rectangular) real-part)   (put 'imag-part '(rectangular) imag-part)   (put 'magnitude '(rectangular) magnitude)   (put 'angle '(rectangular) angle)   (put 'make-from-real-imag 'rectangular         (lambda (x y) (tag (make-from-real-imag x y))))   (put 'make-from-mag-ang 'rectangular         (lambda (r a) (tag (make-from-mag-ang r a))))   'done)</code></p>
<p></p>
<p></p>
<p>Notice that the internal procedures here are the same procedures from section <a href="#%_sec_2.4.1">2.4.1</a> that Ben wrote when he was working in isolation. No changes are necessary in order to interface them to the rest of the system. Moreover, since these procedure definitions are internal to the installation procedure, Ben needn't worry about name conflicts with other procedures outside the rectangular package. To interface these to the rest of the system, Ben installs his <code>real-part</code> procedure under the operation name <code>real-part</code> and the type <code>(rectangular)</code>, and similarly for the other selectors.<a href="#footnote_Temp_270"><sup>45</sup></a> The interface also defines the constructors to be used by the external system.<a href="#footnote_Temp_271"><sup>46</sup></a> These are identical to Ben's internally defined constructors, except that they attach the tag.</p>
<p>Alyssa's polar package is analogous:</p>
<p></p>
<p><code>(define (install-polar-package)   ;; internal procedures   (define (magnitude z) (car z))   (define (angle z) (cdr z))   (define (make-from-mag-ang r a) (cons r a))   (define (real-part z)     (* (magnitude z) (cos (angle z))))   (define (imag-part z)     (* (magnitude z) (sin (angle z))))   (define (make-from-real-imag x y)      (cons (sqrt (+ (square x) (square y)))           (atan y x)))   ;; interface to the rest of the system   (define (tag x) (attach-tag 'polar x))   (put 'real-part '(polar) real-part)   (put 'imag-part '(polar) imag-part)   (put 'magnitude '(polar) magnitude)   (put 'angle '(polar) angle)   (put 'make-from-real-imag 'polar        (lambda (x y) (tag (make-from-real-imag x y))))   (put 'make-from-mag-ang 'polar         (lambda (r a) (tag (make-from-mag-ang r a))))   'done)</code></p>
<p></p>
<p></p>
<p>Even though Ben and Alyssa both still use their original procedures defined with the same names as each other's (e.g., <code>real-part</code>), these definitions are now internal to different procedures (see section <a href="book-Z-H-10.html#%_sec_1.1.8">1.1.8</a>), so there is no name conflict.</p>
<p>The complex-arithmetic selectors access the table by means of a general ``operation'' procedure called <code>apply-generic</code>, which applies a generic operation to some arguments. <code>Apply-generic</code> looks in the table under the name of the operation and the types of the arguments and applies the resulting procedure if one is present:<a href="#footnote_Temp_272"><sup>47</sup></a></p>
<p></p>
<p></p>
<p><code>(define (apply-generic op . args)   (let ((type-tags (map type-tag args)))     (let ((proc (get op type-tags)))       (if proc           (apply proc (map contents args))           (error             &quot;No method for these types -- APPLY-GENERIC&quot;             (list op type-tags))))))</code></p>
<p></p>
<p>Using <code>apply-generic</code>, we can define our generic selectors as follows:</p>
<p></p>
<p></p>
<p><code>(define (real-part z) (apply-generic 'real-part z)) (define (imag-part z) (apply-generic 'imag-part z)) (define (magnitude z) (apply-generic 'magnitude z)) (define (angle z) (apply-generic 'angle z))</code></p>
<p></p>
<p>Observe that these do not change at all if a new representation is added to the system.</p>
<p>We can also extract from the table the constructors to be used by the programs external to the packages in making complex numbers from real and imaginary parts and from magnitudes and angles. As in section <a href="#%_sec_2.4.2">2.4.2</a>, we construct rectangular numbers whenever we have real and imaginary parts, and polar numbers whenever we have magnitudes and angles:</p>
<p></p>
<p></p>
<p><code>(define (make-from-real-imag x y)   ((get 'make-from-real-imag 'rectangular) x y)) (define (make-from-mag-ang r a)   ((get 'make-from-mag-ang 'polar) r a))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.73.</strong>  Section <a href="book-Z-H-16.html#%_sec_2.3.2">2.3.2</a> described a program that performs symbolic differentiation:</p>
<p></p>
<p><code>(define (deriv exp var)   (cond ((number? exp) 0)         ((variable? exp) (if (same-variable? exp var) 1 0))         ((sum? exp)          (make-sum (deriv (addend exp) var)                    (deriv (augend exp) var)))         ((product? exp)          (make-sum            (make-product (multiplier exp)                          (deriv (multiplicand exp) var))            (make-product (deriv (multiplier exp) var)                          (multiplicand exp))))         &lt;more rules can be added here&gt;         (else (error &quot;unknown expression type -- DERIV&quot; exp))))</code></p>
<p></p>
<p>We can regard this program as performing a dispatch on the type of the expression to be differentiated. In this situation the ``type tag'' of the datum is the algebraic operator symbol (such as <code>+</code>) and the operation being performed is <code>deriv</code>. We can transform this program into data-directed style by rewriting the basic derivative procedure as</p>
<p></p>
<p><code>(define (deriv exp var)    (cond ((number? exp) 0)          ((variable? exp) (if (same-variable? exp var) 1 0))          (else ((get 'deriv (operator exp)) (operands exp)                                             var)))) (define (operator exp) (car exp)) (define (operands exp) (cdr exp))</code></p>
<p></p>
<p></p>
<p>a.  Explain what was done above. Why can't we assimilate the predicates <code>number?</code> and <code>same-variable?</code> into the data-directed dispatch?</p>
<p>b.  Write the procedures for derivatives of sums and products, and the auxiliary code required to install them in the table used by the program above.</p>
<p>c.  Choose any additional differentiation rule that you like, such as the one for exponents (exercise <a href="book-Z-H-16.html#%_thm_2.56">2.56</a>), and install it in this data-directed system.</p>
<p>d.  In this simple algebraic manipulator the type of an expression is the algebraic operator that binds it together. Suppose, however, we indexed the procedures in the opposite way, so that the dispatch line in <code>deriv</code> looked like</p>
<p></p>
<p></p>
<p><code>((get (operator exp) 'deriv) (operands exp) var)</code></p>
<p></p>
<p>What corresponding changes to the derivative system are required?</p>
<p></p>
<p></p>
<p><strong>Exercise 2.74.</strong>  Insatiable Enterprises, Inc., is a highly decentralized conglomerate company consisting of a large number of independent divisions located all over the world. The company's computer facilities have just been interconnected by means of a clever network-interfacing scheme that makes the entire network appear to any user to be a single computer. Insatiable's president, in her first attempt to exploit the ability of the network to extract administrative information from division files, is dismayed to discover that, although all the division files have been implemented as data structures in Scheme, the particular data structure used varies from division to division. A meeting of division managers is hastily called to search for a strategy to integrate the files that will satisfy headquarters' needs while preserving the existing autonomy of the divisions.</p>
<p>Show how such a strategy can be implemented with data-directed programming. As an example, suppose that each division's personnel records consist of a single file, which contains a set of records keyed on employees' names. The structure of the set varies from division to division. Furthermore, each employee's record is itself a set (structured differently from division to division) that contains information keyed under identifiers such as <code>address</code> and <code>salary</code>. In particular:</p>
<p>a.  Implement for headquarters a <code>get-record</code> procedure that retrieves a specified employee's record from a specified personnel file. The procedure should be applicable to any division's file. Explain how the individual divisions' files should be structured. In particular, what type information must be supplied?</p>
<p>b.  Implement for headquarters a <code>get-salary</code> procedure that returns the salary information from a given employee's record from any division's personnel file. How should the record be structured in order to make this operation work?</p>
<p>c.  Implement for headquarters a <code>find-employee-record</code> procedure. This should search all the divisions' files for the record of a given employee and return the record. Assume that this procedure takes as arguments an employee's name and a list of all the divisions' files.</p>
<p>d.  When Insatiable takes over a new company, what changes must be made in order to incorporate the new personnel information into the central system?</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_275">Message passing</a></h4>
<p>The key idea of data-directed programming is to handle generic operations in programs by dealing explicitly with operation-and-type tables, such as the table in figure <a href="#%_fig_2.22">2.22</a>. The style of programming we used in section <a href="#%_sec_2.4.2">2.4.2</a> organized the required dispatching on type by having each operation take care of its own dispatching. In effect, this decomposes the operation-and-type table into rows, with each generic operation procedure representing a row of the table.</p>
<p>An alternative implementation strategy is to decompose the table into columns and, instead of using ``intelligent operations'' that dispatch on data types, to work with ``intelligent data objects'' that dispatch on operation names. We can do this by arranging things so that a data object, such as a rectangular number, is represented as a procedure that takes as input the required operation name and performs the operation indicated. In such a discipline, <code>make-from-real-imag</code> could be written as</p>
<p></p>
<p></p>
<p><code>(define (make-from-real-imag x y)   (define (dispatch op)     (cond ((eq? op 'real-part) x)           ((eq? op 'imag-part) y)           ((eq? op 'magnitude)            (sqrt (+ (square x) (square y))))           ((eq? op 'angle) (atan y x))           (else            (error &quot;Unknown op -- MAKE-FROM-REAL-IMAG&quot; op))))   dispatch)</code></p>
<p></p>
<p>The corresponding <code>apply-generic</code> procedure, which applies a generic operation to an argument, now simply feeds the operation's name to the data object and lets the object do the work:<a href="#footnote_Temp_276"><sup>48</sup></a></p>
<p></p>
<p></p>
<p><code>(define (apply-generic op arg) (arg op))</code></p>
<p></p>
<p>Note that the value returned by <code>make-from-real-imag</code> is a procedure -- the internal <code>dispatch</code> procedure. This is the procedure that is invoked when <code>apply-generic</code> requests an operation to be performed.</p>
<p>This style of programming is called <em>message passing</em>. The name comes from the image that a data object is an entity that receives the requested operation name as a ``message.'' We have already seen an example of message passing in section <a href="book-Z-H-14.html#%_sec_2.1.3">2.1.3</a>, where we saw how <code>cons</code>, <code>car</code>, and <code>cdr</code> could be defined with no data objects but only procedures. Here we see that message passing is not a mathematical trick but a useful technique for organizing systems with generic operations. In the remainder of this chapter we will continue to use data-directed programming, rather than message passing, to discuss generic arithmetic operations. In chapter 3 we will return to message passing, and we will see that it can be a powerful tool for structuring simulation programs.</p>
<p></p>
<p><strong>Exercise 2.75.</strong>  Implement the constructor <code>make-from-mag-ang</code> in message-passing style. This procedure should be analogous to the <code>make-from-real-imag</code> procedure given above.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.76.</strong>  As a large system with generic operations evolves, new types of data objects or new operations may be needed. For each of the three strategies -- generic operations with explicit dispatch, data-directed style, and message-passing-style -- describe the changes that must be made to a system in order to add new types or new operations. Which organization would be most appropriate for a system in which new types must often be added? Which would be most appropriate for a system in which new operations must often be added?</p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_268"><sup>43</sup></a> In actual computational systems, rectangular form is preferable to polar form most of the time because of roundoff errors in conversion between rectangular and polar form. This is why the complex-number example is unrealistic. Nevertheless, it provides a clear illustration of the design of a system using generic operations and a good introduction to the more substantial systems to be developed later in this chapter.</p>
<p><a href="#call_footnote_Temp_269"><sup>44</sup></a> The arctangent function referred to here, computed by Scheme's <code>atan</code> procedure, is defined so as to take two arguments <em>y</em> and <em>x</em> and to return the angle whose tangent is <em>y</em>/<em>x</em>. The signs of the arguments determine the quadrant of the angle.</p>
<p><a href="#call_footnote_Temp_270"><sup>45</sup></a> We use the list <code>(rectangular)</code> rather than the symbol <code>rectangular</code> to allow for the possibility of operations with multiple arguments, not all of the same type.</p>
<p><a href="#call_footnote_Temp_271"><sup>46</sup></a> The type the constructors are installed under needn't be a list because a constructor is always used to make an object of one particular type.</p>
<p><a href="#call_footnote_Temp_272"><sup>47</sup></a> <code>Apply-generic</code> uses the dotted-tail notation described in exercise <a href="book-Z-H-15.html#%_thm_2.20">2.20</a>, because different generic operations may take different numbers of arguments. In <code>apply-generic</code>, <code>op</code> has as its value the first argument to <code>apply-generic</code> and <code>args</code> has as its value a list of the remaining arguments.</p>
<p><code>Apply-generic</code> also uses the primitive procedure <code>apply</code>, which takes two arguments, a procedure and a list. <code>Apply</code> applies the procedure, using the elements in the list as arguments. For example,</p>
<p></p>
<p><code>(apply + (list 1 2 3 4))</code></p>
<p></p>
<p>returns 10.</p>
<p><a href="#call_footnote_Temp_276"><sup>48</sup></a> One limitation of this organization is it permits only generic procedures of one argument.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-16.html">previous</a>, <a href="book-Z-H-18.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-17.html">previous</a>, <a href="book-Z-H-19.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_2.5">2.5  Systems with Generic Operations</a></h2>
<p></p>
<p>In the previous section, we saw how to design systems in which data objects can be represented in more than one way. The key idea is to link the code that specifies the data operations to the several representations by means of generic interface procedures. Now we will see how to use this same idea not only to define operations that are generic over different representations but also to define operations that are generic over different kinds of arguments. We have already seen several different packages of arithmetic operations: the primitive arithmetic (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) built into our language, the rational-number arithmetic (<code>add-rat</code>, <code>sub-rat</code>, <code>mul-rat</code>, <code>div-rat</code>) of section <a href="book-Z-H-14.html#%_sec_2.1.1">2.1.1</a>, and the complex-number arithmetic that we implemented in section <a href="book-Z-H-17.html#%_sec_2.4.3">2.4.3</a>. We will now use data-directed techniques to construct a package of arithmetic operations that incorporates all the arithmetic packages we have already constructed.</p>
<p>Figure <a href="#%_fig_2.23">2.23</a> shows the structure of the system we shall build. Notice the abstraction barriers. From the perspective of someone using ``numbers,'' there is a single procedure <code>add</code> that operates on whatever numbers are supplied. <code>Add</code> is part of a generic interface that allows the separate ordinary-arithmetic, rational-arithmetic, and complex-arithmetic packages to be accessed uniformly by programs that use numbers. Any individual arithmetic package (such as the complex package) may itself be accessed through generic procedures (such as <code>add-complex</code>) that combine packages designed for different representations (such as rectangular and polar). Moreover, the structure of the system is additive, so that one can design the individual arithmetic packages separately and combine them to produce a generic arithmetic system.</p>
<p></p>
<p><img src="ch2-Z-G-64.gif" /></p>
<p><strong>Figure 2.23:</strong>  Generic arithmetic system.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.5.1">2.5.1  Generic Arithmetic Operations</a></h3>
<p>The task of designing generic arithmetic operations is analogous to that of designing the generic complex-number operations. We would like, for instance, to have a generic addition procedure <code>add</code> that acts like ordinary primitive addition <code>+</code> on ordinary numbers, like <code>add-rat</code> on rational numbers, and like <code>add-complex</code> on complex numbers. We can implement <code>add</code>, and the other generic arithmetic operations, by following the same strategy we used in section <a href="book-Z-H-17.html#%_sec_2.4.3">2.4.3</a> to implement the generic selectors for complex numbers. We will attach a type tag to each kind of number and cause the generic procedure to dispatch to an appropriate package according to the data type of its arguments.</p>
<p>The generic arithmetic procedures are defined as follows:</p>
<p></p>
<p></p>
<p><code>(define (add x y) (apply-generic 'add x y)) (define (sub x y) (apply-generic 'sub x y)) (define (mul x y) (apply-generic 'mul x y)) (define (div x y) (apply-generic 'div x y))</code></p>
<p></p>
<p></p>
<p>We begin by installing a package for handling <em>ordinary</em> numbers, that is, the primitive numbers of our language. We will tag these with the symbol <code>scheme-number</code>. The arithmetic operations in this package are the primitive arithmetic procedures (so there is no need to define extra procedures to handle the untagged numbers). Since these operations each take two arguments, they are installed in the table keyed by the list <code>(scheme-number scheme-number)</code>:</p>
<p></p>
<p><code>(define (install-scheme-number-package)   (define (tag x)     (attach-tag 'scheme-number x))       (put 'add '(scheme-number scheme-number)        (lambda (x y) (tag (+ x y))))   (put 'sub '(scheme-number scheme-number)        (lambda (x y) (tag (- x y))))   (put 'mul '(scheme-number scheme-number)        (lambda (x y) (tag (* x y))))   (put 'div '(scheme-number scheme-number)        (lambda (x y) (tag (/ x y))))   (put 'make 'scheme-number        (lambda (x) (tag x)))   'done)</code></p>
<p></p>
<p></p>
<p>Users of the Scheme-number package will create (tagged) ordinary numbers by means of the procedure:</p>
<p></p>
<p></p>
<p><code>(define (make-scheme-number n)   ((get 'make 'scheme-number) n))</code></p>
<p></p>
<p></p>
<p>Now that the framework of the generic arithmetic system is in place, we can readily include new kinds of numbers. Here is a package that performs rational arithmetic. Notice that, as a benefit of additivity, we can use without modification the rational-number code from section <a href="book-Z-H-14.html#%_sec_2.1.1">2.1.1</a> as the internal procedures in the package:</p>
<p></p>
<p><code>(define (install-rational-package)   ;; internal procedures   (define (numer x) (car x))   (define (denom x) (cdr x))   (define (make-rat n d)     (let ((g (gcd n d)))       (cons (/ n g) (/ d g))))   (define (add-rat x y)     (make-rat (+ (* (numer x) (denom y))                  (* (numer y) (denom x)))               (* (denom x) (denom y))))   (define (sub-rat x y)     (make-rat (- (* (numer x) (denom y))                  (* (numer y) (denom x)))               (* (denom x) (denom y))))   (define (mul-rat x y)     (make-rat (* (numer x) (numer y))               (* (denom x) (denom y))))   (define (div-rat x y)     (make-rat (* (numer x) (denom y))               (* (denom x) (numer y))))   ;; interface to rest of the system   (define (tag x) (attach-tag 'rational x))   (put 'add '(rational rational)        (lambda (x y) (tag (add-rat x y))))   (put 'sub '(rational rational)        (lambda (x y) (tag (sub-rat x y))))   (put 'mul '(rational rational)        (lambda (x y) (tag (mul-rat x y))))   (put 'div '(rational rational)        (lambda (x y) (tag (div-rat x y))))    (put 'make 'rational        (lambda (n d) (tag (make-rat n d))))   'done) (define (make-rational n d)   ((get 'make 'rational) n d))</code></p>
<p></p>
<p></p>
<p>We can install a similar package to handle complex numbers, using the tag <code>complex</code>. In creating the package, we extract from the table the operations <code>make-from-real-imag</code> and <code>make-from-mag-ang</code> that were defined by the rectangular and polar packages. Additivity permits us to use, as the internal operations, the same <code>add-complex</code>, <code>sub-complex</code>, <code>mul-complex</code>, and <code>div-complex</code> procedures from section <a href="book-Z-H-17.html#%_sec_2.4.1">2.4.1</a>.</p>
<p></p>
<p><code>(define (install-complex-package)   ;; imported procedures from rectangular and polar packages   (define (make-from-real-imag x y)     ((get 'make-from-real-imag 'rectangular) x y))   (define (make-from-mag-ang r a)     ((get 'make-from-mag-ang 'polar) r a))   ;; internal procedures   (define (add-complex z1 z2)     (make-from-real-imag (+ (real-part z1) (real-part z2))                          (+ (imag-part z1) (imag-part z2))))   (define (sub-complex z1 z2)     (make-from-real-imag (- (real-part z1) (real-part z2))                          (- (imag-part z1) (imag-part z2))))   (define (mul-complex z1 z2)     (make-from-mag-ang (* (magnitude z1) (magnitude z2))                        (+ (angle z1) (angle z2))))   (define (div-complex z1 z2)     (make-from-mag-ang (/ (magnitude z1) (magnitude z2))                        (- (angle z1) (angle z2))))   ;; interface to rest of the system   (define (tag z) (attach-tag 'complex z))   (put 'add '(complex complex)        (lambda (z1 z2) (tag (add-complex z1 z2))))   (put 'sub '(complex complex)        (lambda (z1 z2) (tag (sub-complex z1 z2))))   (put 'mul '(complex complex)        (lambda (z1 z2) (tag (mul-complex z1 z2))))   (put 'div '(complex complex)        (lambda (z1 z2) (tag (div-complex z1 z2))))   (put 'make-from-real-imag 'complex        (lambda (x y) (tag (make-from-real-imag x y))))   (put 'make-from-mag-ang 'complex        (lambda (r a) (tag (make-from-mag-ang r a))))   'done)</code></p>
<p></p>
<p></p>
<p>Programs outside the complex-number package can construct complex numbers either from real and imaginary parts or from magnitudes and angles. Notice how the underlying procedures, originally defined in the rectangular and polar packages, are exported to the complex package, and exported from there to the outside world.</p>
<p></p>
<p></p>
<p><code>(define (make-complex-from-real-imag x y)   ((get 'make-from-real-imag 'complex) x y)) (define (make-complex-from-mag-ang r a)   ((get 'make-from-mag-ang 'complex) r a))</code></p>
<p></p>
<p></p>
<p>What we have here is a two-level tag system. A typical complex number, such as 3 + 4<em>i</em> in rectangular form, would be represented as shown in figure <a href="#%_fig_2.24">2.24</a>. The outer tag (<code>complex</code>) is used to direct the number to the complex package. Once within the complex package, the next tag (<code>rectangular</code>) is used to direct the number to the rectangular package. In a large and complicated system there might be many levels, each interfaced with the next by means of generic operations. As a data object is passed ``downward,'' the outer tag that is used to direct it to the appropriate package is stripped off (by applying <code>contents</code>) and the next level of tag (if any) becomes visible to be used for further dispatching.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-65.gif" /></p>
<p><strong>Figure 2.24:</strong>  Representation of 3 + 4<em>i</em> in rectangular form.</p>
<p></p>
<p>In the above packages, we used <code>add-rat</code>, <code>add-complex</code>, and the other arithmetic procedures exactly as originally written. Once these definitions are internal to different installation procedures, however, they no longer need names that are distinct from each other: we could simply name them <code>add</code>, <code>sub</code>, <code>mul</code>, and <code>div</code> in both packages.</p>
<p></p>
<p><strong>Exercise 2.77.</strong>  Louis Reasoner tries to evaluate the expression <code>(magnitude z)</code> where <code>z</code> is the object shown in figure <a href="#%_fig_2.24">2.24</a>. To his surprise, instead of the answer 5 he gets an error message from <code>apply-generic</code>, saying there is no method for the operation <code>magnitude</code> on the types <code>(complex)</code>. He shows this interaction to Alyssa P. Hacker, who says ``The problem is that the complex-number selectors were never defined for <code>complex</code> numbers, just for <code>polar</code> and <code>rectangular</code> numbers. All you have to do to make this work is add the following to the <code>complex</code> package:''</p>
<p></p>
<p></p>
<p><code>(put 'real-part '(complex) real-part) (put 'imag-part '(complex) imag-part) (put 'magnitude '(complex) magnitude) (put 'angle '(complex) angle)</code></p>
<p></p>
<p>Describe in detail why this works. As an example, trace through all the procedures called in evaluating the expression <code>(magnitude z)</code> where <code>z</code> is the object shown in figure <a href="#%_fig_2.24">2.24</a>. In particular, how many times is <code>apply-generic</code> invoked? What procedure is dispatched to in each case?</p>
<p></p>
<p></p>
<p><strong>Exercise 2.78.</strong>  The internal procedures in the <code>scheme-number</code> package are essentially nothing more than calls to the primitive procedures <code>+</code>, <code>-</code>, etc. It was not possible to use the primitives of the language directly because our type-tag system requires that each data object have a type attached to it. In fact, however, all Lisp implementations do have a type system, which they use internally. Primitive predicates such as <code>symbol?</code> and <code>number?</code> determine whether data objects have particular types. Modify the definitions of <code>type-tag</code>, <code>contents</code>, and <code>attach-tag</code> from section <a href="book-Z-H-17.html#%_sec_2.4.2">2.4.2</a> so that our generic system takes advantage of Scheme's internal type system. That is to say, the system should work as before except that ordinary numbers should be represented simply as Scheme numbers rather than as pairs whose <code>car</code> is the symbol <code>scheme-number</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.79.</strong>  Define a generic equality predicate <code>equ?</code> that tests the equality of two numbers, and install it in the generic arithmetic package. This operation should work for ordinary numbers, rational numbers, and complex numbers.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.80.</strong>  Define a generic predicate <code>=zero?</code> that tests if its argument is zero, and install it in the generic arithmetic package. This operation should work for ordinary numbers, rational numbers, and complex numbers.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.5.2">2.5.2  Combining Data of Different Types</a></h3>
<p></p>
<p>We have seen how to define a unified arithmetic system that encompasses ordinary numbers, complex numbers, rational numbers, and any other type of number we might decide to invent, but we have ignored an important issue. The operations we have defined so far treat the different data types as being completely independent. Thus, there are separate packages for adding, say, two ordinary numbers, or two complex numbers. What we have not yet considered is the fact that it is meaningful to define operations that cross the type boundaries, such as the addition of a complex number to an ordinary number. We have gone to great pains to introduce barriers between parts of our programs so that they can be developed and understood separately. We would like to introduce the cross-type operations in some carefully controlled way, so that we can support them without seriously violating our module boundaries.</p>
<p>One way to handle cross-type operations is to design a different procedure for each possible combination of types for which the operation is valid. For example, we could extend the complex-number package so that it provides a procedure for adding complex numbers to ordinary numbers and installs this in the table using the tag <code>(complex scheme-number)</code>:<a href="#footnote_Temp_283"><sup>49</sup></a></p>
<p></p>
<p><code>;; to be included in the complex package (define (add-complex-to-schemenum z x)   (make-from-real-imag (+ (real-part z) x)                        (imag-part z))) (put 'add '(complex scheme-number)      (lambda (z x) (tag (add-complex-to-schemenum z x))))</code></p>
<p></p>
<p></p>
<p>This technique works, but it is cumbersome. With such a system, the cost of introducing a new type is not just the construction of the package of procedures for that type but also the construction and installation of the procedures that implement the cross-type operations. This can easily be much more code than is needed to define the operations on the type itself. The method also undermines our ability to combine separate packages additively, or least to limit the extent to which the implementors of the individual packages need to take account of other packages. For instance, in the example above, it seems reasonable that handling mixed operations on complex numbers and ordinary numbers should be the responsibility of the complex-number package. Combining rational numbers and complex numbers, however, might be done by the complex package, by the rational package, or by some third package that uses operations extracted from these two packages. Formulating coherent policies on the division of responsibility among packages can be an overwhelming task in designing systems with many packages and many cross-type operations.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_284">Coercion</a></h4>
<p>In the general situation of completely unrelated operations acting on completely unrelated types, implementing explicit cross-type operations, cumbersome though it may be, is the best that one can hope for. Fortunately, we can usually do better by taking advantage of additional structure that may be latent in our type system. Often the different data types are not completely independent, and there may be ways by which objects of one type may be viewed as being of another type. This process is called <em>coercion</em>. For example, if we are asked to arithmetically combine an ordinary number with a complex number, we can view the ordinary number as a complex number whose imaginary part is zero. This transforms the problem to that of combining two complex numbers, which can be handled in the ordinary way by the complex-arithmetic package.</p>
<p>In general, we can implement this idea by designing coercion procedures that transform an object of one type into an equivalent object of another type. Here is a typical coercion procedure, which transforms a given ordinary number to a complex number with that real part and zero imaginary part:</p>
<p></p>
<p></p>
<p><code>(define (scheme-number-&gt;complex n)   (make-complex-from-real-imag (contents n) 0))</code></p>
<p></p>
<p>We install these coercion procedures in a special coercion table, indexed under the names of the two types:</p>
<p></p>
<p></p>
<p><code>(put-coercion 'scheme-number 'complex scheme-number-&gt;complex)</code></p>
<p></p>
<p>(We assume that there are <code>put-coercion</code> and <code>get-coercion</code> procedures available for manipulating this table.) Generally some of the slots in the table will be empty, because it is not generally possible to coerce an arbitrary data object of each type into all other types. For example, there is no way to coerce an arbitrary complex number to an ordinary number, so there will be no general <code>complex-&gt;scheme-number</code> procedure included in the table.</p>
<p>Once the coercion table has been set up, we can handle coercion in a uniform manner by modifying the <code>apply-generic</code> procedure of section <a href="book-Z-H-17.html#%_sec_2.4.3">2.4.3</a>. When asked to apply an operation, we first check whether the operation is defined for the arguments' types, just as before. If so, we dispatch to the procedure found in the operation-and-type table. Otherwise, we try coercion. For simplicity, we consider only the case where there are two arguments.<a href="#footnote_Temp_285"><sup>50</sup></a> We check the coercion table to see if objects of the first type can be coerced to the second type. If so, we coerce the first argument and try the operation again. If objects of the first type cannot in general be coerced to the second type, we try the coercion the other way around to see if there is a way to coerce the second argument to the type of the first argument. Finally, if there is no known way to coerce either type to the other type, we give up. Here is the procedure:</p>
<p></p>
<p></p>
<p><code>(define (apply-generic op . args)   (let ((type-tags (map type-tag args)))     (let ((proc (get op type-tags)))       (if proc           (apply proc (map contents args))           (if (= (length args) 2)               (let ((type1 (car type-tags))                     (type2 (cadr type-tags))                     (a1 (car args))                     (a2 (cadr args)))                 (let ((t1-&gt;t2 (get-coercion type1 type2))                       (t2-&gt;t1 (get-coercion type2 type1)))                   (cond (t1-&gt;t2                          (apply-generic op (t1-&gt;t2 a1) a2))                         (t2-&gt;t1                          (apply-generic op a1 (t2-&gt;t1 a2)))                         (else                          (error &quot;No method for these types&quot;                                 (list op type-tags))))))               (error &quot;No method for these types&quot;                      (list op type-tags)))))))</code></p>
<p></p>
<p></p>
<p>This coercion scheme has many advantages over the method of defining explicit cross-type operations, as outlined above. Although we still need to write coercion procedures to relate the types (possibly <em>n</em><sup>2</sup> procedures for a system with <em>n</em> types), we need to write only one procedure for each pair of types rather than a different procedure for each collection of types and each generic operation.<a href="#footnote_Temp_286"><sup>51</sup></a> What we are counting on here is the fact that the appropriate transformation between types depends only on the types themselves, not on the operation to be applied.</p>
<p>On the other hand, there may be applications for which our coercion scheme is not general enough. Even when neither of the objects to be combined can be converted to the type of the other it may still be possible to perform the operation by converting both objects to a third type. In order to deal with such complexity and still preserve modularity in our programs, it is usually necessary to build systems that take advantage of still further structure in the relations among types, as we discuss next.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_287">Hierarchies of types</a></h4>
<p>The coercion scheme presented above relied on the existence of natural relations between pairs of types. Often there is more ``global'' structure in how the different types relate to each other. For instance, suppose we are building a generic arithmetic system to handle integers, rational numbers, real numbers, and complex numbers. In such a system, it is quite natural to regard an integer as a special kind of rational number, which is in turn a special kind of real number, which is in turn a special kind of complex number. What we actually have is a so-called <em>hierarchy of types</em>, in which, for example, integers are a <em>subtype</em> of rational numbers (i.e., any operation that can be applied to a rational number can automatically be applied to an integer). Conversely, we say that rational numbers form a <em>supertype</em> of integers. The particular hierarchy we have here is of a very simple kind, in which each type has at most one supertype and at most one subtype. Such a structure, called a <em>tower</em>, is illustrated in figure <a href="#%_fig_2.25">2.25</a>.</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-66.gif" /></p>
<p><strong>Figure 2.25:</strong>  A tower of types.</p>
<p></p>
<p>If we have a tower structure, then we can greatly simplify the problem of adding a new type to the hierarchy, for we need only specify how the new type is embedded in the next supertype above it and how it is the supertype of the type below it. For example, if we want to add an integer to a complex number, we need not explicitly define a special coercion procedure <code>integer-&gt;complex</code>. Instead, we define how an integer can be transformed into a rational number, how a rational number is transformed into a real number, and how a real number is transformed into a complex number. We then allow the system to transform the integer into a complex number through these steps and then add the two complex numbers.</p>
<p>We can redesign our <code>apply-generic</code> procedure in the following way: For each type, we need to supply a <code>raise</code> procedure, which ``raises'' objects of that type one level in the tower. Then when the system is required to operate on objects of different types it can successively raise the lower types until all the objects are at the same level in the tower. (Exercises <a href="#%_thm_2.83">2.83</a> and  <a href="#%_thm_2.84">2.84</a> concern the details of implementing such a strategy.)</p>
<p>Another advantage of a tower is that we can easily implement the notion that every type ``inherits'' all operations defined on a supertype. For instance, if we do not supply a special procedure for finding the real part of an integer, we should nevertheless expect that <code>real-part</code> will be defined for integers by virtue of the fact that integers are a subtype of complex numbers. In a tower, we can arrange for this to happen in a uniform way by modifying <code>apply-generic</code>. If the required operation is not directly defined for the type of the object given, we raise the object to its supertype and try again. We thus crawl up the tower, transforming our argument as we go, until we either find a level at which the desired operation can be performed or hit the top (in which case we give up).</p>
<p>Yet another advantage of a tower over a more general hierarchy is that it gives us a simple way to ``lower'' a data object to the simplest representation. For example, if we add 2 + 3<em>i</em> to 4 - 3<em>i</em>, it would be nice to obtain the answer as the integer 6 rather than as the complex number 6 + 0<em>i</em>. Exercise <a href="#%_thm_2.85">2.85</a> discusses a way to implement such a lowering operation. (The trick is that we need a general way to distinguish those objects that can be lowered, such as 6 + 0<em>i</em>, from those that cannot, such as 6 + 2<em>i</em>.)</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-67.gif" /></p>
<p><strong>Figure 2.26:</strong>  Relations among types of geometric figures.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_288">Inadequacies of hierarchies</a></h4>
<p>If the data types in our system can be naturally arranged in a tower, this greatly simplifies the problems of dealing with generic operations on different types, as we have seen. Unfortunately, this is usually not the case. Figure <a href="#%_fig_2.26">2.26</a> illustrates a more complex arrangement of mixed types, this one showing relations among different types of geometric figures. We see that, in general, a type may have more than one subtype. Triangles and quadrilaterals, for instance, are both subtypes of polygons. In addition, a type may have more than one supertype. For example, an isosceles right triangle may be regarded either as an isosceles triangle or as a right triangle. This multiple-supertypes issue is particularly thorny, since it means that there is no unique way to ``raise'' a type in the hierarchy. Finding the ``correct'' supertype in which to apply an operation to an object may involve considerable searching through the entire type network on the part of a procedure such as <code>apply-generic</code>. Since there generally are multiple subtypes for a type, there is a similar problem in coercing a value ``down'' the type hierarchy. Dealing with large numbers of interrelated types while still preserving modularity in the design of large systems is very difficult, and is an area of much current research.<a href="#footnote_Temp_289"><sup>52</sup></a></p>
<p></p>
<p><strong>Exercise 2.81.</strong>  Louis Reasoner has noticed that <code>apply-generic</code> may try to coerce the arguments to each other's type even if they already have the same type. Therefore, he reasons, we need to put procedures in the coercion table to &quot;coerce&quot; arguments of each type to their own type. For example, in addition to the <code>scheme-number-&gt;complex</code> coercion shown above, he would do:</p>
<p></p>
<p></p>
<p><code>(define (scheme-number-&gt;scheme-number n) n) (define (complex-&gt;complex z) z) (put-coercion 'scheme-number 'scheme-number               scheme-number-&gt;scheme-number) (put-coercion 'complex 'complex complex-&gt;complex)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>a. With Louis's coercion procedures installed, what happens if <code>apply-generic</code> is called with two arguments of type <code>scheme-number</code> or two arguments of type <code>complex</code> for an operation that is not found in the table for those types? For example, assume that we've defined a generic exponentiation operation:</p>
<p></p>
<p></p>
<p><code>(define (exp x y) (apply-generic 'exp x y))</code></p>
<p></p>
<p>and have put a procedure for exponentiation in the Scheme-number package but not in any other package:</p>
<p></p>
<p></p>
<p><code>;; following added to Scheme-number package (put 'exp '(scheme-number scheme-number)      (lambda (x y) (tag (expt x y)))) ; using primitive expt</code><br /></p>
<p></p>
<p>What happens if we call <code>exp</code> with two complex numbers as arguments?</p>
<p></p>
<p></p>
<p>b. Is Louis correct that something had to be done about coercion with arguments of the same type, or does <code>apply-generic</code> work correctly as is?</p>
<p></p>
<p></p>
<p>c. Modify <code>apply-generic</code> so that it doesn't try coercion if the two arguments have the same type.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.82.</strong>  Show how to generalize <code>apply-generic</code> to handle coercion in the general case of multiple arguments. One strategy is to attempt to coerce all the arguments to the type of the first argument, then to the type of the second argument, and so on. Give an example of a situation where this strategy (and likewise the two-argument version given above) is not sufficiently general. (Hint: Consider the case where there are some suitable mixed-type operations present in the table that will not be tried.)</p>
<p></p>
<p></p>
<p><strong>Exercise 2.83.</strong>  Suppose you are designing a generic arithmetic system for dealing with the tower of types shown in figure <a href="#%_fig_2.25">2.25</a>: integer, rational, real, complex. For each type (except complex), design a procedure that raises objects of that type one level in the tower. Show how to install a generic <code>raise</code> operation that will work for each type (except complex).</p>
<p></p>
<p></p>
<p><strong>Exercise 2.84.</strong>  Using the <code>raise</code> operation of exercise <a href="#%_thm_2.83">2.83</a>, modify the <code>apply-generic</code> procedure so that it coerces its arguments to have the same type by the method of successive raising, as discussed in this section. You will need to devise a way to test which of two types is higher in the tower. Do this in a manner that is ``compatible'' with the rest of the system and will not lead to problems in adding new levels to the tower.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.85.</strong>  This section mentioned a method for ``simplifying'' a data object by lowering it in the tower of types as far as possible. Design a procedure <code>drop</code> that accomplishes this for the tower described in exercise <a href="#%_thm_2.83">2.83</a>. The key is to decide, in some general way, whether an object can be lowered. For example, the complex number 1.5 + 0<em>i</em> can be lowered as far as <code>real</code>, the complex number 1 + 0<em>i</em> can be lowered as far as <code>integer</code>, and the complex number 2 + 3<em>i</em> cannot be lowered at all. Here is a plan for determining whether an object can be lowered: Begin by defining a generic operation <code>project</code> that ``pushes'' an object down in the tower. For example, projecting a complex number would involve throwing away the imaginary part. Then a number can be dropped if, when we <code>project</code> it and <code>raise</code> the result back to the type we started with, we end up with something equal to what we started with. Show how to implement this idea in detail, by writing a <code>drop</code> procedure that drops an object as far as possible. You will need to design the various projection operations<a href="#footnote_Temp_295"><sup>53</sup></a> and install <code>project</code> as a generic operation in the system. You will also need to make use of a generic equality predicate, such as described in exercise <a href="#%_thm_2.79">2.79</a>. Finally, use <code>drop</code> to rewrite <code>apply-generic</code> from exercise <a href="#%_thm_2.84">2.84</a> so that it ``simplifies'' its answers.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.86.</strong>  Suppose we want to handle complex numbers whose real parts, imaginary parts, magnitudes, and angles can be either ordinary numbers, rational numbers, or other numbers we might wish to add to the system. Describe and implement the changes to the system needed to accommodate this. You will have to define operations such as <code>sine</code> and <code>cosine</code> that are generic over ordinary numbers and rational numbers.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_2.5.3">2.5.3  Example: Symbolic Algebra</a></h3>
<p>The manipulation of symbolic algebraic expressions is a complex process that illustrates many of the hardest problems that occur in the design of large-scale systems. An algebraic expression, in general, can be viewed as a hierarchical structure, a tree of operators applied to operands. We can construct algebraic expressions by starting with a set of primitive objects, such as constants and variables, and combining these by means of algebraic operators, such as addition and multiplication. As in other languages, we form abstractions that enable us to refer to compound objects in simple terms. Typical abstractions in symbolic algebra are ideas such as linear combination, polynomial, rational function, or trigonometric function. We can regard these as compound ``types,'' which are often useful for directing the processing of expressions. For example, we could describe the expression</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-68.gif" /></p>
<p>as a polynomial in <em>x</em> with coefficients that are trigonometric functions of polynomials in <em>y</em> whose coefficients are integers.</p>
<p>We will not attempt to develop a complete algebraic-manipulation system here. Such systems are exceedingly complex programs, embodying deep algebraic knowledge and elegant algorithms. What we will do is look at a simple but important part of algebraic manipulation: the arithmetic of polynomials. We will illustrate the kinds of decisions the designer of such a system faces, and how to apply the ideas of abstract data and generic operations to help organize this effort.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_297">Arithmetic on polynomials</a></h4>
<p>Our first task in designing a system for performing arithmetic on polynomials is to decide just what a polynomial is. Polynomials are normally defined relative to certain variables (the <em>indeterminates</em> of the polynomial). For simplicity, we will restrict ourselves to polynomials having just one indeterminate (<em>univariate polynomials</em>).<a href="#footnote_Temp_298"><sup>54</sup></a> We will define a polynomial to be a sum of terms, each of which is either a coefficient, a power of the indeterminate, or a product of a coefficient and a power of the indeterminate. A coefficient is defined as an algebraic expression that is not dependent upon the indeterminate of the polynomial. For example,</p>
<p></p>
<p><img src="ch2-Z-G-69.gif" /></p>
<p>is a simple polynomial in <em>x</em>, and</p>
<p></p>
<p><img src="ch2-Z-G-70.gif" /></p>
<p>is a polynomial in <em>x</em> whose coefficients are polynomials in <em>y</em>.</p>
<p>Already we are skirting some thorny issues. Is the first of these polynomials the same as the polynomial 5<em>y</em><sup>2</sup> + 3<em>y</em> + 7, or not? A reasonable answer might be ``yes, if we are considering a polynomial purely as a mathematical function, but no, if we are considering a polynomial to be a syntactic form.'' The second polynomial is algebraically equivalent to a polynomial in <em>y</em> whose coefficients are polynomials in <em>x</em>. Should our system recognize this, or not? Furthermore, there are other ways to represent a polynomial -- for example, as a product of factors, or (for a univariate polynomial) as the set of roots, or as a listing of the values of the polynomial at a specified set of points.<a href="#footnote_Temp_299"><sup>55</sup></a> We can finesse these questions by deciding that in our algebraic-manipulation system a ``polynomial'' will be a particular syntactic form, not its underlying mathematical meaning.</p>
<p>Now we must consider how to go about doing arithmetic on polynomials. In this simple system, we will consider only addition and multiplication. Moreover, we will insist that two polynomials to be combined must have the same indeterminate.</p>
<p>We will approach the design of our system by following the familiar discipline of data abstraction. We will represent polynomials using a data structure called a <em>poly</em>, which consists of a variable and a collection of terms. We assume that we have selectors <code>variable</code> and <code>term-list</code> that extract those parts from a poly and a constructor <code>make-poly</code> that assembles a poly from a given variable and a term list. A variable will be just a symbol, so we can use the <code>same-variable?</code> procedure of section <a href="book-Z-H-16.html#%_sec_2.3.2">2.3.2</a> to compare variables. The following procedures define addition and multiplication of polys:</p>
<p></p>
<p></p>
<p><code>(define (add-poly p1 p2)   (if (same-variable? (variable p1) (variable p2))       (make-poly (variable p1)                  (add-terms (term-list p1)                             (term-list p2)))       (error &quot;Polys not in same var -- ADD-POLY&quot;              (list p1 p2)))) (define (mul-poly p1 p2)   (if (same-variable? (variable p1) (variable p2))       (make-poly (variable p1)                  (mul-terms (term-list p1)                             (term-list p2)))       (error &quot;Polys not in same var -- MUL-POLY&quot;              (list p1 p2))))</code></p>
<p></p>
<p></p>
<p>To incorporate polynomials into our generic arithmetic system, we need to supply them with type tags. We'll use the tag <code>polynomial</code>, and install appropriate operations on tagged polynomials in the operation table. We'll embed all our code in an installation procedure for the polynomial package, similar to the ones in section <a href="#%_sec_2.5.1">2.5.1</a>:</p>
<p></p>
<p><code>(define (install-polynomial-package)   ;; internal procedures   ;; representation of poly   (define (make-poly variable term-list)     (cons variable term-list))   (define (variable p) (car p))   (define (term-list p) (cdr p))   &lt;procedures same-variable?</code> and <code>variable?</code> from section <a href="book-Z-H-16.html#%_sec_2.3.2">2.3.2</a>&gt;<br />   <em>;; representation of terms and term lists</em><br />   &lt;<em>procedures <code>adjoin-term ...</code><code>coeff</code> from text below</em>&gt;<br /> <br />   <em>;; continued on next page</em><br /> <br />   (define (add-poly p1 p2) <code>...</code>)<br />   &lt;<em>procedures used by <code>add-poly</code></em>&gt;<br />   (define (mul-poly p1 p2) <code>...</code>)<br />   &lt;<em>procedures used by <code>mul-poly</code></em>&gt;<br />   <em>;; interface to rest of the system</em><br />   (define (tag p) (attach-tag 'polynomial p))<br />   (put 'add '(polynomial polynomial) <br />        (lambda (p1 p2) (tag (add-poly p1 p2))))<br />   (put 'mul '(polynomial polynomial) <br />        (lambda (p1 p2) (tag (mul-poly p1 p2))))<br />   (put 'make 'polynomial<br />        (lambda (var terms) (tag (make-poly var terms))))<br />   'done)<br /></p>
<p></p>
<p></p>
<p>Polynomial addition is performed termwise. Terms of the same order (i.e., with the same power of the indeterminate) must be combined. This is done by forming a new term of the same order whose coefficient is the sum of the coefficients of the addends. Terms in one addend for which there are no terms of the same order in the other addend are simply accumulated into the sum polynomial being constructed.</p>
<p>In order to manipulate term lists, we will assume that we have a constructor <code>the-empty-termlist</code> that returns an empty term list and a constructor <code>adjoin-term</code> that adjoins a new term to a term list. We will also assume that we have a predicate <code>empty-termlist?</code> that tells if a given term list is empty, a selector <code>first-term</code> that extracts the highest-order term from a term list, and a selector <code>rest-terms</code> that returns all but the highest-order term. To manipulate terms, we will suppose that we have a constructor <code>make-term</code> that constructs a term with given order and coefficient, and selectors <code>order</code> and <code>coeff</code> that return, respectively, the order and the coefficient of the term. These operations allow us to consider both terms and term lists as data abstractions, whose concrete representations we can worry about separately.</p>
<p>Here is the procedure that constructs the term list for the sum of two polynomials:<a href="#footnote_Temp_300"><sup>56</sup></a></p>
<p></p>
<p></p>
<p><code>(define (add-terms L1 L2)   (cond ((empty-termlist? L1) L2)         ((empty-termlist? L2) L1)         (else          (let ((t1 (first-term L1)) (t2 (first-term L2)))            (cond ((&gt; (order t1) (order t2))                   (adjoin-term                    t1 (add-terms (rest-terms L1) L2)))                  ((&lt; (order t1) (order t2))                   (adjoin-term                    t2 (add-terms L1 (rest-terms L2))))                  (else                   (adjoin-term                    (make-term (order t1)                               (add (coeff t1) (coeff t2)))                    (add-terms (rest-terms L1)                               (rest-terms L2)))))))))</code></p>
<p></p>
<p>The most important point to note here is that we used the generic addition procedure <code>add</code> to add together the coefficients of the terms being combined. This has powerful consequences, as we will see below.</p>
<p>In order to multiply two term lists, we multiply each term of the first list by all the terms of the other list, repeatedly using <code>mul-term-by-all-terms</code>, which multiplies a given term by all terms in a given term list. The resulting term lists (one for each term of the first list) are accumulated into a sum. Multiplying two terms forms a term whose order is the sum of the orders of the factors and whose coefficient is the product of the coefficients of the factors:</p>
<p></p>
<p></p>
<p><code>(define (mul-terms L1 L2)   (if (empty-termlist? L1)       (the-empty-termlist)       (add-terms (mul-term-by-all-terms (first-term L1) L2)                  (mul-terms (rest-terms L1) L2)))) (define (mul-term-by-all-terms t1 L)   (if (empty-termlist? L)       (the-empty-termlist)       (let ((t2 (first-term L)))         (adjoin-term          (make-term (+ (order t1) (order t2))                     (mul (coeff t1) (coeff t2)))          (mul-term-by-all-terms t1 (rest-terms L))))))</code></p>
<p></p>
<p></p>
<p>This is really all there is to polynomial addition and multiplication. Notice that, since we operate on terms using the generic procedures <code>add</code> and <code>mul</code>, our polynomial package is automatically able to handle any type of coefficient that is known about by the generic arithmetic package. If we include a coercion mechanism such as one of those discussed in section <a href="#%_sec_2.5.2">2.5.2</a>, then we also are automatically able to handle operations on polynomials of different coefficient types, such as</p>
<p></p>
<p><img src="ch2-Z-G-71.gif" /></p>
<p></p>
<p>Because we installed the polynomial addition and multiplication procedures <code>add-poly</code> and <code>mul-poly</code> in the generic arithmetic system as the <code>add</code> and <code>mul</code> operations for type <code>polynomial</code>, our system is also automatically able to handle polynomial operations such as</p>
<p></p>
<p><img src="ch2-Z-G-72.gif" /></p>
<p></p>
<p>The reason is that when the system tries to combine coefficients, it will dispatch through <code>add</code> and <code>mul</code>. Since the coefficients are themselves polynomials (in <em>y</em>), these will be combined using <code>add-poly</code> and <code>mul-poly</code>. The result is a kind of ``data-directed recursion'' in which, for example, a call to <code>mul-poly</code> will result in recursive calls to <code>mul-poly</code> in order to multiply the coefficients. If the coefficients of the coefficients were themselves polynomials (as might be used to represent polynomials in three variables), the data direction would ensure that the system would follow through another level of recursive calls, and so on through as many levels as the structure of the data dictates.<a href="#footnote_Temp_301"><sup>57</sup></a></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_302">Representing term lists</a></h4>
<p>Finally, we must confront the job of implementing a good representation for term lists. A term list is, in effect, a set of coefficients keyed by the order of the term. Hence, any of the methods for representing sets, as discussed in section <a href="book-Z-H-16.html#%_sec_2.3.3">2.3.3</a>, can be applied to this task. On the other hand, our procedures <code>add-terms</code> and <code>mul-terms</code> always access term lists sequentially from highest to lowest order. Thus, we will use some kind of ordered list representation.</p>
<p>How should we structure the list that represents a term list? One consideration is the ``density'' of the polynomials we intend to manipulate. A polynomial is said to be <em>dense</em> if it has nonzero coefficients in terms of most orders. If it has many zero terms it is said to be <em>sparse</em>. For example,</p>
<p></p>
<p><img src="ch2-Z-G-74.gif" /></p>
<p>is a dense polynomial, whereas</p>
<p></p>
<p><img src="ch2-Z-G-75.gif" /></p>
<p>is sparse.</p>
<p>The term lists of dense polynomials are most efficiently represented as lists of the coefficients. For example, <em>A</em> above would be nicely represented as <code>(1 2 0 3 -2 -5)</code>. The order of a term in this representation is the length of the sublist beginning with that term's coefficient, decremented by 1.<a href="#footnote_Temp_303"><sup>58</sup></a> This would be a terrible representation for a sparse polynomial such as <em>B</em>: There would be a giant list of zeros punctuated by a few lonely nonzero terms. A more reasonable representation of the term list of a sparse polynomial is as a list of the nonzero terms, where each term is a list containing the order of the term and the coefficient for that order. In such a scheme, polynomial <em>B</em> is efficiently represented as <code>((100 1) (2 2) (0 1))</code>. As most polynomial manipulations are performed on sparse polynomials, we will use this method. We will assume that term lists are represented as lists of terms, arranged from highest-order to lowest-order term. Once we have made this decision, implementing the selectors and constructors for terms and term lists is straightforward:<a href="#footnote_Temp_304"><sup>59</sup></a></p>
<p></p>
<p></p>
<p><code>(define (adjoin-term term term-list)   (if (=zero? (coeff term))       term-list       (cons term term-list))) (define (the-empty-termlist) '()) (define (first-term term-list) (car term-list)) (define (rest-terms term-list) (cdr term-list)) (define (empty-termlist? term-list) (null? term-list)) (define (make-term order coeff) (list order coeff)) (define (order term) (car term)) (define (coeff term) (cadr term))</code></p>
<p></p>
<p>where <code>=zero?</code> is as defined in exercise <a href="#%_thm_2.80">2.80</a>. (See also exercise <a href="#%_thm_2.87">2.87</a> below.)</p>
<p>Users of the polynomial package will create (tagged) polynomials by means of the procedure:</p>
<p></p>
<p></p>
<p><code>(define (make-polynomial var terms)   ((get 'make 'polynomial) var terms))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 2.87.</strong>  Install <code>=zero?</code> for polynomials in the generic arithmetic package. This will allow <code>adjoin-term</code> to work for polynomials with coefficients that are themselves polynomials.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.88.</strong>  Extend the polynomial system to include subtraction of polynomials. (Hint: You may find it helpful to define a generic negation operation.)</p>
<p></p>
<p></p>
<p><strong>Exercise 2.89.</strong>  Define procedures that implement the term-list representation described above as appropriate for dense polynomials.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.90.</strong>  Suppose we want to have a polynomial system that is efficient for both sparse and dense polynomials. One way to do this is to allow both kinds of term-list representations in our system. The situation is analogous to the complex-number example of section <a href="book-Z-H-17.html#%_sec_2.4">2.4</a>, where we allowed both rectangular and polar representations. To do this we must distinguish different types of term lists and make the operations on term lists generic. Redesign the polynomial system to implement this generalization. This is a major effort, not a local change.</p>
<p></p>
<p><strong>Exercise 2.91.</strong>  A univariate polynomial can be divided by another one to produce a polynomial quotient and a polynomial remainder. For example,</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-76.gif" /></p>
<p></p>
<p>Division can be performed via long division. That is, divide the highest-order term of the dividend by the highest-order term of the divisor. The result is the first term of the quotient. Next, multiply the result by the divisor, subtract that from the dividend, and produce the rest of the answer by recursively dividing the difference by the divisor. Stop when the order of the divisor exceeds the order of the dividend and declare the dividend to be the remainder. Also, if the dividend ever becomes zero, return zero as both quotient and remainder.</p>
<p>We can design a <code>div-poly</code> procedure on the model of <code>add-poly</code> and <code>mul-poly</code>. The procedure checks to see if the two polys have the same variable. If so, <code>div-poly</code> strips off the variable and passes the problem to <code>div-terms</code>, which performs the division operation on term lists. <code>Div-poly</code> finally reattaches the variable to the result supplied by <code>div-terms</code>. It is convenient to design <code>div-terms</code> to compute both the quotient and the remainder of a division. <code>Div-terms</code> can take two term lists as arguments and return a list of the quotient term list and the remainder term list.</p>
<p>Complete the following definition of <code>div-terms</code> by filling in the missing expressions. Use this to implement <code>div-poly</code>, which takes two polys as arguments and returns a list of the quotient and remainder polys.</p>
<p></p>
<p></p>
<p><code>(define (div-terms L1 L2)   (if (empty-termlist? L1)       (list (the-empty-termlist) (the-empty-termlist))       (let ((t1 (first-term L1))             (t2 (first-term L2)))         (if (&gt; (order t2) (order t1))             (list (the-empty-termlist) L1)             (let ((new-c (div (coeff t1) (coeff t2)))                   (new-o (- (order t1) (order t2))))               (let ((rest-of-result                      &lt;compute rest of result recursively&gt;                      ))                 &lt;form complete result&gt;                 ))))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_310">Hierarchies of types in symbolic algebra</a></h4>
<p>Our polynomial system illustrates how objects of one type (polynomials) may in fact be complex objects that have objects of many different types as parts. This poses no real difficulty in defining generic operations. We need only install appropriate generic operations for performing the necessary manipulations of the parts of the compound types. In fact, we saw that polynomials form a kind of ``recursive data abstraction,'' in that parts of a polynomial may themselves be polynomials. Our generic operations and our data-directed programming style can handle this complication without much trouble.</p>
<p>On the other hand, polynomial algebra is a system for which the data types cannot be naturally arranged in a tower. For instance, it is possible to have polynomials in <em>x</em> whose coefficients are polynomials in <em>y</em>. It is also possible to have polynomials in <em>y</em> whose coefficients are polynomials in <em>x</em>. Neither of these types is ``above'' the other in any natural way, yet it is often necessary to add together elements from each set. There are several ways to do this. One possibility is to convert one polynomial to the type of the other by expanding and rearranging terms so that both polynomials have the same principal variable. One can impose a towerlike structure on this by ordering the variables and thus always converting any polynomial to a ``canonical form'' with the highest-priority variable dominant and the lower-priority variables buried in the coefficients. This strategy works fairly well, except that the conversion may expand a polynomial unnecessarily, making it hard to read and perhaps less efficient to work with. The tower strategy is certainly not natural for this domain or for any domain where the user can invent new types dynamically using old types in various combining forms, such as trigonometric functions, power series, and integrals.</p>
<p>It should not be surprising that controlling coercion is a serious problem in the design of large-scale algebraic-manipulation systems. Much of the complexity of such systems is concerned with relationships among diverse types. Indeed, it is fair to say that we do not yet completely understand coercion. In fact, we do not yet completely understand the concept of a data type. Nevertheless, what we know provides us with powerful structuring and modularity principles to support the design of large systems.</p>
<p></p>
<p><strong>Exercise 2.92.</strong>  By imposing an ordering on variables, extend the polynomial package so that addition and multiplication of polynomials works for polynomials in different variables. (This is not easy!)</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_312">Extended exercise: Rational functions</a></h4>
<p>We can extend our generic arithmetic system to include <em>rational functions</em>. These are ``fractions'' whose numerator and denominator are polynomials, such as</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-77.gif" /></p>
<p>The system should be able to add, subtract, multiply, and divide rational functions, and to perform such computations as</p>
<p></p>
<p><img src="ch2-Z-G-78.gif" /></p>
<p>(Here the sum has been simplified by removing common factors. Ordinary ``cross multiplication'' would have produced a fourth-degree polynomial over a fifth-degree polynomial.)</p>
<p>If we modify our rational-arithmetic package so that it uses generic operations, then it will do what we want, except for the problem of reducing fractions to lowest terms.</p>
<p></p>
<p><strong>Exercise 2.93.</strong>  Modify the rational-arithmetic package to use generic operations, but change <code>make-rat</code> so that it does not attempt to reduce fractions to lowest terms. Test your system by calling <code>make-rational</code> on two polynomials to produce a rational function</p>
<p></p>
<p></p>
<p><code>(define p1 (make-polynomial 'x '((2 1)(0 1)))) (define p2 (make-polynomial 'x '((3 1)(0 1)))) (define rf (make-rational p2 p1))</code></p>
<p></p>
<p>Now add <code>rf</code> to itself, using <code>add</code>. You will observe that this addition procedure does not reduce fractions to lowest terms.</p>
<p></p>
<p></p>
<p></p>
<p>We can reduce polynomial fractions to lowest terms using the same idea we used with integers: modifying <code>make-rat</code> to divide both the numerator and the denominator by their greatest common divisor. The notion of ``greatest common divisor'' makes sense for polynomials. In fact, we can compute the GCD of two polynomials using essentially the same Euclid's Algorithm that works for integers.<a href="#footnote_Temp_314"><sup>60</sup></a> The integer version is</p>
<p></p>
<p></p>
<p><code>(define (gcd a b)   (if (= b 0)       a       (gcd b (remainder a b))))</code></p>
<p></p>
<p>Using this, we could make the obvious modification to define a GCD operation that works on term lists:</p>
<p></p>
<p></p>
<p><code>(define (gcd-terms a b)   (if (empty-termlist? b)       a       (gcd-terms b (remainder-terms a b))))</code></p>
<p></p>
<p>where <code>remainder-terms</code> picks out the remainder component of the list returned by the term-list division operation <code>div-terms</code> that was implemented in exercise <a href="#%_thm_2.91">2.91</a>.</p>
<p></p>
<p><strong>Exercise 2.94.</strong>  Using <code>div-terms</code>, implement the procedure <code>remainder-terms</code> and use this to define <code>gcd-terms</code> as above. Now write a procedure <code>gcd-poly</code> that computes the polynomial GCD of two polys. (The procedure should signal an error if the two polys are not in the same variable.) Install in the system a generic operation <code>greatest-common-divisor</code> that reduces to <code>gcd-poly</code> for polynomials and to ordinary <code>gcd</code> for ordinary numbers. As a test, try</p>
<p></p>
<p></p>
<p><code>(define p1 (make-polynomial 'x '((4 1) (3 -1) (2 -2) (1 2)))) (define p2 (make-polynomial 'x '((3 1) (1 -1)))) (greatest-common-divisor p1 p2)</code></p>
<p></p>
<p>and check your result by hand.</p>
<p></p>
<p></p>
<p><strong>Exercise 2.95.</strong>  Define <em>P</em><sub>1</sub>, <em>P</em><sub>2</sub>, and <em>P</em><sub>3</sub> to be the polynomials</p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-79.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-80.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch2-Z-G-81.gif" /></p>
<p></p>
<p>Now define <em>Q</em><sub>1</sub> to be the product of <em>P</em><sub>1</sub> and <em>P</em><sub>2</sub> and <em>Q</em><sub>2</sub> to be the product of <em>P</em><sub>1</sub> and <em>P</em><sub>3</sub>, and use <code>greatest-common-divisor</code> (exercise <a href="#%_thm_2.94">2.94</a>) to compute the GCD of <em>Q</em><sub>1</sub> and <em>Q</em><sub>2</sub>. Note that the answer is not the same as <em>P</em><sub>1</sub>. This example introduces noninteger operations into the computation, causing difficulties with the GCD algorithm.<a href="#footnote_Temp_317"><sup>61</sup></a> To understand what is happening, try tracing <code>gcd-terms</code> while computing the GCD or try performing the division by hand.</p>
<p></p>
<p></p>
<p></p>
<p>We can solve the problem exhibited in exercise <a href="#%_thm_2.95">2.95</a> if we use the following modification of the GCD algorithm (which really works only in the case of polynomials with integer coefficients). Before performing any polynomial division in the GCD computation, we multiply the dividend by an integer constant factor, chosen to guarantee that no fractions will arise during the division process. Our answer will thus differ from the actual GCD by an integer constant factor, but this does not matter in the case of reducing rational functions to lowest terms; the GCD will be used to divide both the numerator and denominator, so the integer constant factor will cancel out.</p>
<p>More precisely, if <em>P</em> and <em>Q</em> are polynomials, let <em>O</em><sub>1</sub> be the order of <em>P</em> (i.e., the order of the largest term of <em>P</em>) and let <em>O</em><sub>2</sub> be the order of <em>Q</em>. Let <em>c</em> be the leading coefficient of <em>Q</em>. Then it can be shown that, if we multiply <em>P</em> by the <em>integerizing factor</em> <em>c</em><sup>1+<em>O</em><sub>1</sub> -<em>O</em><sub>2</sub></sup>, the resulting polynomial can be divided by <em>Q</em> by using the <code>div-terms</code> algorithm without introducing any fractions. The operation of multiplying the dividend by this constant and then dividing is sometimes called the <em>pseudodivision</em> of <em>P</em> by <em>Q</em>. The remainder of the division is called the <em>pseudoremainder</em>.</p>
<p></p>
<p><strong>Exercise 2.96.</strong>  a.    Implement the procedure <code>pseudoremainder-terms</code>, which is just like <code>remainder-terms</code> except that it multiplies the dividend by the integerizing factor described above before calling <code>div-terms</code>. Modify <code>gcd-terms</code> to use <code>pseudoremainder-terms</code>, and verify that <code>greatest-common-divisor</code> now produces an answer with integer coefficients on the example in exercise <a href="#%_thm_2.95">2.95</a>.</p>
<p></p>
<p></p>
<p>b.    The GCD now has integer coefficients, but they are larger than those of <em>P</em><sub>1</sub>. Modify <code>gcd-terms</code> so that it removes common factors from the coefficients of the answer by dividing all the coefficients by their (integer) greatest common divisor.</p>
<p></p>
<p></p>
<p>Thus, here is how to reduce a rational function to lowest terms:</p>
<p></p>
<p></p>
<ul>
<li>Compute the GCD of the numerator and denominator, using the version of <code>gcd-terms</code> from exercise <a href="#%_thm_2.96">2.96</a>.</li>
<li>When you obtain the GCD, multiply both numerator and denominator by the same integerizing factor before dividing through by the GCD, so that division by the GCD will not introduce any noninteger coefficients. As the factor you can use the leading coefficient of the GCD raised to the power 1 + <em>O</em><sub>1</sub> - <em>O</em><sub>2</sub>, where <em>O</em><sub>2</sub> is the order of the GCD and <em>O</em><sub>1</sub> is the maximum of the orders of the numerator and denominator. This will ensure that dividing the numerator and denominator by the GCD will not introduce any fractions.</li>
<li>The result of this operation will be a numerator and denominator with integer coefficients. The coefficients will normally be very large because of all of the integerizing factors, so the last step is to remove the redundant factors by computing the (integer) greatest common divisor of all the coefficients of the numerator and the denominator and dividing through by this factor.</li>
</ul>
<p></p>
<p></p>
<p><strong>Exercise 2.97.</strong>  a. Implement this algorithm as a procedure <code>reduce-terms</code> that takes two term lists <code>n</code> and <code>d</code> as arguments and returns a list <code>nn</code>, <code>dd</code>, which are <code>n</code> and <code>d</code> reduced to lowest terms via the algorithm given above. Also write a procedure <code>reduce-poly</code>, analogous to <code>add-poly</code>, that checks to see if the two polys have the same variable. If so, <code>reduce-poly</code> strips off the variable and passes the problem to <code>reduce-terms</code>, then reattaches the variable to the two term lists supplied by <code>reduce-terms</code>.</p>
<p></p>
<p></p>
<p>b. Define a procedure analogous to <code>reduce-terms</code> that does what the original <code>make-rat</code> did for integers:</p>
<p></p>
<p></p>
<p><code>(define (reduce-integers n d)   (let ((g (gcd n d)))     (list (/ n g) (/ d g))))</code></p>
<p></p>
<p>and define <code>reduce</code> as a generic operation that calls <code>apply-generic</code> to dispatch to either <code>reduce-poly</code> (for <code>polynomial</code> arguments) or <code>reduce-integers</code> (for <code>scheme-number</code> arguments). You can now easily make the rational-arithmetic package reduce fractions to lowest terms by having <code>make-rat</code> call <code>reduce</code> before combining the given numerator and denominator to form a rational number. The system now handles rational expressions in either integers or polynomials. To test your program, try the example at the beginning of this extended exercise:</p>
<p></p>
<p></p>
<p><code>(define p1 (make-polynomial 'x '((1 1)(0 1)))) (define p2 (make-polynomial 'x '((3 1)(0 -1)))) (define p3 (make-polynomial 'x '((1 1)))) (define p4 (make-polynomial 'x '((2 1)(0 -1))))  (define rf1 (make-rational p1 p2)) (define rf2 (make-rational p3 p4))  (add rf1 rf2)</code></p>
<p></p>
<p>See if you get the correct answer, correctly reduced to lowest terms.</p>
<p></p>
<p></p>
<p>The GCD computation is at the heart of any system that does operations on rational functions. The algorithm used above, although mathematically straightforward, is extremely slow. The slowness is due partly to the large number of division operations and partly to the enormous size of the intermediate coefficients generated by the pseudodivisions. One of the active areas in the development of algebraic-manipulation systems is the design of better algorithms for computing polynomial GCDs.<a href="#footnote_Temp_320"><sup>62</sup></a></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_283"><sup>49</sup></a> We also have to supply an almost identical procedure to handle the types <code>(scheme-number complex)</code>.</p>
<p><a href="#call_footnote_Temp_285"><sup>50</sup></a> See exercise <a href="#%_thm_2.82">2.82</a> for generalizations.</p>
<p><a href="#call_footnote_Temp_286"><sup>51</sup></a> If we are clever, we can usually get by with fewer than <em>n</em><sup>2</sup> coercion procedures. For instance, if we know how to convert from type 1 to type 2 and from type 2 to type 3, then we can use this knowledge to convert from type 1 to type 3. This can greatly decrease the number of coercion procedures we need to supply explicitly when we add a new type to the system. If we are willing to build the required amount of sophistication into our system, we can have it search the ``graph'' of relations among types and automatically generate those coercion procedures that can be inferred from the ones that are supplied explicitly.</p>
<p><a href="#call_footnote_Temp_289"><sup>52</sup></a> This statement, which also appears in the first edition of this book, is just as true now as it was when we wrote it twelve years ago. Developing a useful, general framework for expressing the relations among different types of entities (what philosophers call ``ontology'') seems intractably difficult. The main difference between the confusion that existed ten years ago and the confusion that exists now is that now a variety of inadequate ontological theories have been embodied in a plethora of correspondingly inadequate programming languages. For example, much of the complexity of object-oriented programming languages -- and the subtle and confusing differences among contemporary object-oriented languages -- centers on the treatment of generic operations on interrelated types. Our own discussion of computational objects in chapter 3 avoids these issues entirely. Readers familiar with object-oriented programming will notice that we have much to say in chapter 3 about local state, but we do not even mention ``classes'' or ``inheritance.'' In fact, we suspect that these problems cannot be adequately addressed in terms of computer-language design alone, without also drawing on work in knowledge representation and automated reasoning.</p>
<p><a href="#call_footnote_Temp_295"><sup>53</sup></a> A real number can be projected to an integer using the <code>round</code> primitive, which returns the closest integer to its argument.</p>
<p><a href="#call_footnote_Temp_298"><sup>54</sup></a> On the other hand, we will allow polynomials whose coefficients are themselves polynomials in other variables. This will give us essentially the same representational power as a full multivariate system, although it does lead to coercion problems, as discussed below.</p>
<p><a href="#call_footnote_Temp_299"><sup>55</sup></a> For univariate polynomials, giving the value of a polynomial at a given set of points can be a particularly good representation. This makes polynomial arithmetic extremely simple. To obtain, for example, the sum of two polynomials represented in this way, we need only add the values of the polynomials at corresponding points. To transform back to a more familiar representation, we can use the Lagrange interpolation formula, which shows how to recover the coefficients of a polynomial of degree <em>n</em> given the values of the polynomial at <em>n</em> + 1 points.</p>
<p><a href="#call_footnote_Temp_300"><sup>56</sup></a> This operation is very much like the ordered <code>union-set</code> operation we developed in exercise  <a href="book-Z-H-16.html#%_thm_2.62">2.62</a>. In fact, if we think of the terms of the polynomial as a set ordered according to the power of the indeterminate, then the program that produces the term list for a sum is almost identical to <code>union-set</code>.</p>
<p><a href="#call_footnote_Temp_301"><sup>57</sup></a> To make this work completely smoothly, we should also add to our generic arithmetic system the ability to coerce a ``number'' to a polynomial by regarding it as a polynomial of degree zero whose coefficient is the number. This is necessary if we are going to perform operations such as</p>
<p></p>
<p><img src="ch2-Z-G-73.gif" /></p>
<p>which requires adding the coefficient <em>y</em> + 1 to the coefficient 2.</p>
<p><a href="#call_footnote_Temp_303"><sup>58</sup></a> In these polynomial examples, we assume that we have implemented the generic arithmetic system using the type mechanism suggested in exercise <a href="#%_thm_2.78">2.78</a>. Thus, coefficients that are ordinary numbers will be represented as the numbers themselves rather than as pairs whose <code>car</code> is the symbol <code>scheme-number</code>.</p>
<p><a href="#call_footnote_Temp_304"><sup>59</sup></a> Although we are assuming that term lists are ordered, we have implemented <code>adjoin-term</code> to simply <code>cons</code> the new term onto the existing term list. We can get away with this so long as we guarantee that the procedures (such as <code>add-terms</code>) that use <code>adjoin-term</code> always call it with a higher-order term than appears in the list. If we did not want to make such a guarantee, we could have implemented <code>adjoin-term</code> to be similar to the <code>adjoin-set</code> constructor for the ordered-list representation of sets (exercise <a href="book-Z-H-16.html#%_thm_2.61">2.61</a>).</p>
<p><a href="#call_footnote_Temp_314"><sup>60</sup></a> The fact that Euclid's Algorithm works for polynomials is formalized in algebra by saying that polynomials form a kind of algebraic domain called a <em>Euclidean ring</em>. A Euclidean ring is a domain that admits addition, subtraction, and commutative multiplication, together with a way of assigning to each element <em>x</em> of the ring a positive integer ``measure'' <em>m</em>(<em>x</em>) with the properties that <em>m</em>(<em>x</em><em>y</em>)&gt; <em>m</em>(<em>x</em>) for any nonzero <em>x</em> and <em>y</em> and that, given any <em>x</em> and <em>y</em>, there exists a <em>q</em> such that <em>y</em> = <em>q</em><em>x</em> + <em>r</em> and either <em>r</em> = 0 or <em>m</em>(<em>r</em>)&lt; <em>m</em>(<em>x</em>). From an abstract point of view, this is what is needed to prove that Euclid's Algorithm works. For the domain of integers, the measure <em>m</em> of an integer is the absolute value of the integer itself. For the domain of polynomials, the measure of a polynomial is its degree.</p>
<p><a href="#call_footnote_Temp_317"><sup>61</sup></a> In an implementation like MIT Scheme, this produces a polynomial that is indeed a divisor of <em>Q</em><sub>1</sub> and <em>Q</em><sub>2</sub>, but with rational coefficients. In many other Scheme systems, in which division of integers can produce limited-precision decimal numbers, we may fail to get a valid divisor.</p>
<p><a href="#call_footnote_Temp_320"><sup>62</sup></a> One extremely efficient and elegant method for computing polynomial GCDs was discovered by Richard Zippel (1979). The method is a probabilistic algorithm, as is the fast test for primality that we discussed in chapter 1. Zippel's book (1993) describes this method, together with other ways to compute polynomial GCDs.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-17.html">previous</a>, <a href="book-Z-H-19.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-18.html">previous</a>, <a href="book-Z-H-20.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h1 class="chapter"></h1>
<p><a href="book-Z-H-4.html#%_toc_%_chap_3">Chapter 3</a></p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_3">Modularity, Objects, and State</a></p>
<p></p>
<p></p>
<p></p>
<table>
<col width="100%" />
<tbody>
<tr class="odd">
<td align="left"><p>M<img src="ch3-Z-G-1.gif" /></p>
<p></p>
<p></p>
<p></p>
<p>(Even while it changes, it stands still.)</p>
<p>Heraclitus</p>
<p>Plus ça change, plus c'est la même chose.</p>
<p>Alphonse Karr</p></td>
</tr>
</tbody>
</table>
<p></p>
<p>The preceding chapters introduced the basic elements from which programs are made. We saw how primitive procedures and primitive data are combined to construct compound entities, and we learned that abstraction is vital in helping us to cope with the complexity of large systems. But these tools are not sufficient for designing programs. Effective program synthesis also requires organizational principles that can guide us in formulating the overall design of a program. In particular, we need strategies to help us structure large systems so that they will be <em>modular</em>, that is, so that they can be divided ``naturally'' into coherent parts that can be separately developed and maintained.</p>
<p>One powerful design strategy, which is particularly appropriate to the construction of programs for modeling physical systems, is to base the structure of our programs on the structure of the system being modeled. For each object in the system, we construct a corresponding computational object. For each system action, we define a symbolic operation in our computational model. Our hope in using this strategy is that extending the model to accommodate new objects or new actions will require no strategic changes to the program, only the addition of the new symbolic analogs of those objects or actions. If we have been successful in our system organization, then to add a new feature or debug an old one we will have to work on only a localized part of the system.</p>
<p>To a large extent, then, the way we organize a large program is dictated by our perception of the system to be modeled. In this chapter we will investigate two prominent organizational strategies arising from two rather different ``world views'' of the structure of systems. The first organizational strategy concentrates on <em>objects</em>, viewing a large system as a collection of distinct objects whose behaviors may change over time. An alternative organizational strategy concentrates on the <em>streams</em> of information that flow in the system, much as an electrical engineer views a signal-processing system.</p>
<p>Both the object-based approach and the stream-processing approach raise significant linguistic issues in programming. With objects, we must be concerned with how a computational object can change and yet maintain its identity. This will force us to abandon our old substitution model of computation (section <a href="book-Z-H-10.html#%_sec_1.1.5">1.1.5</a>) in favor of a more mechanistic but less theoretically tractable <em>environment model</em> of computation. The difficulties of dealing with objects, change, and identity are a fundamental consequence of the need to grapple with time in our computational models. These difficulties become even greater when we allow the possibility of concurrent execution of programs. The stream approach can be most fully exploited when we decouple simulated time in our model from the order of the events that take place in the computer during evaluation. We will accomplish this using a technique known as <em>delayed evaluation</em>.</p>
<p></p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-18.html">previous</a>, <a href="book-Z-H-20.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-19.html">previous</a>, <a href="book-Z-H-21.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_3.1">3.1  Assignment and Local State</a></h2>
<p>We ordinarily view the world as populated by independent objects, each of which has a state that changes over time. An object is said to ``have state'' if its behavior is influenced by its history. A bank account, for example, has state in that the answer to the question ``Can I withdraw $100?'' depends upon the history of deposit and withdrawal transactions. We can characterize an object's state by one or more <em>state variables</em>, which among them maintain enough information about history to determine the object's current behavior. In a simple banking system, we could characterize the state of an account by a current balance rather than by remembering the entire history of account transactions.</p>
<p>In a system composed of many objects, the objects are rarely completely independent. Each may influence the states of others through interactions, which serve to couple the state variables of one object to those of other objects. Indeed, the view that a system is composed of separate objects is most useful when the state variables of the system can be grouped into closely coupled subsystems that are only loosely coupled to other subsystems.</p>
<p>This view of a system can be a powerful framework for organizing computational models of the system. For such a model to be modular, it should be decomposed into computational objects that model the actual objects in the system. Each computational object must have its own <em>local state variables</em> describing the actual object's state. Since the states of objects in the system being modeled change over time, the state variables of the corresponding computational objects must also change. If we choose to model the flow of time in the system by the elapsed time in the computer, then we must have a way to construct computational objects whose behaviors change as our programs run. In particular, if we wish to model state variables by ordinary symbolic names in the programming language, then the language must provide an <em>assignment operator</em> to enable us to change the value associated with a name.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.1.1">3.1.1  Local State Variables</a></h3>
<p>To illustrate what we mean by having a computational object with time-varying state, let us model the situation of withdrawing money from a bank account. We will do this using a procedure <code>withdraw</code>, which takes as argument an <code>amount</code> to be withdrawn. If there is enough money in the account to accommodate the withdrawal, then <code>withdraw</code> should return the balance remaining after the withdrawal. Otherwise, <code>withdraw</code> should return the message <em>Insufficient funds.</em> For example, if we begin with $100 in the account, we should obtain the following sequence of responses using <code>withdraw</code>:</p>
<p></p>
<p></p>
<p><code>(withdraw 25) 75 (withdraw 25) 50 (withdraw 60) &quot;Insufficient funds&quot; (withdraw 15) 35</code></p>
<p></p>
<p>Observe that the expression <code>(withdraw 25)</code>, evaluated twice, yields different values. This is a new kind of behavior for a procedure. Until now, all our procedures could be viewed as specifications for computing mathematical functions. A call to a procedure computed the value of the function applied to the given arguments, and two calls to the same procedure with the same arguments always produced the same result.<a href="#footnote_Temp_321"><sup>1</sup></a></p>
<p>To implement <code>withdraw</code>, we can use a variable <code>balance</code> to indicate the balance of money in the account and define <code>withdraw</code> as a procedure that accesses <code>balance</code>. The <code>withdraw</code> procedure checks to see if <code>balance</code> is at least as large as the requested <code>amount</code>. If so, <code>withdraw</code> decrements <code>balance</code> by <code>amount</code> and returns the new value of <code>balance</code>. Otherwise, <code>withdraw</code> returns the <em>Insufficient funds</em> message. Here are the definitions of <code>balance</code> and <code>withdraw</code>:</p>
<p></p>
<p></p>
<p><code>(define balance 100)  (define (withdraw amount)   (if (&gt;= balance amount)       (begin (set! balance (- balance amount))              balance)       &quot;Insufficient funds&quot;))</code></p>
<p></p>
<p>Decrementing <code>balance</code> is accomplished by the expression</p>
<p></p>
<p></p>
<p><code>(set! balance (- balance amount))</code></p>
<p></p>
<p>This uses the <code>set!</code> special form, whose syntax is</p>
<p></p>
<p></p>
<p><code>(set! &lt;name&gt; &lt;new-value&gt;)</code></p>
<p></p>
<p>Here &lt;<em>name</em>&gt; is a symbol and &lt;<em>new-value</em>&gt; is any expression. <code>Set!</code> changes &lt;<em>name</em>&gt; so that its value is the result obtained by evaluating &lt;<em>new-value</em>&gt;. In the case at hand, we are changing <code>balance</code> so that its new value will be the result of subtracting <code>amount</code> from the previous value of <code>balance</code>.<a href="#footnote_Temp_322"><sup>2</sup></a></p>
<p><code>Withdraw</code> also uses the <code>begin</code> special form to cause two expressions to be evaluated in the case where the <code>if</code> test is true: first decrementing <code>balance</code> and then returning the value of <code>balance</code>. In general, evaluating the expression</p>
<p></p>
<p></p>
<p><code>(begin &lt;exp1&gt; &lt;exp2&gt; ...</code> &lt;<em>exp<sub><em>k</em></sub></em>&gt;)<br /></p>
<p></p>
<p>causes the expressions &lt;<em>exp<sub>1</sub></em>&gt; through &lt;<em>exp<sub><em>k</em></sub></em>&gt; to be evaluated in sequence and the value of the final expression &lt;<em>exp<sub><em>k</em></sub></em>&gt; to be returned as the value of the entire <code>begin</code> form.<a href="#footnote_Temp_323"><sup>3</sup></a></p>
<p>Although <code>withdraw</code> works as desired, the variable <code>balance</code> presents a problem. As specified above, <code>balance</code> is a name defined in the global environment and is freely accessible to be examined or modified by any procedure. It would be much better if we could somehow make <code>balance</code> internal to <code>withdraw</code>, so that <code>withdraw</code> would be the only procedure that could access <code>balance</code> directly and any other procedure could access <code>balance</code> only indirectly (through calls to <code>withdraw</code>). This would more accurately model the notion that <code>balance</code> is a local state variable used by <code>withdraw</code> to keep track of the state of the account.</p>
<p>We can make <code>balance</code> internal to <code>withdraw</code> by rewriting the definition as follows:</p>
<p></p>
<p></p>
<p><code>(define new-withdraw   (let ((balance 100))     (lambda (amount)       (if (&gt;= balance amount)           (begin (set! balance (- balance amount))                  balance)           &quot;Insufficient funds&quot;))))</code></p>
<p></p>
<p>What we have done here is use <code>let</code> to establish an environment with a local variable <code>balance</code>, bound to the initial value 100. Within this local environment, we use <code>lambda</code> to create a procedure that takes <code>amount</code> as an argument and behaves like our previous <code>withdraw</code> procedure. This procedure -- returned as the result of evaluating the <code>let</code> expression -- is <code>new-withdraw</code>, which behaves in precisely the same way as <code>withdraw</code> but whose variable <code>balance</code> is not accessible by any other procedure.<a href="#footnote_Temp_324"><sup>4</sup></a></p>
<p>Combining <code>set!</code> with local variables is the general programming technique we will use for constructing computational objects with local state. Unfortunately, using this technique raises a serious problem: When we first introduced procedures, we also introduced the substitution model of evaluation (section <a href="book-Z-H-10.html#%_sec_1.1.5">1.1.5</a>) to provide an interpretation of what procedure application means. We said that applying a procedure should be interpreted as evaluating the body of the procedure with the formal parameters replaced by their values. The trouble is that, as soon as we introduce assignment into our language, substitution is no longer an adequate model of procedure application. (We will see why this is so in section <a href="#%_sec_3.1.3">3.1.3</a>.) As a consequence, we technically have at this point no way to understand why the <code>new-withdraw</code> procedure behaves as claimed above. In order to really understand a procedure such as <code>new-withdraw</code>, we will need to develop a new model of procedure application. In section <a href="book-Z-H-21.html#%_sec_3.2">3.2</a> we will introduce such a model, together with an explanation of <code>set!</code> and local variables. First, however, we examine some variations on the theme established by <code>new-withdraw</code>.</p>
<p>The following procedure, <code>make-withdraw</code>, creates ``withdrawal processors.'' The formal parameter <code>balance</code> in <code>make-withdraw</code> specifies the initial amount of money in the account.<a href="#footnote_Temp_325"><sup>5</sup></a></p>
<p></p>
<p></p>
<p><code>(define (make-withdraw balance)   (lambda (amount)     (if (&gt;= balance amount)         (begin (set! balance (- balance amount))                balance)         &quot;Insufficient funds&quot;)))</code></p>
<p></p>
<p><code>Make-withdraw</code> can be used as follows to create two objects <code>W1</code> and <code>W2</code>:</p>
<p></p>
<p></p>
<p><code>(define W1 (make-withdraw 100)) (define W2 (make-withdraw 100)) (W1 50) 50 (W2 70) 30 (W2 40) &quot;Insufficient funds&quot; (W1 40) 10</code></p>
<p></p>
<p>Observe that <code>W1</code> and <code>W2</code> are completely independent objects, each with its own local state variable <code>balance</code>. Withdrawals from one do not affect the other.</p>
<p>We can also create objects that handle deposits as well as withdrawals, and thus we can represent simple bank accounts. Here is a procedure that returns a ``bank-account object'' with a specified initial balance:</p>
<p></p>
<p></p>
<p><code>(define (make-account balance)   (define (withdraw amount)     (if (&gt;= balance amount)         (begin (set! balance (- balance amount))                balance)         &quot;Insufficient funds&quot;))   (define (deposit amount)     (set! balance (+ balance amount))     balance)   (define (dispatch m)     (cond ((eq? m 'withdraw) withdraw)           ((eq? m 'deposit) deposit)           (else (error &quot;Unknown request -- MAKE-ACCOUNT&quot;                        m))))   dispatch)</code></p>
<p></p>
<p>Each call to <code>make-account</code> sets up an environment with a local state variable <code>balance</code>. Within this environment, <code>make-account</code> defines procedures <code>deposit</code> and <code>withdraw</code> that access <code>balance</code> and an additional procedure <code>dispatch</code> that takes a ``message'' as input and returns one of the two local procedures. The <code>dispatch</code> procedure itself is returned as the value that represents the bank-account object. This is precisely the <em>message-passing</em> style of programming that we saw in section <a href="book-Z-H-17.html#%_sec_2.4.3">2.4.3</a>, although here we are using it in conjunction with the ability to modify local variables.</p>
<p><code>Make-account</code> can be used as follows:</p>
<p></p>
<p></p>
<p><code>(define acc (make-account 100)) ((acc 'withdraw) 50) 50 ((acc 'withdraw) 60) &quot;Insufficient funds&quot; ((acc 'deposit) 40) 90 ((acc 'withdraw) 60) 30</code></p>
<p></p>
<p>Each call to <code>acc</code> returns the locally defined <code>deposit</code> or <code>withdraw</code> procedure, which is then applied to the specified <code>amount</code>. As was the case with <code>make-withdraw</code>, another call to <code>make-account</code></p>
<p></p>
<p></p>
<p><code>(define acc2 (make-account 100))</code></p>
<p></p>
<p>will produce a completely separate account object, which maintains its own local <code>balance</code>.</p>
<p></p>
<p><strong>Exercise 3.1.</strong>  An <em>accumulator</em> is a procedure that is called repeatedly with a single numeric argument and accumulates its arguments into a sum. Each time it is called, it returns the currently accumulated sum. Write a procedure <code>make-accumulator</code> that generates accumulators, each maintaining an independent sum. The input to <code>make-accumulator</code> should specify the initial value of the sum; for example</p>
<p></p>
<p></p>
<p><code>(define A (make-accumulator 5)) (A 10) 15 (A 10) 25</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.2.</strong>  In software-testing applications, it is useful to be able to count the number of times a given procedure is called during the course of a computation. Write a procedure <code>make-monitored</code> that takes as input a procedure, <code>f</code>, that itself takes one input. The result returned by <code>make-monitored</code> is a third procedure, say <code>mf</code>, that keeps track of the number of times it has been called by maintaining an internal counter. If the input to <code>mf</code> is the special symbol <code>how-many-calls?</code>, then <code>mf</code> returns the value of the counter. If the input is the special symbol <code>reset-count</code>, then <code>mf</code> resets the counter to zero. For any other input, <code>mf</code> returns the result of calling <code>f</code> on that input and increments the counter. For instance, we could make a monitored version of the <code>sqrt</code> procedure:</p>
<p></p>
<p></p>
<p><code>(define s (make-monitored sqrt))  (s 100) 10  (s 'how-many-calls?) 1</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.3.</strong>  Modify the <code>make-account</code> procedure so that it creates password-protected accounts. That is, <code>make-account</code> should take a symbol as an additional argument, as in</p>
<p></p>
<p></p>
<p><code>(define acc (make-account 100 'secret-password))</code></p>
<p></p>
<p>The resulting account object should process a request only if it is accompanied by the password with which the account was created, and should otherwise return a complaint:</p>
<p></p>
<p></p>
<p><code>((acc 'secret-password 'withdraw) 40) 60  ((acc 'some-other-password 'deposit) 50) &quot;Incorrect password&quot;</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.4.</strong>  Modify the <code>make-account</code> procedure of exercise <a href="#%_thm_3.3">3.3</a> by adding another local state variable so that, if an account is accessed more than seven consecutive times with an incorrect password, it invokes the procedure <code>call-the-cops</code>.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.1.2">3.1.2  The Benefits of Introducing Assignment</a></h3>
<p>As we shall see, introducing assignment into our programming language leads us into a thicket of difficult conceptual issues. Nevertheless, viewing systems as collections of objects with local state is a powerful technique for maintaining a modular design. As a simple example, consider the design of a procedure <code>rand</code> that, whenever it is called, returns an integer chosen at random.</p>
<p>It is not at all clear what is meant by ``chosen at random.'' What we presumably want is for successive calls to <code>rand</code> to produce a sequence of numbers that has statistical properties of uniform distribution. We will not discuss methods for generating suitable sequences here. Rather, let us assume that we have a procedure <code>rand-update</code> that has the property that if we start with a given number <em>x</em><sub>1</sub> and form</p>
<p></p>
<p></p>
<p><code>x2 = (rand-update x1) x3 = (rand-update x2)</code></p>
<p></p>
<p>then the sequence of values <em>x</em><sub>1</sub>, <em>x</em><sub>2</sub>, <em>x</em><sub>3</sub>, <code>...</code>, will have the desired statistical properties.<a href="#footnote_Temp_330"><sup>6</sup></a></p>
<p>We can implement <code>rand</code> as a procedure with a local state variable <code>x</code> that is initialized to some fixed value <code>random-init</code>. Each call to <code>rand</code> computes <code>rand-update</code> of the current value of <code>x</code>, returns this as the random number, and also stores this as the new value of <code>x</code>.</p>
<p></p>
<p></p>
<p><code>(define rand   (let ((x random-init))     (lambda ()       (set! x (rand-update x))       x)))</code></p>
<p></p>
<p></p>
<p>Of course, we could generate the same sequence of random numbers without using assignment by simply calling <code>rand-update</code> directly. However, this would mean that any part of our program that used random numbers would have to explicitly remember the current value of <code>x</code> to be passed as an argument to <code>rand-update</code>. To realize what an annoyance this would be, consider using random numbers to implement a technique called <em>Monte Carlo simulation</em>.</p>
<p>The Monte Carlo method consists of choosing sample experiments at random from a large set and then making deductions on the basis of the probabilities estimated from tabulating the results of those experiments. For example, we can approximate <img src="book-Z-G-D-9.gif" /> using the fact that 6/<img src="book-Z-G-D-9.gif" /><sup>2</sup> is the probability that two integers chosen at random will have no factors in common; that is, that their greatest common divisor will be 1.<a href="#footnote_Temp_331"><sup>7</sup></a> To obtain the approximation to <img src="book-Z-G-D-9.gif" />, we perform a large number of experiments. In each experiment we choose two integers at random and perform a test to see if their GCD is 1. The fraction of times that the test is passed gives us our estimate of 6/<img src="book-Z-G-D-9.gif" /><sup>2</sup>, and from this we obtain our approximation to <img src="book-Z-G-D-9.gif" />.</p>
<p>The heart of our program is a procedure <code>monte-carlo</code>, which takes as arguments the number of times to try an experiment, together with the experiment, represented as a no-argument procedure that will return either true or false each time it is run. <code>Monte-carlo</code> runs the experiment for the designated number of trials and returns a number telling the fraction of the trials in which the experiment was found to be true.</p>
<p></p>
<p></p>
<p><code>(define (estimate-pi trials)   (sqrt (/ 6 (monte-carlo trials cesaro-test)))) (define (cesaro-test)    (= (gcd (rand) (rand)) 1)) (define (monte-carlo trials experiment)   (define (iter trials-remaining trials-passed)     (cond ((= trials-remaining 0)            (/ trials-passed trials))           ((experiment)            (iter (- trials-remaining 1) (+ trials-passed 1)))           (else            (iter (- trials-remaining 1) trials-passed))))   (iter trials 0))</code></p>
<p></p>
<p></p>
<p>Now let us try the same computation using <code>rand-update</code> directly rather than <code>rand</code>, the way we would be forced to proceed if we did not use assignment to model local state:</p>
<p></p>
<p></p>
<p><code>(define (estimate-pi trials)   (sqrt (/ 6 (random-gcd-test trials random-init)))) (define (random-gcd-test trials initial-x)   (define (iter trials-remaining trials-passed x)     (let ((x1 (rand-update x)))       (let ((x2 (rand-update x1)))         (cond ((= trials-remaining 0)                   (/ trials-passed trials))               ((= (gcd x1 x2) 1)                (iter (- trials-remaining 1)                      (+ trials-passed 1)                      x2))               (else                (iter (- trials-remaining 1)                      trials-passed                      x2))))))   (iter trials 0 initial-x))</code></p>
<p></p>
<p></p>
<p>While the program is still simple, it betrays some painful breaches of modularity. In our first version of the program, using <code>rand</code>, we can express the Monte Carlo method directly as a general <code>monte-carlo</code> procedure that takes as an argument an arbitrary <code>experiment</code> procedure. In our second version of the program, with no local state for the random-number generator, <code>random-gcd-test</code> must explicitly manipulate the random numbers <code>x1</code> and <code>x2</code> and recycle <code>x2</code> through the iterative loop as the new input to <code>rand-update</code>. This explicit handling of the random numbers intertwines the structure of accumulating test results with the fact that our particular experiment uses two random numbers, whereas other Monte Carlo experiments might use one random number or three. Even the top-level procedure <code>estimate-pi</code> has to be concerned with supplying an initial random number. The fact that the random-number generator's insides are leaking out into other parts of the program makes it difficult for us to isolate the Monte Carlo idea so that it can be applied to other tasks. In the first version of the program, assignment encapsulates the state of the random-number generator within the <code>rand</code> procedure, so that the details of random-number generation remain independent of the rest of the program.</p>
<p>The general phenomenon illustrated by the Monte Carlo example is this: From the point of view of one part of a complex process, the other parts appear to change with time. They have hidden time-varying local state. If we wish to write computer programs whose structure reflects this decomposition, we make computational objects (such as bank accounts and random-number generators) whose behavior changes with time. We model state with local state variables, and we model the changes of state with assignments to those variables.</p>
<p>It is tempting to conclude this discussion by saying that, by introducing assignment and the technique of hiding state in local variables, we are able to structure systems in a more modular fashion than if all state had to be manipulated explicitly, by passing additional parameters. Unfortunately, as we shall see, the story is not so simple.</p>
<p></p>
<p><strong>Exercise 3.5.</strong>  <em>Monte Carlo integration</em> is a method of estimating definite integrals by means of Monte Carlo simulation. Consider computing the area of a region of space described by a predicate <em>P</em>(<em>x</em>, <em>y</em>) that is true for points (<em>x</em>, <em>y</em>) in the region and false for points not in the region. For example, the region contained within a circle of radius 3 centered at (5, 7) is described by the predicate that tests whether (<em>x</em> - 5)<sup>2</sup> + (<em>y</em> - 7)<sup>2</sup>&lt; 3<sup>2</sup>. To estimate the area of the region described by such a predicate, begin by choosing a rectangle that contains the region. For example, a rectangle with diagonally opposite corners at (2, 4) and (8, 10) contains the circle above. The desired integral is the area of that portion of the rectangle that lies in the region. We can estimate the integral by picking, at random, points (<em>x</em>,<em>y</em>) that lie in the rectangle, and testing <em>P</em>(<em>x</em>, <em>y</em>) for each point to determine whether the point lies in the region. If we try this with many points, then the fraction of points that fall in the region should give an estimate of the proportion of the rectangle that lies in the region. Hence, multiplying this fraction by the area of the entire rectangle should produce an estimate of the integral.</p>
<p>Implement Monte Carlo integration as a procedure <code>estimate-integral</code> that takes as arguments a predicate <code>P</code>, upper and lower bounds <code>x1</code>, <code>x2</code>, <code>y1</code>, and <code>y2</code> for the rectangle, and the number of trials to perform in order to produce the estimate. Your procedure should use the same <code>monte-carlo</code> procedure that was used above to estimate <img src="book-Z-G-D-9.gif" />. Use your <code>estimate-integral</code> to produce an estimate of <img src="book-Z-G-D-9.gif" /> by measuring the area of a unit circle.</p>
<p>You will find it useful to have a procedure that returns a number chosen at random from a given range. The following <code>random-in-range</code> procedure implements this in terms of the <code>random</code> procedure used in section <a href="book-Z-H-11.html#%_sec_1.2.6">1.2.6</a>, which returns a nonnegative number less than its input.<a href="#footnote_Temp_333"><sup>8</sup></a></p>
<p></p>
<p></p>
<p><code>(define (random-in-range low high)   (let ((range (- high low)))     (+ low (random range))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.6.</strong>  It is useful to be able to reset a random-number generator to produce a sequence starting from a given value. Design a new <code>rand</code> procedure that is called with an argument that is either the symbol <code>generate</code> or the symbol <code>reset</code> and behaves as follows: <code>(rand 'generate)</code> produces a new random number; <code>((rand 'reset) &lt;new-value&gt;)</code> resets the internal state variable to the designated &lt;<em>new-value</em>&gt;. Thus, by resetting the state, one can generate repeatable sequences. These are very handy to have when testing and debugging programs that use random numbers.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.1.3">3.1.3  The Costs of Introducing Assignment</a></h3>
<p>As we have seen, the <code>set!</code> operation enables us to model objects that have local state. However, this advantage comes at a price. Our programming language can no longer be interpreted in terms of the substitution model of procedure application that we introduced in section <a href="book-Z-H-10.html#%_sec_1.1.5">1.1.5</a>. Moreover, no simple model with ``nice'' mathematical properties can be an adequate framework for dealing with objects and assignment in programming languages.</p>
<p>So long as we do not use assignments, two evaluations of the same procedure with the same arguments will produce the same result, so that procedures can be viewed as computing mathematical functions. Programming without any use of assignments, as we did throughout the first two chapters of this book, is accordingly known as <em>functional programming</em>.</p>
<p>To understand how assignment complicates matters, consider a simplified version of the <code>make-withdraw</code> procedure of section <a href="#%_sec_3.1.1">3.1.1</a> that does not bother to check for an insufficient amount:</p>
<p></p>
<p></p>
<p><code>(define (make-simplified-withdraw balance)   (lambda (amount)     (set! balance (- balance amount))     balance)) (define W (make-simplified-withdraw 25)) (W 20) 5 (W 10)  - 5</code></p>
<p></p>
<p>Compare this procedure with the following <code>make-decrementer</code> procedure, which does not use <code>set!</code>:</p>
<p></p>
<p></p>
<p><code>(define (make-decrementer balance)   (lambda (amount)     (- balance amount)))</code></p>
<p></p>
<p><code>Make-decrementer</code> returns a procedure that subtracts its input from a designated amount <code>balance</code>, but there is no accumulated effect over successive calls, as with <code>make-simplified-withdraw</code>:</p>
<p></p>
<p></p>
<p><code>(define D (make-decrementer 25)) (D 20) 5 (D 10) 15</code></p>
<p></p>
<p>We can use the substitution model to explain how <code>make-decrementer</code> works. For instance, let us analyze the evaluation of the expression</p>
<p></p>
<p></p>
<p><code>((make-decrementer 25) 20)</code></p>
<p></p>
<p>We first simplify the operator of the combination by substituting 25 for <code>balance</code> in the body of <code>make-decrementer</code>. This reduces the expression to</p>
<p></p>
<p></p>
<p><code>((lambda (amount) (- 25 amount)) 20)</code></p>
<p></p>
<p>Now we apply the operator by substituting 20 for <code>amount</code> in the body of the <code>lambda</code> expression:</p>
<p></p>
<p></p>
<p><code>(- 25 20)</code></p>
<p></p>
<p>The final answer is 5.</p>
<p>Observe, however, what happens if we attempt a similar substitution analysis with <code>make-simplified-withdraw</code>:</p>
<p></p>
<p></p>
<p><code>((make-simplified-withdraw 25) 20)</code></p>
<p></p>
<p>We first simplify the operator by substituting 25 for <code>balance</code> in the body of <code>make-simplified-withdraw</code>. This reduces the expression to<a href="#footnote_Temp_335"><sup>9</sup></a></p>
<p></p>
<p></p>
<p><code>((lambda (amount) (set! balance (- 25 amount)) 25) 20)</code></p>
<p></p>
<p>Now we apply the operator by substituting 20 for <code>amount</code> in the body of the <code>lambda</code> expression:</p>
<p></p>
<p></p>
<p><code>(set! balance (- 25 20)) 25</code></p>
<p></p>
<p>If we adhered to the substitution model, we would have to say that the meaning of the procedure application is to first set <code>balance</code> to 5 and then return 25 as the value of the expression. This gets the wrong answer. In order to get the correct answer, we would have to somehow distinguish the first occurrence of <code>balance</code> (before the effect of the <code>set!</code>) from the second occurrence of <code>balance</code> (after the effect of the <code>set!</code>), and the substitution model cannot do this.</p>
<p>The trouble here is that substitution is based ultimately on the notion that the symbols in our language are essentially names for values. But as soon as we introduce <code>set!</code> and the idea that the value of a variable can change, a variable can no longer be simply a name. Now a variable somehow refers to a place where a value can be stored, and the value stored at this place can change. In section <a href="book-Z-H-21.html#%_sec_3.2">3.2</a> we will see how environments play this role of ``place'' in our computational model.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_336">Sameness and change</a></h4>
<p>The issue surfacing here is more profound than the mere breakdown of a particular model of computation. As soon as we introduce change into our computational models, many notions that were previously straightforward become problematical. Consider the concept of two things being ``the same.''</p>
<p>Suppose we call <code>make-decrementer</code> twice with the same argument to create two procedures:</p>
<p></p>
<p></p>
<p><code>(define D1 (make-decrementer 25)) (define D2 (make-decrementer 25))</code></p>
<p></p>
<p>Are <code>D1</code> and <code>D2</code> the same? An acceptable answer is yes, because <code>D1</code> and <code>D2</code> have the same computational behavior -- each is a procedure that subtracts its input from 25. In fact, <code>D1</code> could be substituted for <code>D2</code> in any computation without changing the result.</p>
<p>Contrast this with making two calls to <code>make-simplified-withdraw</code>:</p>
<p></p>
<p></p>
<p><code>(define W1 (make-simplified-withdraw 25)) (define W2 (make-simplified-withdraw 25))</code></p>
<p></p>
<p>Are <code>W1</code> and <code>W2</code> the same? Surely not, because calls to <code>W1</code> and <code>W2</code> have distinct effects, as shown by the following sequence of interactions:</p>
<p></p>
<p></p>
<p><code>(W1 20) 5 (W1 20)  - 15 (W2 20) 5</code></p>
<p></p>
<p>Even though <code>W1</code> and <code>W2</code> are ``equal'' in the sense that they are both created by evaluating the same expression, <code>(make-simplified-withdraw 25)</code>, it is not true that <code>W1</code> could be substituted for <code>W2</code> in any expression without changing the result of evaluating the expression.</p>
<p>A language that supports the concept that ``equals can be substituted for equals'' in an expresssion without changing the value of the expression is said to be <em>referentially transparent</em>. Referential transparency is violated when we include <code>set!</code> in our computer language. This makes it tricky to determine when we can simplify expressions by substituting equivalent expressions. Consequently, reasoning about programs that use assignment becomes drastically more difficult.</p>
<p>Once we forgo referential transparency, the notion of what it means for computational objects to be ``the same'' becomes difficult to capture in a formal way. Indeed, the meaning of ``same'' in the real world that our programs model is hardly clear in itself. In general, we can determine that two apparently identical objects are indeed ``the same one'' only by modifying one object and then observing whether the other object has changed in the same way. But how can we tell if an object has ``changed'' other than by observing the ``same'' object twice and seeing whether some property of the object differs from one observation to the next? Thus, we cannot determine ``change'' without some <em>a priori</em> notion of ``sameness,'' and we cannot determine sameness without observing the effects of change.</p>
<p>As an example of how this issue arises in programming, consider the situation where Peter and Paul have a bank account with $100 in it. There is a substantial difference between modeling this as</p>
<p></p>
<p></p>
<p><code>(define peter-acc (make-account 100)) (define paul-acc (make-account 100))</code></p>
<p></p>
<p>and modeling it as</p>
<p></p>
<p></p>
<p><code>(define peter-acc (make-account 100)) (define paul-acc peter-acc)</code></p>
<p></p>
<p>In the first situation, the two bank accounts are distinct. Transactions made by Peter will not affect Paul's account, and vice versa. In the second situation, however, we have defined <code>paul-acc</code> to be <em>the same thing</em> as <code>peter-acc</code>. In effect, Peter and Paul now have a joint bank account, and if Peter makes a withdrawal from <code>peter-acc</code> Paul will observe less money in <code>paul-acc</code>. These two similar but distinct situations can cause confusion in building computational models. With the shared account, in particular, it can be especially confusing that there is one object (the bank account) that has two different names (<code>peter-acc</code> and <code>paul-acc</code>); if we are searching for all the places in our program where <code>paul-acc</code> can be changed, we must remember to look also at things that change <code>peter-acc</code>.<a href="#footnote_Temp_337"><sup>10</sup></a></p>
<p>With reference to the above remarks on ``sameness'' and ``change,'' observe that if Peter and Paul could only examine their bank balances, and could not perform operations that changed the balance, then the issue of whether the two accounts are distinct would be moot. In general, so long as we never modify data objects, we can regard a compound data object to be precisely the totality of its pieces. For example, a rational number is determined by giving its numerator and its denominator. But this view is no longer valid in the presence of change, where a compound data object has an ``identity'' that is something different from the pieces of which it is composed. A bank account is still ``the same'' bank account even if we change the balance by making a withdrawal; conversely, we could have two different bank accounts with the same state information. This complication is a consequence, not of our programming language, but of our perception of a bank account as an object. We do not, for example, ordinarily regard a rational number as a changeable object with identity, such that we could change the numerator and still have ``the same'' rational number.</p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_338">Pitfalls of imperative programming</a></h4>
<p>In contrast to functional programming, programming that makes extensive use of assignment is known as <em>imperative programming</em>. In addition to raising complications about computational models, programs written in imperative style are susceptible to bugs that cannot occur in functional programs. For example, recall the iterative factorial program from section <a href="book-Z-H-11.html#%_sec_1.2.1">1.2.1</a>:</p>
<p></p>
<p><code>(define (factorial n)   (define (iter product counter)     (if (&gt; counter n)         product         (iter (* counter product)               (+ counter 1))))   (iter 1 1))</code></p>
<p></p>
<p>Instead of passing arguments in the internal iterative loop, we could adopt a more imperative style by using explicit assignment to update the values of the variables <code>product</code> and <code>counter</code>:</p>
<p></p>
<p><code>(define (factorial n)   (let ((product 1)         (counter 1))     (define (iter)       (if (&gt; counter n)           product           (begin (set! product (* counter product))                  (set! counter (+ counter 1))                  (iter))))     (iter)))</code></p>
<p></p>
<p>This does not change the results produced by the program, but it does introduce a subtle trap. How do we decide the order of the assignments? As it happens, the program is correct as written. But writing the assignments in the opposite order</p>
<p></p>
<p><code>(set! counter (+ counter 1)) (set! product (* counter product))</code></p>
<p></p>
<p>would have produced a different, incorrect result. In general, programming with assignment forces us to carefully consider the relative orders of the assignments to make sure that each statement is using the correct version of the variables that have been changed. This issue simply does not arise in functional programs.<a href="#footnote_Temp_339"><sup>11</sup></a> The complexity of imperative programs becomes even worse if we consider applications in which several processes execute concurrently. We will return to this in section <a href="book-Z-H-23.html#%_sec_3.4">3.4</a>. First, however, we will address the issue of providing a computational model for expressions that involve assignment, and explore the uses of objects with local state in designing simulations.</p>
<p></p>
<p><strong>Exercise 3.7.</strong>  Consider the bank account objects created by <code>make-account</code>, with the password modification described in exercise <a href="#%_thm_3.3">3.3</a>. Suppose that our banking system requires the ability to make joint accounts. Define a procedure <code>make-joint</code> that accomplishes this. <code>Make-joint</code> should take three arguments. The first is a password-protected account. The second argument must match the password with which the account was defined in order for the <code>make-joint</code> operation to proceed. The third argument is a new password. <code>Make-joint</code> is to create an additional access to the original account using the new password. For example, if <code>peter-acc</code> is a bank account with password <code>open-sesame</code>, then</p>
<p></p>
<p></p>
<p><code>(define paul-acc   (make-joint peter-acc 'open-sesame 'rosebud))</code></p>
<p></p>
<p>will allow one to make transactions on <code>peter-acc</code> using the name <code>paul-acc</code> and the password <code>rosebud</code>. You may wish to modify your solution to exercise <a href="#%_thm_3.3">3.3</a> to accommodate this new feature.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.8.</strong>  When we defined the evaluation model in section <a href="book-Z-H-10.html#%_sec_1.1.3">1.1.3</a>, we said that the first step in evaluating an expression is to evaluate its subexpressions. But we never specified the order in which the subexpressions should be evaluated (e.g., left to right or right to left). When we introduce assignment, the order in which the arguments to a procedure are evaluated can make a difference to the result. Define a simple procedure <code>f</code> such that evaluating <code>(+ (f 0) (f 1))</code> will return 0 if the arguments to <code>+</code> are evaluated from left to right but will return 1 if the arguments are evaluated from right to left.</p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_321"><sup>1</sup></a> Actually, this is not quite true. One exception was the random-number generator in section <a href="book-Z-H-11.html#%_sec_1.2.6">1.2.6</a>. Another exception involved the operation/type tables we introduced in section <a href="book-Z-H-17.html#%_sec_2.4.3">2.4.3</a>, where the values of two calls to <code>get</code> with the same arguments depended on intervening calls to <code>put</code>. On the other hand, until we introduce assignment, we have no way to create such procedures ourselves.</p>
<p><a href="#call_footnote_Temp_322"><sup>2</sup></a> The value of a <code>set!</code> expression is implementation-dependent. <code>Set!</code> should be used only for its effect, not for its value.</p>
<p>The name <code>set!</code> reflects a naming convention used in Scheme: Operations that change the values of variables (or that change data structures, as we will see in section <a href="book-Z-H-22.html#%_sec_3.3">3.3</a>) are given names that end with an exclamation point. This is similar to the convention of designating predicates by names that end with a question mark.</p>
<p><a href="#call_footnote_Temp_323"><sup>3</sup></a> We have already used <code>begin</code> implicitly in our programs, because in Scheme the body of a procedure can be a sequence of expressions. Also, the &lt;<em>consequent</em>&gt; part of each clause in a <code>cond</code> expression can be a sequence of expressions rather than a single expression.</p>
<p><a href="#call_footnote_Temp_324"><sup>4</sup></a> In programming-language jargon, the variable <code>balance</code> is said to be <em>encapsulated</em> within the <code>new-withdraw</code> procedure. Encapsulation reflects the general system-design principle known as the <em>hiding principle</em>: One can make a system more modular and robust by protecting parts of the system from each other; that is, by providing information access only to those parts of the system that have a ``need to know.''</p>
<p><a href="#call_footnote_Temp_325"><sup>5</sup></a> In contrast with <code>new-withdraw</code> above, we do not have to use <code>let</code> to make <code>balance</code> a local variable, since formal parameters are already local. This will be clearer after the discussion of the environment model of evaluation in section <a href="book-Z-H-21.html#%_sec_3.2">3.2</a>. (See also exercise <a href="book-Z-H-21.html#%_thm_3.10">3.10</a>.)</p>
<p><a href="#call_footnote_Temp_330"><sup>6</sup></a> One common way to implement <code>rand-update</code> is to use the rule that <em>x</em> is updated to <em>a</em><em>x</em> + <em>b</em> modulo <em>m</em>, where <em>a</em>, <em>b</em>, and <em>m</em> are appropriately chosen integers. Chapter 3 of Knuth 1981 includes an extensive discussion of techniques for generating sequences of random numbers and establishing their statistical properties. Notice that the <code>rand-update</code> procedure computes a mathematical function: Given the same input twice, it produces the same output. Therefore, the number sequence produced by <code>rand-update</code> certainly is not ``random,'' if by ``random'' we insist that each number in the sequence is unrelated to the preceding number. The relation between ``real randomness'' and so-called <em>pseudo-random</em> sequences, which are produced by well-determined computations and yet have suitable statistical properties, is a complex question involving difficult issues in mathematics and philosophy. Kolmogorov, Solomonoff, and Chaitin have made great progress in clarifying these issues; a discussion can be found in Chaitin 1975.</p>
<p><a href="#call_footnote_Temp_331"><sup>7</sup></a> This theorem is due to E. Cesàro. See section 4.5.2 of Knuth 1981 for a discussion and a proof.</p>
<p><a href="#call_footnote_Temp_333"><sup>8</sup></a> MIT Scheme provides such a procedure. If <code>random</code> is given an exact integer (as in section <a href="book-Z-H-11.html#%_sec_1.2.6">1.2.6</a>) it returns an exact integer, but if it is given a decimal value (as in this exercise) it returns a decimal value.</p>
<p><a href="#call_footnote_Temp_335"><sup>9</sup></a> We don't substitute for the occurrence of <code>balance</code> in the <code>set!</code> expression because the &lt;<em>name</em>&gt; in a <code>set!</code> is not evaluated. If we did substitute for it, we would get <code>(set! 25 (- 25 amount))</code>, which makes no sense.</p>
<p><a href="#call_footnote_Temp_337"><sup>10</sup></a> The phenomenon of a single computational object being accessed by more than one name is known as <em>aliasing</em>. The joint bank account situation illustrates a very simple example of an alias. In section <a href="book-Z-H-22.html#%_sec_3.3">3.3</a> we will see much more complex examples, such as ``distinct'' compound data structures that share parts. Bugs can occur in our programs if we forget that a change to an object may also, as a ``side effect,'' change a ``different'' object because the two ``different'' objects are actually a single object appearing under different aliases. These so-called <em>side-effect bugs</em> are so difficult to locate and to analyze that some people have proposed that programming languages be designed in such a way as to not allow side effects or aliasing (Lampson et al. 1981; Morris, Schmidt, and Wadler 1980).</p>
<p><a href="#call_footnote_Temp_339"><sup>11</sup></a> In view of this, it is ironic that introductory programming is most often taught in a highly imperative style. This may be a vestige of a belief, common throughout the 1960s and 1970s, that programs that call procedures must inherently be less efficient than programs that perform assignments. (Steele (1977) debunks this argument.) Alternatively it may reflect a view that step-by-step assignment is easier for beginners to visualize than procedure call. Whatever the reason, it often saddles beginning programmers with ``should I set this variable before or after that one'' concerns that can complicate programming and obscure the important ideas.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-19.html">previous</a>, <a href="book-Z-H-21.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-20.html">previous</a>, <a href="book-Z-H-22.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_3.2">3.2  The Environment Model of Evaluation</a></h2>
<p>When we introduced compound procedures in chapter 1, we used the substitution model of evaluation (section <a href="book-Z-H-10.html#%_sec_1.1.5">1.1.5</a>) to define what is meant by applying a procedure to arguments:</p>
<p></p>
<p></p>
<ul>
<li>To apply a compound procedure to arguments, evaluate the body of the procedure with each formal parameter replaced by the corresponding argument.</li>
</ul>
<p></p>
<p>Once we admit assignment into our programming language, such a definition is no longer adequate. In particular, section <a href="book-Z-H-20.html#%_sec_3.1.3">3.1.3</a> argued that, in the presence of assignment, a variable can no longer be considered to be merely a name for a value. Rather, a variable must somehow designate a ``place'' in which values can be stored. In our new model of evaluation, these places will be maintained in structures called <em>environments</em>.</p>
<p>An environment is a sequence of <em>frames</em>. Each frame is a table (possibly empty) of <em>bindings</em>, which associate variable names with their corresponding values. (A single frame may contain at most one binding for any variable.) Each frame also has a pointer to its <em>enclosing environment</em>, unless, for the purposes of discussion, the frame is considered to be <em>global</em>. The <em>value of a variable</em> with respect to an environment is the value given by the binding of the variable in the first frame in the environment that contains a binding for that variable. If no frame in the sequence specifies a binding for the variable, then the variable is said to be <em>unbound</em> in the environment.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-2.gif" /></p>
<p><strong>Figure 3.1:</strong>  A simple environment structure.</p>
<p></p>
<p>Figure <a href="#%_fig_3.1">3.1</a> shows a simple environment structure consisting of three frames, labeled I, II, and III. In the diagram, A, B, C, and D are pointers to environments. C and D point to the same environment. The variables <code>z</code> and <code>x</code> are bound in frame II, while <code>y</code> and <code>x</code> are bound in frame I. The value of <code>x</code> in environment D is 3. The value of <code>x</code> with respect to environment B is also 3. This is determined as follows: We examine the first frame in the sequence (frame III) and do not find a binding for <code>x</code>, so we proceed to the enclosing environment D and find the binding in frame I. On the other hand, the value of <code>x</code> in environment A is 7, because the first frame in the sequence (frame II) contains a binding of <code>x</code> to 7. With respect to environment A, the binding of <code>x</code> to 7 in frame II is said to <em>shadow</em> the binding of <code>x</code> to 3 in frame I.</p>
<p>The environment is crucial to the evaluation process, because it determines the context in which an expression should be evaluated. Indeed, one could say that expressions in a programming language do not, in themselves, have any meaning. Rather, an expression acquires a meaning only with respect to some environment in which it is evaluated. Even the interpretation of an expression as straightforward as <code>(+ 1 1)</code> depends on an understanding that one is operating in a context in which <code>+</code> is the symbol for addition. Thus, in our model of evaluation we will always speak of evaluating an expression with respect to some environment. To describe interactions with the interpreter, we will suppose that there is a global environment, consisting of a single frame (with no enclosing environment) that includes values for the symbols associated with the primitive procedures. For example, the idea that <code>+</code> is the symbol for addition is captured by saying that the symbol <code>+</code> is bound in the global environment to the primitive addition procedure.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.2.1">3.2.1  The Rules for Evaluation</a></h3>
<p>The overall specification of how the interpreter evaluates a combination remains the same as when we first introduced it in section <a href="book-Z-H-10.html#%_sec_1.1.3">1.1.3</a>:</p>
<p></p>
<p></p>
<ul>
<li>To evaluate a combination:</li>
</ul>
<p></p>
<blockquote>
<p>1.  Evaluate the subexpressions of the combination.<a href="#footnote_Temp_342"><sup>12</sup></a></p>
<p></p>
<p>2.  Apply the value of the operator subexpression to the values of the operand subexpressions.</p>
</blockquote>
<p>The environment model of evaluation replaces the substitution model in specifying what it means to apply a compound procedure to arguments.</p>
<p>In the environment model of evaluation, a procedure is always a pair consisting of some code and a pointer to an environment. Procedures are created in one way only: by evaluating a <code>lambda</code> expression. This produces a procedure whose code is obtained from the text of the <code>lambda</code> expression and whose environment is the environment in which the <code>lambda</code> expression was evaluated to produce the procedure. For example, consider the procedure definition</p>
<p></p>
<p></p>
<p><code>(define (square x)   (* x x))</code></p>
<p></p>
<p>evaluated in the global environment. The procedure definition syntax is just syntactic sugar for an underlying implicit <code>lambda</code> expression. It would have been equivalent to have used</p>
<p></p>
<p></p>
<p><code>(define square   (lambda (x) (* x x)))</code></p>
<p></p>
<p>which evaluates <code>(lambda (x) (* x x))</code> and binds <code>square</code> to the resulting value, all in the global environment.</p>
<p>Figure <a href="#%_fig_3.2">3.2</a> shows the result of evaluating this <code>define</code> expression. The procedure object is a pair whose code specifies that the procedure has one formal parameter, namely <code>x</code>, and a procedure body <code>(* x x)</code>. The environment part of the procedure is a pointer to the global environment, since that is the environment in which the <code>lambda</code> expression was evaluated to produce the procedure. A new binding, which associates the procedure object with the symbol <code>square</code>, has been added to the global frame. In general, <code>define</code> creates definitions by adding bindings to frames.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-3.gif" /></p>
<p><strong>Figure 3.2:</strong>  Environment structure produced by evaluating <code>(define (square x) (* x x))</code> in the global environment.</p>
<p></p>
<p>Now that we have seen how procedures are created, we can describe how procedures are applied. The environment model specifies: To apply a procedure to arguments, create a new environment containing a frame that binds the parameters to the values of the arguments. The enclosing environment of this frame is the environment specified by the procedure. Now, within this new environment, evaluate the procedure body.</p>
<p>To show how this rule is followed, figure <a href="#%_fig_3.3">3.3</a> illustrates the environment structure created by evaluating the expression <code>(square 5)</code> in the global environment, where <code>square</code> is the procedure generated in figure <a href="#%_fig_3.2">3.2</a>. Applying the procedure results in the creation of a new environment, labeled E1 in the figure, that begins with a frame in which <code>x</code>, the formal parameter for the procedure, is bound to the argument 5. The pointer leading upward from this frame shows that the frame's enclosing environment is the global environment. The global environment is chosen here, because this is the environment that is indicated as part of the <code>square</code> procedure object. Within E1, we evaluate the body of the procedure, <code>(* x x)</code>. Since the value of <code>x</code> in E1 is 5, the result is <code>(* 5 5)</code>, or 25.</p>
<p></p>
<p><img src="ch3-Z-G-4.gif" /></p>
<p><strong>Figure 3.3:</strong>  Environment created by evaluating <code>(square 5)</code> in the global environment.</p>
<p></p>
<p>The environment model of procedure application can be summarized by two rules:</p>
<p></p>
<p></p>
<ul>
<li>A procedure object is applied to a set of arguments by constructing a frame, binding the formal parameters of the procedure to the arguments of the call, and then evaluating the body of the procedure in the context of the new environment constructed. The new frame has as its enclosing environment the environment part of the procedure object being applied.</li>
<li>A procedure is created by evaluating a <code>lambda</code> expression relative to a given environment. The resulting procedure object is a pair consisting of the text of the <code>lambda</code> expression and a pointer to the environment in which the procedure was created.</li>
</ul>
<p></p>
<p>We also specify that defining a symbol using <code>define</code> creates a binding in the current environment frame and assigns to the symbol the indicated value.<a href="#footnote_Temp_343"><sup>13</sup></a> Finally, we specify the behavior of <code>set!</code>, the operation that forced us to introduce the environment model in the first place. Evaluating the expression <code>(set! &lt;variable&gt; &lt;value&gt;)</code> in some environment locates the binding of the variable in the environment and changes that binding to indicate the new value. That is, one finds the first frame in the environment that contains a binding for the variable and modifies that frame. If the variable is unbound in the environment, then <code>set!</code> signals an error.</p>
<p>These evaluation rules, though considerably more complex than the substitution model, are still reasonably straightforward. Moreover, the evaluation model, though abstract, provides a correct description of how the interpreter evaluates expressions. In chapter 4 we shall see how this model can serve as a blueprint for implementing a working interpreter. The following sections elaborate the details of the model by analyzing some illustrative programs.</p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.2.2">3.2.2  Applying Simple Procedures</a></h3>
<p>When we introduced the substitution model in section <a href="book-Z-H-10.html#%_sec_1.1.5">1.1.5</a> we showed how the combination <code>(f 5)</code> evaluates to 136, given the following procedure definitions:</p>
<p></p>
<p></p>
<p><code>(define (square x)   (* x x)) (define (sum-of-squares x y)   (+ (square x) (square y))) (define (f a)   (sum-of-squares (+ a 1) (* a 2)))</code></p>
<p></p>
<p>We can analyze the same example using the environment model. Figure <a href="#%_fig_3.4">3.4</a> shows the three procedure objects created by evaluating the definitions of <code>f</code>, <code>square</code>, and <code>sum-of-squares</code> in the global environment. Each procedure object consists of some code, together with a pointer to the global environment.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-5.gif" /></p>
<p><strong>Figure 3.4:</strong>  Procedure objects in the global frame.</p>
<p></p>
<p>In figure <a href="#%_fig_3.5">3.5</a> we see the environment structure created by evaluating the expression <code>(f 5)</code>. The call to <code>f</code> creates a new environment E1 beginning with a frame in which <code>a</code>, the formal parameter of <code>f</code>, is bound to the argument 5. In E1, we evaluate the body of <code>f</code>:</p>
<p></p>
<p></p>
<p><code>(sum-of-squares (+ a 1) (* a 2))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-6.gif" /></p>
<p><strong>Figure 3.5:</strong>  Environments created by evaluating <code>(f 5)</code> using the procedures in figure <a href="#%_fig_3.4">3.4</a>.</p>
<p></p>
<p>To evaluate this combination, we first evaluate the subexpressions. The first subexpression, <code>sum-of-squares</code>, has a value that is a procedure object. (Notice how this value is found: We first look in the first frame of E1, which contains no binding for <code>sum-of-squares</code>. Then we proceed to the enclosing environment, i.e. the global environment, and find the binding shown in figure <a href="#%_fig_3.4">3.4</a>.) The other two subexpressions are evaluated by applying the primitive operations <code>+</code> and <code>*</code> to evaluate the two combinations <code>(+ a 1)</code> and <code>(* a 2)</code> to obtain 6 and 10, respectively.</p>
<p>Now we apply the procedure object <code>sum-of-squares</code> to the arguments 6 and 10. This results in a new environment E2 in which the formal parameters <code>x</code> and <code>y</code> are bound to the arguments. Within E2 we evaluate the combination <code>(+ (square x) (square y))</code>. This leads us to evaluate <code>(square x)</code>, where <code>square</code> is found in the global frame and <code>x</code> is 6. Once again, we set up a new environment, E3, in which <code>x</code> is bound to 6, and within this we evaluate the body of <code>square</code>, which is <code>(* x x)</code>. Also as part of applying <code>sum-of-squares</code>, we must evaluate the subexpression <code>(square y)</code>, where <code>y</code> is 10. This second call to <code>square</code> creates another environment, E4, in which <code>x</code>, the formal parameter of <code>square</code>, is bound to 10. And within E4 we must evaluate <code>(* x x)</code>.</p>
<p>The important point to observe is that each call to <code>square</code> creates a new environment containing a binding for <code>x</code>. We can see here how the different frames serve to keep separate the different local variables all named <code>x</code>. Notice that each frame created by <code>square</code> points to the global environment, since this is the environment indicated by the <code>square</code> procedure object.</p>
<p>After the subexpressions are evaluated, the results are returned. The values generated by the two calls to <code>square</code> are added by <code>sum-of-squares</code>, and this result is returned by <code>f</code>. Since our focus here is on the environment structures, we will not dwell on how these returned values are passed from call to call; however, this is also an important aspect of the evaluation process, and we will return to it in detail in chapter 5.</p>
<p><strong>Exercise 3.9.</strong>  In section <a href="book-Z-H-11.html#%_sec_1.2.1">1.2.1</a> we used the substitution model to analyze two procedures for computing factorials, a recursive version</p>
<p></p>
<p></p>
<p><code>(define (factorial n)   (if (= n 1)       1       (* n (factorial (- n 1)))))</code></p>
<p></p>
<p>and an iterative version</p>
<p></p>
<p></p>
<p><code>(define (factorial n)   (fact-iter 1 1 n)) (define (fact-iter product counter max-count)   (if (&gt; counter max-count)       product       (fact-iter (* counter product)                  (+ counter 1)                  max-count)))</code></p>
<p></p>
<p>Show the environment structures created by evaluating <code>(factorial 6)</code> using each version of the <code>factorial</code> procedure.<a href="#footnote_Temp_345"><sup>14</sup></a></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.2.3">3.2.3  Frames as the Repository of Local State</a></h3>
<p>We can turn to the environment model to see how procedures and assignment can be used to represent objects with local state. As an example, consider the ``withdrawal processor'' from section <a href="book-Z-H-20.html#%_sec_3.1.1">3.1.1</a> created by calling the procedure</p>
<p></p>
<p></p>
<p><code>(define (make-withdraw balance)   (lambda (amount)     (if (&gt;= balance amount)         (begin (set! balance (- balance amount))                balance)         &quot;Insufficient funds&quot;)))</code></p>
<p></p>
<p>Let us describe the evaluation of</p>
<p></p>
<p></p>
<p><code>(define W1 (make-withdraw 100))</code></p>
<p></p>
<p>followed by</p>
<p></p>
<p></p>
<p><code>(W1 50) 50</code></p>
<p></p>
<p>Figure <a href="#%_fig_3.6">3.6</a> shows the result of defining the <code>make-withdraw</code> procedure in the global environment. This produces a procedure object that contains a pointer to the global environment. So far, this is no different from the examples we have already seen, except that the body of the procedure is itself a <code>lambda</code> expression.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-7.gif" /></p>
<p><strong>Figure 3.6:</strong>  Result of defining <code>make-withdraw</code> in the global environment.</p>
<p></p>
<p>The interesting part of the computation happens when we apply the procedure <code>make-withdraw</code> to an argument:</p>
<p></p>
<p></p>
<p><code>(define W1 (make-withdraw 100))</code></p>
<p></p>
<p>We begin, as usual, by setting up an environment E1 in which the formal parameter <code>balance</code> is bound to the argument 100. Within this environment, we evaluate the body of <code>make-withdraw</code>, namely the <code>lambda</code> expression. This constructs a new procedure object, whose code is as specified by the <code>lambda</code> and whose environment is E1, the environment in which the <code>lambda</code> was evaluated to produce the procedure. The resulting procedure object is the value returned by the call to <code>make-withdraw</code>. This is bound to <code>W1</code> in the global environment, since the <code>define</code> itself is being evaluated in the global environment. Figure <a href="#%_fig_3.7">3.7</a> shows the resulting environment structure.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-8.gif" /></p>
<p><strong>Figure 3.7:</strong>  Result of evaluating <code>(define W1 (make-withdraw 100))</code>.</p>
<p></p>
<p>Now we can analyze what happens when <code>W1</code> is applied to an argument:</p>
<p></p>
<p></p>
<p><code>(W1 50) 50</code></p>
<p></p>
<p>We begin by constructing a frame in which <code>amount</code>, the formal parameter of <code>W1</code>, is bound to the argument 50. The crucial point to observe is that this frame has as its enclosing environment not the global environment, but rather the environment E1, because this is the environment that is specified by the <code>W1</code> procedure object. Within this new environment, we evaluate the body of the procedure:</p>
<p></p>
<p></p>
<p><code>(if (&gt;= balance amount)     (begin (set! balance (- balance amount))            balance)     &quot;Insufficient funds&quot;)</code></p>
<p></p>
<p>The resulting environment structure is shown in figure <a href="#%_fig_3.8">3.8</a>. The expression being evaluated references both <code>amount</code> and <code>balance</code>. <code>Amount</code> will be found in the first frame in the environment, while <code>balance</code> will be found by following the enclosing-environment pointer to E1.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-9.gif" /></p>
<p><strong>Figure 3.8:</strong>  Environments created by applying the procedure object <code>W1</code>.</p>
<p></p>
<p>When the <code>set!</code> is executed, the binding of <code>balance</code> in E1 is changed. At the completion of the call to <code>W1</code>, <code>balance</code> is 50, and the frame that contains <code>balance</code> is still pointed to by the procedure object <code>W1</code>. The frame that binds <code>amount</code> (in which we executed the code that changed <code>balance</code>) is no longer relevant, since the procedure call that constructed it has terminated, and there are no pointers to that frame from other parts of the environment. The next time <code>W1</code> is called, this will build a new frame that binds <code>amount</code> and whose enclosing environment is E1. We see that E1 serves as the ``place'' that holds the local state variable for the procedure object <code>W1</code>. Figure <a href="#%_fig_3.9">3.9</a> shows the situation after the call to <code>W1</code>.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-10.gif" /></p>
<p><strong>Figure 3.9:</strong>  Environments after the call to <code>W1</code>.</p>
<p></p>
<p>Observe what happens when we create a second ``withdraw'' object by making another call to <code>make-withdraw</code>:</p>
<p></p>
<p></p>
<p><code>(define W2 (make-withdraw 100))</code></p>
<p></p>
<p>This produces the environment structure of figure <a href="#%_fig_3.10">3.10</a>, which shows that <code>W2</code> is a procedure object, that is, a pair with some code and an environment. The environment E2 for <code>W2</code> was created by the call to <code>make-withdraw</code>. It contains a frame with its own local binding for <code>balance</code>. On the other hand, <code>W1</code> and <code>W2</code> have the same code: the code specified by the <code>lambda</code> expression in the body of <code>make-withdraw</code>.<a href="#footnote_Temp_346"><sup>15</sup></a> We see here why <code>W1</code> and <code>W2</code> behave as independent objects. Calls to <code>W1</code> reference the state variable <code>balance</code> stored in E1, whereas calls to <code>W2</code> reference the <code>balance</code> stored in E2. Thus, changes to the local state of one object do not affect the other object.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-11.gif" /></p>
<p><strong>Figure 3.10:</strong>  Using <code>(define W2 (make-withdraw 100))</code> to create a second object.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.10.</strong>  In the <code>make-withdraw</code> procedure, the local variable <code>balance</code> is created as a parameter of <code>make-withdraw</code>. We could also create the local state variable explicitly, using <code>let</code>, as follows:</p>
<p></p>
<p></p>
<p><code>(define (make-withdraw initial-amount)   (let ((balance initial-amount))     (lambda (amount)       (if (&gt;= balance amount)           (begin (set! balance (- balance amount))                  balance)           &quot;Insufficient funds&quot;))))</code></p>
<p></p>
<p>Recall from section <a href="book-Z-H-12.html#%_sec_1.3.2">1.3.2</a> that <code>let</code> is simply syntactic sugar for a procedure call:</p>
<p></p>
<p></p>
<p><code>(let ((&lt;var&gt; &lt;exp&gt;)) &lt;body&gt;)</code></p>
<p></p>
<p>is interpreted as an alternate syntax for</p>
<p></p>
<p></p>
<p><code>((lambda (&lt;var&gt;) &lt;body&gt;) &lt;exp&gt;)</code></p>
<p></p>
<p>Use the environment model to analyze this alternate version of <code>make-withdraw</code>, drawing figures like the ones above to illustrate the interactions</p>
<p></p>
<p></p>
<p><code>(define W1 (make-withdraw 100))  (W1 50)  (define W2 (make-withdraw 100))</code></p>
<p></p>
<p>Show that the two versions of <code>make-withdraw</code> create objects with the same behavior. How do the environment structures differ for the two versions?</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.2.4">3.2.4  Internal Definitions</a></h3>
<p>Section <a href="book-Z-H-10.html#%_sec_1.1.8">1.1.8</a> introduced the idea that procedures can have internal definitions, thus leading to a block structure as in the following procedure to compute square roots:</p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (define (good-enough? guess)     (&lt; (abs (- (square guess) x)) 0.001))   (define (improve guess)     (average guess (/ x guess)))   (define (sqrt-iter guess)     (if (good-enough? guess)         guess         (sqrt-iter (improve guess))))   (sqrt-iter 1.0))</code></p>
<p></p>
<p>Now we can use the environment model to see why these internal definitions behave as desired. Figure <a href="#%_fig_3.11">3.11</a> shows the point in the evaluation of the expression <code>(sqrt 2)</code> where the internal procedure <code>good-enough?</code> has been called for the first time with <code>guess</code> equal to 1.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-12.gif" /></p>
<p><strong>Figure 3.11:</strong>  <code>Sqrt</code> procedure with internal definitions.</p>
<p></p>
<p>Observe the structure of the environment. <code>Sqrt</code> is a symbol in the global environment that is bound to a procedure object whose associated environment is the global environment. When <code>sqrt</code> was called, a new environment E1 was formed, subordinate to the global environment, in which the parameter <code>x</code> is bound to 2. The body of <code>sqrt</code> was then evaluated in E1. Since the first expression in the body of <code>sqrt</code> is</p>
<p></p>
<p></p>
<p><code>(define (good-enough? guess)   (&lt; (abs (- (square guess) x)) 0.001))</code></p>
<p></p>
<p>evaluating this expression defined the procedure <code>good-enough?</code> in the environment E1. To be more precise, the symbol <code>good-enough?</code> was added to the first frame of E1, bound to a procedure object whose associated environment is E1. Similarly, <code>improve</code> and <code>sqrt-iter</code> were defined as procedures in E1. For conciseness, figure <a href="#%_fig_3.11">3.11</a> shows only the procedure object for <code>good-enough?</code>.</p>
<p>After the local procedures were defined, the expression <code>(sqrt-iter 1.0)</code> was evaluated, still in environment E1. So the procedure object bound to <code>sqrt-iter</code> in E1 was called with 1 as an argument. This created an environment E2 in which <code>guess</code>, the parameter of <code>sqrt-iter</code>, is bound to 1. <code>Sqrt-iter</code> in turn called <code>good-enough?</code> with the value of <code>guess</code> (from E2) as the argument for <code>good-enough?</code>. This set up another environment, E3, in which <code>guess</code> (the parameter of <code>good-enough?</code>) is bound to 1. Although <code>sqrt-iter</code> and <code>good-enough?</code> both have a parameter named <code>guess</code>, these are two distinct local variables located in different frames. Also, E2 and E3 both have E1 as their enclosing environment, because the <code>sqrt-iter</code> and <code>good-enough?</code> procedures both have E1 as their environment part. One consequence of this is that the symbol <code>x</code> that appears in the body of <code>good-enough?</code> will reference the binding of <code>x</code> that appears in E1, namely the value of <code>x</code> with which the original <code>sqrt</code> procedure was called. The environment model thus explains the two key properties that make local procedure definitions a useful technique for modularizing programs:</p>
<p></p>
<ul>
<li>The names of the local procedures do not interfere with names external to the enclosing procedure, because the local procedure names will be bound in the frame that the procedure creates when it is run, rather than being bound in the global environment.</li>
<li>The local procedures can access the arguments of the enclosing procedure, simply by using parameter names as free variables. This is because the body of the local procedure is evaluated in an environment that is subordinate to the evaluation environment for the enclosing procedure.</li>
</ul>
<p></p>
<p></p>
<p><strong>Exercise 3.11.</strong>  In section <a href="#%_sec_3.2.3">3.2.3</a> we saw how the environment model described the behavior of procedures with local state. Now we have seen how internal definitions work. A typical message-passing procedure contains both of these aspects. Consider the bank account procedure of section <a href="book-Z-H-20.html#%_sec_3.1.1">3.1.1</a>:</p>
<p></p>
<p></p>
<p><code>(define (make-account balance)   (define (withdraw amount)     (if (&gt;= balance amount)         (begin (set! balance (- balance amount))                balance)         &quot;Insufficient funds&quot;))   (define (deposit amount)     (set! balance (+ balance amount))     balance)   (define (dispatch m)     (cond ((eq? m 'withdraw) withdraw)           ((eq? m 'deposit) deposit)           (else (error &quot;Unknown request -- MAKE-ACCOUNT&quot;                        m))))   dispatch)</code></p>
<p></p>
<p>Show the environment structure generated by the sequence of interactions</p>
<p></p>
<p></p>
<p><code>(define acc (make-account 50))  ((acc 'deposit) 40) 90  ((acc 'withdraw) 60) 30</code></p>
<p></p>
<p>Where is the local state for <code>acc</code> kept? Suppose we define another account</p>
<p></p>
<p></p>
<p><code>(define acc2 (make-account 100))</code></p>
<p></p>
<p>How are the local states for the two accounts kept distinct? Which parts of the environment structure are shared between <code>acc</code> and <code>acc2</code>?</p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_342"><sup>12</sup></a> Assignment introduces a subtlety into step 1 of the evaluation rule. As shown in exercise <a href="book-Z-H-20.html#%_thm_3.8">3.8</a>, the presence of assignment allows us to write expressions that will produce different values depending on the order in which the subexpressions in a combination are evaluated. Thus, to be precise, we should specify an evaluation order in step 1 (e.g., left to right or right to left). However, this order should always be considered to be an implementation detail, and one should never write programs that depend on some particular order. For instance, a sophisticated compiler might optimize a program by varying the order in which subexpressions are evaluated.</p>
<p><a href="#call_footnote_Temp_343"><sup>13</sup></a> If there is already a binding for the variable in the current frame, then the binding is changed. This is convenient because it allows redefinition of symbols; however, it also means that <code>define</code> can be used to change values, and this brings up the issues of assignment without explicitly using <code>set!</code>. Because of this, some people prefer redefinitions of existing symbols to signal errors or warnings.</p>
<p><a href="#call_footnote_Temp_345"><sup>14</sup></a> The environment model will not clarify our claim in section <a href="book-Z-H-11.html#%_sec_1.2.1">1.2.1</a> that the interpreter can execute a procedure such as <code>fact-iter</code> in a constant amount of space using tail recursion. We will discuss tail recursion when we deal with the control structure of the interpreter in section <a href="book-Z-H-34.html#%_sec_5.4">5.4</a>.</p>
<p><a href="#call_footnote_Temp_346"><sup>15</sup></a> Whether <code>W1</code> and <code>W2</code> share the same physical code stored in the computer, or whether they each keep a copy of the code, is a detail of the implementation. For the interpreter we implement in chapter 4, the code is in fact shared.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-20.html">previous</a>, <a href="book-Z-H-22.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-21.html">previous</a>, <a href="book-Z-H-23.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_3.3">3.3  Modeling with Mutable Data</a></h2>
<p>Chapter 2 dealt with compound data as a means for constructing computational objects that have several parts, in order to model real-world objects that have several aspects. In that chapter we introduced the discipline of data abstraction, according to which data structures are specified in terms of constructors, which create data objects, and selectors, which access the parts of compound data objects. But we now know that there is another aspect of data that chapter 2 did not address. The desire to model systems composed of objects that have changing state leads us to the need to modify compound data objects, as well as to construct and select from them. In order to model compound objects with changing state, we will design data abstractions to include, in addition to selectors and constructors, operations called <em>mutators</em>, which modify data objects. For instance, modeling a banking system requires us to change account balances. Thus, a data structure for representing bank accounts might admit an operation</p>
<p></p>
<p></p>
<p><code>(set-balance! &lt;account&gt; &lt;new-value&gt;)</code></p>
<p></p>
<p>that changes the balance of the designated account to the designated new value. Data objects for which mutators are defined are known as <em>mutable data objects</em>.</p>
<p>Chapter 2 introduced pairs as a general-purpose ``glue'' for synthesizing compound data. We begin this section by defining basic mutators for pairs, so that pairs can serve as building blocks for constructing mutable data objects. These mutators greatly enhance the representational power of pairs, enabling us to build data structures other than the sequences and trees that we worked with in section <a href="book-Z-H-15.html#%_sec_2.2">2.2</a>. We also present some examples of simulations in which complex systems are modeled as collections of objects with local state.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.3.1">3.3.1  Mutable List Structure</a></h3>
<p>The basic operations on pairs -- <code>cons</code>, <code>car</code>, and <code>cdr</code> -- can be used to construct list structure and to select parts from list structure, but they are incapable of modifying list structure. The same is true of the list operations we have used so far, such as <code>append</code> and <code>list</code>, since these can be defined in terms of <code>cons</code>, <code>car</code>, and <code>cdr</code>. To modify list structures we need new operations.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-13.gif" /></p>
<p><strong>Figure 3.12:</strong>  Lists <code>x</code>: <code>((a b) c d)</code> and <code>y</code>: <code>(e f)</code>.</p>
<p></p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-14.gif" /></p>
<p><strong>Figure 3.13:</strong>  Effect of <code>(set-car! x y)</code> on the lists in figure <a href="#%_fig_3.12">3.12</a>.</p>
<p></p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-15.gif" /></p>
<p><strong>Figure 3.14:</strong>  Effect of <code>(define z (cons y (cdr x)))</code> on the lists in figure <a href="#%_fig_3.12">3.12</a>.</p>
<p></p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-16.gif" /></p>
<p><strong>Figure 3.15:</strong>  Effect of <code>(set-cdr! x y)</code> on the lists in figure <a href="#%_fig_3.12">3.12</a>.</p>
<p></p>
<p>The primitive mutators for pairs are <code>set-car!</code> and <code>set-cdr!</code>. <code>Set-car!</code> takes two arguments, the first of which must be a pair. It modifies this pair, replacing the <code>car</code> pointer by a pointer to the second argument of <code>set-car!</code>.<a href="#footnote_Temp_349"><sup>16</sup></a></p>
<p>As an example, suppose that <code>x</code> is bound to the list <code>((a b) c d)</code> and <code>y</code> to the list <code>(e f)</code> as illustrated in figure <a href="#%_fig_3.12">3.12</a>. Evaluating the expression <code>(set-car! x y)</code> modifies the pair to which <code>x</code> is bound, replacing its <code>car</code> by the value of <code>y</code>. The result of the operation is shown in figure <a href="#%_fig_3.13">3.13</a>. The structure <code>x</code> has been modified and would now be printed as <code>((e f) c d)</code>. The pairs representing the list <code>(a b)</code>, identified by the pointer that was replaced, are now detached from the original structure.<a href="#footnote_Temp_350"><sup>17</sup></a></p>
<p>Compare figure <a href="#%_fig_3.13">3.13</a> with figure <a href="#%_fig_3.14">3.14</a>, which illustrates the result of executing <code>(define z (cons y (cdr x)))</code> with <code>x</code> and <code>y</code> bound to the original lists of figure <a href="#%_fig_3.12">3.12</a>. The variable <code>z</code> is now bound to a new pair created by the <code>cons</code> operation; the list to which <code>x</code> is bound is unchanged.</p>
<p>The <code>set-cdr!</code> operation is similar to <code>set-car!</code>. The only difference is that the <code>cdr</code> pointer of the pair, rather than the <code>car</code> pointer, is replaced. The effect of executing <code>(set-cdr! x y)</code> on the lists of figure <a href="#%_fig_3.12">3.12</a> is shown in figure <a href="#%_fig_3.15">3.15</a>. Here the <code>cdr</code> pointer of <code>x</code> has been replaced by the pointer to <code>(e f)</code>. Also, the list <code>(c d)</code>, which used to be the <code>cdr</code> of <code>x</code>, is now detached from the structure.</p>
<p><code>Cons</code> builds new list structure by creating new pairs, while <code>set-car!</code> and <code>set-cdr!</code> modify existing pairs. Indeed, we could implement <code>cons</code> in terms of the two mutators, together with a procedure <code>get-new-pair</code>, which returns a new pair that is not part of any existing list structure. We obtain the new pair, set its <code>car</code> and <code>cdr</code> pointers to the designated objects, and return the new pair as the result of the <code>cons</code>.<a href="#footnote_Temp_351"><sup>18</sup></a></p>
<p></p>
<p></p>
<p><code>(define (cons x y)   (let ((new (get-new-pair)))     (set-car! new x)     (set-cdr! new y)     new))</code></p>
<p></p>
<p></p>
<p><strong>Exercise 3.12.</strong>  The following procedure for appending lists was introduced in section <a href="book-Z-H-15.html#%_sec_2.2.1">2.2.1</a>:</p>
<p></p>
<p></p>
<p><code>(define (append x y)   (if (null? x)       y       (cons (car x) (append (cdr x) y))))</code></p>
<p></p>
<p><code>Append</code> forms a new list by successively <code>cons</code>ing the elements of <code>x</code> onto <code>y</code>. The procedure <code>append!</code> is similar to <code>append</code>, but it is a mutator rather than a constructor. It appends the lists by splicing them together, modifying the final pair of <code>x</code> so that its <code>cdr</code> is now <code>y</code>. (It is an error to call <code>append!</code> with an empty <code>x</code>.)</p>
<p></p>
<p></p>
<p><code>(define (append! x y)   (set-cdr! (last-pair x) y)   x)</code></p>
<p></p>
<p>Here <code>last-pair</code> is a procedure that returns the last pair in its argument:</p>
<p></p>
<p></p>
<p><code>(define (last-pair x)   (if (null? (cdr x))       x       (last-pair (cdr x))))</code></p>
<p></p>
<p>Consider the interaction</p>
<p></p>
<p></p>
<p><code>(define x (list 'a 'b)) (define y (list 'c 'd)) (define z (append x y)) z (a b c d) (cdr x) &lt;response&gt; (define w (append! x y)) w (a b c d) (cdr x) &lt;response&gt;</code></p>
<p></p>
<p>What are the missing &lt;<em>response</em>&gt;s? Draw box-and-pointer diagrams to explain your answer.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.13.</strong>  Consider the following <code>make-cycle</code> procedure, which uses the <code>last-pair</code> procedure defined in exercise <a href="#%_thm_3.12">3.12</a>:</p>
<p></p>
<p></p>
<p><code>(define (make-cycle x)   (set-cdr! (last-pair x) x)   x)</code></p>
<p></p>
<p>Draw a box-and-pointer diagram that shows the structure <code>z</code> created by</p>
<p></p>
<p></p>
<p><code>(define z (make-cycle (list 'a 'b 'c)))</code></p>
<p></p>
<p>What happens if we try to compute <code>(last-pair z)</code>?</p>
<p></p>
<p></p>
<p><strong>Exercise 3.14.</strong>  The following procedure is quite useful, although obscure:</p>
<p></p>
<p></p>
<p><code>(define (mystery x)   (define (loop x y)     (if (null? x)         y         (let ((temp (cdr x)))           (set-cdr! x y)           (loop temp x))))   (loop x '()))</code></p>
<p></p>
<p><code>Loop</code> uses the ``temporary'' variable <code>temp</code> to hold the old value of the <code>cdr</code> of <code>x</code>, since the <code>set-cdr!</code> on the next line destroys the <code>cdr</code>. Explain what <code>mystery</code> does in general. Suppose <code>v</code> is defined by <code>(define v (list 'a 'b 'c 'd))</code>. Draw the box-and-pointer diagram that represents the list to which <code>v</code> is bound. Suppose that we now evaluate <code>(define w (mystery v))</code>. Draw box-and-pointer diagrams that show the structures <code>v</code> and <code>w</code> after evaluating this expression. What would be printed as the values of <code>v</code> and <code>w</code> ?</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_355">Sharing and identity</a></h4>
<p>We mentioned in section <a href="book-Z-H-20.html#%_sec_3.1.3">3.1.3</a> the theoretical issues of ``sameness'' and ``change'' raised by the introduction of assignment. These issues arise in practice when individual pairs are <em>shared</em> among different data objects. For example, consider the structure formed by</p>
<p></p>
<p></p>
<p><code>(define x (list 'a 'b)) (define z1 (cons x x))</code></p>
<p></p>
<p>As shown in figure <a href="#%_fig_3.16">3.16</a>, <code>z1</code> is a pair whose <code>car</code> and <code>cdr</code> both point to the same pair <code>x</code>. This sharing of <code>x</code> by the <code>car</code> and <code>cdr</code> of <code>z1</code> is a consequence of the straightforward way in which <code>cons</code> is implemented. In general, using <code>cons</code> to construct lists will result in an interlinked structure of pairs in which many individual pairs are shared by many different structures.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-17.gif" /></p>
<p><strong>Figure 3.16:</strong>  The list <code>z1</code> formed by <code>(cons x x)</code>.</p>
<p></p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-18.gif" /></p>
<p><strong>Figure 3.17:</strong>  The list <code>z2</code> formed by <code>(cons (list 'a 'b) (list 'a 'b))</code>.</p>
<p></p>
<p>In contrast to figure <a href="#%_fig_3.16">3.16</a>, figure <a href="#%_fig_3.17">3.17</a> shows the structure created by</p>
<p></p>
<p></p>
<p><code>(define z2 (cons (list 'a 'b) (list 'a 'b)))</code></p>
<p></p>
<p>In this structure, the pairs in the two <code>(a b)</code> lists are distinct, although the actual symbols are shared.<a href="#footnote_Temp_356"><sup>19</sup></a></p>
<p>When thought of as a list, <code>z1</code> and <code>z2</code> both represent ``the same'' list, <code>((a b) a b)</code>. In general, sharing is completely undetectable if we operate on lists using only <code>cons</code>, <code>car</code>, and <code>cdr</code>. However, if we allow mutators on list structure, sharing becomes significant. As an example of the difference that sharing can make, consider the following procedure, which modifies the <code>car</code> of the structure to which it is applied:</p>
<p></p>
<p></p>
<p><code>(define (set-to-wow! x)   (set-car! (car x) 'wow)   x)</code></p>
<p></p>
<p>Even though <code>z1</code> and <code>z2</code> are ``the same'' structure, applying <code>set-to-wow!</code> to them yields different results. With <code>z1</code>, altering the <code>car</code> also changes the <code>cdr</code>, because in <code>z1</code> the <code>car</code> and the <code>cdr</code> are the same pair. With <code>z2</code>, the <code>car</code> and <code>cdr</code> are distinct, so <code>set-to-wow!</code> modifies only the <code>car</code>:</p>
<p></p>
<p></p>
<p><code>z1 ((a b) a b)  (set-to-wow! z1) ((wow b) wow b)  z2 ((a b) a b)  (set-to-wow! z2) ((wow b) a b)</code></p>
<p></p>
<p></p>
<p>One way to detect sharing in list structures is to use the predicate <code>eq?</code>, which we introduced in section <a href="book-Z-H-16.html#%_sec_2.3.1">2.3.1</a> as a way to test whether two symbols are equal. More generally, <code>(eq? x y)</code> tests whether <code>x</code> and <code>y</code> are the same object (that is, whether <code>x</code> and <code>y</code> are equal as pointers). Thus, with <code>z1</code> and <code>z2</code> as defined in figures <a href="#%_fig_3.16">3.16</a> and <a href="#%_fig_3.17">3.17</a>, <code>(eq? (car z1) (cdr z1))</code> is true and <code>(eq? (car z2) (cdr z2))</code> is false.</p>
<p>As will be seen in the following sections, we can exploit sharing to greatly extend the repertoire of data structures that can be represented by pairs. On the other hand, sharing can also be dangerous, since modifications made to structures will also affect other structures that happen to share the modified parts. The mutation operations <code>set-car!</code> and <code>set-cdr!</code> should be used with care; unless we have a good understanding of how our data objects are shared, mutation can have unanticipated results.<a href="#footnote_Temp_357"><sup>20</sup></a></p>
<p></p>
<p><strong>Exercise 3.15.</strong>  Draw box-and-pointer diagrams to explain the effect of <code>set-to-wow!</code> on the structures <code>z1</code> and <code>z2</code> above.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.16.</strong>  Ben Bitdiddle decides to write a procedure to count the number of pairs in any list structure. ``It's easy,'' he reasons. ``The number of pairs in any structure is the number in the <code>car</code> plus the number in the <code>cdr</code> plus one more to count the current pair.'' So Ben writes the following procedure:</p>
<p></p>
<p></p>
<p><code>(define (count-pairs x)   (if (not (pair? x))       0       (+ (count-pairs (car x))          (count-pairs (cdr x))          1)))</code></p>
<p></p>
<p>Show that this procedure is not correct. In particular, draw box-and-pointer diagrams representing list structures made up of exactly three pairs for which Ben's procedure would return 3; return 4; return 7; never return at all.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.17.</strong>  Devise a correct version of the <code>count-pairs</code> procedure of exercise <a href="#%_thm_3.16">3.16</a> that returns the number of distinct pairs in any structure. (Hint: Traverse the structure, maintaining an auxiliary data structure that is used to keep track of which pairs have already been counted.)</p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.18.</strong>  Write a procedure that examines a list and determines whether it contains a cycle, that is, whether a program that tried to find the end of the list by taking successive <code>cdr</code>s would go into an infinite loop. Exercise <a href="#%_thm_3.13">3.13</a> constructed such lists.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.19.</strong>  Redo exercise <a href="#%_thm_3.18">3.18</a> using an algorithm that takes only a constant amount of space. (This requires a very clever idea.)</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_363">Mutation is just assignment</a></h4>
<p>When we introduced compound data, we observed in section <a href="book-Z-H-14.html#%_sec_2.1.3">2.1.3</a> that pairs can be represented purely in terms of procedures:</p>
<p></p>
<p></p>
<p><code>(define (cons x y)   (define (dispatch m)     (cond ((eq? m 'car) x)           ((eq? m 'cdr) y)           (else (error &quot;Undefined operation -- CONS&quot; m))))   dispatch) (define (car z) (z 'car)) (define (cdr z) (z 'cdr))</code></p>
<p></p>
<p>The same observation is true for mutable data. We can implement mutable data objects as procedures using assignment and local state. For instance, we can extend the above pair implementation to handle <code>set-car!</code> and <code>set-cdr!</code> in a manner analogous to the way we implemented bank accounts using <code>make-account</code> in section <a href="book-Z-H-20.html#%_sec_3.1.1">3.1.1</a>:</p>
<p></p>
<p></p>
<p><code>(define (cons x y)   (define (set-x! v) (set! x v))   (define (set-y! v) (set! y v))   (define (dispatch m)     (cond ((eq? m 'car) x)           ((eq? m 'cdr) y)           ((eq? m 'set-car!) set-x!)           ((eq? m 'set-cdr!) set-y!)           (else (error &quot;Undefined operation -- CONS&quot; m))))   dispatch) (define (car z) (z 'car)) (define (cdr z) (z 'cdr)) (define (set-car! z new-value)   ((z 'set-car!) new-value)   z) (define (set-cdr! z new-value)   ((z 'set-cdr!) new-value)   z)</code></p>
<p></p>
<p></p>
<p>Assignment is all that is needed, theoretically, to account for the behavior of mutable data. As soon as we admit <code>set!</code> to our language, we raise all the issues, not only of assignment, but of mutable data in general.<a href="#footnote_Temp_364"><sup>21</sup></a></p>
<p></p>
<p><strong>Exercise 3.20.</strong>  Draw environment diagrams to illustrate the evaluation of the sequence of expressions</p>
<p></p>
<p></p>
<p><code>(define x (cons 1 2)) (define z (cons x x)) (set-car! (cdr z) 17) (car x) 17</code></p>
<p></p>
<p>using the procedural implementation of pairs given above. (Compare exercise <a href="book-Z-H-21.html#%_thm_3.11">3.11</a>.)</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.3.2">3.3.2  Representing Queues</a></h3>
<p>The mutators <code>set-car!</code> and <code>set-cdr!</code> enable us to use pairs to construct data structures that cannot be built with <code>cons</code>, <code>car</code>, and <code>cdr</code> alone. This section shows how to use pairs to represent a data structure called a queue. Section <a href="#%_sec_3.3.3">3.3.3</a> will show how to represent data structures called tables.</p>
<p>A <em>queue</em> is a sequence in which items are inserted at one end (called the <em>rear</em> of the queue) and deleted from the other end (the <em>front</em>). Figure <a href="#%_fig_3.18">3.18</a> shows an initially empty queue in which the items <code>a</code> and <code>b</code> are inserted. Then <code>a</code> is removed, <code>c</code> and <code>d</code> are inserted, and <code>b</code> is removed. Because items are always removed in the order in which they are inserted, a queue is sometimes called a <em>FIFO</em> (first in, first out) buffer.</p>
<p></p>
<p></p>
<table>
<tbody>
<tr class="odd">
<td align="left">Operation</td>
<td align="left">Resulting Queue</td>
</tr>
<tr class="even">
<td align="left"><code>(define q (make-queue))</code></td>
<td align="left"></td>
</tr>
<tr class="odd">
<td align="left"><code>(insert-queue! q 'a)</code></td>
<td align="left"><code>a</code></td>
</tr>
<tr class="even">
<td align="left"><code>(insert-queue! q 'b)</code></td>
<td align="left"><code>a b</code></td>
</tr>
<tr class="odd">
<td align="left"><code>(delete-queue! q)</code></td>
<td align="left"><code>b</code></td>
</tr>
<tr class="even">
<td align="left"><code>(insert-queue! q 'c)</code></td>
<td align="left"><code>b c</code></td>
</tr>
<tr class="odd">
<td align="left"><code>(insert-queue! q 'd)</code></td>
<td align="left"><code>b c d</code></td>
</tr>
<tr class="even">
<td align="left"><code>(delete-queue! q)</code></td>
<td align="left"><code>c d</code></td>
</tr>
</tbody>
</table>
<p><strong>Figure 3.18:</strong>  Queue operations.</p>
<p></p>
<p>In terms of data abstraction, we can regard a queue as defined by the following set of operations:</p>
<p></p>
<ul>
<li>a constructor:<br /> <code>(make-queue)</code><br /> returns an empty queue (a queue containing no items).</li>
<li>two selectors:<br /> <code>(empty-queue? &lt;queue&gt;)</code><br /> tests if the queue is empty.<br /> <code>(front-queue &lt;queue&gt;)</code><br /> returns the object at the front of the queue, signaling an error if the queue is empty; it does not modify the queue.</li>
<li>two mutators:<br /> <code>(insert-queue! &lt;queue&gt; &lt;item&gt;)</code><br /> inserts the item at the rear of the queue and returns the modified queue as its value.<br /> <code>(delete-queue! &lt;queue&gt;)</code><br /> removes the item at the front of the queue and returns the modified queue as its value, signaling an error if the queue is empty before the deletion.</li>
</ul>
<p></p>
<p>Because a queue is a sequence of items, we could certainly represent it as an ordinary list; the front of the queue would be the <code>car</code> of the list, inserting an item in the queue would amount to appending a new element at the end of the list, and deleting an item from the queue would just be taking the <code>cdr</code> of the list. However, this representation is inefficient, because in order to insert an item we must scan the list until we reach the end. Since the only method we have for scanning a list is by successive <code>cdr</code> operations, this scanning requires <img src="book-Z-G-D-3.gif" />(<em>n</em>) steps for a list of <em>n</em> items. A simple modification to the list representation overcomes this disadvantage by allowing the queue operations to be implemented so that they require <img src="book-Z-G-D-3.gif" />(1) steps; that is, so that the number of steps needed is independent of the length of the queue.</p>
<p>The difficulty with the list representation arises from the need to scan to find the end of the list. The reason we need to scan is that, although the standard way of representing a list as a chain of pairs readily provides us with a pointer to the beginning of the list, it gives us no easily accessible pointer to the end. The modification that avoids the drawback is to represent the queue as a list, together with an additional pointer that indicates the final pair in the list. That way, when we go to insert an item, we can consult the rear pointer and so avoid scanning the list.</p>
<p>A queue is represented, then, as a pair of pointers, <code>front-ptr</code> and <code>rear-ptr</code>, which indicate, respectively, the first and last pairs in an ordinary list. Since we would like the queue to be an identifiable object, we can use <code>cons</code> to combine the two pointers. Thus, the queue itself will be the <code>cons</code> of the two pointers. Figure <a href="#%_fig_3.19">3.19</a> illustrates this representation.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-19.gif" /></p>
<p><strong>Figure 3.19:</strong>  Implementation of a queue as a list with front and rear pointers.</p>
<p></p>
<p>To define the queue operations we use the following procedures, which enable us to select and to modify the front and rear pointers of a queue:</p>
<p></p>
<p></p>
<p><code>(define (front-ptr queue) (car queue)) (define (rear-ptr queue) (cdr queue)) (define (set-front-ptr! queue item) (set-car! queue item)) (define (set-rear-ptr! queue item) (set-cdr! queue item))</code></p>
<p></p>
<p></p>
<p>Now we can implement the actual queue operations. We will consider a queue to be empty if its front pointer is the empty list:</p>
<p></p>
<p></p>
<p><code>(define (empty-queue? queue) (null? (front-ptr queue)))</code></p>
<p></p>
<p>The <code>make-queue</code> constructor returns, as an initially empty queue, a pair whose <code>car</code> and <code>cdr</code> are both the empty list:</p>
<p></p>
<p></p>
<p><code>(define (make-queue) (cons '() '()))</code></p>
<p></p>
<p>To select the item at the front of the queue, we return the <code>car</code> of the pair indicated by the front pointer:</p>
<p></p>
<p></p>
<p><code>(define (front-queue queue)   (if (empty-queue? queue)       (error &quot;FRONT called with an empty queue&quot; queue)       (car (front-ptr queue))))</code></p>
<p></p>
<p></p>
<p>To insert an item in a queue, we follow the method whose result is indicated in figure <a href="#%_fig_3.20">3.20</a>. We first create a new pair whose <code>car</code> is the item to be inserted and whose <code>cdr</code> is the empty list. If the queue was initially empty, we set the front and rear pointers of the queue to this new pair. Otherwise, we modify the final pair in the queue to point to the new pair, and also set the rear pointer to the new pair.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-20.gif" /></p>
<p><strong>Figure 3.20:</strong>  Result of using <code>(insert-queue! q 'd)</code> on the queue of figure <a href="#%_fig_3.19">3.19</a>.</p>
<p></p>
<p></p>
<p></p>
<p><code>(define (insert-queue! queue item)   (let ((new-pair (cons item '())))     (cond ((empty-queue? queue)            (set-front-ptr! queue new-pair)            (set-rear-ptr! queue new-pair)            queue)           (else            (set-cdr! (rear-ptr queue) new-pair)            (set-rear-ptr! queue new-pair)            queue)))) </code></p>
<p></p>
<p></p>
<p>To delete the item at the front of the queue, we merely modify the front pointer so that it now points at the second item in the queue, which can be found by following the <code>cdr</code> pointer of the first item (see figure <a href="#%_fig_3.21">3.21</a>):<a href="#footnote_Temp_366"><sup>22</sup></a></p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-21.gif" /></p>
<p><strong>Figure 3.21:</strong>  Result of using <code>(delete-queue! q)</code> on the queue of figure <a href="#%_fig_3.20">3.20</a>.</p>
<p></p>
<p></p>
<p></p>
<p><code>(define (delete-queue! queue)   (cond ((empty-queue? queue)          (error &quot;DELETE! called with an empty queue&quot; queue))         (else          (set-front-ptr! queue (cdr (front-ptr queue)))          queue))) </code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.21.</strong>  Ben Bitdiddle decides to test the queue implementation described above. He types in the procedures to the Lisp interpreter and proceeds to try them out:</p>
<p></p>
<p></p>
<p><code>(define q1 (make-queue)) (insert-queue! q1 'a) ((a) a) (insert-queue! q1 'b) ((a b) b) (delete-queue! q1) ((b) b) (delete-queue! q1) (() b)</code></p>
<p></p>
<p>``It's all wrong!'' he complains. ``The interpreter's response shows that the last item is inserted into the queue twice. And when I delete both items, the second <code>b</code> is still there, so the queue isn't empty, even though it's supposed to be.'' Eva Lu Ator suggests that Ben has misunderstood what is happening. ``It's not that the items are going into the queue twice,'' she explains. ``It's just that the standard Lisp printer doesn't know how to make sense of the queue representation. If you want to see the queue printed correctly, you'll have to define your own print procedure for queues.'' Explain what Eva Lu is talking about. In particular, show why Ben's examples produce the printed results that they do. Define a procedure <code>print-queue</code> that takes a queue as input and prints the sequence of items in the queue.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.22.</strong>  Instead of representing a queue as a pair of pointers, we can build a queue as a procedure with local state. The local state will consist of pointers to the beginning and the end of an ordinary list. Thus, the <code>make-queue</code> procedure will have the form</p>
<p></p>
<p></p>
<p><code>(define (make-queue)   (let ((front-ptr ...</code>)<br />         (rear-ptr <code>...</code>))<br />     &lt;<em>definitions of internal procedures</em>&gt;<br />     (define (dispatch m) <code>...</code>)<br />     dispatch))<br /></p>
<p></p>
<p>Complete the definition of <code>make-queue</code> and provide implementations of the queue operations using this representation.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.23.</strong>  A <em>deque</em> (``double-ended queue'') is a sequence in which items can be inserted and deleted at either the front or the rear. Operations on deques are the constructor <code>make-deque</code>, the predicate <code>empty-deque?</code>, selectors <code>front-deque</code> and <code>rear-deque</code>, and mutators <code>front-insert-deque!</code>, <code>rear-insert-deque!</code>, <code>front-delete-deque!</code>, and <code>rear-delete-deque!</code>. Show how to represent deques using pairs, and give implementations of the operations.<a href="#footnote_Temp_370"><sup>23</sup></a> All operations should be accomplished in <img src="book-Z-G-D-3.gif" />(1) steps.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.3.3">3.3.3  Representing Tables</a></h3>
<p>When we studied various ways of representing sets in chapter 2, we mentioned in section <a href="book-Z-H-16.html#%_sec_2.3.3">2.3.3</a> the task of maintaining a table of records indexed by identifying keys. In the implementation of data-directed programming in section <a href="book-Z-H-17.html#%_sec_2.4.3">2.4.3</a>, we made extensive use of two-dimensional tables, in which information is stored and retrieved using two keys. Here we see how to build tables as mutable list structures.</p>
<p>We first consider a one-dimensional table, in which each value is stored under a single key. We implement the table as a list of records, each of which is implemented as a pair consisting of a key and the associated value. The records are glued together to form a list by pairs whose <code>car</code>s point to successive records. These gluing pairs are called the <em>backbone</em> of the table. In order to have a place that we can change when we add a new record to the table, we build the table as a <em>headed list</em>. A headed list has a special backbone pair at the beginning, which holds a dummy ``record'' -- in this case the arbitrarily chosen symbol <code>*table*</code>. Figure <a href="#%_fig_3.22">3.22</a> shows the box-and-pointer diagram for the table</p>
<p></p>
<p></p>
<p><code>a:  1 b:  2 c:  3</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-22.gif" /></p>
<p><strong>Figure 3.22:</strong>  A table represented as a headed list.</p>
<p></p>
<p>To extract information from a table we use the <code>lookup</code> procedure, which takes a key as argument and returns the associated value (or false if there is no value stored under that key). <code>Lookup</code> is defined in terms of the <code>assoc</code> operation, which expects a key and a list of records as arguments. Note that <code>assoc</code> never sees the dummy record. <code>Assoc</code> returns the record that has the given key as its <code>car</code>.<a href="#footnote_Temp_371"><sup>24</sup></a> <code>Lookup</code> then checks to see that the resulting record returned by <code>assoc</code> is not false, and returns the value (the <code>cdr</code>) of the record.</p>
<p></p>
<p></p>
<p><code>(define (lookup key table)   (let ((record (assoc key (cdr table))))     (if record         (cdr record)         false))) (define (assoc key records)   (cond ((null? records) false)         ((equal? key (caar records)) (car records))         (else (assoc key (cdr records)))))</code></p>
<p></p>
<p></p>
<p>To insert a value in a table under a specified key, we first use <code>assoc</code> to see if there is already a record in the table with this key. If not, we form a new record by <code>cons</code>ing the key with the value, and insert this at the head of the table's list of records, after the dummy record. If there already is a record with this key, we set the <code>cdr</code> of this record to the designated new value. The header of the table provides us with a fixed location to modify in order to insert the new record.<a href="#footnote_Temp_372"><sup>25</sup></a></p>
<p></p>
<p></p>
<p><code>(define (insert! key value table)   (let ((record (assoc key (cdr table))))     (if record         (set-cdr! record value)         (set-cdr! table                   (cons (cons key value) (cdr table)))))   'ok)</code></p>
<p></p>
<p></p>
<p>To construct a new table, we simply create a list containing the symbol <code>*table*</code>:</p>
<p></p>
<p></p>
<p><code>(define (make-table)   (list '*table*))</code></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_373">Two-dimensional tables</a></h4>
<p>In a two-dimensional table, each value is indexed by two keys. We can construct such a table as a one-dimensional table in which each key identifies a subtable. Figure <a href="#%_fig_3.23">3.23</a> shows the box-and-pointer diagram for the table</p>
<p></p>
<p><code>math:     +:  43     -:  45     *:  42 letters:     a:  97     b:  98</code></p>
<p></p>
<p>which has two subtables. (The subtables don't need a special header symbol, since the key that identifies the subtable serves this purpose.)</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-23.gif" /></p>
<p><strong>Figure 3.23:</strong>  A two-dimensional table.</p>
<p></p>
<p>When we look up an item, we use the first key to identify the correct subtable. Then we use the second key to identify the record within the subtable.</p>
<p></p>
<p></p>
<p><code>(define (lookup key-1 key-2 table)   (let ((subtable (assoc key-1 (cdr table))))     (if subtable         (let ((record (assoc key-2 (cdr subtable))))           (if record               (cdr record)               false))         false)))</code></p>
<p></p>
<p></p>
<p>To insert a new item under a pair of keys, we use <code>assoc</code> to see if there is a subtable stored under the first key. If not, we build a new subtable containing the single record (<code>key-2</code>, <code>value</code>) and insert it into the table under the first key. If a subtable already exists for the first key, we insert the new record into this subtable, using the insertion method for one-dimensional tables described above:</p>
<p></p>
<p></p>
<p><code>(define (insert! key-1 key-2 value table)   (let ((subtable (assoc key-1 (cdr table))))     (if subtable         (let ((record (assoc key-2 (cdr subtable))))           (if record               (set-cdr! record value)               (set-cdr! subtable                         (cons (cons key-2 value)                               (cdr subtable)))))         (set-cdr! table                   (cons (list key-1                               (cons key-2 value))                         (cdr table)))))   'ok)</code></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_374">Creating local tables</a></h4>
<p>The <code>lookup</code> and <code>insert!</code> operations defined above take the table as an argument. This enables us to use programs that access more than one table. Another way to deal with multiple tables is to have separate <code>lookup</code> and <code>insert!</code> procedures for each table. We can do this by representing a table procedurally, as an object that maintains an internal table as part of its local state. When sent an appropriate message, this ``table object'' supplies the procedure with which to operate on the internal table. Here is a generator for two-dimensional tables represented in this fashion:</p>
<p></p>
<p></p>
<p><code>(define (make-table)   (let ((local-table (list '*table*)))     (define (lookup key-1 key-2)       (let ((subtable (assoc key-1 (cdr local-table))))         (if subtable             (let ((record (assoc key-2 (cdr subtable))))               (if record                   (cdr record)                   false))             false)))     (define (insert! key-1 key-2 value)       (let ((subtable (assoc key-1 (cdr local-table))))         (if subtable             (let ((record (assoc key-2 (cdr subtable))))               (if record                   (set-cdr! record value)                   (set-cdr! subtable                             (cons (cons key-2 value)                                   (cdr subtable)))))             (set-cdr! local-table                       (cons (list key-1                                   (cons key-2 value))                             (cdr local-table)))))       'ok)         (define (dispatch m)       (cond ((eq? m 'lookup-proc) lookup)             ((eq? m 'insert-proc!) insert!)             (else (error &quot;Unknown operation -- TABLE&quot; m))))     dispatch))</code></p>
<p></p>
<p></p>
<p>Using <code>make-table</code>, we could implement the <code>get</code> and <code>put</code> operations used in section <a href="book-Z-H-17.html#%_sec_2.4.3">2.4.3</a> for data-directed programming, as follows:</p>
<p></p>
<p></p>
<p><code>(define operation-table (make-table)) (define get (operation-table 'lookup-proc)) (define put (operation-table 'insert-proc!))</code></p>
<p></p>
<p><code>Get</code> takes as arguments two keys, and <code>put</code> takes as arguments two keys and a value. Both operations access the same local table, which is encapsulated within the object created by the call to <code>make-table</code>.</p>
<p><strong>Exercise 3.24.</strong>  In the table implementations above, the keys are tested for equality using <code>equal?</code> (called by <code>assoc</code>). This is not always the appropriate test. For instance, we might have a table with numeric keys in which we don't need an exact match to the number we're looking up, but only a number within some tolerance of it. Design a table constructor <code>make-table</code> that takes as an argument a <code>same-key?</code> procedure that will be used to test ``equality'' of keys. <code>Make-table</code> should return a <code>dispatch</code> procedure that can be used to access appropriate <code>lookup</code> and <code>insert!</code> procedures for a local table.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.25.</strong>  Generalizing one- and two-dimensional tables, show how to implement a table in which values are stored under an arbitrary number of keys and different values may be stored under different numbers of keys. The <code>lookup</code> and <code>insert!</code> procedures should take as input a list of keys used to access the table.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.26.</strong>  To search a table as implemented above, one needs to scan through the list of records. This is basically the unordered list representation of section <a href="book-Z-H-16.html#%_sec_2.3.3">2.3.3</a>. For large tables, it may be more efficient to structure the table in a different manner. Describe a table implementation where the (key, value) records are organized using a binary tree, assuming that keys can be ordered in some way (e.g., numerically or alphabetically). (Compare exercise <a href="book-Z-H-16.html#%_thm_2.66">2.66</a> of chapter 2.)</p>
<p></p>
<p></p>
<p><strong>Exercise 3.27.</strong>  <em>Memoization</em> (also called <em>tabulation</em>) is a technique that enables a procedure to record, in a local table, values that have previously been computed. This technique can make a vast difference in the performance of a program. A memoized procedure maintains a table in which values of previous calls are stored using as keys the arguments that produced the values. When the memoized procedure is asked to compute a value, it first checks the table to see if the value is already there and, if so, just returns that value. Otherwise, it computes the new value in the ordinary way and stores this in the table. As an example of memoization, recall from section <a href="book-Z-H-11.html#%_sec_1.2.2">1.2.2</a> the exponential process for computing Fibonacci numbers:</p>
<p></p>
<p></p>
<p><code>(define (fib n)   (cond ((= n 0) 0)         ((= n 1) 1)         (else (+ (fib (- n 1))                  (fib (- n 2))))))</code></p>
<p></p>
<p>The memoized version of the same procedure is</p>
<p></p>
<p></p>
<p><code>(define memo-fib   (memoize (lambda (n)              (cond ((= n 0) 0)                    ((= n 1) 1)                    (else (+ (memo-fib (- n 1))                             (memo-fib (- n 2))))))))</code></p>
<p></p>
<p>where the memoizer is defined as</p>
<p></p>
<p><code>(define (memoize f)   (let ((table (make-table)))     (lambda (x)       (let ((previously-computed-result (lookup x table)))         (or previously-computed-result             (let ((result (f x)))               (insert! x result table)               result))))))</code></p>
<p></p>
<p>Draw an environment diagram to analyze the computation of <code>(memo-fib 3)</code>. Explain why <code>memo-fib</code> computes the <em>n</em>th Fibonacci number in a number of steps proportional to <em>n</em>. Would the scheme still work if we had simply defined <code>memo-fib</code> to be <code>(memoize fib)</code>?</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.3.4">3.3.4  A Simulator for Digital Circuits</a></h3>
<p>Designing complex digital systems, such as computers, is an important engineering activity. Digital systems are constructed by interconnecting simple elements. Although the behavior of these individual elements is simple, networks of them can have very complex behavior. Computer simulation of proposed circuit designs is an important tool used by digital systems engineers. In this section we design a system for performing digital logic simulations. This system typifies a kind of program called an <em>event-driven simulation</em>, in which actions (``events'') trigger further events that happen at a later time, which in turn trigger more events, and so so.</p>
<p>Our computational model of a circuit will be composed of objects that correspond to the elementary components from which the circuit is constructed. There are <em>wires</em>, which carry <em>digital signals</em>. A digital signal may at any moment have only one of two possible values, 0 and 1. There are also various types of digital <em>function boxes</em>, which connect wires carrying input signals to other output wires. Such boxes produce output signals computed from their input signals. The output signal is delayed by a time that depends on the type of the function box. For example, an <em>inverter</em> is a primitive function box that inverts its input. If the input signal to an inverter changes to 0, then one inverter-delay later the inverter will change its output signal to 1. If the input signal to an inverter changes to 1, then one inverter-delay later the inverter will change its output signal to 0. We draw an inverter symbolically as in figure <a href="#%_fig_3.24">3.24</a>. An <em>and-gate</em>, also shown in figure <a href="#%_fig_3.24">3.24</a>, is a primitive function box with two inputs and one output. It drives its output signal to a value that is the <em>logical and</em> of the inputs. That is, if both of its input signals become 1, then one and-gate-delay time later the and-gate will force its output signal to be 1; otherwise the output will be 0. An <em>or-gate</em> is a similar two-input primitive function box that drives its output signal to a value that is the <em>logical or</em> of the inputs. That is, the output will become 1 if at least one of the input signals is 1; otherwise the output will become 0.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-24.gif" /></p>
<p><strong>Figure 3.24:</strong>  Primitive functions in the digital logic simulator.</p>
<p></p>
<p>We can connect primitive functions together to construct more complex functions. To accomplish this we wire the outputs of some function boxes to the inputs of other function boxes. For example, the <em>half-adder</em> circuit shown in figure <a href="#%_fig_3.25">3.25</a> consists of an or-gate, two and-gates, and an inverter. It takes two input signals, A and B, and has two output signals, S and C. S will become 1 whenever precisely one of A and B is 1, and C will become 1 whenever A and B are both 1. We can see from the figure that, because of the delays involved, the outputs may be generated at different times. Many of the difficulties in the design of digital circuits arise from this fact.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-25.gif" /></p>
<p><strong>Figure 3.25:</strong>  A half-adder circuit.</p>
<p></p>
<p>We will now build a program for modeling the digital logic circuits we wish to study. The program will construct computational objects modeling the wires, which will ``hold'' the signals. Function boxes will be modeled by procedures that enforce the correct relationships among the signals.</p>
<p>One basic element of our simulation will be a procedure <code>make-wire</code>, which constructs wires. For example, we can construct six wires as follows:</p>
<p></p>
<p></p>
<p><code>(define a (make-wire)) (define b (make-wire)) (define c (make-wire))  (define d (make-wire)) (define e (make-wire)) (define s (make-wire))</code></p>
<p></p>
<p>We attach a function box to a set of wires by calling a procedure that constructs that kind of box. The arguments to the constructor procedure are the wires to be attached to the box. For example, given that we can construct and-gates, or-gates, and inverters, we can wire together the half-adder shown in figure <a href="#%_fig_3.25">3.25</a>:</p>
<p></p>
<p></p>
<p><code>(or-gate a b d) ok  (and-gate a b c) ok  (inverter c e) ok  (and-gate d e s) ok</code></p>
<p></p>
<p></p>
<p>Better yet, we can explicitly name this operation by defining a procedure <code>half-adder</code> that constructs this circuit, given the four external wires to be attached to the half-adder:</p>
<p></p>
<p></p>
<p><code>(define (half-adder a b s c)   (let ((d (make-wire)) (e (make-wire)))     (or-gate a b d)     (and-gate a b c)     (inverter c e)     (and-gate d e s)     'ok))</code></p>
<p></p>
<p>The advantage of making this definition is that we can use <code>half-adder</code> itself as a building block in creating more complex circuits. Figure <a href="#%_fig_3.26">3.26</a>, for example, shows a <em>full-adder</em> composed of two half-adders and an or-gate.<a href="#footnote_Temp_379"><sup>26</sup></a> We can construct a full-adder as follows:</p>
<p></p>
<p></p>
<p><code>(define (full-adder a b c-in sum c-out)   (let ((s (make-wire))         (c1 (make-wire))         (c2 (make-wire)))     (half-adder b c-in s c1)     (half-adder a s sum c2)     (or-gate c1 c2 c-out)     'ok))</code></p>
<p></p>
<p>Having defined <code>full-adder</code> as a procedure, we can now use it as a building block for creating still more complex circuits. (For example, see exercise <a href="#%_thm_3.30">3.30</a>.)</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-26.gif" /></p>
<p><strong>Figure 3.26:</strong>  A full-adder circuit.</p>
<p></p>
<p>In essence, our simulator provides us with the tools to construct a language of circuits. If we adopt the general perspective on languages with which we approached the study of Lisp in section <a href="book-Z-H-10.html#%_sec_1.1">1.1</a>, we can say that the primitive function boxes form the primitive elements of the language, that wiring boxes together provides a means of combination, and that specifying wiring patterns as procedures serves as a means of abstraction.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_380">Primitive function boxes</a></h4>
<p>The primitive function boxes implement the ``forces'' by which a change in the signal on one wire influences the signals on other wires. To build function boxes, we use the following operations on wires:</p>
<p></p>
<p></p>
<ul>
<li><code>(get-signal &lt;wire&gt;)</code><br /> returns the current value of the signal on the wire.</li>
<li><code>(set-signal! &lt;wire&gt; &lt;new value&gt;)</code><br /> changes the value of the signal on the wire to the new value.</li>
<li><code>(add-action! &lt;wire&gt; &lt;procedure of no arguments&gt;)</code><br /> asserts that the designated procedure should be run whenever the signal on the wire changes value. Such procedures are the vehicles by which changes in the signal value on the wire are communicated to other wires.</li>
</ul>
<p>In addition, we will make use of a procedure <code>after-delay</code> that takes a time delay and a procedure to be run and executes the given procedure after the given delay.</p>
<p>Using these procedures, we can define the primitive digital logic functions. To connect an input to an output through an inverter, we use <code>add-action!</code> to associate with the input wire a procedure that will be run whenever the signal on the input wire changes value. The procedure computes the <code>logical-not</code> of the input signal, and then, after one <code>inverter-delay</code>, sets the output signal to be this new value:</p>
<p></p>
<p></p>
<p><code>(define (inverter input output)   (define (invert-input)     (let ((new-value (logical-not (get-signal input))))       (after-delay inverter-delay                    (lambda ()                      (set-signal! output new-value)))))   (add-action! input invert-input)   'ok) (define (logical-not s)   (cond ((= s 0) 1)         ((= s 1) 0)         (else (error &quot;Invalid signal&quot; s))))</code></p>
<p></p>
<p></p>
<p>An and-gate is a little more complex. The action procedure must be run if either of the inputs to the gate changes. It computes the <code>logical-and</code> (using a procedure analogous to <code>logical-not</code>) of the values of the signals on the input wires and sets up a change to the new value to occur on the output wire after one <code>and-gate-delay</code>.</p>
<p></p>
<p></p>
<p><code>(define (and-gate a1 a2 output)   (define (and-action-procedure)     (let ((new-value            (logical-and (get-signal a1) (get-signal a2))))       (after-delay and-gate-delay                    (lambda ()                      (set-signal! output new-value)))))   (add-action! a1 and-action-procedure)   (add-action! a2 and-action-procedure)   'ok)</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.28.</strong>  Define an or-gate as a primitive function box. Your <code>or-gate</code> constructor should be similar to <code>and-gate</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.29.</strong>  Another way to construct an or-gate is as a compound digital logic device, built from and-gates and inverters. Define a procedure <code>or-gate</code> that accomplishes this. What is the delay time of the or-gate in terms of <code>and-gate-delay</code> and <code>inverter-delay</code>?</p>
<p></p>
<p></p>
<p><strong>Exercise 3.30.</strong>  Figure <a href="#%_fig_3.27">3.27</a> shows a <em>ripple-carry adder</em> formed by stringing together <em>n</em> full-adders. This is the simplest form of parallel adder for adding two <em>n</em>-bit binary numbers. The inputs A<sub>1</sub>, A<sub>2</sub>, A<sub>3</sub>, <code>...</code>, A<sub><em>n</em></sub> and B<sub>1</sub>, B<sub>2</sub>, B<sub>3</sub>, <code>...</code>, B<sub><em>n</em></sub> are the two binary numbers to be added (each A<sub><em>k</em></sub> and B<sub><em>k</em></sub> is a 0 or a 1). The circuit generates S<sub>1</sub>, S<sub>2</sub>, S<sub>3</sub>, <code>...</code>, S<sub><em>n</em></sub>, the <em>n</em> bits of the sum, and C, the carry from the addition. Write a procedure <code>ripple-carry-adder</code> that generates this circuit. The procedure should take as arguments three lists of <em>n</em> wires each -- the A<sub><em>k</em></sub>, the B<sub><em>k</em></sub>, and the S<sub><em>k</em></sub> -- and also another wire C. The major drawback of the ripple-carry adder is the need to wait for the carry signals to propagate. What is the delay needed to obtain the complete output from an <em>n</em>-bit ripple-carry adder, expressed in terms of the delays for and-gates, or-gates, and inverters?</p>
<p></p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-27.gif" /></p>
<p><strong>Figure 3.27:</strong>  A ripple-carry adder for <em>n</em>-bit numbers.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_384">Representing wires</a></h4>
<p>A wire in our simulation will be a computational object with two local state variables: a <code>signal-value</code> (initially taken to be 0) and a collection of <code>action-procedures</code> to be run when the signal changes value. We implement the wire, using message-passing style, as a collection of local procedures together with a <code>dispatch</code> procedure that selects the appropriate local operation, just as we did with the simple bank-account object in section  <a href="book-Z-H-20.html#%_sec_3.1.1">3.1.1</a>:</p>
<p></p>
<p></p>
<p><code>(define (make-wire)   (let ((signal-value 0) (action-procedures '()))     (define (set-my-signal! new-value)       (if (not (= signal-value new-value))           (begin (set! signal-value new-value)                  (call-each action-procedures))           'done))     (define (accept-action-procedure! proc)       (set! action-procedures (cons proc action-procedures))       (proc))     (define (dispatch m)       (cond ((eq? m 'get-signal) signal-value)             ((eq? m 'set-signal!) set-my-signal!)             ((eq? m 'add-action!) accept-action-procedure!)             (else (error &quot;Unknown operation -- WIRE&quot; m))))     dispatch))</code></p>
<p></p>
<p>The local procedure <code>set-my-signal!</code> tests whether the new signal value changes the signal on the wire. If so, it runs each of the action procedures, using the following procedure <code>call-each</code>, which calls each of the items in a list of no-argument procedures:</p>
<p></p>
<p></p>
<p><code>(define (call-each procedures)   (if (null? procedures)       'done       (begin         ((car procedures))         (call-each (cdr procedures)))))</code></p>
<p></p>
<p>The local procedure <code>accept-action-procedure!</code> adds the given procedure to the list of procedures to be run, and then runs the new procedure once. (See exercise <a href="#%_thm_3.31">3.31</a>.)</p>
<p>With the local <code>dispatch</code> procedure set up as specified, we can provide the following procedures to access the local operations on wires:<a href="#footnote_Temp_385"><sup>27</sup></a></p>
<p></p>
<p></p>
<p><code>(define (get-signal wire)   (wire 'get-signal)) (define (set-signal! wire new-value)   ((wire 'set-signal!) new-value)) (define (add-action! wire action-procedure)   ((wire 'add-action!) action-procedure))</code></p>
<p></p>
<p></p>
<p>Wires, which have time-varying signals and may be incrementally attached to devices, are typical of mutable objects. We have modeled them as procedures with local state variables that are modified by assignment. When a new wire is created, a new set of state variables is allocated (by the <code>let</code> expression in <code>make-wire</code>) and a new <code>dispatch</code> procedure is constructed and returned, capturing the environment with the new state variables.</p>
<p>The wires are shared among the various devices that have been connected to them. Thus, a change made by an interaction with one device will affect all the other devices attached to the wire. The wire communicates the change to its neighbors by calling the action procedures provided to it when the connections were established.</p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_386">The agenda</a></h4>
<p>The only thing needed to complete the simulator is <code>after-delay</code>. The idea here is that we maintain a data structure, called an <em>agenda</em>, that contains a schedule of things to do. The following operations are defined for agendas:</p>
<p></p>
<p></p>
<ul>
<li><code>(make-agenda)</code><br /> returns a new empty agenda.</li>
<li><code>(empty-agenda? &lt;agenda&gt;)</code><br /> is true if the specified agenda is empty.</li>
<li><code>(first-agenda-item &lt;agenda&gt;)</code><br /> returns the first item on the agenda.</li>
<li><code>(remove-first-agenda-item! &lt;agenda&gt;)</code><br /> modifies the agenda by removing the first item.</li>
<li><code>(add-to-agenda! &lt;time&gt; &lt;action&gt; &lt;agenda&gt;)</code><br /> modifies the agenda by adding the given action procedure to be run at the specified time.</li>
<li><code>(current-time &lt;agenda&gt;)</code><br /> returns the current simulation time.</li>
</ul>
<p></p>
<p>The particular agenda that we use is denoted by <code>the-agenda</code>. The procedure <code>after-delay</code> adds new elements to <code>the-agenda</code>:</p>
<p></p>
<p></p>
<p><code>(define (after-delay delay action)   (add-to-agenda! (+ delay (current-time the-agenda))                   action                   the-agenda))</code></p>
<p></p>
<p></p>
<p>The simulation is driven by the procedure <code>propagate</code>, which operates on <code>the-agenda</code>, executing each procedure on the agenda in sequence. In general, as the simulation runs, new items will be added to the agenda, and <code>propagate</code> will continue the simulation as long as there are items on the agenda:</p>
<p></p>
<p></p>
<p><code>(define (propagate)   (if (empty-agenda? the-agenda)       'done       (let ((first-item (first-agenda-item the-agenda)))         (first-item)         (remove-first-agenda-item! the-agenda)         (propagate))))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_387">A sample simulation</a></h4>
<p>The following procedure, which places a ``probe'' on a wire, shows the simulator in action. The probe tells the wire that, whenever its signal changes value, it should print the new signal value, together with the current time and a name that identifies the wire:</p>
<p></p>
<p></p>
<p><code>(define (probe name wire)   (add-action! wire                (lambda ()                          (newline)                  (display name)                  (display &quot; &quot;)                  (display (current-time the-agenda))                  (display &quot;  New-value = &quot;)                  (display (get-signal wire)))))</code></p>
<p></p>
<p></p>
<p>We begin by initializing the agenda and specifying delays for the primitive function boxes:</p>
<p></p>
<p></p>
<p><code>(define the-agenda (make-agenda)) (define inverter-delay 2) (define and-gate-delay 3) (define or-gate-delay 5)</code></p>
<p></p>
<p>Now we define four wires, placing probes on two of them:</p>
<p></p>
<p></p>
<p><code>(define input-1 (make-wire)) (define input-2 (make-wire)) (define sum (make-wire)) (define carry (make-wire)) (probe 'sum sum) sum 0  New-value = 0 (probe 'carry carry) carry 0  New-value = 0</code></p>
<p></p>
<p>Next we connect the wires in a half-adder circuit (as in figure <a href="#%_fig_3.25">3.25</a>), set the signal on <code>input-1</code> to 1, and run the simulation:</p>
<p></p>
<p></p>
<p><code>(half-adder input-1 input-2 sum carry) ok (set-signal! input-1 1) done (propagate) sum 8  New-value = 1 done</code></p>
<p></p>
<p>The <code>sum</code> signal changes to 1 at time 8. We are now eight time units from the beginning of the simulation. At this point, we can set the signal on <code>input-2</code> to 1 and allow the values to propagate:</p>
<p></p>
<p></p>
<p><code>(set-signal! input-2 1) done (propagate) carry 11  New-value = 1 sum 16  New-value = 0 done</code></p>
<p></p>
<p>The <code>carry</code> changes to 1 at time 11 and the <code>sum</code> changes to 0 at time 16.</p>
<p><strong>Exercise 3.31.</strong>   The internal procedure <code>accept-action-procedure!</code> defined in <code>make-wire</code> specifies that when a new action procedure is added to a wire, the procedure is immediately run. Explain why this initialization is necessary. In particular, trace through the half-adder example in the paragraphs above and say how the system's response would differ if we had defined <code>accept-action-procedure!</code> as</p>
<p></p>
<p></p>
<p><code>(define (accept-action-procedure! proc)   (set! action-procedures (cons proc action-procedures)))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_389">Implementing the agenda</a></h4>
<p>Finally, we give details of the agenda data structure, which holds the procedures that are scheduled for future execution.</p>
<p>The agenda is made up of <em>time segments</em>. Each time segment is a pair consisting of a number (the time) and a queue (see exercise <a href="#%_thm_3.32">3.32</a>) that holds the procedures that are scheduled to be run during that time segment.</p>
<p></p>
<p></p>
<p><code>(define (make-time-segment time queue)   (cons time queue)) (define (segment-time s) (car s)) (define (segment-queue s) (cdr s))</code></p>
<p></p>
<p>We will operate on the time-segment queues using the queue operations described in section <a href="#%_sec_3.3.2">3.3.2</a>.</p>
<p>The agenda itself is a one-dimensional table of time segments. It differs from the tables described in section <a href="#%_sec_3.3.3">3.3.3</a> in that the segments will be sorted in order of increasing time. In addition, we store the <em>current time</em> (i.e., the time of the last action that was processed) at the head of the agenda. A newly constructed agenda has no time segments and has a current time of 0:<a href="#footnote_Temp_390"><sup>28</sup></a></p>
<p></p>
<p></p>
<p><code>(define (make-agenda) (list 0)) (define (current-time agenda) (car agenda)) (define (set-current-time! agenda time)   (set-car! agenda time)) (define (segments agenda) (cdr agenda)) (define (set-segments! agenda segments)   (set-cdr! agenda segments)) (define (first-segment agenda) (car (segments agenda))) (define (rest-segments agenda) (cdr (segments agenda)))</code></p>
<p></p>
<p></p>
<p>An agenda is empty if it has no time segments:</p>
<p></p>
<p><code>(define (empty-agenda? agenda)   (null? (segments agenda)))</code></p>
<p></p>
<p></p>
<p>To add an action to an agenda, we first check if the agenda is empty. If so, we create a time segment for the action and install this in the agenda. Otherwise, we scan the agenda, examining the time of each segment. If we find a segment for our appointed time, we add the action to the associated queue. If we reach a time later than the one to which we are appointed, we insert a new time segment into the agenda just before it. If we reach the end of the agenda, we must create a new time segment at the end.</p>
<p></p>
<p></p>
<p><code>(define (add-to-agenda! time action agenda)   (define (belongs-before? segments)     (or (null? segments)         (&lt; time (segment-time (car segments)))))   (define (make-new-time-segment time action)     (let ((q (make-queue)))       (insert-queue! q action)       (make-time-segment time q)))   (define (add-to-segments! segments)     (if (= (segment-time (car segments)) time)         (insert-queue! (segment-queue (car segments))                        action)         (let ((rest (cdr segments)))           (if (belongs-before? rest)               (set-cdr!                segments                (cons (make-new-time-segment time action)                      (cdr segments)))               (add-to-segments! rest)))))   (let ((segments (segments agenda)))     (if (belongs-before? segments)         (set-segments!          agenda          (cons (make-new-time-segment time action)                segments))         (add-to-segments! segments))))</code></p>
<p></p>
<p></p>
<p>The procedure that removes the first item from the agenda deletes the item at the front of the queue in the first time segment. If this deletion makes the time segment empty, we remove it from the list of segments:<a href="#footnote_Temp_391"><sup>29</sup></a></p>
<p></p>
<p></p>
<p><code>(define (remove-first-agenda-item! agenda)   (let ((q (segment-queue (first-segment agenda))))     (delete-queue! q)     (if (empty-queue? q)         (set-segments! agenda (rest-segments agenda)))))</code></p>
<p></p>
<p></p>
<p>The first agenda item is found at the head of the queue in the first time segment. Whenever we extract an item, we also update the current time:<a href="#footnote_Temp_392"><sup>30</sup></a></p>
<p></p>
<p></p>
<p><code>(define (first-agenda-item agenda)   (if (empty-agenda? agenda)       (error &quot;Agenda is empty -- FIRST-AGENDA-ITEM&quot;)       (let ((first-seg (first-segment agenda)))         (set-current-time! agenda (segment-time first-seg))         (front-queue (segment-queue first-seg)))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.32.</strong>  The procedures to be run during each time segment of the agenda are kept in a queue. Thus, the procedures for each segment are called in the order in which they were added to the agenda (first in, first out). Explain why this order must be used. In particular, trace the behavior of an and-gate whose inputs change from 0,1 to 1,0 in the same segment and say how the behavior would differ if we stored a segment's procedures in an ordinary list, adding and removing procedures only at the front (last in, first out).</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.3.5">3.3.5  Propagation of Constraints</a></h3>
<p>Computer programs are traditionally organized as one-directional computations, which perform operations on prespecified arguments to produce desired outputs. On the other hand, we often model systems in terms of relations among quantities. For example, a mathematical model of a mechanical structure might include the information that the deflection <em>d</em> of a metal rod is related to the force <em>F</em> on the rod, the length <em>L</em> of the rod, the cross-sectional area <em>A</em>, and the elastic modulus <em>E</em> via the equation</p>
<p></p>
<p><img src="ch3-Z-G-28.gif" /></p>
<p>Such an equation is not one-directional. Given any four of the quantities, we can use it to compute the fifth. Yet translating the equation into a traditional computer language would force us to choose one of the quantities to be computed in terms of the other four. Thus, a procedure for computing the area <em>A</em> could not be used to compute the deflection <em>d</em>, even though the computations of <em>A</em> and <em>d</em> arise from the same equation.<a href="#footnote_Temp_394"><sup>31</sup></a></p>
<p>In this section, we sketch the design of a language that enables us to work in terms of relations themselves. The primitive elements of the language are <em>primitive constraints</em>, which state that certain relations hold between quantities. For example, <code>(adder a b c)</code> specifies that the quantities <em>a</em>, <em>b</em>, and <em>c</em> must be related by the equation <em>a</em> + <em>b</em> = <em>c</em>, <code>(multiplier x y z)</code> expresses the constraint <em>x</em><em>y</em> = <em>z</em>, and <code>(constant 3.14 x)</code> says that the value of <em>x</em> must be 3.14.</p>
<p>Our language provides a means of combining primitive constraints in order to express more complex relations. We combine constraints by constructing <em>constraint networks</em>, in which constraints are joined by <em>connectors</em>. A connector is an object that ``holds'' a value that may participate in one or more constraints. For example, we know that the relationship between Fahrenheit and Celsius temperatures is</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-29.gif" /></p>
<p></p>
<p>Such a constraint can be thought of as a network consisting of primitive adder, multiplier, and constant constraints (figure <a href="#%_fig_3.28">3.28</a>). In the figure, we see on the left a multiplier box with three terminals, labeled <em>m</em>1, <em>m</em>2, and <em>p</em>. These connect the multiplier to the rest of the network as follows: The <em>m</em>1 terminal is linked to a connector <em>C</em>, which will hold the Celsius temperature. The <em>m</em>2 terminal is linked to a connector <em>w</em>, which is also linked to a constant box that holds 9. The <em>p</em> terminal, which the multiplier box constrains to be the product of <em>m</em>1 and <em>m</em>2, is linked to the <em>p</em> terminal of another multiplier box, whose <em>m</em>2 is connected to a constant 5 and whose <em>m</em>1 is connected to one of the terms in a sum.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-30.gif" /></p>
<p><strong>Figure 3.28:</strong>  The relation 9<em>C</em> = 5(<em>F</em> - 32) expressed as a constraint network.</p>
<p></p>
<p>Computation by such a network proceeds as follows: When a connector is given a value (by the user or by a constraint box to which it is linked), it awakens all of its associated constraints (except for the constraint that just awakened it) to inform them that it has a value. Each awakened constraint box then polls its connectors to see if there is enough information to determine a value for a connector. If so, the box sets that connector, which then awakens all of its associated constraints, and so on. For instance, in conversion between Celsius and Fahrenheit, <em>w</em>, <em>x</em>, and <em>y</em> are immediately set by the constant boxes to 9, 5, and 32, respectively. The connectors awaken the multipliers and the adder, which determine that there is not enough information to proceed. If the user (or some other part of the network) sets <em>C</em> to a value (say 25), the leftmost multiplier will be awakened, and it will set <em>u</em> to 25 · 9 = 225. Then <em>u</em> awakens the second multiplier, which sets <em>v</em> to 45, and <em>v</em> awakens the adder, which sets <em>F</em> to 77.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_395">Using the constraint system</a></h4>
<p>To use the constraint system to carry out the temperature computation outlined above, we first create two connectors, <code>C</code> and <code>F</code>, by calling the constructor <code>make-connector</code>, and link <code>C</code> and <code>F</code> in an appropriate network:</p>
<p></p>
<p></p>
<p><code>(define C (make-connector)) (define F (make-connector)) (celsius-fahrenheit-converter C F) ok</code></p>
<p></p>
<p>The procedure that creates the network is defined as follows:</p>
<p></p>
<p></p>
<p><code>(define (celsius-fahrenheit-converter c f)   (let ((u (make-connector))         (v (make-connector))         (w (make-connector))         (x (make-connector))         (y (make-connector)))     (multiplier c w u)     (multiplier v x u)     (adder v y f)     (constant 9 w)     (constant 5 x)     (constant 32 y)     'ok))</code></p>
<p></p>
<p>This procedure creates the internal connectors <code>u</code>, <code>v</code>, <code>w</code>, <code>x</code>, and <code>y</code>, and links them as shown in figure <a href="#%_fig_3.28">3.28</a> using the primitive constraint constructors <code>adder</code>, <code>multiplier</code>, and <code>constant</code>. Just as with the digital-circuit simulator of section <a href="#%_sec_3.3.4">3.3.4</a>, expressing these combinations of primitive elements in terms of procedures automatically provides our language with a means of abstraction for compound objects.</p>
<p>To watch the network in action, we can place probes on the connectors <code>C</code> and <code>F</code>, using a <code>probe</code> procedure similar to the one we used to monitor wires in section <a href="#%_sec_3.3.4">3.3.4</a>. Placing a probe on a connector will cause a message to be printed whenever the connector is given a value:</p>
<p></p>
<p></p>
<p><code>(probe &quot;Celsius temp&quot; C) (probe &quot;Fahrenheit temp&quot; F)</code></p>
<p></p>
<p>Next we set the value of <code>C</code> to 25. (The third argument to <code>set-value!</code> tells <code>C</code> that this directive comes from the <code>user</code>.)</p>
<p></p>
<p></p>
<p><code>(set-value! C 25 'user) Probe: Celsius temp = 25 Probe: Fahrenheit temp = 77 done</code></p>
<p></p>
<p>The probe on <code>C</code> awakens and reports the value. <code>C</code> also propagates its value through the network as described above. This sets <code>F</code> to 77, which is reported by the probe on <code>F</code>.</p>
<p>Now we can try to set <code>F</code> to a new value, say 212:</p>
<p></p>
<p></p>
<p><code>(set-value! F 212 'user) Error! Contradiction (77 212)</code></p>
<p></p>
<p>The connector complains that it has sensed a contradiction: Its value is 77, and someone is trying to set it to 212. If we really want to reuse the network with new values, we can tell <code>C</code> to forget its old value:</p>
<p></p>
<p></p>
<p><code>(forget-value! C 'user) Probe: Celsius temp = ? Probe: Fahrenheit temp = ? done</code></p>
<p></p>
<p><code>C</code> finds that the <code>user</code>, who set its value originally, is now retracting that value, so <code>C</code> agrees to lose its value, as shown by the probe, and informs the rest of the network of this fact. This information eventually propagates to <code>F</code>, which now finds that it has no reason for continuing to believe that its own value is 77. Thus, <code>F</code> also gives up its value, as shown by the probe.</p>
<p>Now that <code>F</code> has no value, we are free to set it to 212:</p>
<p></p>
<p></p>
<p><code>(set-value! F 212 'user) Probe: Fahrenheit temp = 212 Probe: Celsius temp = 100 done</code></p>
<p></p>
<p>This new value, when propagated through the network, forces <code>C</code> to have a value of 100, and this is registered by the probe on <code>C</code>. Notice that the very same network is being used to compute <code>C</code> given <code>F</code> and to compute <code>F</code> given <code>C</code>. This nondirectionality of computation is the distinguishing feature of constraint-based systems.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_396">Implementing the constraint system</a></h4>
<p>The constraint system is implemented via procedural objects with local state, in a manner very similar to the digital-circuit simulator of section <a href="#%_sec_3.3.4">3.3.4</a>. Although the primitive objects of the constraint system are somewhat more complex, the overall system is simpler, since there is no concern about agendas and logic delays.</p>
<p>The basic operations on connectors are the following:</p>
<p></p>
<ul>
<li><code>(has-value? &lt;connector&gt;)</code><br /> tells whether the connector has a value.</li>
<li><code>(get-value &lt;connector&gt;)</code><br /> returns the connector's current value.</li>
<li><code>(set-value! &lt;connector&gt; &lt;new-value&gt; &lt;informant&gt;)</code><br /> indicates that the informant is requesting the connector to set its value to the new value.</li>
<li><code>(forget-value! &lt;connector&gt; &lt;retractor&gt;)</code><br /> tells the connector that the retractor is requesting it to forget its value.</li>
<li><code>(connect &lt;connector&gt; &lt;new-constraint&gt;)</code><br /> tells the connector to participate in the new constraint.</li>
</ul>
<p></p>
<p>The connectors communicate with the constraints by means of the procedures <code>inform-about-value</code>, which tells the given constraint that the connector has a value, and <code>inform-about-no-value</code>, which tells the constraint that the connector has lost its value.</p>
<p><code>Adder</code> constructs an adder constraint among summand connectors <code>a1</code> and <code>a2</code> and a <code>sum</code> connector. An adder is implemented as a procedure with local state (the procedure <code>me</code> below):</p>
<p></p>
<p></p>
<p><code>(define (adder a1 a2 sum)   (define (process-new-value)     (cond ((and (has-value? a1) (has-value? a2))            (set-value! sum                        (+ (get-value a1) (get-value a2))                        me))           ((and (has-value? a1) (has-value? sum))            (set-value! a2                        (- (get-value sum) (get-value a1))                        me))           ((and (has-value? a2) (has-value? sum))            (set-value! a1                        (- (get-value sum) (get-value a2))                        me))))   (define (process-forget-value)     (forget-value! sum me)     (forget-value! a1 me)     (forget-value! a2 me)     (process-new-value))   (define (me request)     (cond ((eq? request 'I-have-a-value)              (process-new-value))           ((eq? request 'I-lost-my-value)             (process-forget-value))           (else             (error &quot;Unknown request -- ADDER&quot; request))))   (connect a1 me)   (connect a2 me)   (connect sum me)   me)</code></p>
<p></p>
<p><code>Adder</code> connects the new adder to the designated connectors and returns it as its value. The procedure <code>me</code>, which represents the adder, acts as a dispatch to the local procedures. The following ``syntax interfaces'' (see footnote <a href="#footnote_Temp_385">27</a> in section <a href="#%_sec_3.3.4">3.3.4</a>) are used in conjunction with the dispatch:</p>
<p></p>
<p></p>
<p><code>(define (inform-about-value constraint)   (constraint 'I-have-a-value)) (define (inform-about-no-value constraint)   (constraint 'I-lost-my-value))</code></p>
<p></p>
<p>The adder's local procedure <code>process-new-value</code> is called when the adder is informed that one of its connectors has a value. The adder first checks to see if both <code>a1</code> and <code>a2</code> have values. If so, it tells <code>sum</code> to set its value to the sum of the two addends. The <code>informant</code> argument to <code>set-value!</code> is <code>me</code>, which is the adder object itself. If <code>a1</code> and <code>a2</code> do not both have values, then the adder checks to see if perhaps <code>a1</code> and <code>sum</code> have values. If so, it sets <code>a2</code> to the difference of these two. Finally, if <code>a2</code> and <code>sum</code> have values, this gives the adder enough information to set <code>a1</code>. If the adder is told that one of its connectors has lost a value, it requests that all of its connectors now lose their values. (Only those values that were set by this adder are actually lost.) Then it runs <code>process-new-value</code>. The reason for this last step is that one or more connectors may still have a value (that is, a connector may have had a value that was not originally set by the adder), and these values may need to be propagated back through the adder.</p>
<p>A multiplier is very similar to an adder. It will set its <code>product</code> to 0 if either of the factors is 0, even if the other factor is not known.</p>
<p></p>
<p></p>
<p><code>(define (multiplier m1 m2 product)   (define (process-new-value)     (cond ((or (and (has-value? m1) (= (get-value m1) 0))                (and (has-value? m2) (= (get-value m2) 0)))            (set-value! product 0 me))           ((and (has-value? m1) (has-value? m2))            (set-value! product                        (* (get-value m1) (get-value m2))                        me))           ((and (has-value? product) (has-value? m1))            (set-value! m2                        (/ (get-value product) (get-value m1))                        me))           ((and (has-value? product) (has-value? m2))            (set-value! m1                        (/ (get-value product) (get-value m2))                        me))))   (define (process-forget-value)     (forget-value! product me)     (forget-value! m1 me)     (forget-value! m2 me)     (process-new-value))   (define (me request)     (cond ((eq? request 'I-have-a-value)            (process-new-value))           ((eq? request 'I-lost-my-value)            (process-forget-value))           (else            (error &quot;Unknown request -- MULTIPLIER&quot; request))))   (connect m1 me)   (connect m2 me)   (connect product me)   me)</code></p>
<p></p>
<p>A <code>constant</code> constructor simply sets the value of the designated connector. Any <code>I-have-a-value</code> or <code>I-lost-my-value</code> message sent to the constant box will produce an error.</p>
<p></p>
<p></p>
<p><code>(define (constant value connector)   (define (me request)     (error &quot;Unknown request -- CONSTANT&quot; request))   (connect connector me)   (set-value! connector value me)   me)</code></p>
<p></p>
<p>Finally, a probe prints a message about the setting or unsetting of the designated connector:</p>
<p></p>
<p></p>
<p><code>(define (probe name connector)   (define (print-probe value)     (newline)     (display &quot;Probe: &quot;)     (display name)     (display &quot; = &quot;)     (display value))   (define (process-new-value)     (print-probe (get-value connector)))   (define (process-forget-value)     (print-probe &quot;?&quot;))   (define (me request)     (cond ((eq? request 'I-have-a-value)            (process-new-value))           ((eq? request 'I-lost-my-value)            (process-forget-value))           (else            (error &quot;Unknown request -- PROBE&quot; request))))   (connect connector me)   me)</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_397">Representing connectors</a></h4>
<p>A connector is represented as a procedural object with local state variables <code>value</code>, the current value of the connector; <code>informant</code>, the object that set the connector's value; and <code>constraints</code>, a list of the constraints in which the connector participates.</p>
<p></p>
<p></p>
<p><code>(define (make-connector)   (let ((value false) (informant false) (constraints '()))     (define (set-my-value newval setter)       (cond ((not (has-value? me))              (set! value newval)              (set! informant setter)              (for-each-except setter                               inform-about-value                               constraints))             ((not (= value newval))              (error &quot;Contradiction&quot; (list value newval)))             (else 'ignored)))     (define (forget-my-value retractor)       (if (eq? retractor informant)           (begin (set! informant false)                  (for-each-except retractor                                   inform-about-no-value                                   constraints))           'ignored))     (define (connect new-constraint)       (if (not (memq new-constraint constraints))           (set! constraints                  (cons new-constraint constraints)))       (if (has-value? me)           (inform-about-value new-constraint))       'done)     (define (me request)       (cond ((eq? request 'has-value?)              (if informant true false))             ((eq? request 'value) value)             ((eq? request 'set-value!) set-my-value)             ((eq? request 'forget) forget-my-value)             ((eq? request 'connect) connect)             (else (error &quot;Unknown operation -- CONNECTOR&quot;                          request))))     me))</code></p>
<p></p>
<p></p>
<p>The connector's local procedure <code>set-my-value</code> is called when there is a request to set the connector's value. If the connector does not currently have a value, it will set its value and remember as <code>informant</code> the constraint that requested the value to be set.<a href="#footnote_Temp_398"><sup>32</sup></a> Then the connector will notify all of its participating constraints except the constraint that requested the value to be set. This is accomplished using the following iterator, which applies a designated procedure to all items in a list except a given one:</p>
<p></p>
<p></p>
<p><code>(define (for-each-except exception procedure list)   (define (loop items)     (cond ((null? items) 'done)           ((eq? (car items) exception) (loop (cdr items)))           (else (procedure (car items))                 (loop (cdr items)))))   (loop list))</code></p>
<p></p>
<p></p>
<p>If a connector is asked to forget its value, it runs the local procedure <code>forget-my-value</code>, which first checks to make sure that the request is coming from the same object that set the value originally. If so, the connector informs its associated constraints about the loss of the value.</p>
<p>The local procedure <code>connect</code> adds the designated new constraint to the list of constraints if it is not already in that list. Then, if the connector has a value, it informs the new constraint of this fact.</p>
<p>The connector's procedure <code>me</code> serves as a dispatch to the other internal procedures and also represents the connector as an object. The following procedures provide a syntax interface for the dispatch:</p>
<p></p>
<p></p>
<p><code>(define (has-value? connector)   (connector 'has-value?)) (define (get-value connector)   (connector 'value)) (define (set-value! connector new-value informant)   ((connector 'set-value!) new-value informant)) (define (forget-value! connector retractor)   ((connector 'forget) retractor)) (define (connect connector new-constraint)   ((connector 'connect) new-constraint))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.33.</strong>  Using primitive multiplier, adder, and constant constraints, define a procedure <code>averager</code> that takes three connectors <code>a</code>, <code>b</code>, and <code>c</code> as inputs and establishes the constraint that the value of <code>c</code> is the average of the values of <code>a</code> and <code>b</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.34.</strong>  Louis Reasoner wants to build a squarer, a constraint device with two terminals such that the value of connector <code>b</code> on the second terminal will always be the square of the value <code>a</code> on the first terminal. He proposes the following simple device made from a multiplier:</p>
<p></p>
<p></p>
<p><code>(define (squarer a b)   (multiplier a a b))</code></p>
<p></p>
<p>There is a serious flaw in this idea. Explain.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.35.</strong>  Ben Bitdiddle tells Louis that one way to avoid the trouble in exercise <a href="#%_thm_3.34">3.34</a> is to define a squarer as a new primitive constraint. Fill in the missing portions in Ben's outline for a procedure to implement such a constraint:</p>
<p></p>
<p></p>
<p><code>(define (squarer a b)   (define (process-new-value)     (if (has-value? b)         (if (&lt; (get-value b) 0)             (error &quot;square less than 0 -- SQUARER&quot; (get-value b))             &lt;alternative1&gt;)         &lt;alternative2&gt;))   (define (process-forget-value) &lt;body1&gt;)   (define (me request) &lt;body2&gt;)   &lt;rest of definition&gt;   me)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.36.</strong>  Suppose we evaluate the following sequence of expressions in the global environment:</p>
<p></p>
<p></p>
<p><code>(define a (make-connector)) (define b (make-connector)) (set-value! a 10 'user)</code></p>
<p></p>
<p>At some time during evaluation of the <code>set-value!</code>, the following expression from the connector's local procedure is evaluated:</p>
<p></p>
<p></p>
<p><code>(for-each-except setter inform-about-value constraints)</code></p>
<p></p>
<p>Draw an environment diagram showing the environment in which the above expression is evaluated.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.37.</strong>  The <code>celsius-fahrenheit-converter</code> procedure is cumbersome when compared with a more expression-oriented style of definition, such as</p>
<p></p>
<p></p>
<p><code>(define (celsius-fahrenheit-converter x)   (c+ (c* (c/ (cv 9) (cv 5))           x)       (cv 32))) (define C (make-connector)) (define F (celsius-fahrenheit-converter C))</code></p>
<p></p>
<p>Here <code>c+</code>, <code>c*</code>, etc. are the ``constraint'' versions of the arithmetic operations. For example, <code>c+</code> takes two connectors as arguments and returns a connector that is related to these by an adder constraint:</p>
<p></p>
<p></p>
<p><code>(define (c+ x y)   (let ((z (make-connector)))     (adder x y z)     z))</code></p>
<p></p>
<p>Define analogous procedures <code>c-</code>, <code>c*</code>, <code>c/</code>, and <code>cv</code> (constant value) that enable us to define compound constraints as in the converter example above.<a href="#footnote_Temp_404"><sup>33</sup></a></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_349"><sup>16</sup></a> <code>Set-car!</code> and <code>set-cdr!</code> return implementation-dependent values. Like <code>set!</code>, they should be used only for their effect.</p>
<p><a href="#call_footnote_Temp_350"><sup>17</sup></a> We see from this that mutation operations on lists can create ``garbage'' that is not part of any accessible structure. We will see in section <a href="book-Z-H-33.html#%_sec_5.3.2">5.3.2</a> that Lisp memory-management systems include a <em>garbage collector</em>, which identifies and recycles the memory space used by unneeded pairs.</p>
<p><a href="#call_footnote_Temp_351"><sup>18</sup></a> <code>Get-new-pair</code> is one of the operations that must be implemented as part of the memory management required by a Lisp implementation. We will discuss this in section <a href="book-Z-H-33.html#%_sec_5.3.1">5.3.1</a>.</p>
<p><a href="#call_footnote_Temp_356"><sup>19</sup></a> The two pairs are distinct because each call to <code>cons</code> returns a new pair. The symbols are shared; in Scheme there is a unique symbol with any given name. Since Scheme provides no way to mutate a symbol, this sharing is undetectable. Note also that the sharing is what enables us to compare symbols using <code>eq?</code>, which simply checks equality of pointers.</p>
<p><a href="#call_footnote_Temp_357"><sup>20</sup></a> The subtleties of dealing with sharing of mutable data objects reflect the underlying issues of ``sameness'' and ``change'' that were raised in section <a href="book-Z-H-20.html#%_sec_3.1.3">3.1.3</a>. We mentioned there that admitting change to our language requires that a compound object must have an ``identity'' that is something different from the pieces from which it is composed. In Lisp, we consider this ``identity'' to be the quality that is tested by <code>eq?</code>, i.e., by equality of pointers. Since in most Lisp implementations a pointer is essentially a memory address, we are ``solving the problem'' of defining the identity of objects by stipulating that a data object ``itself'' is the information stored in some particular set of memory locations in the computer. This suffices for simple Lisp programs, but is hardly a general way to resolve the issue of ``sameness'' in computational models.</p>
<p><a href="#call_footnote_Temp_364"><sup>21</sup></a> On the other hand, from the viewpoint of implementation, assignment requires us to modify the environment, which is itself a mutable data structure. Thus, assignment and mutation are equipotent: Each can be implemented in terms of the other.</p>
<p><a href="#call_footnote_Temp_366"><sup>22</sup></a> If the first item is the final item in the queue, the front pointer will be the empty list after the deletion, which will mark the queue as empty; we needn't worry about updating the rear pointer, which will still point to the deleted item, because <code>empty-queue?</code> looks only at the front pointer.</p>
<p><a href="#call_footnote_Temp_370"><sup>23</sup></a> Be careful not to make the interpreter try to print a structure that contains cycles. (See exercise <a href="#%_thm_3.13">3.13</a>.)</p>
<p><a href="#call_footnote_Temp_371"><sup>24</sup></a> Because <code>assoc</code> uses <code>equal?</code>, it can recognize keys that are symbols, numbers, or list structure.</p>
<p><a href="#call_footnote_Temp_372"><sup>25</sup></a> Thus, the first backbone pair is the object that represents the table ``itself''; that is, a pointer to the table is a pointer to this pair. This same backbone pair always starts the table. If we did not arrange things in this way, <code>insert!</code> would have to return a new value for the start of the table when it added a new record.</p>
<p><a href="#call_footnote_Temp_379"><sup>26</sup></a> A full-adder is a basic circuit element used in adding two binary numbers. Here A and B are the bits at corresponding positions in the two numbers to be added, and C<sub><em>i</em><em>n</em></sub> is the carry bit from the addition one place to the right. The circuit generates SUM, which is the sum bit in the corresponding position, and C<sub><em>o</em><em>u</em><em>t</em></sub>, which is the carry bit to be propagated to the left.</p>
<p><a href="#call_footnote_Temp_385"><sup>27</sup></a> These procedures are simply syntactic sugar that allow us to use ordinary procedural syntax to access the local procedures of objects. It is striking that we can interchange the role of ``procedures'' and ``data'' in such a simple way. For example, if we write <code>(wire 'get-signal)</code> we think of <code>wire</code> as a procedure that is called with the message <code>get-signal</code> as input. Alternatively, writing <code>(get-signal wire)</code> encourages us to think of <code>wire</code> as a data object that is the input to a procedure <code>get-signal</code>. The truth of the matter is that, in a language in which we can deal with procedures as objects, there is no fundamental difference between ``procedures'' and ``data,'' and we can choose our syntactic sugar to allow us to program in whatever style we choose.</p>
<p><a href="#call_footnote_Temp_390"><sup>28</sup></a> The agenda is a headed list, like the tables in section <a href="#%_sec_3.3.3">3.3.3</a>, but since the list is headed by the time, we do not need an additional dummy header (such as the <code>*table*</code> symbol used with tables).</p>
<p><a href="#call_footnote_Temp_391"><sup>29</sup></a> Observe that the <code>if</code> expression in this procedure has no &lt;<em>alternative</em>&gt; expression. Such a ``one-armed <code>if</code> statement'' is used to decide whether to do something, rather than to select between two expressions. An <code>if</code> expression returns an unspecified value if the predicate is false and there is no &lt;<em>alternative</em>&gt;.</p>
<p><a href="#call_footnote_Temp_392"><sup>30</sup></a> In this way, the current time will always be the time of the action most recently processed. Storing this time at the head of the agenda ensures that it will still be available even if the associated time segment has been deleted.</p>
<p><a href="#call_footnote_Temp_394"><sup>31</sup></a> Constraint propagation first appeared in the incredibly forward-looking SKETCHPAD system of Ivan Sutherland (1963). A beautiful constraint-propagation system based on the Smalltalk language was developed by Alan Borning (1977) at Xerox Palo Alto Research Center. Sussman, Stallman, and Steele applied constraint propagation to electrical circuit analysis (Sussman and Stallman 1975; Sussman and Steele 1980). TK!Solver (Konopasek and Jayaraman 1984) is an extensive modeling environment based on constraints.</p>
<p><a href="#call_footnote_Temp_398"><sup>32</sup></a> The <code>setter</code> might not be a constraint. In our temperature example, we used <code>user</code> as the <code>setter</code>.</p>
<p><a href="#call_footnote_Temp_404"><sup>33</sup></a> The expression-oriented format is convenient because it avoids the need to name the intermediate expressions in a computation. Our original formulation of the constraint language is cumbersome in the same way that many languages are cumbersome when dealing with operations on compound data. For example, if we wanted to compute the product (<em>a</em> + <em>b</em>) · (<em>c</em> + <em>d</em>), where the variables represent vectors, we could work in ``imperative style,'' using procedures that set the values of designated vector arguments but do not themselves return vectors as values:</p>
<p></p>
<p><code>(v-sum a b temp1) (v-sum c d temp2) (v-prod temp1 temp2 answer)</code></p>
<p></p>
<p>Alternatively, we could deal with expressions, using procedures that return vectors as values, and thus avoid explicitly mentioning <code>temp1</code> and <code>temp2</code>:</p>
<p></p>
<p><code>(define answer (v-prod (v-sum a b) (v-sum c d)))</code></p>
<p></p>
<p>Since Lisp allows us to return compound objects as values of procedures, we can transform our imperative-style constraint language into an expression-oriented style as shown in this exercise. In languages that are impoverished in handling compound objects, such as Algol, Basic, and Pascal (unless one explicitly uses Pascal pointer variables), one is usually stuck with the imperative style when manipulating compound objects. Given the advantage of the expression-oriented format, one might ask if there is any reason to have implemented the system in imperative style, as we did in this section. One reason is that the non-expression-oriented constraint language provides a handle on constraint objects (e.g., the value of the <code>adder</code> procedure) as well as on connector objects. This is useful if we wish to extend the system with new operations that communicate with constraints directly rather than only indirectly via operations on connectors. Although it is easy to implement the expression-oriented style in terms of the imperative implementation, it is very difficult to do the converse.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-21.html">previous</a>, <a href="book-Z-H-23.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-22.html">previous</a>, <a href="book-Z-H-24.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_3.4">3.4  Concurrency: Time Is of the Essence</a></h2>
<p>We've seen the power of computational objects with local state as tools for modeling. Yet, as section <a href="book-Z-H-20.html#%_sec_3.1.3">3.1.3</a> warned, this power extracts a price: the loss of referential transparency, giving rise to a thicket of questions about sameness and change, and the need to abandon the substitution model of evaluation in favor of the more intricate environment model.</p>
<p>The central issue lurking beneath the complexity of state, sameness, and change is that by introducing assignment we are forced to admit <em>time</em> into our computational models. Before we introduced assignment, all our programs were timeless, in the sense that any expression that has a value always has the same value. In contrast, recall the example of modeling withdrawals from a bank account and returning the resulting balance, introduced at the beginning of section <a href="book-Z-H-20.html#%_sec_3.1.1">3.1.1</a>:</p>
<p></p>
<p></p>
<p><code>(withdraw 25) 75 (withdraw 25) 50</code></p>
<p></p>
<p>Here successive evaluations of the same expression yield different values. This behavior arises from the fact that the execution of assignment statements (in this case, assignments to the variable <code>balance</code>) delineates <em>moments in time</em> when values change. The result of evaluating an expression depends not only on the expression itself, but also on whether the evaluation occurs before or after these moments. Building models in terms of computational objects with local state forces us to confront time as an essential concept in programming.</p>
<p>We can go further in structuring computational models to match our perception of the physical world. Objects in the world do not change one at a time in sequence. Rather we perceive them as acting <em>concurrently</em> -- all at once. So it is often natural to model systems as collections of computational processes that execute concurrently. Just as we can make our programs modular by organizing models in terms of objects with separate local state, it is often appropriate to divide computational models into parts that evolve separately and concurrently. Even if the programs are to be executed on a sequential computer, the practice of writing programs as if they were to be executed concurrently forces the programmer to avoid inessential timing constraints and thus makes programs more modular.</p>
<p>In addition to making programs more modular, concurrent computation can provide a speed advantage over sequential computation. Sequential computers execute only one operation at a time, so the amount of time it takes to perform a task is proportional to the total number of operations performed.<a href="#footnote_Temp_405"><sup>34</sup></a> However, if it is possible to decompose a problem into pieces that are relatively independent and need to communicate only rarely, it may be possible to allocate pieces to separate computing processors, producing a speed advantage proportional to the number of processors available.</p>
<p>Unfortunately, the complexities introduced by assignment become even more problematic in the presence of concurrency. The fact of concurrent execution, either because the world operates in parallel or because our computers do, entails additional complexity in our understanding of time.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.4.1">3.4.1  The Nature of Time in Concurrent Systems</a></h3>
<p>On the surface, time seems straightforward. It is an ordering imposed on events.<a href="#footnote_Temp_406"><sup>35</sup></a> For any events <em>A</em> and <em>B</em>, either <em>A</em> occurs before <em>B</em>, <em>A</em> and <em>B</em> are simultaneous, or <em>A</em> occurs after <em>B</em>. For instance, returning to the bank account example, suppose that Peter withdraws $10 and Paul withdraws $25 from a joint account that initially contains $100, leaving $65 in the account. Depending on the order of the two withdrawals, the sequence of balances in the account is either $100 <img src="book-Z-G-D-15.gif" /> $90 <img src="book-Z-G-D-15.gif" /> $65 or $100 <img src="book-Z-G-D-15.gif" /> $75 <img src="book-Z-G-D-15.gif" /> $65. In a computer implementation of the banking system, this changing sequence of balances could be modeled by successive assignments to a variable <code>balance</code>.</p>
<p>In complex situations, however, such a view can be problematic. Suppose that Peter and Paul, and other people besides, are accessing the same bank account through a network of banking machines distributed all over the world. The actual sequence of balances in the account will depend critically on the detailed timing of the accesses and the details of the communication among the machines.</p>
<p>This indeterminacy in the order of events can pose serious problems in the design of concurrent systems. For instance, suppose that the withdrawals made by Peter and Paul are implemented as two separate processes sharing a common variable <code>balance</code>, each process specified by the procedure given in section <a href="book-Z-H-20.html#%_sec_3.1.1">3.1.1</a>:</p>
<p></p>
<p><code>(define (withdraw amount)   (if (&gt;= balance amount)       (begin (set! balance (- balance amount))              balance)       &quot;Insufficient funds&quot;))</code></p>
<p></p>
<p>If the two processes operate independently, then Peter might test the balance and attempt to withdraw a legitimate amount. However, Paul might withdraw some funds in between the time that Peter checks the balance and the time Peter completes the withdrawal, thus invalidating Peter's test.</p>
<p>Things can be worse still. Consider the expression</p>
<p></p>
<p><code>(set! balance (- balance amount))</code></p>
<p></p>
<p>executed as part of each withdrawal process. This consists of three steps: (1) accessing the value of the <code>balance</code> variable; (2) computing the new balance; (3) setting <code>balance</code> to this new value. If Peter and Paul's withdrawals execute this statement concurrently, then the two withdrawals might interleave the order in which they access <code>balance</code> and set it to the new value.</p>
<p>The timing diagram in figure <a href="#%_fig_3.29">3.29</a> depicts an order of events where <code>balance</code> starts at 100, Peter withdraws 10, Paul withdraws 25, and yet the final value of <code>balance</code> is 75. As shown in the diagram, the reason for this anomaly is that Paul's assignment of 75 to <code>balance</code> is made under the assumption that the value of <code>balance</code> to be decremented is 100. That assumption, however, became invalid when Peter changed <code>balance</code> to 90. This is a catastrophic failure for the banking system, because the total amount of money in the system is not conserved. Before the transactions, the total amount of money was $100. Afterwards, Peter has $10, Paul has $25, and the bank has $75.<a href="#footnote_Temp_407"><sup>36</sup></a></p>
<p>The general phenomenon illustrated here is that several processes may share a common state variable. What makes this complicated is that more than one process may be trying to manipulate the shared state at the same time. For the bank account example, during each transaction, each customer should be able to act as if the other customers did not exist. When a customer changes the balance in a way that depends on the balance, he must be able to assume that, just before the moment of change, the balance is still what he thought it was.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_408">Correct behavior of concurrent programs</a></h4>
<p>The above example typifies the subtle bugs that can creep into concurrent programs. The root of this complexity lies in the assignments to variables that are shared among the different processes. We already know that we must be careful in writing programs that use <code>set!</code>, because the results of a computation depend on the order in which the assignments occur.<a href="#footnote_Temp_409"><sup>37</sup></a> With concurrent processes we must be especially careful about assignments, because we may not be able to control the order of the assignments made by the different processes. If several such changes might be made concurrently (as with two depositors accessing a joint account) we need some way to ensure that our system behaves correctly. For example, in the case of withdrawals from a joint bank account, we must ensure that money is conserved. To make concurrent programs behave correctly, we may have to place some restrictions on concurrent execution.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-31.gif" /></p>
<p><strong>Figure 3.29:</strong>  Timing diagram showing how interleaving the order of events in two banking withdrawals can lead to an incorrect final balance.</p>
<p>One possible restriction on concurrency would stipulate that no two operations that change any shared state variables can occur at the same time. This is an extremely stringent requirement. For distributed banking, it would require the system designer to ensure that only one transaction could proceed at a time. This would be both inefficient and overly conservative. Figure <a href="#%_fig_3.30">3.30</a> shows Peter and Paul sharing a bank account, where Paul has a private account as well. The diagram illustrates two withdrawals from the shared account (one by Peter and one by Paul) and a deposit to Paul's private account.<a href="#footnote_Temp_410"><sup>38</sup></a> The two withdrawals from the shared account must not be concurrent (since both access and update the same account), and Paul's deposit and withdrawal must not be concurrent (since both access and update the amount in Paul's wallet). But there should be no problem permitting Paul's deposit to his private account to proceed concurrently with Peter's withdrawal from the shared account.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-32.gif" /></p>
<p><strong>Figure 3.30:</strong>  Concurrent deposits and withdrawals from a joint account in Bank1 and a private account in Bank2.</p>
<p></p>
<p>A less stringent restriction on concurrency would ensure that a concurrent system produces the same result as if the processes had run sequentially in some order. There are two important aspects to this requirement. First, it does not require the processes to actually run sequentially, but only to produce results that are the same <em>as if</em> they had run sequentially. For the example in figure <a href="#%_fig_3.30">3.30</a>, the designer of the bank account system can safely allow Paul's deposit and Peter's withdrawal to happen concurrently, because the net result will be the same as if the two operations had happened sequentially. Second, there may be more than one possible ``correct'' result produced by a concurrent program, because we require only that the result be the same as for <em>some</em> sequential order. For example, suppose that Peter and Paul's joint account starts out with $100, and Peter deposits $40 while Paul concurrently withdraws half the money in the account. Then sequential execution could result in the account balance being either $70 or $90 (see exercise <a href="#%_thm_3.38">3.38</a>).<a href="#footnote_Temp_411"><sup>39</sup></a></p>
<p>There are still weaker requirements for correct execution of concurrent programs. A program for simulating diffusion (say, the flow of heat in an object) might consist of a large number of processes, each one representing a small volume of space, that update their values concurrently. Each process repeatedly changes its value to the average of its own value and its neighbors' values. This algorithm converges to the right answer independent of the order in which the operations are done; there is no need for any restrictions on concurrent use of the shared values.</p>
<p></p>
<p><strong>Exercise 3.38.</strong>  Suppose that Peter, Paul, and Mary share a joint bank account that initially contains $100. Concurrently, Peter deposits $10, Paul withdraws $20, and Mary withdraws half the money in the account, by executing the following commands:</p>
<table>
<tbody>
<tr class="odd">
<td align="left">Peter:</td>
<td align="left"><code>(set! balance (+ balance 10))</code></td>
</tr>
<tr class="even">
<td align="left">Paul:</td>
<td align="left"><code>(set! balance (- balance 20))</code></td>
</tr>
<tr class="odd">
<td align="left">Mary:</td>
<td align="left"><code>(set! balance (- balance (/ balance 2)))</code></td>
</tr>
</tbody>
</table>
<p></p>
<p></p>
<p>a. List all the different possible values for <code>balance</code> after these three transactions have been completed, assuming that the banking system forces the three processes to run sequentially in some order.</p>
<p></p>
<p></p>
<p>b. What are some other values that could be produced if the system allows the processes to be interleaved? Draw timing diagrams like the one in figure <a href="#%_fig_3.29">3.29</a> to explain how these values can occur.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.4.2">3.4.2  Mechanisms for Controlling Concurrency</a></h3>
<p>We've seen that the difficulty in dealing with concurrent processes is rooted in the need to consider the interleaving of the order of events in the different processes. For example, suppose we have two processes, one with three ordered events (<em>a</em>,<em>b</em>,<em>c</em>) and one with three ordered events (<em>x</em>,<em>y</em>,<em>z</em>). If the two processes run concurrently, with no constraints on how their execution is interleaved, then there are 20 different possible orderings for the events that are consistent with the individual orderings for the two processes:</p>
<p></p>
<p><img src="ch3-Z-G-33.gif" /></p>
<p>As programmers designing this system, we would have to consider the effects of each of these 20 orderings and check that each behavior is acceptable. Such an approach rapidly becomes unwieldy as the numbers of processes and events increase.</p>
<p>A more practical approach to the design of concurrent systems is to devise general mechanisms that allow us to constrain the interleaving of concurrent processes so that we can be sure that the program behavior is correct. Many mechanisms have been developed for this purpose. In this section, we describe one of them, the <em>serializer</em>.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_413">Serializing access to shared state</a></h4>
<p>Serialization implements the following idea: Processes will execute concurrently, but there will be certain collections of procedures that cannot be executed concurrently. More precisely, serialization creates distinguished sets of procedures such that only one execution of a procedure in each serialized set is permitted to happen at a time. If some procedure in the set is being executed, then a process that attempts to execute any procedure in the set will be forced to wait until the first execution has finished.</p>
<p>We can use serialization to control access to shared variables. For example, if we want to update a shared variable based on the previous value of that variable, we put the access to the previous value of the variable and the assignment of the new value to the variable in the same procedure. We then ensure that no other procedure that assigns to the variable can run concurrently with this procedure by serializing all of these procedures with the same serializer. This guarantees that the value of the variable cannot be changed between an access and the corresponding assignment.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_414">Serializers in Scheme</a></h4>
<p>To make the above mechanism more concrete, suppose that we have extended Scheme to include a procedure called <code>parallel-execute</code>:</p>
<p></p>
<p></p>
<p><code>(parallel-execute &lt;p1&gt; &lt;p2&gt; ...</code> &lt;<em>p<sub><em>k</em></sub></em>&gt;)<br /></p>
<p></p>
<p>Each &lt;<em>p</em>&gt; must be a procedure of no arguments. <code>Parallel-execute</code> creates a separate process for each &lt;<em>p</em>&gt;, which applies &lt;<em>p</em>&gt; (to no arguments). These processes all run concurrently.<a href="#footnote_Temp_415"><sup>40</sup></a></p>
<p>As an example of how this is used, consider</p>
<p></p>
<p></p>
<p><code>(define x 10)  (parallel-execute (lambda () (set! x (* x x)))                   (lambda () (set! x (+ x 1))))</code></p>
<p></p>
<p>This creates two concurrent processes -- <em>P</em><sub>1</sub>, which sets <code>x</code> to <code>x</code> times <code>x</code>, and <em>P</em><sub>2</sub>, which increments <code>x</code>. After execution is complete, <code>x</code> will be left with one of five possible values, depending on the interleaving of the events of <em>P</em><sub>1</sub> and <em>P</em><sub>2</sub>:</p>
<p>101:</p>
<p><em>P</em><sub>1</sub> sets <code>x</code> to 100 and then <em>P</em><sub>2</sub> increments <code>x</code> to 101.</p>
<p>121:</p>
<p><em>P</em><sub>2</sub> increments <code>x</code> to 11 and then <em>P</em><sub>1</sub> sets <code>x</code> to <code>x</code> times <code>x</code>.</p>
<p>110:</p>
<p><em>P</em><sub>2</sub> changes <code>x</code> from 10 to 11 between the two times that <em>P</em><sub>1</sub> accesses the value of <code>x</code> during the evaluation of <code>(* x x)</code>.</p>
<p>11:</p>
<p><em>P</em><sub>2</sub> accesses <code>x</code>, then <em>P</em><sub>1</sub> sets <code>x</code> to 100, then <em>P</em><sub>2</sub> sets <code>x</code>.</p>
<p>100:</p>
<p><em>P</em><sub>1</sub> accesses <code>x</code> (twice), then <em>P</em><sub>2</sub> sets <code>x</code> to 11, then <em>P</em><sub>1</sub> sets <code>x</code>.</p>
<p>We can constrain the concurrency by using serialized procedures, which are created by <em>serializers</em>. Serializers are constructed by <code>make-serializer</code>, whose implementation is given below. A serializer takes a procedure as argument and returns a serialized procedure that behaves like the original procedure. All calls to a given serializer return serialized procedures in the same set.</p>
<p>Thus, in contrast to the example above, executing</p>
<p></p>
<p></p>
<p><code>(define x 10)  (define s (make-serializer))  (parallel-execute (s (lambda () (set! x (* x x))))                   (s (lambda () (set! x (+ x 1)))))</code></p>
<p></p>
<p>can produce only two possible values for <code>x</code>, 101 or 121. The other possibilities are eliminated, because the execution of <em>P</em><sub>1</sub> and <em>P</em><sub>2</sub> cannot be interleaved.</p>
<p>Here is a version of the <code>make-account</code> procedure from section <a href="book-Z-H-20.html#%_sec_3.1.1">3.1.1</a>, where the deposits and withdrawals have been serialized:</p>
<p></p>
<p></p>
<p><code>(define (make-account balance)   (define (withdraw amount)     (if (&gt;= balance amount)         (begin (set! balance (- balance amount))                balance)         &quot;Insufficient funds&quot;))   (define (deposit amount)     (set! balance (+ balance amount))     balance)   (let ((protected (make-serializer)))     (define (dispatch m)       (cond ((eq? m 'withdraw) (protected withdraw))             ((eq? m 'deposit) (protected deposit))             ((eq? m 'balance) balance)             (else (error &quot;Unknown request -- MAKE-ACCOUNT&quot;                          m))))     dispatch))</code></p>
<p></p>
<p>With this implementation, two processes cannot be withdrawing from or depositing into a single account concurrently. This eliminates the source of the error illustrated in figure <a href="#%_fig_3.29">3.29</a>, where Peter changes the account balance between the times when Paul accesses the balance to compute the new value and when Paul actually performs the assignment. On the other hand, each account has its own serializer, so that deposits and withdrawals for different accounts can proceed concurrently.</p>
<p></p>
<p><strong>Exercise 3.39.</strong>  Which of the five possibilities in the parallel execution shown above remain if we instead serialize execution as follows:</p>
<p></p>
<p></p>
<p><code>(define x 10)  (define s (make-serializer))  (parallel-execute (lambda () (set! x ((s (lambda () (* x x))))))                   (s (lambda () (set! x (+ x 1)))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.40.</strong>  Give all possible values of <code>x</code> that can result from executing</p>
<p></p>
<p></p>
<p><code>(define x 10)  (parallel-execute (lambda () (set! x (* x x)))                   (lambda () (set! x (* x x x))))</code></p>
<p></p>
<p>Which of these possibilities remain if we instead use serialized procedures:</p>
<p></p>
<p></p>
<p><code>(define x 10)  (define s (make-serializer))  (parallel-execute (s (lambda () (set! x (* x x))))                   (s (lambda () (set! x (* x x x)))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.41.</strong>  Ben Bitdiddle worries that it would be better to implement the bank account as follows (where the commented line has been changed):</p>
<p></p>
<p></p>
<p><code>(define (make-account balance)   (define (withdraw amount)     (if (&gt;= balance amount)         (begin (set! balance (- balance amount))                balance)         &quot;Insufficient funds&quot;))   (define (deposit amount)     (set! balance (+ balance amount))     balance)   ;; continued on next page    (let ((protected (make-serializer)))     (define (dispatch m)       (cond ((eq? m 'withdraw) (protected withdraw))             ((eq? m 'deposit) (protected deposit))             ((eq? m 'balance)              ((protected (lambda () balance)))) ; serialized             (else (error &quot;Unknown request -- MAKE-ACCOUNT&quot;                          m))))     dispatch))</code></p>
<p></p>
<p>because allowing unserialized access to the bank balance can result in anomalous behavior. Do you agree? Is there any scenario that demonstrates Ben's concern?</p>
<p></p>
<p></p>
<p><strong>Exercise 3.42.</strong>  Ben Bitdiddle suggests that it's a waste of time to create a new serialized procedure in response to every <code>withdraw</code> and <code>deposit</code> message. He says that <code>make-account</code> could be changed so that the calls to <code>protected</code> are done outside the <code>dispatch</code> procedure. That is, an account would return the same serialized procedure (which was created at the same time as the account) each time it is asked for a withdrawal procedure.</p>
<p></p>
<p><code>(define (make-account balance)   (define (withdraw amount)     (if (&gt;= balance amount)         (begin (set! balance (- balance amount))                balance)         &quot;Insufficient funds&quot;))   (define (deposit amount)     (set! balance (+ balance amount))     balance)   (let ((protected (make-serializer)))     (let ((protected-withdraw (protected withdraw))           (protected-deposit (protected deposit)))       (define (dispatch m)         (cond ((eq? m 'withdraw) protected-withdraw)               ((eq? m 'deposit) protected-deposit)               ((eq? m 'balance) balance)               (else (error &quot;Unknown request -- MAKE-ACCOUNT&quot;                            m))))       dispatch)))</code></p>
<p></p>
<p>Is this a safe change to make? In particular, is there any difference in what concurrency is allowed by these two versions of <code>make-account</code> ?</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_420">Complexity of using multiple shared resources</a></h4>
<p>Serializers provide a powerful abstraction that helps isolate the complexities of concurrent programs so that they can be dealt with carefully and (hopefully) correctly. However, while using serializers is relatively straightforward when there is only a single shared resource (such as a single bank account), concurrent programming can be treacherously difficult when there are multiple shared resources.</p>
<p>To illustrate one of the difficulties that can arise, suppose we wish to swap the balances in two bank accounts. We access each account to find the balance, compute the difference between the balances, withdraw this difference from one account, and deposit it in the other account. We could implement this as follows:<a href="#footnote_Temp_421"><sup>41</sup></a></p>
<p></p>
<p></p>
<p><code>(define (exchange account1 account2)   (let ((difference (- (account1 'balance)                        (account2 'balance))))     ((account1 'withdraw) difference)     ((account2 'deposit) difference)))</code></p>
<p></p>
<p></p>
<p>This procedure works well when only a single process is trying to do the exchange. Suppose, however, that Peter and Paul both have access to accounts <em>a</em>1, <em>a</em>2, and <em>a</em>3, and that Peter exchanges <em>a</em>1 and <em>a</em>2 while Paul concurrently exchanges <em>a</em>1 and <em>a</em>3. Even with account deposits and withdrawals serialized for individual accounts (as in the <code>make-account</code> procedure shown above in this section), <code>exchange</code> can still produce incorrect results. For example, Peter might compute the difference in the balances for <em>a</em>1 and <em>a</em>2, but then Paul might change the balance in <em>a</em>1 before Peter is able to complete the exchange.<a href="#footnote_Temp_422"><sup>42</sup></a> For correct behavior, we must arrange for the <code>exchange</code> procedure to lock out any other concurrent accesses to the accounts during the entire time of the exchange.</p>
<p>One way we can accomplish this is by using both accounts' serializers to serialize the entire <code>exchange</code> procedure. To do this, we will arrange for access to an account's serializer. Note that we are deliberately breaking the modularity of the bank-account object by exposing the serializer. The following version of <code>make-account</code> is identical to the original version given in section <a href="book-Z-H-20.html#%_sec_3.1.1">3.1.1</a>, except that a serializer is provided to protect the balance variable, and the serializer is exported via message passing:</p>
<p></p>
<p></p>
<p><code>(define (make-account-and-serializer balance)   (define (withdraw amount)     (if (&gt;= balance amount)         (begin (set! balance (- balance amount))                balance)         &quot;Insufficient funds&quot;))   (define (deposit amount)     (set! balance (+ balance amount))     balance)   (let ((balance-serializer (make-serializer)))     (define (dispatch m)       (cond ((eq? m 'withdraw) withdraw)             ((eq? m 'deposit) deposit)             ((eq? m 'balance) balance)             ((eq? m 'serializer) balance-serializer)             (else (error &quot;Unknown request -- MAKE-ACCOUNT&quot;                          m))))     dispatch))</code></p>
<p></p>
<p></p>
<p>We can use this to do serialized deposits and withdrawals. However, unlike our earlier serialized account, it is now the responsibility of each user of bank-account objects to explicitly manage the serialization, for example as follows:<a href="#footnote_Temp_423"><sup>43</sup></a></p>
<p></p>
<p></p>
<p><code>(define (deposit account amount)   (let ((s (account 'serializer))         (d (account 'deposit)))     ((s d) amount)))</code></p>
<p></p>
<p></p>
<p>Exporting the serializer in this way gives us enough flexibility to implement a serialized exchange program. We simply serialize the original <code>exchange</code> procedure with the serializers for both accounts:</p>
<p></p>
<p></p>
<p><code>(define (serialized-exchange account1 account2)   (let ((serializer1 (account1 'serializer))         (serializer2 (account2 'serializer)))     ((serializer1 (serializer2 exchange))      account1      account2)))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.43.</strong>  Suppose that the balances in three accounts start out as $10, $20, and $30, and that multiple processes run, exchanging the balances in the accounts. Argue that if the processes are run sequentially, after any number of concurrent exchanges, the account balances should be $10, $20, and $30 in some order. Draw a timing diagram like the one in figure <a href="#%_fig_3.29">3.29</a> to show how this condition can be violated if the exchanges are implemented using the first version of the account-exchange program in this section. On the other hand, argue that even with this <code>exchange</code> program, the sum of the balances in the accounts will be preserved. Draw a timing diagram to show how even this condition would be violated if we did not serialize the transactions on individual accounts.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.44.</strong>  Consider the problem of transferring an amount from one account to another. Ben Bitdiddle claims that this can be accomplished with the following procedure, even if there are multiple people concurrently transferring money among multiple accounts, using any account mechanism that serializes deposit and withdrawal transactions, for example, the version of <code>make-account</code> in the text above.</p>
<p></p>
<p></p>
<p><code>(define (transfer from-account to-account amount)   ((from-account 'withdraw) amount)   ((to-account 'deposit) amount))</code></p>
<p></p>
<p>Louis Reasoner claims that there is a problem here, and that we need to use a more sophisticated method, such as the one required for dealing with the exchange problem. Is Louis right? If not, what is the essential difference between the transfer problem and the exchange problem? (You should assume that the balance in <code>from-account</code> is at least <code>amount</code>.)</p>
<p></p>
<p></p>
<p><strong>Exercise 3.45.</strong>  Louis Reasoner thinks our bank-account system is unnecessarily complex and error-prone now that deposits and withdrawals aren't automatically serialized. He suggests that <code>make-account-and-serializer</code> should have exported the serializer (for use by such procedures as <code>serialized-exchange</code>) in addition to (rather than instead of) using it to serialize accounts and deposits as <code>make-account</code> did. He proposes to redefine accounts as follows:</p>
<p></p>
<p></p>
<p><code>(define (make-account-and-serializer balance)   (define (withdraw amount)     (if (&gt;= balance amount)         (begin (set! balance (- balance amount))                balance)         &quot;Insufficient funds&quot;))   (define (deposit amount)     (set! balance (+ balance amount))     balance)   (let ((balance-serializer (make-serializer)))     (define (dispatch m)       (cond ((eq? m 'withdraw) (balance-serializer withdraw))             ((eq? m 'deposit) (balance-serializer deposit))             ((eq? m 'balance) balance)             ((eq? m 'serializer) balance-serializer)             (else (error &quot;Unknown request -- MAKE-ACCOUNT&quot;                          m))))     dispatch))</code></p>
<p></p>
<p>Then deposits are handled as with the original <code>make-account</code>:</p>
<p></p>
<p><code>(define (deposit account amount)  ((account 'deposit) amount))</code></p>
<p></p>
<p>Explain what is wrong with Louis's reasoning. In particular, consider what happens when <code>serialized-exchange</code> is called.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_427">Implementing serializers</a></h4>
<p>We implement serializers in terms of a more primitive synchronization mechanism called a <em>mutex</em>. A mutex is an object that supports two operations -- the mutex can be <em>acquired</em>, and the mutex can be <em>released</em>. Once a mutex has been acquired, no other acquire operations on that mutex may proceed until the mutex is released.<a href="#footnote_Temp_428"><sup>44</sup></a> In our implementation, each serializer has an associated mutex. Given a procedure <code>p</code>, the serializer returns a procedure that acquires the mutex, runs <code>p</code>, and then releases the mutex. This ensures that only one of the procedures produced by the serializer can be running at once, which is precisely the serialization property that we need to guarantee.</p>
<p></p>
<p></p>
<p><code>(define (make-serializer)   (let ((mutex (make-mutex)))     (lambda (p)       (define (serialized-p . args)         (mutex 'acquire)         (let ((val (apply p args)))           (mutex 'release)           val))       serialized-p)))</code></p>
<p></p>
<p></p>
<p>The mutex is a mutable object (here we'll use a one-element list, which we'll refer to as a <em>cell</em>) that can hold the value true or false. When the value is false, the mutex is available to be acquired. When the value is true, the mutex is unavailable, and any process that attempts to acquire the mutex must wait.</p>
<p>Our mutex constructor <code>make-mutex</code> begins by initializing the cell contents to false. To acquire the mutex, we test the cell. If the mutex is available, we set the cell contents to true and proceed. Otherwise, we wait in a loop, attempting to acquire over and over again, until we find that the mutex is available.<a href="#footnote_Temp_429"><sup>45</sup></a> To release the mutex, we set the cell contents to false.</p>
<p></p>
<p></p>
<p><code>(define (make-mutex)   (let ((cell (list false)))                 (define (the-mutex m)       (cond ((eq? m 'acquire)              (if (test-and-set! cell)                  (the-mutex 'acquire))) ; retry             ((eq? m 'release) (clear! cell))))     the-mutex)) (define (clear! cell)   (set-car! cell false))</code></p>
<p></p>
<p></p>
<p><code>Test-and-set!</code> tests the cell and returns the result of the test. In addition, if the test was false, <code>test-and-set!</code> sets the cell contents to true before returning false. We can express this behavior as the following procedure:</p>
<p></p>
<p></p>
<p><code>(define (test-and-set! cell)   (if (car cell)       true       (begin (set-car! cell true)              false)))</code></p>
<p></p>
<p></p>
<p>However, this implementation of <code>test-and-set!</code> does not suffice as it stands. There is a crucial subtlety here, which is the essential place where concurrency control enters the system: The <code>test-and-set!</code> operation must be performed <em>atomically</em>. That is, we must guarantee that, once a process has tested the cell and found it to be false, the cell contents will actually be set to true before any other process can test the cell. If we do not make this guarantee, then the mutex can fail in a way similar to the bank-account failure in figure <a href="#%_fig_3.29">3.29</a>. (See exercise <a href="#%_thm_3.46">3.46</a>.)</p>
<p>The actual implementation of <code>test-and-set!</code> depends on the details of how our system runs concurrent processes. For example, we might be executing concurrent processes on a sequential processor using a time-slicing mechanism that cycles through the processes, permitting each process to run for a short time before interrupting it and moving on to the next process. In that case, <code>test-and-set!</code> can work by disabling time slicing during the testing and setting.<a href="#footnote_Temp_430"><sup>46</sup></a> Alternatively, multiprocessing computers provide instructions that support atomic operations directly in hardware.<a href="#footnote_Temp_431"><sup>47</sup></a></p>
<p></p>
<p><strong>Exercise 3.46.</strong>  Suppose that we implement <code>test-and-set!</code> using an ordinary procedure as shown in the text, without attempting to make the operation atomic. Draw a timing diagram like the one in figure <a href="#%_fig_3.29">3.29</a> to demonstrate how the mutex implementation can fail by allowing two processes to acquire the mutex at the same time.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.47.</strong>  A semaphore (of size <em>n</em>) is a generalization of a mutex. Like a mutex, a semaphore supports acquire and release operations, but it is more general in that up to <em>n</em> processes can acquire it concurrently. Additional processes that attempt to acquire the semaphore must wait for release operations. Give implementations of semaphores</p>
<p></p>
<p></p>
<p>a. in terms of mutexes</p>
<p></p>
<p></p>
<p>b. in terms of atomic <code>test-and-set!</code> operations.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_434">Deadlock</a></h4>
<p>Now that we have seen how to implement serializers, we can see that account exchanging still has a problem, even with the <code>serialized-exchange</code> procedure above. Imagine that Peter attempts to exchange <em>a</em>1 with <em>a</em>2 while Paul concurrently attempts to exchange <em>a</em>2 with <em>a</em>1. Suppose that Peter's process reaches the point where it has entered a serialized procedure protecting <em>a</em>1 and, just after that, Paul's process enters a serialized procedure protecting <em>a</em>2. Now Peter cannot proceed (to enter a serialized procedure protecting <em>a</em>2) until Paul exits the serialized procedure protecting <em>a</em>2. Similarly, Paul cannot proceed until Peter exits the serialized procedure protecting <em>a</em>1. Each process is stalled forever, waiting for the other. This situation is called a <em>deadlock</em>. Deadlock is always a danger in systems that provide concurrent access to multiple shared resources.</p>
<p>One way to avoid the deadlock in this situation is to give each account a unique identification number and rewrite <code>serialized-exchange</code> so that a process will always attempt to enter a procedure protecting the lowest-numbered account first. Although this method works well for the exchange problem, there are other situations that require more sophisticated deadlock-avoidance techniques, or where deadlock cannot be avoided at all. (See exercises <a href="#%_thm_3.48">3.48</a> and <a href="#%_thm_3.49">3.49</a>.)<a href="#footnote_Temp_435"><sup>48</sup></a></p>
<p></p>
<p><strong>Exercise 3.48.</strong>  Explain in detail why the deadlock-avoidance method described above, (i.e., the accounts are numbered, and each process attempts to acquire the smaller-numbered account first) avoids deadlock in the exchange problem. Rewrite <code>serialized-exchange</code> to incorporate this idea. (You will also need to modify <code>make-account</code> so that each account is created with a number, which can be accessed by sending an appropriate message.)</p>
<p></p>
<p></p>
<p><strong>Exercise 3.49.</strong>  Give a scenario where the deadlock-avoidance mechanism described above does not work. (Hint: In the exchange problem, each process knows in advance which accounts it will need to get access to. Consider a situation where a process must get access to some shared resources before it can know which additional shared resources it will require.)</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_438">Concurrency, time, and communication</a></h4>
<p>We've seen how programming concurrent systems requires controlling the ordering of events when different processes access shared state, and we've seen how to achieve this control through judicious use of serializers. But the problems of concurrency lie deeper than this, because, from a fundamental point of view, it's not always clear what is meant by ``shared state.''</p>
<p>Mechanisms such as <code>test-and-set!</code> require processes to examine a global shared flag at arbitrary times. This is problematic and inefficient to implement in modern high-speed processors, where due to optimization techniques such as pipelining and cached memory, the contents of memory may not be in a consistent state at every instant. In contemporary multiprocessing systems, therefore, the serializer paradigm is being supplanted by new approaches to concurrency control.<a href="#footnote_Temp_439"><sup>49</sup></a></p>
<p>The problematic aspects of shared state also arise in large, distributed systems. For instance, imagine a distributed banking system where individual branch banks maintain local values for bank balances and periodically compare these with values maintained by other branches. In such a system the value of ``the account balance'' would be undetermined, except right after synchronization. If Peter deposits money in an account he holds jointly with Paul, when should we say that the account balance has changed -- when the balance in the local branch changes, or not until after the synchronization? And if Paul accesses the account from a different branch, what are the reasonable constraints to place on the banking system such that the behavior is ``correct''? The only thing that might matter for correctness is the behavior observed by Peter and Paul individually and the ``state'' of the account immediately after synchronization. Questions about the ``real'' account balance or the order of events between synchronizations may be irrelevant or meaningless.<a href="#footnote_Temp_440"><sup>50</sup></a></p>
<p>The basic phenomenon here is that synchronizing different processes, establishing shared state, or imposing an order on events requires communication among the processes. In essence, any notion of time in concurrency control must be intimately tied to communication.<a href="#footnote_Temp_441"><sup>51</sup></a> It is intriguing that a similar connection between time and communication also arises in the Theory of Relativity, where the speed of light (the fastest signal that can be used to synchronize events) is a fundamental constant relating time and space. The complexities we encounter in dealing with time and state in our computational models may in fact mirror a fundamental complexity of the physical universe.</p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_405"><sup>34</sup></a> Most real processors actually execute a few operations at a time, following a strategy called <em>pipelining</em>. Although this technique greatly improves the effective utilization of the hardware, it is used only to speed up the execution of a sequential instruction stream, while retaining the behavior of the sequential program.</p>
<p><a href="#call_footnote_Temp_406"><sup>35</sup></a> To quote some graffiti seen on a Cambridge building wall: ``Time is a device that was invented to keep everything from happening at once.''</p>
<p><a href="#call_footnote_Temp_407"><sup>36</sup></a> An even worse failure for this system could occur if the two <code>set!</code> operations attempt to change the balance simultaneously, in which case the actual data appearing in memory might end up being a random combination of the information being written by the two processes. Most computers have interlocks on the primitive memory-write operations, which protect against such simultaneous access. Even this seemingly simple kind of protection, however, raises implementation challenges in the design of multiprocessing computers, where elaborate <em>cache-coherence</em> protocols are required to ensure that the various processors will maintain a consistent view of memory contents, despite the fact that data may be replicated (``cached'') among the different processors to increase the speed of memory access.</p>
<p><a href="#call_footnote_Temp_409"><sup>37</sup></a> The factorial program in section <a href="book-Z-H-20.html#%_sec_3.1.3">3.1.3</a> illustrates this for a single sequential process.</p>
<p><a href="#call_footnote_Temp_410"><sup>38</sup></a> The columns show the contents of Peter's wallet, the joint account (in Bank1), Paul's wallet, and Paul's private account (in Bank2), before and after each withdrawal (W) and deposit (D). Peter withdraws $10 from Bank1; Paul deposits $5 in Bank2, then withdraws $25 from Bank1.</p>
<p><a href="#call_footnote_Temp_411"><sup>39</sup></a> A more formal way to express this idea is to say that concurrent programs are inherently <em>nondeterministic</em>. That is, they are described not by single-valued functions, but by functions whose results are sets of possible values. In section <a href="book-Z-H-28.html#%_sec_4.3">4.3</a> we will study a language for expressing nondeterministic computations.</p>
<p><a href="#call_footnote_Temp_415"><sup>40</sup></a> <code>Parallel-execute</code> is not part of standard Scheme, but it can be implemented in MIT Scheme. In our implementation, the new concurrent processes also run concurrently with the original Scheme process. Also, in our implementation, the value returned by <code>parallel-execute</code> is a special control object that can be used to halt the newly created processes.</p>
<p><a href="#call_footnote_Temp_421"><sup>41</sup></a> We have simplified <code>exchange</code> by exploiting the fact that our <code>deposit</code> message accepts negative amounts. (This is a serious bug in our banking system!)</p>
<p><a href="#call_footnote_Temp_422"><sup>42</sup></a> If the account balances start out as $10, $20, and $30, then after any number of concurrent exchanges, the balances should still be $10, $20, and $30 in some order. Serializing the deposits to individual accounts is not sufficient to guarantee this. See exercise <a href="#%_thm_3.43">3.43</a>.</p>
<p><a href="#call_footnote_Temp_423"><sup>43</sup></a> Exercise <a href="#%_thm_3.45">3.45</a> investigates why deposits and withdrawals are no longer automatically serialized by the account.</p>
<p><a href="#call_footnote_Temp_428"><sup>44</sup></a> The term ``mutex'' is an abbreviation for <em>mutual exclusion</em>. The general problem of arranging a mechanism that permits concurrent processes to safely share resources is called the mutual exclusion problem. Our mutex is a simple variant of the <em>semaphore</em> mechanism (see exercise <a href="#%_thm_3.47">3.47</a>), which was introduced in the ``THE'' Multiprogramming System developed at the Technological University of Eindhoven and named for the university's initials in Dutch (Dijkstra 1968a). The acquire and release operations were originally called P and V, from the Dutch words <em>passeren</em> (to pass) and <em>vrijgeven</em> (to release), in reference to the semaphores used on railroad systems. Dijkstra's classic exposition (1968b) was one of the first to clearly present the issues of concurrency control, and showed how to use semaphores to handle a variety of concurrency problems.</p>
<p><a href="#call_footnote_Temp_429"><sup>45</sup></a> In most time-shared operating systems, processes that are blocked by a mutex do not waste time ``busy-waiting'' as above. Instead, the system schedules another process to run while the first is waiting, and the blocked process is awakened when the mutex becomes available.</p>
<p><a href="#call_footnote_Temp_430"><sup>46</sup></a> In MIT Scheme for a single processor, which uses a time-slicing model, <code>test-and-set!</code> can be implemented as follows:</p>
<p></p>
<p><code>(define (test-and-set! cell)   (without-interrupts    (lambda ()      (if (car cell)          true          (begin (set-car! cell true)                 false)))))</code></p>
<p></p>
<p><code>Without-interrupts</code> disables time-slicing interrupts while its procedure argument is being executed.</p>
<p><a href="#call_footnote_Temp_431"><sup>47</sup></a> There are many variants of such instructions -- including test-and-set, test-and-clear, swap, compare-and-exchange, load-reserve, and store-conditional -- whose design must be carefully matched to the machine's processor-memory interface. One issue that arises here is to determine what happens if two processes attempt to acquire the same resource at exactly the same time by using such an instruction. This requires some mechanism for making a decision about which process gets control. Such a mechanism is called an <em>arbiter</em>. Arbiters usually boil down to some sort of hardware device. Unfortunately, it is possible to prove that one cannot physically construct a fair arbiter that works 100% of the time unless one allows the arbiter an arbitrarily long time to make its decision. The fundamental phenomenon here was originally observed by the fourteenth-century French philosopher Jean Buridan in his commentary on Aristotle's <em>De caelo</em>. Buridan argued that a perfectly rational dog placed between two equally attractive sources of food will starve to death, because it is incapable of deciding which to go to first.</p>
<p><a href="#call_footnote_Temp_435"><sup>48</sup></a> The general technique for avoiding deadlock by numbering the shared resources and acquiring them in order is due to Havender (1968). Situations where deadlock cannot be avoided require <em>deadlock-recovery</em> methods, which entail having processes ``back out'' of the deadlocked state and try again. Deadlock-recovery mechanisms are widely used in database management systems, a topic that is treated in detail in Gray and Reuter 1993.</p>
<p><a href="#call_footnote_Temp_439"><sup>49</sup></a> One such alternative to serialization is called <em>barrier synchronization</em>. The programmer permits concurrent processes to execute as they please, but establishes certain synchronization points (``barriers'') through which no process can proceed until all the processes have reached the barrier. Modern processors provide machine instructions that permit programmers to establish synchronization points at places where consistency is required. The PowerPC<sup><em>T</em><em>M</em></sup>, for example, includes for this purpose two instructions called SYNC and EIEIO (Enforced In-order Execution of Input/Output).</p>
<p><a href="#call_footnote_Temp_440"><sup>50</sup></a> This may seem like a strange point of view, but there are systems that work this way. International charges to credit-card accounts, for example, are normally cleared on a per-country basis, and the charges made in different countries are periodically reconciled. Thus the account balance may be different in different countries.</p>
<p><a href="#call_footnote_Temp_441"><sup>51</sup></a> For distributed systems, this perspective was pursued by Lamport (1978), who showed how to use communication to establish ``global clocks'' that can be used to establish orderings on events in distributed systems.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-22.html">previous</a>, <a href="book-Z-H-24.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-23.html">previous</a>, <a href="book-Z-H-25.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_3.5">3.5  Streams</a></h2>
<p>We've gained a good understanding of assignment as a tool in modeling, as well as an appreciation of the complex problems that assignment raises. It is time to ask whether we could have gone about things in a different way, so as to avoid some of these problems. In this section, we explore an alternative approach to modeling state, based on data structures called <em>streams</em>. As we shall see, streams can mitigate some of the complexity of modeling state.</p>
<p>Let's step back and review where this complexity comes from. In an attempt to model real-world phenomena, we made some apparently reasonable decisions: We modeled real-world objects with local state by computational objects with local variables. We identified time variation in the real world with time variation in the computer. We implemented the time variation of the states of the model objects in the computer with assignments to the local variables of the model objects.</p>
<p>Is there another approach? Can we avoid identifying time in the computer with time in the modeled world? Must we make the model change with time in order to model phenomena in a changing world? Think about the issue in terms of mathematical functions. We can describe the time-varying behavior of a quantity <em>x</em> as a function of time <em>x</em>(<em>t</em>). If we concentrate on <em>x</em> instant by instant, we think of it as a changing quantity. Yet if we concentrate on the entire time history of values, we do not emphasize change -- the function itself does not change.<a href="#footnote_Temp_442"><sup>52</sup></a></p>
<p>If time is measured in discrete steps, then we can model a time function as a (possibly infinite) sequence. In this section, we will see how to model change in terms of sequences that represent the time histories of the systems being modeled. To accomplish this, we introduce new data structures called <em>streams</em>. From an abstract point of view, a stream is simply a sequence. However, we will find that the straightforward implementation of streams as lists (as in section <a href="book-Z-H-15.html#%_sec_2.2.1">2.2.1</a>) doesn't fully reveal the power of stream processing. As an alternative, we introduce the technique of <em>delayed evaluation</em>, which enables us to represent very large (even infinite) sequences as streams.</p>
<p>Stream processing lets us model systems that have state without ever using assignment or mutable data. This has important implications, both theoretical and practical, because we can build models that avoid the drawbacks inherent in introducing assignment. On the other hand, the stream framework raises difficulties of its own, and the question of which modeling technique leads to more modular and more easily maintained systems remains open.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.5.1">3.5.1  Streams Are Delayed Lists</a></h3>
<p>As we saw in section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a>, sequences can serve as standard interfaces for combining program modules. We formulated powerful abstractions for manipulating sequences, such as <code>map</code>, <code>filter</code>, and <code>accumulate</code>, that capture a wide variety of operations in a manner that is both succinct and elegant.</p>
<p>Unfortunately, if we represent sequences as lists, this elegance is bought at the price of severe inefficiency with respect to both the time and space required by our computations. When we represent manipulations on sequences as transformations of lists, our programs must construct and copy data structures (which may be huge) at every step of a process.</p>
<p>To see why this is true, let us compare two programs for computing the sum of all the prime numbers in an interval. The first program is written in standard iterative style:<a href="#footnote_Temp_443"><sup>53</sup></a></p>
<p></p>
<p></p>
<p><code>(define (sum-primes a b)   (define (iter count accum)     (cond ((&gt; count b) accum)           ((prime? count) (iter (+ count 1) (+ count accum)))           (else (iter (+ count 1) accum))))   (iter a 0))</code></p>
<p></p>
<p>The second program performs the same computation using the sequence operations of section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a>:</p>
<p></p>
<p></p>
<p><code>(define (sum-primes a b)   (accumulate +               0               (filter prime? (enumerate-interval a b))))</code></p>
<p></p>
<p></p>
<p>In carrying out the computation, the first program needs to store only the sum being accumulated. In contrast, the filter in the second program cannot do any testing until <code>enumerate-interval</code> has constructed a complete list of the numbers in the interval. The filter generates another list, which in turn is passed to <code>accumulate</code> before being collapsed to form a sum. Such large intermediate storage is not needed by the first program, which we can think of as enumerating the interval incrementally, adding each prime to the sum as it is generated.</p>
<p>The inefficiency in using lists becomes painfully apparent if we use the sequence paradigm to compute the second prime in the interval from 10,000 to 1,000,000 by evaluating the expression</p>
<p></p>
<p></p>
<p><code>(car (cdr (filter prime?                   (enumerate-interval 10000 1000000))))</code></p>
<p></p>
<p>This expression does find the second prime, but the computational overhead is outrageous. We construct a list of almost a million integers, filter this list by testing each element for primality, and then ignore almost all of the result. In a more traditional programming style, we would interleave the enumeration and the filtering, and stop when we reached the second prime.</p>
<p>Streams are a clever idea that allows one to use sequence manipulations without incurring the costs of manipulating sequences as lists. With streams we can achieve the best of both worlds: We can formulate programs elegantly as sequence manipulations, while attaining the efficiency of incremental computation. The basic idea is to arrange to construct a stream only partially, and to pass the partial construction to the program that consumes the stream. If the consumer attempts to access a part of the stream that has not yet been constructed, the stream will automatically construct just enough more of itself to produce the required part, thus preserving the illusion that the entire stream exists. In other words, although we will write programs as if we were processing complete sequences, we design our stream implementation to automatically and transparently interleave the construction of the stream with its use.</p>
<p>On the surface, streams are just lists with different names for the procedures that manipulate them. There is a constructor, <code>cons-stream</code>, and two selectors, <code>stream-car</code> and <code>stream-cdr</code>, which satisfy the constraints</p>
<p></p>
<p><img src="ch3-Z-G-34.gif" /></p>
<p>There is a distinguishable object, <code>the-empty-stream</code>, which cannot be the result of any <code>cons-stream</code> operation, and which can be identified with the predicate <code>stream-null?</code>.<a href="#footnote_Temp_444"><sup>54</sup></a> Thus we can make and use streams, in just the same way as we can make and use lists, to represent aggregate data arranged in a sequence. In particular, we can build stream analogs of the list operations from chapter 2, such as <code>list-ref</code>, <code>map</code>, and <code>for-each</code>:<a href="#footnote_Temp_445"><sup>55</sup></a></p>
<p></p>
<p><code>(define (stream-ref s n)   (if (= n 0)       (stream-car s)       (stream-ref (stream-cdr s) (- n 1)))) (define (stream-map proc s)   (if (stream-null? s)       the-empty-stream       (cons-stream (proc (stream-car s))                    (stream-map proc (stream-cdr s))))) (define (stream-for-each proc s)   (if (stream-null? s)       'done       (begin (proc (stream-car s))              (stream-for-each proc (stream-cdr s)))))</code></p>
<p></p>
<p><code>Stream-for-each</code> is useful for viewing streams:</p>
<p></p>
<p><code>(define (display-stream s)   (stream-for-each display-line s))  (define (display-line x)   (newline)   (display x))</code></p>
<p></p>
<p></p>
<p>To make the stream implementation automatically and transparently interleave the construction of a stream with its use, we will arrange for the <code>cdr</code> of a stream to be evaluated when it is accessed by the <code>stream-cdr</code> procedure rather than when the stream is constructed by <code>cons-stream</code>. This implementation choice is reminiscent of our discussion of rational numbers in section <a href="book-Z-H-14.html#%_sec_2.1.2">2.1.2</a>, where we saw that we can choose to implement rational numbers so that the reduction of numerator and denominator to lowest terms is performed either at construction time or at selection time. The two rational-number implementations produce the same data abstraction, but the choice has an effect on efficiency. There is a similar relationship between streams and ordinary lists. As a data abstraction, streams are the same as lists. The difference is the time at which the elements are evaluated. With ordinary lists, both the <code>car</code> and the <code>cdr</code> are evaluated at construction time. With streams, the <code>cdr</code> is evaluated at selection time.</p>
<p>Our implementation of streams will be based on a special form called <code>delay</code>. Evaluating <code>(delay &lt;exp&gt;)</code> does not evaluate the expression &lt;<em>exp</em>&gt;, but rather returns a so-called <em>delayed object</em>, which we can think of as a ``promise'' to evaluate &lt;<em>exp</em>&gt; at some future time. As a companion to <code>delay</code>, there is a procedure called <code>force</code> that takes a delayed object as argument and performs the evaluation -- in effect, forcing the <code>delay</code> to fulfill its promise. We will see below how <code>delay</code> and <code>force</code> can be implemented, but first let us use these to construct streams.</p>
<p><code>Cons-stream</code> is a special form defined so that</p>
<p></p>
<p></p>
<p><code>(cons-stream &lt;a&gt; &lt;b&gt;)</code></p>
<p></p>
<p>is equivalent to</p>
<p></p>
<p></p>
<p><code>(cons &lt;a&gt; (delay &lt;b&gt;))</code></p>
<p></p>
<p>What this means is that we will construct streams using pairs. However, rather than placing the value of the rest of the stream into the <code>cdr</code> of the pair we will put there a promise to compute the rest if it is ever requested. <code>Stream-car</code> and <code>stream-cdr</code> can now be defined as procedures:</p>
<p></p>
<p></p>
<p><code>(define (stream-car stream) (car stream))  (define (stream-cdr stream) (force (cdr stream)))</code></p>
<p></p>
<p><code>Stream-car</code> selects the <code>car</code> of the pair; <code>stream-cdr</code> selects the <code>cdr</code> of the pair and evaluates the delayed expression found there to obtain the rest of the stream.<a href="#footnote_Temp_446"><sup>56</sup></a></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_447">The stream implementation in action</a></h4>
<p>To see how this implementation behaves, let us analyze the ``outrageous'' prime computation we saw above, reformulated in terms of streams:</p>
<p></p>
<p></p>
<p><code>(stream-car  (stream-cdr   (stream-filter prime?                  (stream-enumerate-interval 10000 1000000))))</code></p>
<p></p>
<p>We will see that it does indeed work efficiently.</p>
<p>We begin by calling <code>stream-enumerate-interval</code> with the arguments 10,000 and 1,000,000. <code>Stream-enumerate-interval</code> is the stream analog of <code>enumerate-interval</code> (section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a>):</p>
<p></p>
<p></p>
<p><code>(define (stream-enumerate-interval low high)   (if (&gt; low high)       the-empty-stream       (cons-stream        low        (stream-enumerate-interval (+ low 1) high))))</code></p>
<p></p>
<p>and thus the result returned by <code>stream-enumerate-interval</code>, formed by the <code>cons-stream</code>, is<a href="#footnote_Temp_448"><sup>57</sup></a></p>
<p></p>
<p></p>
<p><code>(cons 10000       (delay (stream-enumerate-interval 10001 1000000)))</code></p>
<p></p>
<p>That is, <code>stream-enumerate-interval</code> returns a stream represented as a pair whose <code>car</code> is 10,000 and whose <code>cdr</code> is a promise to enumerate more of the interval if so requested. This stream is now filtered for primes, using the stream analog of the <code>filter</code> procedure (section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a>):</p>
<p></p>
<p></p>
<p><code>(define (stream-filter pred stream)   (cond ((stream-null? stream) the-empty-stream)         ((pred (stream-car stream))          (cons-stream (stream-car stream)                       (stream-filter pred                                      (stream-cdr stream))))         (else (stream-filter pred (stream-cdr stream)))))</code></p>
<p></p>
<p><code>Stream-filter</code> tests the <code>stream-car</code> of the stream (the <code>car</code> of the pair, which is 10,000). Since this is not prime, <code>stream-filter</code> examines the <code>stream-cdr</code> of its input stream. The call to <code>stream-cdr</code> forces evaluation of the delayed <code>stream-enumerate-interval</code>, which now returns</p>
<p></p>
<p></p>
<p><code>(cons 10001       (delay (stream-enumerate-interval 10002 1000000)))</code></p>
<p></p>
<p><code>Stream-filter</code> now looks at the <code>stream-car</code> of this stream, 10,001, sees that this is not prime either, forces another <code>stream-cdr</code>, and so on, until <code>stream-enumerate-interval</code> yields the prime 10,007, whereupon <code>stream-filter</code>, according to its definition, returns</p>
<p></p>
<p></p>
<p><code>(cons-stream (stream-car stream)              (stream-filter pred (stream-cdr stream)))</code></p>
<p></p>
<p>which in this case is</p>
<p></p>
<p></p>
<p><code>(cons 10007       (delay         (stream-filter          prime?          (cons 10008                (delay                  (stream-enumerate-interval 10009                                             1000000))))))</code></p>
<p></p>
<p>This result is now passed to <code>stream-cdr</code> in our original expression. This forces the delayed <code>stream-filter</code>, which in turn keeps forcing the delayed <code>stream-enumerate-interval</code> until it finds the next prime, which is 10,009. Finally, the result passed to <code>stream-car</code> in our original expression is</p>
<p></p>
<p></p>
<p><code>(cons 10009       (delay         (stream-filter          prime?          (cons 10010                (delay                  (stream-enumerate-interval 10011                                             1000000))))))</code></p>
<p></p>
<p><code>Stream-car</code> returns 10,009, and the computation is complete. Only as many integers were tested for primality as were necessary to find the second prime, and the interval was enumerated only as far as was necessary to feed the prime filter.</p>
<p>In general, we can think of delayed evaluation as ``demand-driven'' programming, whereby each stage in the stream process is activated only enough to satisfy the next stage. What we have done is to decouple the actual order of events in the computation from the apparent structure of our procedures. We write procedures as if the streams existed ``all at once'' when, in reality, the computation is performed incrementally, as in traditional programming styles.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_449">Implementing <code>delay</code> and <code>force</code></a></h4>
<p>Although <code>delay</code> and <code>force</code> may seem like mysterious operations, their implementation is really quite straightforward. <code>Delay</code> must package an expression so that it can be evaluated later on demand, and we can accomplish this simply by treating the expression as the body of a procedure. <code>Delay</code> can be a special form such that</p>
<p></p>
<p></p>
<p><code>(delay &lt;exp&gt;)</code></p>
<p></p>
<p>is syntactic sugar for</p>
<p></p>
<p></p>
<p><code>(lambda () &lt;exp&gt;)</code></p>
<p></p>
<p><code>Force</code> simply calls the procedure (of no arguments) produced by <code>delay</code>, so we can implement <code>force</code> as a procedure:</p>
<p></p>
<p></p>
<p><code>(define (force delayed-object)   (delayed-object))</code></p>
<p></p>
<p></p>
<p>This implementation suffices for <code>delay</code> and <code>force</code> to work as advertised, but there is an important optimization that we can include. In many applications, we end up forcing the same delayed object many times. This can lead to serious inefficiency in recursive programs involving streams. (See exercise <a href="#%_thm_3.57">3.57</a>.) The solution is to build delayed objects so that the first time they are forced, they store the value that is computed. Subsequent forcings will simply return the stored value without repeating the computation. In other words, we implement <code>delay</code> as a special-purpose memoized procedure similar to the one described in exercise <a href="book-Z-H-22.html#%_thm_3.27">3.27</a>. One way to accomplish this is to use the following procedure, which takes as argument a procedure (of no arguments) and returns a memoized version of the procedure. The first time the memoized procedure is run, it saves the computed result. On subsequent evaluations, it simply returns the result.</p>
<p></p>
<p></p>
<p><code>(define (memo-proc proc)   (let ((already-run? false) (result false))     (lambda ()       (if (not already-run?)           (begin (set! result (proc))                  (set! already-run? true)                  result)           result))))</code></p>
<p></p>
<p><code>Delay</code> is then defined so that <code>(delay &lt;exp&gt;)</code> is equivalent to</p>
<p></p>
<p></p>
<p><code>(memo-proc (lambda () &lt;exp&gt;))</code></p>
<p></p>
<p>and <code>force</code> is as defined previously.<a href="#footnote_Temp_450"><sup>58</sup></a></p>
<p></p>
<p><strong>Exercise 3.50.</strong>  Complete the following definition, which generalizes <code>stream-map</code> to allow procedures that take multiple arguments, analogous to <code>map</code> in section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a>, footnote <a href="book-Z-H-15.html#footnote_Temp_166">12</a>.</p>
<p></p>
<p></p>
<p><code>(define (stream-map proc . argstreams)   (if (&lt;??&gt; (car argstreams))       the-empty-stream       (&lt;??&gt;        (apply proc (map &lt;??&gt; argstreams))        (apply stream-map               (cons proc (map &lt;??&gt; argstreams))))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.51.</strong>  In order to take a closer look at delayed evaluation, we will use the following procedure, which simply returns its argument after printing it:</p>
<p></p>
<p></p>
<p><code>(define (show x)   (display-line x)   x)</code></p>
<p></p>
<p>What does the interpreter print in response to evaluating each expression in the following sequence?<a href="#footnote_Temp_453"><sup>59</sup></a></p>
<p></p>
<p></p>
<p><code>(define x (stream-map show (stream-enumerate-interval 0 10))) (stream-ref x 5) (stream-ref x 7)</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.52.</strong>  Consider the sequence of expressions</p>
<p></p>
<p></p>
<p><code>(define sum 0) (define (accum x)   (set! sum (+ x sum))   sum) (define seq (stream-map accum (stream-enumerate-interval 1 20))) (define y (stream-filter even? seq)) (define z (stream-filter (lambda (x) (= (remainder x 5) 0))                          seq)) (stream-ref y 7) (display-stream z)</code></p>
<p></p>
<p>What is the value of <code>sum</code> after each of the above expressions is evaluated? What is the printed response to evaluating the <code>stream-ref</code> and <code>display-stream</code> expressions? Would these responses differ if we had implemented <code>(delay &lt;exp&gt;)</code> simply as <code>(lambda () &lt;exp&gt;)</code> without using the optimization provided by <code>memo-proc</code> ? Explain.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.5.2">3.5.2  Infinite Streams</a></h3>
<p>We have seen how to support the illusion of manipulating streams as complete entities even though, in actuality, we compute only as much of the stream as we need to access. We can exploit this technique to represent sequences efficiently as streams, even if the sequences are very long. What is more striking, we can use streams to represent sequences that are infinitely long. For instance, consider the following definition of the stream of positive integers:</p>
<p></p>
<p></p>
<p><code>(define (integers-starting-from n)   (cons-stream n (integers-starting-from (+ n 1))))  (define integers (integers-starting-from 1))</code></p>
<p></p>
<p>This makes sense because <code>integers</code> will be a pair whose <code>car</code> is 1 and whose <code>cdr</code> is a promise to produce the integers beginning with 2. This is an infinitely long stream, but in any given time we can examine only a finite portion of it. Thus, our programs will never know that the entire infinite stream is not there.</p>
<p>Using <code>integers</code> we can define other infinite streams, such as the stream of integers that are not divisible by 7:</p>
<p></p>
<p></p>
<p><code>(define (divisible? x y) (= (remainder x y) 0)) (define no-sevens   (stream-filter (lambda (x) (not (divisible? x 7)))                  integers))</code></p>
<p></p>
<p>Then we can find integers not divisible by 7 simply by accessing elements of this stream:</p>
<p></p>
<p></p>
<p><code>(stream-ref no-sevens 100) 117</code></p>
<p></p>
<p></p>
<p>In analogy with <code>integers</code>, we can define the infinite stream of Fibonacci numbers:</p>
<p></p>
<p></p>
<p><code>(define (fibgen a b)   (cons-stream a (fibgen b (+ a b)))) (define fibs (fibgen 0 1))</code></p>
<p></p>
<p><code>Fibs</code> is a pair whose <code>car</code> is 0 and whose <code>cdr</code> is a promise to evaluate <code>(fibgen 1 1)</code>. When we evaluate this delayed <code>(fibgen 1 1)</code>, it will produce a pair whose <code>car</code> is 1 and whose <code>cdr</code> is a promise to evaluate <code>(fibgen 1 2)</code>, and so on.</p>
<p>For a look at a more exciting infinite stream, we can generalize the <code>no-sevens</code> example to construct the infinite stream of prime numbers, using a method known as the <em>sieve of Eratosthenes</em>.<a href="#footnote_Temp_455"><sup>60</sup></a> We start with the integers beginning with 2, which is the first prime. To get the rest of the primes, we start by filtering the multiples of 2 from the rest of the integers. This leaves a stream beginning with 3, which is the next prime. Now we filter the multiples of 3 from the rest of this stream. This leaves a stream beginning with 5, which is the next prime, and so on. In other words, we construct the primes by a sieving process, described as follows: To sieve a stream <code>S</code>, form a stream whose first element is the first element of <code>S</code> and the rest of which is obtained by filtering all multiples of the first element of <code>S</code> out of the rest of <code>S</code> and sieving the result. This process is readily described in terms of stream operations:</p>
<p></p>
<p></p>
<p><code>(define (sieve stream)   (cons-stream    (stream-car stream)    (sieve (stream-filter            (lambda (x)              (not (divisible? x (stream-car stream))))            (stream-cdr stream)))))  (define primes (sieve (integers-starting-from 2)))</code></p>
<p></p>
<p>Now to find a particular prime we need only ask for it:</p>
<p></p>
<p></p>
<p><code>(stream-ref primes 50) 233</code></p>
<p></p>
<p></p>
<p>It is interesting to contemplate the signal-processing system set up by <code>sieve</code>, shown in the ``Henderson diagram'' in figure <a href="#%_fig_3.31">3.31</a>.<a href="#footnote_Temp_456"><sup>61</sup></a> The input stream feeds into an ``un<code>cons</code>er'' that separates the first element of the stream from the rest of the stream. The first element is used to construct a divisibility filter, through which the rest is passed, and the output of the filter is fed to another sieve box. Then the original first element is <code>cons</code>ed onto the output of the internal sieve to form the output stream. Thus, not only is the stream infinite, but the signal processor is also infinite, because the sieve contains a sieve within it.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-35.gif" /></p>
<p><strong>Figure 3.31:</strong>  The prime sieve viewed as a signal-processing system.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_457">Defining streams implicitly</a></h4>
<p>The <code>integers</code> and <code>fibs</code> streams above were defined by specifying ``generating'' procedures that explicitly compute the stream elements one by one. An alternative way to specify streams is to take advantage of delayed evaluation to define streams implicitly. For example, the following expression defines the stream <code>ones</code> to be an infinite stream of ones:</p>
<p></p>
<p></p>
<p><code>(define ones (cons-stream 1 ones))</code></p>
<p></p>
<p>This works much like the definition of a recursive procedure: <code>ones</code> is a pair whose <code>car</code> is 1 and whose <code>cdr</code> is a promise to evaluate <code>ones</code>. Evaluating the <code>cdr</code> gives us again a 1 and a promise to evaluate <code>ones</code>, and so on.</p>
<p>We can do more interesting things by manipulating streams with operations such as <code>add-streams</code>, which produces the elementwise sum of two given streams:<a href="#footnote_Temp_458"><sup>62</sup></a></p>
<p></p>
<p></p>
<p><code>(define (add-streams s1 s2)   (stream-map + s1 s2))</code></p>
<p></p>
<p>Now we can define the integers as follows:</p>
<p></p>
<p></p>
<p><code>(define integers (cons-stream 1 (add-streams ones integers)))</code></p>
<p></p>
<p>This defines <code>integers</code> to be a stream whose first element is 1 and the rest of which is the sum of <code>ones</code> and <code>integers</code>. Thus, the second element of <code>integers</code> is 1 plus the first element of <code>integers</code>, or 2; the third element of <code>integers</code> is 1 plus the second element of <code>integers</code>, or 3; and so on. This definition works because, at any point, enough of the <code>integers</code> stream has been generated so that we can feed it back into the definition to produce the next integer.</p>
<p>We can define the Fibonacci numbers in the same style:</p>
<p></p>
<p></p>
<p><code>(define fibs   (cons-stream 0                (cons-stream 1                             (add-streams (stream-cdr fibs)                                          fibs))))</code></p>
<p></p>
<p>This definition says that <code>fibs</code> is a stream beginning with 0 and 1, such that the rest of the stream can be generated by adding <code>fibs</code> to itself shifted by one place:</p>
<p></p>
<p>1</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>5</p>
<p>8</p>
<p>13</p>
<p>21</p>
<p><code>...</code> = <code>(stream-cdr fibs)</code></p>
<p>0</p>
<p>1</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>5</p>
<p>8</p>
<p>13</p>
<p><code>...</code> = <code>fibs</code></p>
<p>0</p>
<p>1</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>5</p>
<p>8</p>
<p>13</p>
<p>21</p>
<p>34</p>
<p><code>...</code> = <code>fibs</code></p>
<p><code>Scale-stream</code> is another useful procedure in formulating such stream definitions. This multiplies each item in a stream by a given constant:</p>
<p></p>
<p></p>
<p><code>(define (scale-stream stream factor)   (stream-map (lambda (x) (* x factor)) stream))</code></p>
<p></p>
<p>For example,</p>
<p></p>
<p></p>
<p><code>(define double (cons-stream 1 (scale-stream double 2)))</code></p>
<p></p>
<p>produces the stream of powers of 2: 1, 2, 4, 8, 16, 32, <code>...</code>.</p>
<p>An alternate definition of the stream of primes can be given by starting with the integers and filtering them by testing for primality. We will need the first prime, 2, to get started:</p>
<p></p>
<p></p>
<p><code>(define primes   (cons-stream    2    (stream-filter prime? (integers-starting-from 3))))</code></p>
<p></p>
<p>This definition is not so straightforward as it appears, because we will test whether a number <em>n</em> is prime by checking whether <em>n</em> is divisible by a prime (not by just any integer) less than or equal to <img src="book-Z-G-D-13.gif" /><em>n</em>:</p>
<p></p>
<p></p>
<p><code>(define (prime? n)   (define (iter ps)     (cond ((&gt; (square (stream-car ps)) n) true)           ((divisible? n (stream-car ps)) false)           (else (iter (stream-cdr ps)))))   (iter primes))</code></p>
<p></p>
<p>This is a recursive definition, since <code>primes</code> is defined in terms of the <code>prime?</code> predicate, which itself uses the <code>primes</code> stream. The reason this procedure works is that, at any point, enough of the <code>primes</code> stream has been generated to test the primality of the numbers we need to check next. That is, for every <em>n</em> we test for primality, either <em>n</em> is not prime (in which case there is a prime already generated that divides it) or <em>n</em> is prime (in which case there is a prime already generated -- i.e., a prime less than <em>n</em> -- that is greater than <img src="book-Z-G-D-13.gif" /><em>n</em>).<a href="#footnote_Temp_459"><sup>63</sup></a></p>
<p><strong>Exercise 3.53.</strong>  Without running the program, describe the elements of the stream defined by</p>
<p></p>
<p><code>(define s (cons-stream 1 (add-streams s s)))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.54.</strong>  Define a procedure <code>mul-streams</code>, analogous to <code>add-streams</code>, that produces the elementwise product of its two input streams. Use this together with the stream of <code>integers</code> to complete the following definition of the stream whose <em>n</em>th element (counting from 0) is <em>n</em> + 1 factorial:</p>
<p></p>
<p><code>(define factorials (cons-stream 1 (mul-streams &lt;??&gt; &lt;??&gt;)))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.55.</strong>  Define a procedure <code>partial-sums</code> that takes as argument a stream <em>S</em> and returns the stream whose elements are <em>S</em><sub>0</sub>, <em>S</em><sub>0</sub> + <em>S</em><sub>1</sub>, <em>S</em><sub>0</sub> + <em>S</em><sub>1</sub> + <em>S</em><sub>2</sub>, <code>...</code>. For example, <code>(partial-sums integers)</code> should be the stream 1, 3, 6, 10, 15, <code>...</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.56.</strong>  A famous problem, first raised by R. Hamming, is to enumerate, in ascending order with no repetitions, all positive integers with no prime factors other than 2, 3, or 5. One obvious way to do this is to simply test each integer in turn to see whether it has any factors other than 2, 3, and 5. But this is very inefficient, since, as the integers get larger, fewer and fewer of them fit the requirement. As an alternative, let us call the required stream of numbers <code>S</code> and notice the following facts about it.</p>
<p></p>
<ul>
<li><code>S</code> begins with 1.</li>
<li>The elements of <code>(scale-stream S 2)</code> are also elements of <code>S</code>.</li>
<li>The same is true for <code>(scale-stream S 3)</code> and <code>(scale-stream 5 S)</code>.</li>
<li>These are all the elements of <code>S</code>.</li>
</ul>
<p></p>
<p>Now all we have to do is combine elements from these sources. For this we define a procedure <code>merge</code> that combines two ordered streams into one ordered result stream, eliminating repetitions:</p>
<p></p>
<p></p>
<p><code>(define (merge s1 s2)   (cond ((stream-null? s1) s2)         ((stream-null? s2) s1)         (else          (let ((s1car (stream-car s1))                (s2car (stream-car s2)))            (cond ((&lt; s1car s2car)                   (cons-stream s1car (merge (stream-cdr s1) s2)))                  ((&gt; s1car s2car)                   (cons-stream s2car (merge s1 (stream-cdr s2))))                  (else                   (cons-stream s1car                                (merge (stream-cdr s1)                                       (stream-cdr s2)))))))))</code></p>
<p></p>
<p>Then the required stream may be constructed with <code>merge</code>, as follows:</p>
<p></p>
<p></p>
<p><code>(define S (cons-stream 1 (merge &lt;??&gt; &lt;??&gt;)))</code></p>
<p></p>
<p>Fill in the missing expressions in the places marked &lt;<em>??</em>&gt; above.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.57.</strong>  How many additions are performed when we compute the <em>n</em>th Fibonacci number using the definition of <code>fibs</code> based on the <code>add-streams</code> procedure? Show that the number of additions would be exponentially greater if we had implemented <code>(delay &lt;exp&gt;)</code> simply as <code>(lambda () &lt;exp&gt;)</code>, without using the optimization provided by the <code>memo-proc</code> procedure described in section <a href="#%_sec_3.5.1">3.5.1</a>.<a href="#footnote_Temp_465"><sup>64</sup></a></p>
<p></p>
<p></p>
<p><strong>Exercise 3.58.</strong>  Give an interpretation of the stream computed by the following procedure:</p>
<p></p>
<p></p>
<p><code>(define (expand num den radix)   (cons-stream    (quotient (* num radix) den)    (expand (remainder (* num radix) den) den radix)))</code></p>
<p></p>
<p>(<code>Quotient</code> is a primitive that returns the integer quotient of two integers.) What are the successive elements produced by <code>(expand 1 7 10)</code> ? What is produced by <code>(expand 3 8 10)</code> ?</p>
<p></p>
<p></p>
<p><strong>Exercise 3.59.</strong>  In section <a href="book-Z-H-18.html#%_sec_2.5.3">2.5.3</a> we saw how to implement a polynomial arithmetic system representing polynomials as lists of terms. In a similar way, we can work with <em>power series</em>, such as</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-36.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-37.gif" /></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-38.gif" /></p>
<p></p>
<p>represented as infinite streams. We will represent the series <em>a</em><sub>0</sub> + <em>a</em><sub>1</sub> <em>x</em> + <em>a</em><sub>2</sub> <em>x</em><sup>2</sup> + <em>a</em><sub>3</sub> <em>x</em><sup>3</sup> + <code>···</code> as the stream whose elements are the coefficients <em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, <em>a</em><sub>2</sub>, <em>a</em><sub>3</sub>, <code>...</code>.</p>
<p></p>
<p></p>
<p>a. The integral of the series <em>a</em><sub>0</sub> + <em>a</em><sub>1</sub> <em>x</em> + <em>a</em><sub>2</sub> <em>x</em><sup>2</sup> + <em>a</em><sub>3</sub> <em>x</em><sup>3</sup> + <code>···</code> is the series</p>
<p></p>
<p><img src="ch3-Z-G-39.gif" /></p>
<p>where <em>c</em> is any constant. Define a procedure <code>integrate-series</code> that takes as input a stream <em>a</em><sub>0</sub>, <em>a</em><sub>1</sub>, <em>a</em><sub>2</sub>, <code>...</code> representing a power series and returns the stream <em>a</em><sub>0</sub>, (1/2)<em>a</em><sub>1</sub>, (1/3)<em>a</em><sub>2</sub>, <code>...</code> of coefficients of the non-constant terms of the integral of the series. (Since the result has no constant term, it doesn't represent a power series; when we use <code>integrate-series</code>, we will <code>cons</code> on the appropriate constant.)</p>
<p></p>
<p></p>
<p>b. The function <em>x</em> <img src="book-Z-G-D-17.gif" /> <em>e</em><sup><em>x</em></sup> is its own derivative. This implies that <em>e</em><sup><em>x</em></sup> and the integral of <em>e</em><sup><em>x</em></sup> are the same series, except for the constant term, which is <em>e</em><sup>0</sup> = 1. Accordingly, we can generate the series for <em>e</em><sup><em>x</em></sup> as</p>
<p></p>
<p><code>(define exp-series   (cons-stream 1 (integrate-series exp-series)))</code></p>
<p></p>
<p>Show how to generate the series for sine and cosine, starting from the facts that the derivative of sine is cosine and the derivative of cosine is the negative of sine:</p>
<p></p>
<p><code>(define cosine-series   (cons-stream 1 &lt;??&gt;)) (define sine-series   (cons-stream 0 &lt;??&gt;))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.60.</strong>  With power series represented as streams of coefficients as in exercise <a href="#%_thm_3.59">3.59</a>, adding series is implemented by <code>add-streams</code>. Complete the definition of the following procedure for multiplying series:</p>
<p></p>
<p><code>(define (mul-series s1 s2)   (cons-stream &lt;??&gt; (add-streams &lt;??&gt; &lt;??&gt;)))</code></p>
<p></p>
<p>You can test your procedure by verifying that <em>s</em><em>i</em><em>n</em><sup>2</sup> <em>x</em> + <em>c</em><em>o</em><em>s</em><sup>2</sup> <em>x</em> = 1, using the series from exercise <a href="#%_thm_3.59">3.59</a>.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.61.</strong>  Let <em>S</em> be a power series (exercise <a href="#%_thm_3.59">3.59</a>) whose constant term is 1. Suppose we want to find the power series 1/<em>S</em>, that is, the series <em>X</em> such that <em>S</em> · <em>X</em> = 1. Write <em>S</em> = 1 + <em>S</em><sub><em>R</em></sub> where <em>S</em><sub><em>R</em></sub> is the part of <em>S</em> after the constant term. Then we can solve for <em>X</em> as follows:</p>
<p></p>
<p><img src="ch3-Z-G-40.gif" /></p>
<p>In other words, <em>X</em> is the power series whose constant term is 1 and whose higher-order terms are given by the negative of <em>S</em><sub><em>R</em></sub> times <em>X</em>. Use this idea to write a procedure <code>invert-unit-series</code> that computes 1/<em>S</em> for a power series <em>S</em> with constant term 1. You will need to use <code>mul-series</code> from exercise <a href="#%_thm_3.60">3.60</a>.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.62.</strong>  Use the results of exercises <a href="#%_thm_3.60">3.60</a> and <a href="#%_thm_3.61">3.61</a> to define a procedure <code>div-series</code> that divides two power series. <code>Div-series</code> should work for any two series, provided that the denominator series begins with a nonzero constant term. (If the denominator has a zero constant term, then <code>div-series</code> should signal an error.) Show how to use <code>div-series</code> together with the result of exercise <a href="#%_thm_3.59">3.59</a> to generate the power series for tangent.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.5.3">3.5.3  Exploiting the Stream Paradigm</a></h3>
<p></p>
<p>Streams with delayed evaluation can be a powerful modeling tool, providing many of the benefits of local state and assignment. Moreover, they avoid some of the theoretical tangles that accompany the introduction of assignment into a programming language.</p>
<p>The stream approach can be illuminating because it allows us to build systems with different module boundaries than systems organized around assignment to state variables. For example, we can think of an entire time series (or signal) as a focus of interest, rather than the values of the state variables at individual moments. This makes it convenient to combine and compare components of state from different moments.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_471">Formulating iterations as stream processes</a></h4>
<p>In section <a href="book-Z-H-11.html#%_sec_1.2.1">1.2.1</a>, we introduced iterative processes, which proceed by updating state variables. We know now that we can represent state as a ``timeless'' stream of values rather than as a set of variables to be updated. Let's adopt this perspective in revisiting the square-root procedure from section <a href="book-Z-H-10.html#%_sec_1.1.7">1.1.7</a>. Recall that the idea is to generate a sequence of better and better guesses for the square root of <em>x</em> by applying over and over again the procedure that improves guesses:</p>
<p></p>
<p></p>
<p><code>(define (sqrt-improve guess x)   (average guess (/ x guess)))</code></p>
<p></p>
<p></p>
<p>In our original <code>sqrt</code> procedure, we made these guesses be the successive values of a state variable. Instead we can generate the infinite stream of guesses, starting with an initial guess of 1:<a href="#footnote_Temp_472"><sup>65</sup></a></p>
<p></p>
<p></p>
<p><code>(define (sqrt-stream x)   (define guesses     (cons-stream 1.0                  (stream-map (lambda (guess)                                (sqrt-improve guess x))                              guesses)))   guesses) (display-stream (sqrt-stream 2)) 1. 1.5 1.4166666666666665 1.4142156862745097 1.4142135623746899 ...</code></p>
<p></p>
<p>We can generate more and more terms of the stream to get better and better guesses. If we like, we can write a procedure that keeps generating terms until the answer is good enough. (See exercise <a href="#%_thm_3.64">3.64</a>.)</p>
<p>Another iteration that we can treat in the same way is to generate an approximation to <img src="book-Z-G-D-9.gif" />, based upon the alternating series that we saw in section <a href="book-Z-H-12.html#%_sec_1.3.1">1.3.1</a>:</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-41.gif" /></p>
<p></p>
<p>We first generate the stream of summands of the series (the reciprocals of the odd integers, with alternating signs). Then we take the stream of sums of more and more terms (using the <code>partial-sums</code> procedure of exercise <a href="#%_thm_3.55">3.55</a>) and scale the result by 4:</p>
<p></p>
<p><code>(define (pi-summands n)   (cons-stream (/ 1.0 n)                (stream-map - (pi-summands (+ n 2))))) (define pi-stream   (scale-stream (partial-sums (pi-summands 1)) 4)) (display-stream pi-stream) 4. 2.666666666666667 3.466666666666667 2.8952380952380956 3.3396825396825403 2.9760461760461765 3.2837384837384844 3.017071817071818 ...</code></p>
<p></p>
<p>This gives us a stream of better and better approximations to <img src="book-Z-G-D-9.gif" />, although the approximations converge rather slowly. Eight terms of the sequence bound the value of <img src="book-Z-G-D-9.gif" /> between 3.284 and 3.017.</p>
<p>So far, our use of the stream of states approach is not much different from updating state variables. But streams give us an opportunity to do some interesting tricks. For example, we can transform a stream with a <em>sequence accelerator</em> that converts a sequence of approximations to a new sequence that converges to the same value as the original, only faster.</p>
<p>One such accelerator, due to the eighteenth-century Swiss mathematician Leonhard Euler, works well with sequences that are partial sums of alternating series (series of terms with alternating signs). In Euler's technique, if <em>S</em><sub><em>n</em></sub> is the <em>n</em>th term of the original sum sequence, then the accelerated sequence has terms</p>
<p></p>
<p><img src="ch3-Z-G-42.gif" /></p>
<p>Thus, if the original sequence is represented as a stream of values, the transformed sequence is given by</p>
<p></p>
<p></p>
<p><code>(define (euler-transform s)   (let ((s0 (stream-ref s 0))           ; Sn-1         (s1 (stream-ref s 1))           ; Sn         (s2 (stream-ref s 2)))          ; Sn+1     (cons-stream (- s2 (/ (square (- s2 s1))                           (+ s0 (* -2 s1) s2)))                  (euler-transform (stream-cdr s)))))</code></p>
<p></p>
<p></p>
<p>We can demonstrate Euler acceleration with our sequence of approximations to <img src="book-Z-G-D-9.gif" />:</p>
<p></p>
<p></p>
<p><code>(display-stream (euler-transform pi-stream)) 3.166666666666667 3.1333333333333337 3.1452380952380956 3.13968253968254 3.1427128427128435 3.1408813408813416 3.142071817071818 3.1412548236077655 ...</code></p>
<p></p>
<p></p>
<p>Even better, we can accelerate the accelerated sequence, and recursively accelerate that, and so on. Namely, we create a stream of streams (a structure we'll call a <em>tableau</em>) in which each stream is the transform of the preceding one:</p>
<p></p>
<p></p>
<p><code>(define (make-tableau transform s)   (cons-stream s                (make-tableau transform                              (transform s))))</code></p>
<p></p>
<p>The tableau has the form</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-43.gif" /></p>
<p>Finally, we form a sequence by taking the first term in each row of the tableau:</p>
<p></p>
<p></p>
<p><code>(define (accelerated-sequence transform s)   (stream-map stream-car               (make-tableau transform s)))</code></p>
<p></p>
<p></p>
<p>We can demonstrate this kind of ``super-acceleration'' of the <img src="book-Z-G-D-9.gif" /> sequence:</p>
<p></p>
<p></p>
<p><code>(display-stream (accelerated-sequence euler-transform                                       pi-stream)) 4. 3.166666666666667 3.142105263157895 3.141599357319005 3.1415927140337785 3.1415926539752927 3.1415926535911765 3.141592653589778 ...</code></p>
<p></p>
<p>The result is impressive. Taking eight terms of the sequence yields the correct value of <img src="book-Z-G-D-9.gif" /> to 14 decimal places. If we had used only the original <img src="book-Z-G-D-9.gif" /> sequence, we would need to compute on the order of 10<sup>13</sup> terms (i.e., expanding the series far enough so that the individual terms are less then 10<sup>-13</sup>) to get that much accuracy! We could have implemented these acceleration techniques without using streams. But the stream formulation is particularly elegant and convenient because the entire sequence of states is available to us as a data structure that can be manipulated with a uniform set of operations.</p>
<p></p>
<p><strong>Exercise 3.63.</strong>  Louis Reasoner asks why the <code>sqrt-stream</code> procedure was not written in the following more straightforward way, without the local variable <code>guesses</code>:</p>
<p></p>
<p><code>(define (sqrt-stream x)   (cons-stream 1.0                (stream-map (lambda (guess)                              (sqrt-improve guess x))                            (sqrt-stream x))))</code></p>
<p></p>
<p>Alyssa P. Hacker replies that this version of the procedure is considerably less efficient because it performs redundant computation. Explain Alyssa's answer. Would the two versions still differ in efficiency if our implementation of <code>delay</code> used only <code>(lambda () &lt;exp&gt;)</code> without using the optimization provided by <code>memo-proc</code> (section <a href="#%_sec_3.5.1">3.5.1</a>)?</p>
<p></p>
<p></p>
<p><strong>Exercise 3.64.</strong>  Write a procedure <code>stream-limit</code> that takes as arguments a stream and a number (the tolerance). It should examine the stream until it finds two successive elements that differ in absolute value by less than the tolerance, and return the second of the two elements. Using this, we could compute square roots up to a given tolerance by</p>
<p></p>
<p><code>(define (sqrt x tolerance)   (stream-limit (sqrt-stream x) tolerance))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.65.</strong>  Use the series</p>
<p></p>
<p><img src="ch3-Z-G-44.gif" /></p>
<p>to compute three sequences of approximations to the natural logarithm of 2, in the same way we did above for <img src="book-Z-G-D-9.gif" />. How rapidly do these sequences converge?</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_476">Infinite streams of pairs</a></h4>
<p>In section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a>, we saw how the sequence paradigm handles traditional nested loops as processes defined on sequences of pairs. If we generalize this technique to infinite streams, then we can write programs that are not easily represented as loops, because the ``looping'' must range over an infinite set.</p>
<p>For example, suppose we want to generalize the <code>prime-sum-pairs</code> procedure of section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a> to produce the stream of pairs of <em>all</em> integers (<em>i</em>,<em>j</em>) with <em>i</em> &lt; <em>j</em> such that <em>i</em> + <em>j</em> is prime. If <code>int-pairs</code> is the sequence of all pairs of integers (<em>i</em>,<em>j</em>) with <em>i</em> &lt; <em>j</em>, then our required stream is simply<a href="#footnote_Temp_477"><sup>66</sup></a></p>
<p></p>
<p></p>
<p><code>(stream-filter (lambda (pair)                  (prime? (+ (car pair) (cadr pair))))                int-pairs)</code></p>
<p></p>
<p></p>
<p>Our problem, then, is to produce the stream <code>int-pairs</code>. More generally, suppose we have two streams <em>S</em> = (<em>S</em><sub><em>i</em></sub>) and <em>T</em> = (<em>T</em><sub><em>j</em></sub>), and imagine the infinite rectangular array</p>
<p></p>
<p><img src="ch3-Z-G-45.gif" /></p>
<p>We wish to generate a stream that contains all the pairs in the array that lie on or above the diagonal, i.e., the pairs</p>
<p></p>
<p><img src="ch3-Z-G-46.gif" /></p>
<p>(If we take both <em>S</em> and <em>T</em> to be the stream of integers, then this will be our desired stream <code>int-pairs</code>.)</p>
<p>Call the general stream of pairs <code>(pairs S T)</code>, and consider it to be composed of three parts: the pair (<em>S</em><sub>0</sub>,<em>T</em><sub>0</sub>), the rest of the pairs in the first row, and the remaining pairs:<a href="#footnote_Temp_478"><sup>67</sup></a></p>
<p></p>
<p><img src="ch3-Z-G-47.gif" /></p>
<p>Observe that the third piece in this decomposition (pairs that are not in the first row) is (recursively) the pairs formed from <code>(stream-cdr S)</code> and <code>(stream-cdr T)</code>. Also note that the second piece (the rest of the first row) is</p>
<p></p>
<p><code>(stream-map (lambda (x) (list (stream-car s) x))             (stream-cdr t))</code></p>
<p></p>
<p>Thus we can form our stream of pairs as follows:</p>
<p></p>
<p><code>(define (pairs s t)   (cons-stream    (list (stream-car s) (stream-car t))    (&lt;combine-in-some-way&gt;        (stream-map (lambda (x) (list (stream-car s) x))                    (stream-cdr t))        (pairs (stream-cdr s) (stream-cdr t)))))</code></p>
<p></p>
<p></p>
<p>In order to complete the procedure, we must choose some way to combine the two inner streams. One idea is to use the stream analog of the <code>append</code> procedure from section <a href="book-Z-H-15.html#%_sec_2.2.1">2.2.1</a>:</p>
<p></p>
<p></p>
<p><code>(define (stream-append s1 s2)   (if (stream-null? s1)       s2       (cons-stream (stream-car s1)                    (stream-append (stream-cdr s1) s2))))</code></p>
<p></p>
<p>This is unsuitable for infinite streams, however, because it takes all the elements from the first stream before incorporating the second stream. In particular, if we try to generate all pairs of positive integers using</p>
<p></p>
<p></p>
<p><code>(pairs integers integers)</code></p>
<p></p>
<p>our stream of results will first try to run through all pairs with the first integer equal to 1, and hence will never produce pairs with any other value of the first integer.</p>
<p>To handle infinite streams, we need to devise an order of combination that ensures that every element will eventually be reached if we let our program run long enough. An elegant way to accomplish this is with the following <code>interleave</code> procedure:<a href="#footnote_Temp_479"><sup>68</sup></a></p>
<p></p>
<p></p>
<p><code>(define (interleave s1 s2)   (if (stream-null? s1)       s2       (cons-stream (stream-car s1)                    (interleave s2 (stream-cdr s1)))))</code></p>
<p></p>
<p>Since <code>interleave</code> takes elements alternately from the two streams, every element of the second stream will eventually find its way into the interleaved stream, even if the first stream is infinite.</p>
<p>We can thus generate the required stream of pairs as</p>
<p></p>
<p><code>(define (pairs s t)   (cons-stream    (list (stream-car s) (stream-car t))    (interleave     (stream-map (lambda (x) (list (stream-car s) x))                 (stream-cdr t))     (pairs (stream-cdr s) (stream-cdr t)))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.66.</strong>  Examine the stream <code>(pairs integers integers)</code>. Can you make any general comments about the order in which the pairs are placed into the stream? For example, about how many pairs precede the pair (1,100)? the pair (99,100)? the pair (100,100)? (If you can make precise mathematical statements here, all the better. But feel free to give more qualitative answers if you find yourself getting bogged down.)</p>
<p></p>
<p></p>
<p><strong>Exercise 3.67.</strong>  Modify the <code>pairs</code> procedure so that <code>(pairs integers integers)</code> will produce the stream of <em>all</em> pairs of integers (<em>i</em>,<em>j</em>) (without the condition <em>i</em> &lt; <em>j</em>). Hint: You will need to mix in an additional stream.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.68.</strong>  Louis Reasoner thinks that building a stream of pairs from three parts is unnecessarily complicated. Instead of separating the pair (<em>S</em><sub>0</sub>,<em>T</em><sub>0</sub>) from the rest of the pairs in the first row, he proposes to work with the whole first row, as follows:</p>
<p></p>
<p><code>(define (pairs s t)   (interleave    (stream-map (lambda (x) (list (stream-car s) x))                t)    (pairs (stream-cdr s) (stream-cdr t))))</code></p>
<p></p>
<p>Does this work? Consider what happens if we evaluate <code>(pairs integers integers)</code> using Louis's definition of <code>pairs</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.69.</strong>  Write a procedure <code>triples</code> that takes three infinite streams, <em>S</em>, <em>T</em>, and <em>U</em>, and produces the stream of triples (<em>S</em><sub><em>i</em></sub>,<em>T</em><sub><em>j</em></sub>,<em>U</em><sub><em>k</em></sub>) such that <em>i</em> &lt; <em>j</em> &lt; <em>k</em>. Use <code>triples</code> to generate the stream of all Pythagorean triples of positive integers, i.e., the triples (<em>i</em>,<em>j</em>,<em>k</em>) such that <em>i</em> &lt; <em>j</em> and <em>i</em><sup>2</sup> + <em>j</em><sup>2</sup> = <em>k</em><sup>2</sup>.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.70.</strong>  It would be nice to be able to generate streams in which the pairs appear in some useful order, rather than in the order that results from an <em>ad hoc</em> interleaving process. We can use a technique similar to the <code>merge</code> procedure of exercise <a href="#%_thm_3.56">3.56</a>, if we define a way to say that one pair of integers is ``less than'' another. One way to do this is to define a ``weighting function'' <em>W</em>(<em>i</em>,<em>j</em>) and stipulate that (<em>i</em><sub>1</sub>,<em>j</em><sub>1</sub>) is less than (<em>i</em><sub>2</sub>,<em>j</em><sub>2</sub>) if <em>W</em>(<em>i</em><sub>1</sub>,<em>j</em><sub>1</sub>) &lt; <em>W</em>(<em>i</em><sub>2</sub>,<em>j</em><sub>2</sub>). Write a procedure <code>merge-weighted</code> that is like <code>merge</code>, except that <code>merge-weighted</code> takes an additional argument <code>weight</code>, which is a procedure that computes the weight of a pair, and is used to determine the order in which elements should appear in the resulting merged stream.<a href="#footnote_Temp_485"><sup>69</sup></a> Using this, generalize <code>pairs</code> to a procedure <code>weighted-pairs</code> that takes two streams, together with a procedure that computes a weighting function, and generates the stream of pairs, ordered according to weight. Use your procedure to generate</p>
<p></p>
<p></p>
<p>a. the stream of all pairs of positive integers (<em>i</em>,<em>j</em>) with <em>i</em> &lt; <em>j</em> ordered according to the sum <em>i</em> + <em>j</em></p>
<p></p>
<p></p>
<p>b. the stream of all pairs of positive integers (<em>i</em>,<em>j</em>) with <em>i</em> &lt; <em>j</em>, where neither <em>i</em> nor <em>j</em> is divisible by 2, 3, or 5, and the pairs are ordered according to the sum 2 <em>i</em> + 3 <em>j</em> + 5 <em>i</em> <em>j</em>.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.71.</strong>  Numbers that can be expressed as the sum of two cubes in more than one way are sometimes called <em>Ramanujan numbers</em>, in honor of the mathematician Srinivasa Ramanujan.<a href="#footnote_Temp_487"><sup>70</sup></a> Ordered streams of pairs provide an elegant solution to the problem of computing these numbers. To find a number that can be written as the sum of two cubes in two different ways, we need only generate the stream of pairs of integers (<em>i</em>,<em>j</em>) weighted according to the sum <em>i</em><sup>3</sup> + <em>j</em><sup>3</sup> (see exercise <a href="#%_thm_3.70">3.70</a>), then search the stream for two consecutive pairs with the same weight. Write a procedure to generate the Ramanujan numbers. The first such number is 1,729. What are the next five?</p>
<p></p>
<p></p>
<p><strong>Exercise 3.72.</strong>  In a similar way to exercise <a href="#%_thm_3.71">3.71</a> generate a stream of all numbers that can be written as the sum of two squares in three different ways (showing how they can be so written).</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_489">Streams as signals</a></h4>
<p>We began our discussion of streams by describing them as computational analogs of the ``signals'' in signal-processing systems. In fact, we can use streams to model signal-processing systems in a very direct way, representing the values of a signal at successive time intervals as consecutive elements of a stream. For instance, we can implement an <em>integrator</em> or <em>summer</em> that, for an input stream <em>x</em> = (<em>x</em><sub><em>i</em></sub>), an initial value <em>C</em>, and a small increment <em>d</em><em>t</em>, accumulates the sum</p>
<p></p>
<p><img src="ch3-Z-G-48.gif" /></p>
<p>and returns the stream of values <em>S</em> = (<em>S</em><sub><em>i</em></sub>). The following <code>integral</code> procedure is reminiscent of the ``implicit style'' definition of the stream of integers (section <a href="#%_sec_3.5.2">3.5.2</a>):</p>
<p></p>
<p></p>
<p><code>(define (integral integrand initial-value dt)   (define int     (cons-stream initial-value                  (add-streams (scale-stream integrand dt)                               int)))   int)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-49.gif" /></p>
<p><strong>Figure 3.32:</strong>  The <code>integral</code> procedure viewed as a signal-processing system.</p>
<p></p>
<p>Figure <a href="#%_fig_3.32">3.32</a> is a picture of a signal-processing system that corresponds to the <code>integral</code> procedure. The input stream is scaled by <em>d</em><em>t</em> and passed through an adder, whose output is passed back through the same adder. The self-reference in the definition of <code>int</code> is reflected in the figure by the feedback loop that connects the output of the adder to one of the inputs.</p>
<p></p>
<p><strong>Exercise 3.73.</strong>  </p>
<p></p>
<p> <img src="ch3-Z-G-50.gif" />        <em>v</em> = <em>v</em><sub>0</sub> + (1/<em>C</em>)<img src="book-Z-G-D-19.gif" /><sub>0</sub><sup><em>t</em></sup><em>i</em> <em>d</em><em>t</em> + <em>R</em> <em>i</em>      </p>
<p></p>
<p><img src="ch3-Z-G-51.gif" /></p>
<p><strong>Figure 3.33:</strong>  An RC circuit and the associated signal-flow diagram.</p>
<p>We can model electrical circuits using streams to represent the values of currents or voltages at a sequence of times. For instance, suppose we have an <em>RC circuit</em> consisting of a resistor of resistance <em>R</em> and a capacitor of capacitance <em>C</em> in series. The voltage response <em>v</em> of the circuit to an injected current <em>i</em> is determined by the formula in figure <a href="#%_fig_3.33">3.33</a>, whose structure is shown by the accompanying signal-flow diagram.</p>
<p>Write a procedure <code>RC</code> that models this circuit. <code>RC</code> should take as inputs the values of <em>R</em>, <em>C</em>, and <em>d</em><em>t</em> and should return a procedure that takes as inputs a stream representing the current <em>i</em> and an initial value for the capacitor voltage <em>v</em><sub>0</sub> and produces as output the stream of voltages <em>v</em>. For example, you should be able to use <code>RC</code> to model an RC circuit with <em>R</em> = 5 ohms, <em>C</em> = 1 farad, and a 0.5-second time step by evaluating <code>(define RC1 (RC 5 1 0.5))</code>. This defines <code>RC1</code> as a procedure that takes a stream representing the time sequence of currents and an initial capacitor voltage and produces the output stream of voltages.</p>
<p></p>
<p><strong>Exercise 3.74.</strong>  Alyssa P. Hacker is designing a system to process signals coming from physical sensors. One important feature she wishes to produce is a signal that describes the <em>zero crossings</em> of the input signal. That is, the resulting signal should be + 1 whenever the input signal changes from negative to positive, - 1 whenever the input signal changes from positive to negative, and 0 otherwise. (Assume that the sign of a 0 input is positive.) For example, a typical input signal with its associated zero-crossing signal would be</p>
<p></p>
<p><code>...</code>1  2  1.5  1  0.5  -0.1  -2  -3  -2  -0.5  0.2  3  4 <code>...</code><code>...</code> 0  0    0  0    0     -1  0   0   0     0    1  0  0 <code>...</code></p>
<p></p>
<p>In Alyssa's system, the signal from the sensor is represented as a stream <code>sense-data</code> and the stream <code>zero-crossings</code> is the corresponding stream of zero crossings. Alyssa first writes a procedure <code>sign-change-detector</code> that takes two values as arguments and compares the signs of the values to produce an appropriate 0, 1, or - 1. She then constructs her zero-crossing stream as follows:</p>
<p></p>
<p></p>
<p><code>(define (make-zero-crossings input-stream last-value)   (cons-stream    (sign-change-detector (stream-car input-stream) last-value)    (make-zero-crossings (stream-cdr input-stream)                         (stream-car input-stream))))  (define zero-crossings (make-zero-crossings sense-data 0))</code></p>
<p></p>
<p>Alyssa's boss, Eva Lu Ator, walks by and suggests that this program is approximately equivalent to the following one, which uses the generalized version of <code>stream-map</code> from exercise <a href="#%_thm_3.50">3.50</a>:</p>
<p></p>
<p></p>
<p><code>(define zero-crossings   (stream-map sign-change-detector sense-data &lt;expression&gt;))</code></p>
<p></p>
<p>Complete the program by supplying the indicated &lt;<em>expression</em>&gt;.</p>
<p></p>
<p><strong>Exercise 3.75.</strong>  Unfortunately, Alyssa's zero-crossing detector in exercise <a href="#%_thm_3.74">3.74</a> proves to be insufficient, because the noisy signal from the sensor leads to spurious zero crossings. Lem E. Tweakit, a hardware specialist, suggests that Alyssa smooth the signal to filter out the noise before extracting the zero crossings. Alyssa takes his advice and decides to extract the zero crossings from the signal constructed by averaging each value of the sense data with the previous value. She explains the problem to her assistant, Louis Reasoner, who attempts to implement the idea, altering Alyssa's program as follows:</p>
<p></p>
<p></p>
<p><code>(define (make-zero-crossings input-stream last-value)   (let ((avpt (/ (+ (stream-car input-stream) last-value) 2)))     (cons-stream (sign-change-detector avpt last-value)                  (make-zero-crossings (stream-cdr input-stream)                                       avpt))))</code></p>
<p></p>
<p>This does not correctly implement Alyssa's plan. Find the bug that Louis has installed and fix it without changing the structure of the program. (Hint: You will need to increase the number of arguments to <code>make-zero-crossings</code>.)</p>
<p></p>
<p><strong>Exercise 3.76.</strong>  Eva Lu Ator has a criticism of Louis's approach in exercise <a href="#%_thm_3.75">3.75</a>. The program he wrote is not modular, because it intermixes the operation of smoothing with the zero-crossing extraction. For example, the extractor should not have to be changed if Alyssa finds a better way to condition her input signal. Help Louis by writing a procedure <code>smooth</code> that takes a stream as input and produces a stream in which each element is the average of two successive input stream elements. Then use <code>smooth</code> as a component to implement the zero-crossing detector in a more modular style.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.5.4">3.5.4  Streams and Delayed Evaluation</a></h3>
<p>The <code>integral</code> procedure at the end of the preceding section shows how we can use streams to model signal-processing systems that contain feedback loops. The feedback loop for the adder shown in figure <a href="#%_fig_3.32">3.32</a> is modeled by the fact that <code>integral</code>'s internal stream <code>int</code> is defined in terms of itself:</p>
<p></p>
<p></p>
<p><code>(define int   (cons-stream initial-value                (add-streams (scale-stream integrand dt)                             int)))</code></p>
<p></p>
<p>The interpreter's ability to deal with such an implicit definition depends on the <code>delay</code> that is incorporated into <code>cons-stream</code>. Without this <code>delay</code>, the interpreter could not construct <code>int</code> before evaluating both arguments to <code>cons-stream</code>, which would require that <code>int</code> already be defined. In general, <code>delay</code> is crucial for using streams to model signal-processing systems that contain loops. Without <code>delay</code>, our models would have to be formulated so that the inputs to any signal-processing component would be fully evaluated before the output could be produced. This would outlaw loops.</p>
<p>Unfortunately, stream models of systems with loops may require uses of <code>delay</code> beyond the ``hidden'' <code>delay</code> supplied by <code>cons-stream</code>. For instance, figure <a href="#%_fig_3.34">3.34</a> shows a signal-processing system for solving the differential equation <em>d</em><em>y</em>/<em>d</em><em>t</em> = <em>f</em>(<em>y</em>) where <em>f</em> is a given function. The figure shows a mapping component, which applies <em>f</em> to its input signal, linked in a feedback loop to an integrator in a manner very similar to that of the analog computer circuits that are actually used to solve such equations.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-52.gif" /></p>
<p><strong>Figure 3.34:</strong>  An ``analog computer circuit'' that solves the equation <em>d</em><em>y</em>/<em>d</em><em>t</em> = <em>f</em>(<em>y</em>).</p>
<p></p>
<p>Assuming we are given an initial value <em>y</em><sub>0</sub> for <em>y</em>, we could try to model this system using the procedure</p>
<p></p>
<p></p>
<p><code>(define (solve f y0 dt)   (define y (integral dy y0 dt))   (define dy (stream-map f y))   y)</code></p>
<p></p>
<p>This procedure does not work, because in the first line of <code>solve</code> the call to <code>integral</code> requires that the input <code>dy</code> be defined, which does not happen until the second line of <code>solve</code>.</p>
<p>On the other hand, the intent of our definition does make sense, because we can, in principle, begin to generate the <code>y</code> stream without knowing <code>dy</code>. Indeed, <code>integral</code> and many other stream operations have properties similar to those of <code>cons-stream</code>, in that we can generate part of the answer given only partial information about the arguments. For <code>integral</code>, the first element of the output stream is the specified <code>initial-value</code>. Thus, we can generate the first element of the output stream without evaluating the integrand <code>dy</code>. Once we know the first element of <code>y</code>, the <code>stream-map</code> in the second line of <code>solve</code> can begin working to generate the first element of <code>dy</code>, which will produce the next element of <code>y</code>, and so on.</p>
<p>To take advantage of this idea, we will redefine <code>integral</code> to expect the integrand stream to be a <em>delayed argument</em>. <code>Integral</code> will <code>force</code> the integrand to be evaluated only when it is required to generate more than the first element of the output stream:</p>
<p></p>
<p></p>
<p><code>(define (integral delayed-integrand initial-value dt)   (define int     (cons-stream initial-value                  (let ((integrand (force delayed-integrand)))                    (add-streams (scale-stream integrand dt)                                 int))))   int)</code></p>
<p></p>
<p>Now we can implement our <code>solve</code> procedure by delaying the evaluation of <code>dy</code> in the definition of <code>y</code>:<a href="#footnote_Temp_494"><sup>71</sup></a></p>
<p></p>
<p></p>
<p><code>(define (solve f y0 dt)   (define y (integral (delay dy) y0 dt))   (define dy (stream-map f y))   y)</code></p>
<p></p>
<p>In general, every caller of <code>integral</code> must now <code>delay</code> the integrand argument. We can demonstrate that the <code>solve</code> procedure works by approximating <em>e</em> <img src="book-Z-G-D-20.gif" /> 2.718 by computing the value at <em>y</em> = 1 of the solution to the differential equation <em>d</em><em>y</em>/<em>d</em><em>t</em> = <em>y</em> with initial condition <em>y</em>(0) = 1:</p>
<p></p>
<p></p>
<p><code>(stream-ref (solve (lambda (y) y) 1 0.001) 1000) 2.716924</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 3.77.</strong>  The <code>integral</code> procedure used above was analogous to the ``implicit'' definition of the infinite stream of integers in section <a href="#%_sec_3.5.2">3.5.2</a>. Alternatively, we can give a definition of <code>integral</code> that is more like <code>integers-starting-from</code> (also in section <a href="#%_sec_3.5.2">3.5.2</a>):</p>
<p></p>
<p></p>
<p><code>(define (integral integrand initial-value dt)   (cons-stream initial-value                (if (stream-null? integrand)                    the-empty-stream                    (integral (stream-cdr integrand)                              (+ (* dt (stream-car integrand))                                 initial-value)                              dt))))</code></p>
<p></p>
<p>When used in systems with loops, this procedure has the same problem as does our original version of <code>integral</code>. Modify the procedure so that it expects the <code>integrand</code> as a delayed argument and hence can be used in the <code>solve</code> procedure shown above.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.78.</strong>  </p>
<p></p>
<p><img src="ch3-Z-G-53.gif" /></p>
<p><strong>Figure 3.35:</strong>  Signal-flow diagram for the solution to a second-order linear differential equation.</p>
<p>Consider the problem of designing a signal-processing system to study the homogeneous second-order linear differential equation</p>
<p></p>
<p><img src="ch3-Z-G-54.gif" /></p>
<p>The output stream, modeling <em>y</em>, is generated by a network that contains a loop. This is because the value of <em>d</em><sup>2</sup><em>y</em>/<em>d</em><em>t</em><sup>2</sup> depends upon the values of <em>y</em> and <em>d</em><em>y</em>/<em>d</em><em>t</em> and both of these are determined by integrating <em>d</em><sup>2</sup><em>y</em>/<em>d</em><em>t</em><sup>2</sup>. The diagram we would like to encode is shown in figure <a href="#%_fig_3.35">3.35</a>. Write a procedure <code>solve-2nd</code> that takes as arguments the constants <em>a</em>, <em>b</em>, and <em>d</em><em>t</em> and the initial values <em>y</em><sub>0</sub> and <em>d</em><em>y</em><sub>0</sub> for <em>y</em> and <em>d</em><em>y</em>/<em>d</em><em>t</em> and generates the stream of successive values of <em>y</em>.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.79.</strong>  Generalize the <code>solve-2nd</code> procedure of exercise <a href="#%_thm_3.78">3.78</a> so that it can be used to solve general second-order differential equations <em>d</em><sup>2</sup> <em>y</em>/<em>d</em><em>t</em><sup>2</sup> = <em>f</em>(<em>d</em><em>y</em>/<em>d</em><em>t</em>, <em>y</em>).</p>
<p></p>
<p></p>
<p><strong>Exercise 3.80.</strong>  A <em>series RLC circuit</em> consists of a resistor, a capacitor, and an inductor connected in series, as shown in figure <a href="#%_fig_3.36">3.36</a>. If <em>R</em>, <em>L</em>, and <em>C</em> are the resistance, inductance, and capacitance, then the relations between voltage (<em>v</em>) and current (<em>i</em>) for the three components are described by the equations</p>
<p></p>
<p><img src="ch3-Z-G-55.gif" /></p>
<p></p>
<p>and the circuit connections dictate the relations</p>
<p></p>
<p><img src="ch3-Z-G-56.gif" /></p>
<p>Combining these equations shows that the state of the circuit (summarized by <em>v</em><sub><em>C</em></sub>, the voltage across the capacitor, and <em>i</em><sub><em>L</em></sub>, the current in the inductor) is described by the pair of differential equations</p>
<p></p>
<p><img src="ch3-Z-G-57.gif" /></p>
<p>The signal-flow diagram representing this system of differential equations is shown in figure <a href="#%_fig_3.37">3.37</a>.</p>
<p></p>
<p><img src="ch3-Z-G-58.gif" /></p>
<p><strong>Figure 3.36:</strong>  A series RLC circuit.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-59.gif" /></p>
<p><strong>Figure 3.37:</strong>  A signal-flow diagram for the solution to a series RLC circuit.</p>
<p></p>
<p>Write a procedure <code>RLC</code> that takes as arguments the parameters <em>R</em>, <em>L</em>, and <em>C</em> of the circuit and the time increment <em>d</em><em>t</em>. In a manner similar to that of the <code>RC</code> procedure of exercise <a href="#%_thm_3.73">3.73</a>, <code>RLC</code> should produce a procedure that takes the initial values of the state variables, <em>v</em><sub><em>C</em><sub>0</sub></sub> and <em>i</em><sub><em>L</em><sub>0</sub></sub>, and produces a pair (using <code>cons</code>) of the streams of states <em>v</em><sub><em>C</em></sub> and <em>i</em><sub><em>L</em></sub>. Using <code>RLC</code>, generate the pair of streams that models the behavior of a series RLC circuit with <em>R</em> = 1 ohm, <em>C</em> = 0.2 farad, <em>L</em> = 1 henry, <em>d</em><em>t</em> = 0.1 second, and initial values <em>i</em><sub><em>L</em><sub>0</sub></sub> = 0 amps and <em>v</em><sub><em>C</em><sub>0</sub></sub> = 10 volts.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_499">Normal-order evaluation</a></h4>
<p>The examples in this section illustrate how the explicit use of <code>delay</code> and <code>force</code> provides great programming flexibility, but the same examples also show how this can make our programs more complex. Our new <code>integral</code> procedure, for instance, gives us the power to model systems with loops, but we must now remember that <code>integral</code> should be called with a delayed integrand, and every procedure that uses <code>integral</code> must be aware of this. In effect, we have created two classes of procedures: ordinary procedures and procedures that take delayed arguments. In general, creating separate classes of procedures forces us to create separate classes of higher-order procedures as well.<a href="#footnote_Temp_500"><sup>72</sup></a></p>
<p>One way to avoid the need for two different classes of procedures is to make all procedures take delayed arguments. We could adopt a model of evaluation in which all arguments to procedures are automatically delayed and arguments are forced only when they are actually needed (for example, when they are required by a primitive operation). This would transform our language to use normal-order evaluation, which we first described when we introduced the substitution model for evaluation in section <a href="book-Z-H-10.html#%_sec_1.1.5">1.1.5</a>. Converting to normal-order evaluation provides a uniform and elegant way to simplify the use of delayed evaluation, and this would be a natural strategy to adopt if we were concerned only with stream processing. In section <a href="book-Z-H-27.html#%_sec_4.2">4.2</a>, after we have studied the evaluator, we will see how to transform our language in just this way. Unfortunately, including delays in procedure calls wreaks havoc with our ability to design programs that depend on the order of events, such as programs that use assignment, mutate data, or perform input or output. Even the single <code>delay</code> in <code>cons-stream</code> can cause great confusion, as illustrated by exercises <a href="#%_thm_3.51">3.51</a> and <a href="#%_thm_3.52">3.52</a>. As far as anyone knows, mutability and delayed evaluation do not mix well in programming languages, and devising ways to deal with both of these at once is an active area of research.</p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_3.5.5">3.5.5  Modularity of Functional Programs and Modularity of Objects</a></h3>
<p>As we saw in section <a href="book-Z-H-20.html#%_sec_3.1.2">3.1.2</a>, one of the major benefits of introducing assignment is that we can increase the modularity of our systems by encapsulating, or ``hiding,'' parts of the state of a large system within local variables. Stream models can provide an equivalent modularity without the use of assignment. As an illustration, we can reimplement the Monte Carlo estimation of <img src="book-Z-G-D-9.gif" />, which we examined in section <a href="book-Z-H-20.html#%_sec_3.1.2">3.1.2</a>, from a stream-processing point of view.</p>
<p>The key modularity issue was that we wished to hide the internal state of a random-number generator from programs that used random numbers. We began with a procedure <code>rand-update</code>, whose successive values furnished our supply of random numbers, and used this to produce a random-number generator:</p>
<p></p>
<p></p>
<p><code>(define rand   (let ((x random-init))     (lambda ()       (set! x (rand-update x))       x)))</code></p>
<p></p>
<p></p>
<p>In the stream formulation there is no random-number generator <em>per se</em>, just a stream of random numbers produced by successive calls to <code>rand-update</code>:</p>
<p></p>
<p></p>
<p><code>(define random-numbers   (cons-stream random-init                (stream-map rand-update random-numbers)))</code></p>
<p></p>
<p>We use this to construct the stream of outcomes of the Cesàro experiment performed on consecutive pairs in the <code>random-numbers</code> stream:</p>
<p></p>
<p></p>
<p><code>(define cesaro-stream   (map-successive-pairs (lambda (r1 r2) (= (gcd r1 r2) 1))                         random-numbers))  (define (map-successive-pairs f s)   (cons-stream    (f (stream-car s) (stream-car (stream-cdr s)))    (map-successive-pairs f (stream-cdr (stream-cdr s)))))</code></p>
<p></p>
<p>The <code>cesaro-stream</code> is now fed to a <code>monte-carlo</code> procedure, which produces a stream of estimates of probabilities. The results are then converted into a stream of estimates of <img src="book-Z-G-D-9.gif" />. This version of the program doesn't need a parameter telling how many trials to perform. Better estimates of <img src="book-Z-G-D-9.gif" /> (from performing more experiments) are obtained by looking farther into the <code>pi</code> stream:</p>
<p></p>
<p></p>
<p><code>(define (monte-carlo experiment-stream passed failed)   (define (next passed failed)     (cons-stream      (/ passed (+ passed failed))      (monte-carlo       (stream-cdr experiment-stream) passed failed)))   (if (stream-car experiment-stream)       (next (+ passed 1) failed)       (next passed (+ failed 1))))  (define pi   (stream-map (lambda (p) (sqrt (/ 6 p)))               (monte-carlo cesaro-stream 0 0)))</code></p>
<p></p>
<p>There is considerable modularity in this approach, because we still can formulate a general <code>monte-carlo</code> procedure that can deal with arbitrary experiments. Yet there is no assignment or local state.</p>
<p></p>
<p><strong>Exercise 3.81.</strong>  Exercise <a href="book-Z-H-20.html#%_thm_3.6">3.6</a> discussed generalizing the random-number generator to allow one to reset the random-number sequence so as to produce repeatable sequences of ``random'' numbers. Produce a stream formulation of this same generator that operates on an input stream of requests to <code>generate</code> a new random number or to <code>reset</code> the sequence to a specified value and that produces the desired stream of random numbers. Don't use assignment in your solution.</p>
<p></p>
<p></p>
<p><strong>Exercise 3.82.</strong>  Redo exercise <a href="book-Z-H-20.html#%_thm_3.5">3.5</a> on Monte Carlo integration in terms of streams. The stream version of <code>estimate-integral</code> will not have an argument telling how many trials to perform. Instead, it will produce a stream of estimates based on successively more trials.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_503">A functional-programming view of time</a></h4>
<p>Let us now return to the issues of objects and state that were raised at the beginning of this chapter and examine them in a new light. We introduced assignment and mutable objects to provide a mechanism for modular construction of programs that model systems with state. We constructed computational objects with local state variables and used assignment to modify these variables. We modeled the temporal behavior of the objects in the world by the temporal behavior of the corresponding computational objects.</p>
<p>Now we have seen that streams provide an alternative way to model objects with local state. We can model a changing quantity, such as the local state of some object, using a stream that represents the time history of successive states. In essence, we represent time explicitly, using streams, so that we decouple time in our simulated world from the sequence of events that take place during evaluation. Indeed, because of the presence of <code>delay</code> there may be little relation between simulated time in the model and the order of events during the evaluation.</p>
<p>In order to contrast these two approaches to modeling, let us reconsider the implementation of a ``withdrawal processor'' that monitors the balance in a bank account. In section <a href="book-Z-H-20.html#%_sec_3.1.3">3.1.3</a> we implemented a simplified version of such a processor:</p>
<p></p>
<p></p>
<p><code>(define (make-simplified-withdraw balance)   (lambda (amount)     (set! balance (- balance amount))     balance))</code></p>
<p></p>
<p>Calls to <code>make-simplified-withdraw</code> produce computational objects, each with a local state variable <code>balance</code> that is decremented by successive calls to the object. The object takes an <code>amount</code> as an argument and returns the new balance. We can imagine the user of a bank account typing a sequence of inputs to such an object and observing the sequence of returned values shown on a display screen.</p>
<p>Alternatively, we can model a withdrawal processor as a procedure that takes as input a balance and a stream of amounts to withdraw and produces the stream of successive balances in the account:</p>
<p></p>
<p></p>
<p><code>(define (stream-withdraw balance amount-stream)   (cons-stream    balance    (stream-withdraw (- balance (stream-car amount-stream))                     (stream-cdr amount-stream))))</code></p>
<p></p>
<p><code>Stream-withdraw</code> implements a well-defined mathematical function whose output is fully determined by its input. Suppose, however, that the input <code>amount-stream</code> is the stream of successive values typed by the user and that the resulting stream of balances is displayed. Then, from the perspective of the user who is typing values and watching results, the stream process has the same behavior as the object created by <code>make-simplified-withdraw</code>. However, with the stream version, there is no assignment, no local state variable, and consequently none of the theoretical difficulties that we encountered in section <a href="book-Z-H-20.html#%_sec_3.1.3">3.1.3</a>. Yet the system has state!</p>
<p>This is really remarkable. Even though <code>stream-withdraw</code> implements a well-defined mathematical function whose behavior does not change, the user's perception here is one of interacting with a system that has a changing state. One way to resolve this paradox is to realize that it is the user's temporal existence that imposes state on the system. If the user could step back from the interaction and think in terms of streams of balances rather than individual transactions, the system would appear stateless.<a href="#footnote_Temp_504"><sup>73</sup></a></p>
<p>From the point of view of one part of a complex process, the other parts appear to change with time. They have hidden time-varying local state. If we wish to write programs that model this kind of natural decomposition in our world (as we see it from our viewpoint as a part of that world) with structures in our computer, we make computational objects that are not functional -- they must change with time. We model state with local state variables, and we model the changes of state with assignments to those variables. By doing this we make the time of execution of a computation model time in the world that we are part of, and thus we get ``objects'' in our computer.</p>
<p>Modeling with objects is powerful and intuitive, largely because this matches the perception of interacting with a world of which we are part. However, as we've seen repeatedly throughout this chapter, these models raise thorny problems of constraining the order of events and of synchronizing multiple processes. The possibility of avoiding these problems has stimulated the development of <em>functional programming languages</em>, which do not include any provision for assignment or mutable data. In such a language, all procedures implement well-defined mathematical functions of their arguments, whose behavior does not change. The functional approach is extremely attractive for dealing with concurrent systems.<a href="#footnote_Temp_505"><sup>74</sup></a></p>
<p>On the other hand, if we look closely, we can see time-related problems creeping into functional models as well. One particularly troublesome area arises when we wish to design interactive systems, especially ones that model interactions between independent entities. For instance, consider once more the implementation a banking system that permits joint bank accounts. In a conventional system using assignment and objects, we would model the fact that Peter and Paul share an account by having both Peter and Paul send their transaction requests to the same bank-account object, as we saw in section <a href="book-Z-H-20.html#%_sec_3.1.3">3.1.3</a>. From the stream point of view, where there are no ``objects'' <em>per se</em>, we have already indicated that a bank account can be modeled as a process that operates on a stream of transaction requests to produce a stream of responses. Accordingly, we could model the fact that Peter and Paul have a joint bank account by merging Peter's stream of transaction requests with Paul's stream of requests and feeding the result to the bank-account stream process, as shown in figure <a href="#%_fig_3.38">3.38</a>.</p>
<p></p>
<p></p>
<p><img src="ch3-Z-G-60.gif" /></p>
<p><strong>Figure 3.38:</strong>  A joint bank account, modeled by merging two streams of transaction requests.</p>
<p></p>
<p>The trouble with this formulation is in the notion of <em>merge</em>. It will not do to merge the two streams by simply taking alternately one request from Peter and one request from Paul. Suppose Paul accesses the account only very rarely. We could hardly force Peter to wait for Paul to access the account before he could issue a second transaction. However such a merge is implemented, it must interleave the two transaction streams in some way that is constrained by ``real time'' as perceived by Peter and Paul, in the sense that, if Peter and Paul meet, they can agree that certain transactions were processed before the meeting, and other transactions were processed after the meeting.<a href="#footnote_Temp_506"><sup>75</sup></a> This is precisely the same constraint that we had to deal with in section <a href="book-Z-H-23.html#%_sec_3.4.1">3.4.1</a>, where we found the need to introduce explicit synchronization to ensure a ``correct'' order of events in concurrent processing of objects with state. Thus, in an attempt to support the functional style, the need to merge inputs from different agents reintroduces the same problems that the functional style was meant to eliminate.</p>
<p>We began this chapter with the goal of building computational models whose structure matches our perception of the real world we are trying to model. We can model the world as a collection of separate, time-bound, interacting objects with state, or we can model the world as a single, timeless, stateless unity. Each view has powerful advantages, but neither view alone is completely satisfactory. A grand unification has yet to emerge.<a href="#footnote_Temp_507"><sup>76</sup></a></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_442"><sup>52</sup></a> Physicists sometimes adopt this view by introducing the ``world lines'' of particles as a device for reasoning about motion. We've also already mentioned (section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a>) that this is the natural way to think about signal-processing systems. We will explore applications of streams to signal processing in section <a href="#%_sec_3.5.3">3.5.3</a>.</p>
<p><a href="#call_footnote_Temp_443"><sup>53</sup></a> Assume that we have a predicate <code>prime?</code> (e.g., as in section <a href="book-Z-H-11.html#%_sec_1.2.6">1.2.6</a>) that tests for primality.</p>
<p><a href="#call_footnote_Temp_444"><sup>54</sup></a> In the MIT implementation, <code>the-empty-stream</code> is the same as the empty list <code>'()</code>, and <code>stream-null?</code> is the same as <code>null?</code>.</p>
<p><a href="#call_footnote_Temp_445"><sup>55</sup></a> This should bother you. The fact that we are defining such similar procedures for streams and lists indicates that we are missing some underlying abstraction. Unfortunately, in order to exploit this abstraction, we will need to exert finer control over the process of evaluation than we can at present. We will discuss this point further at the end of section <a href="#%_sec_3.5.4">3.5.4</a>. In section <a href="book-Z-H-27.html#%_sec_4.2">4.2</a>, we'll develop a framework that unifies lists and streams.</p>
<p><a href="#call_footnote_Temp_446"><sup>56</sup></a> Although <code>stream-car</code> and <code>stream-cdr</code> can be defined as procedures, <code>cons-stream</code> must be a special form. If <code>cons-stream</code> were a procedure, then, according to our model of evaluation, evaluating <code>(cons-stream &lt;a&gt; &lt;b&gt;)</code> would automatically cause &lt;<em>b</em>&gt; to be evaluated, which is precisely what we do not want to happen. For the same reason, <code>delay</code> must be a special form, though <code>force</code> can be an ordinary procedure.</p>
<p><a href="#call_footnote_Temp_448"><sup>57</sup></a> The numbers shown here do not really appear in the delayed expression. What actually appears is the original expression, in an environment in which the variables are bound to the appropriate numbers. For example, <code>(+ low 1)</code> with <code>low</code> bound to 10,000 actually appears where <code>10001</code> is shown.</p>
<p><a href="#call_footnote_Temp_450"><sup>58</sup></a> There are many possible implementations of streams other than the one described in this section. Delayed evaluation, which is the key to making streams practical, was inherent in Algol 60's <em>call-by-name</em> parameter-passing method. The use of this mechanism to implement streams was first described by Landin (1965). Delayed evaluation for streams was introduced into Lisp by Friedman and Wise (1976). In their implementation, <code>cons</code> always delays evaluating its arguments, so that lists automatically behave as streams. The memoizing optimization is also known as <em>call-by-need</em>. The Algol community would refer to our original delayed objects as <em>call-by-name thunks</em> and to the optimized versions as <em>call-by-need thunks</em>.</p>
<p><a href="#call_footnote_Temp_453"><sup>59</sup></a> Exercises such as <a href="#%_thm_3.51">3.51</a> and <a href="#%_thm_3.52">3.52</a> are valuable for testing our understanding of how <code>delay</code> works. On the other hand, intermixing delayed evaluation with printing -- and, even worse, with assignment -- is extremely confusing, and instructors of courses on computer languages have traditionally tormented their students with examination questions such as the ones in this section. Needless to say, writing programs that depend on such subtleties is odious programming style. Part of the power of stream processing is that it lets us ignore the order in which events actually happen in our programs. Unfortunately, this is precisely what we cannot afford to do in the presence of assignment, which forces us to be concerned with time and change.</p>
<p><a href="#call_footnote_Temp_455"><sup>60</sup></a> Eratosthenes, a third-century B.C. Alexandrian Greek philosopher, is famous for giving the first accurate estimate of the circumference of the Earth, which he computed by observing shadows cast at noon on the day of the summer solstice. Eratosthenes's sieve method, although ancient, has formed the basis for special-purpose hardware ``sieves'' that, until recently, were the most powerful tools in existence for locating large primes. Since the 70s, however, these methods have been superseded by outgrowths of the probabilistic techniques discussed in section <a href="book-Z-H-11.html#%_sec_1.2.6">1.2.6</a>.</p>
<p><a href="#call_footnote_Temp_456"><sup>61</sup></a> We have named these figures after Peter Henderson, who was the first person to show us diagrams of this sort as a way of thinking about stream processing. Each solid line represents a stream of values being transmitted. The dashed line from the <code>car</code> to the <code>cons</code> and the <code>filter</code> indicates that this is a single value rather than a stream.</p>
<p><a href="#call_footnote_Temp_458"><sup>62</sup></a> This uses the generalized version of <code>stream-map</code> from exercise <a href="#%_thm_3.50">3.50</a>.</p>
<p><a href="#call_footnote_Temp_459"><sup>63</sup></a> This last point is very subtle and relies on the fact that <em>p</em><sub><em>n</em>+1</sub> &lt; <em>p</em><sub><em>n</em></sub><sup>2</sup>. (Here, <em>p</em><sub><em>k</em></sub> denotes the <em>k</em>th prime.) Estimates such as these are very difficult to establish. The ancient proof by Euclid that there are an infinite number of primes shows that <em>p</em><sub><em>n</em>+1</sub>&lt; <em>p</em><sub>1</sub> <em>p</em><sub>2</sub> <code>···</code> <em>p</em><sub><em>n</em></sub> + 1, and no substantially better result was proved until 1851, when the Russian mathematician P. L. Chebyshev established that <em>p</em><sub><em>n</em>+1</sub>&lt; 2<em>p</em><sub><em>n</em></sub> for all <em>n</em>. This result, originally conjectured in 1845, is known as <em>Bertrand's hypothesis</em>. A proof can be found in section 22.3 of Hardy and Wright 1960.</p>
<p><a href="#call_footnote_Temp_465"><sup>64</sup></a> This exercise shows how call-by-need is closely related to ordinary memoization as described in exercise <a href="book-Z-H-22.html#%_thm_3.27">3.27</a>. In that exercise, we used assignment to explicitly construct a local table. Our call-by-need stream optimization effectively constructs such a table automatically, storing values in the previously forced parts of the stream.</p>
<p><a href="#call_footnote_Temp_472"><sup>65</sup></a> We can't use <code>let</code> to bind the local variable <code>guesses</code>, because the value of <code>guesses</code> depends on <code>guesses</code> itself. Exercise <a href="#%_thm_3.63">3.63</a> addresses why we want a local variable here.</p>
<p><a href="#call_footnote_Temp_477"><sup>66</sup></a> As in section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a>, we represent a pair of integers as a list rather than a Lisp pair.</p>
<p><a href="#call_footnote_Temp_478"><sup>67</sup></a> See exercise <a href="#%_thm_3.68">3.68</a> for some insight into why we chose this decomposition.</p>
<p><a href="#call_footnote_Temp_479"><sup>68</sup></a> The precise statement of the required property on the order of combination is as follows: There should be a function <em>f</em> of two arguments such that the pair corresponding to element <em>i</em> of the first stream and element <em>j</em> of the second stream will appear as element number <em>f</em>(<em>i</em>,<em>j</em>) of the output stream. The trick of using <code>interleave</code> to accomplish this was shown to us by David Turner, who employed it in the language KRC (Turner 1981).</p>
<p><a href="#call_footnote_Temp_485"><sup>69</sup></a> We will require that the weighting function be such that the weight of a pair increases as we move out along a row or down along a column of the array of pairs.</p>
<p><a href="#call_footnote_Temp_487"><sup>70</sup></a> To quote from G. H. Hardy's obituary of Ramanujan (Hardy 1921): ``It was Mr. Littlewood (I believe) who remarked that `every positive integer was one of his friends.' I remember once going to see him when he was lying ill at Putney. I had ridden in taxi-cab No. 1729, and remarked that the number seemed to me a rather dull one, and that I hoped it was not an unfavorable omen. `No,' he replied, `it is a very interesting number; it is the smallest number expressible as the sum of two cubes in two different ways.' '' The trick of using weighted pairs to generate the Ramanujan numbers was shown to us by Charles Leiserson.</p>
<p><a href="#call_footnote_Temp_494"><sup>71</sup></a> This procedure is not guaranteed to work in all Scheme implementations, although for any implementation there is a simple variation that will work. The problem has to do with subtle differences in the ways that Scheme implementations handle internal definitions. (See section <a href="book-Z-H-26.html#%_sec_4.1.6">4.1.6</a>.)</p>
<p><a href="#call_footnote_Temp_500"><sup>72</sup></a> This is a small reflection, in Lisp, of the difficulties that conventional strongly typed languages such as Pascal have in coping with higher-order procedures. In such languages, the programmer must specify the data types of the arguments and the result of each procedure: number, logical value, sequence, and so on. Consequently, we could not express an abstraction such as ``map a given procedure <code>proc</code> over all the elements in a sequence'' by a single higher-order procedure such as <code>stream-map</code>. Rather, we would need a different mapping procedure for each different combination of argument and result data types that might be specified for a <code>proc</code>. Maintaining a practical notion of ``data type'' in the presence of higher-order procedures raises many difficult issues. One way of dealing with this problem is illustrated by the language ML (Gordon, Milner, and Wadsworth 1979), whose ``polymorphic data types'' include templates for higher-order transformations between data types. Moreover, data types for most procedures in ML are never explicitly declared by the programmer. Instead, ML includes a <em>type-inferencing</em> mechanism that uses information in the environment to deduce the data types for newly defined procedures.</p>
<p><a href="#call_footnote_Temp_504"><sup>73</sup></a> Similarly in physics, when we observe a moving particle, we say that the position (state) of the particle is changing. However, from the perspective of the particle's world line in space-time there is no change involved.</p>
<p><a href="#call_footnote_Temp_505"><sup>74</sup></a> John Backus, the inventor of Fortran, gave high visibility to functional programming when he was awarded the ACM Turing award in 1978. His acceptance speech (Backus 1978) strongly advocated the functional approach. A good overview of functional programming is given in Henderson 1980 and in Darlington, Henderson, and Turner 1982.</p>
<p><a href="#call_footnote_Temp_506"><sup>75</sup></a> Observe that, for any two streams, there is in general more than one acceptable order of interleaving. Thus, technically, ``merge'' is a relation rather than a function -- the answer is not a deterministic function of the inputs. We already mentioned (footnote <a href="book-Z-H-23.html#footnote_Temp_411">39</a>) that nondeterminism is essential when dealing with concurrency. The merge relation illustrates the same essential nondeterminism, from the functional perspective. In section <a href="book-Z-H-28.html#%_sec_4.3">4.3</a>, we will look at nondeterminism from yet another point of view.</p>
<p><a href="#call_footnote_Temp_507"><sup>76</sup></a> The object model approximates the world by dividing it into separate pieces. The functional model does not modularize along object boundaries. The object model is useful when the unshared state of the ``objects'' is much larger than the state that they share. An example of a place where the object viewpoint fails is quantum mechanics, where thinking of things as individual particles leads to paradoxes and confusions. Unifying the object view with the functional view may have little to do with programming, but rather with fundamental epistemological issues.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-23.html">previous</a>, <a href="book-Z-H-25.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-24.html">previous</a>, <a href="book-Z-H-26.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h1 class="chapter"></h1>
<p><a href="book-Z-H-4.html#%_toc_%_chap_4">Chapter 4</a></p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_4">Metalinguistic Abstraction</a></p>
<p></p>
<p></p>
<table>
<col width="100%" />
<tbody>
<tr class="odd">
<td align="left"><p><code>...</code> It's in words that the magic is -- Abracadabra, Open Sesame, and the rest -- but the magic words in one story aren't magical in the next. The real magic is to understand which words work, and when, and for what; the trick is to learn the trick.<br /> <code>...</code> And those words are made from the letters of our alphabet: a couple-dozen squiggles we can draw with the pen. This is the key! And the treasure, too, if we can only get our hands on it! It's as if -- as if the key to the treasure <em>is</em> the treasure!</p>
<p>John Barth, <em>Chimera</em></p></td>
</tr>
</tbody>
</table>
<p></p>
<p>In our study of program design, we have seen that expert programmers control the complexity of their designs with the same general techniques used by designers of all complex systems. They combine primitive elements to form compound objects, they abstract compound objects to form higher-level building blocks, and they preserve modularity by adopting appropriate large-scale views of system structure. In illustrating these techniques, we have used Lisp as a language for describing processes and for constructing computational data objects and processes to model complex phenomena in the real world. However, as we confront increasingly complex problems, we will find that Lisp, or indeed any fixed programming language, is not sufficient for our needs. We must constantly turn to new languages in order to express our ideas more effectively. Establishing new languages is a powerful strategy for controlling complexity in engineering design; we can often enhance our ability to deal with a complex problem by adopting a new language that enables us to describe (and hence to think about) the problem in a different way, using primitives, means of combination, and means of abstraction that are particularly well suited to the problem at hand.<a href="#footnote_Temp_508"><sup>1</sup></a></p>
<p>Programming is endowed with a multitude of languages. There are physical languages, such as the machine languages for particular computers. These languages are concerned with the representation of data and control in terms of individual bits of storage and primitive machine instructions. The machine-language programmer is concerned with using the given hardware to erect systems and utilities for the efficient implementation of resource-limited computations. High-level languages, erected on a machine-language substrate, hide concerns about the representation of data as collections of bits and the representation of programs as sequences of primitive instructions. These languages have means of combination and abstraction, such as procedure definition, that are appropriate to the larger-scale organization of systems.</p>
<p><em>Metalinguistic abstraction</em> -- establishing new languages -- plays an important role in all branches of engineering design. It is particularly important to computer programming, because in programming not only can we formulate new languages but we can also implement these languages by constructing evaluators. An <em>evaluator</em> (or <em>interpreter</em>) for a programming language is a procedure that, when applied to an expression of the language, performs the actions required to evaluate that expression.</p>
<p>It is no exaggeration to regard this as the most fundamental idea in programming:</p>
<blockquote>
The evaluator, which determines the meaning of expressions in a programming language, is just another program.
</blockquote>
<p>To appreciate this point is to change our images of ourselves as programmers. We come to see ourselves as designers of languages, rather than only users of languages designed by others.</p>
<p>In fact, we can regard almost any program as the evaluator for some language. For instance, the polynomial manipulation system of section <a href="book-Z-H-18.html#%_sec_2.5.3">2.5.3</a> embodies the rules of polynomial arithmetic and implements them in terms of operations on list-structured data. If we augment this system with procedures to read and print polynomial expressions, we have the core of a special-purpose language for dealing with problems in symbolic mathematics. The digital-logic simulator of section <a href="book-Z-H-22.html#%_sec_3.3.4">3.3.4</a> and the constraint propagator of section <a href="book-Z-H-22.html#%_sec_3.3.5">3.3.5</a> are legitimate languages in their own right, each with its own primitives, means of combination, and means of abstraction. Seen from this perspective, the technology for coping with large-scale computer systems merges with the technology for building new computer languages, and computer science itself becomes no more (and no less) than the discipline of constructing appropriate descriptive languages.</p>
<p>We now embark on a tour of the technology by which languages are established in terms of other languages. In this chapter we shall use Lisp as a base, implementing evaluators as Lisp procedures. Lisp is particularly well suited to this task, because of its ability to represent and manipulate symbolic expressions. We will take the first step in understanding how languages are implemented by building an evaluator for Lisp itself. The language implemented by our evaluator will be a subset of the Scheme dialect of Lisp that we use in this book. Although the evaluator described in this chapter is written for a particular dialect of Lisp, it contains the essential structure of an evaluator for any expression-oriented language designed for writing programs for a sequential machine. (In fact, most language processors contain, deep within them, a little ``Lisp'' evaluator.) The evaluator has been simplified for the purposes of illustration and discussion, and some features have been left out that would be important to include in a production-quality Lisp system. Nevertheless, this simple evaluator is adequate to execute most of the programs in this book.<a href="#footnote_Temp_509"><sup>2</sup></a></p>
<p>An important advantage of making the evaluator accessible as a Lisp program is that we can implement alternative evaluation rules by describing these as modifications to the evaluator program. One place where we can use this power to good effect is to gain extra control over the ways in which computational models embody the notion of time, which was so central to the discussion in chapter 3. There, we mitigated some of the complexities of state and assignment by using streams to decouple the representation of time in the world from time in the computer. Our stream programs, however, were sometimes cumbersome, because they were constrained by the applicative-order evaluation of Scheme. In section <a href="book-Z-H-27.html#%_sec_4.2">4.2</a>, we'll change the underlying language to provide for a more elegant approach, by modifying the evaluator to provide for <em>normal-order evaluation</em>.</p>
<p>Section <a href="book-Z-H-28.html#%_sec_4.3">4.3</a> implements a more ambitious linguistic change, whereby expressions have many values, rather than just a single value. In this language of <em>nondeterministic computing</em>, it is natural to express processes that generate all possible values for expressions and then search for those values that satisfy certain constraints. In terms of models of computation and time, this is like having time branch into a set of ``possible futures'' and then searching for appropriate time lines. With our nondeterministic evaluator, keeping track of multiple values and performing searches are handled automatically by the underlying mechanism of the language.</p>
<p>In section <a href="book-Z-H-29.html#%_sec_4.4">4.4</a> we implement a <em>logic-programming</em> language in which knowledge is expressed in terms of relations, rather than in terms of computations with inputs and outputs. Even though this makes the language drastically different from Lisp, or indeed from any conventional language, we will see that the logic-programming evaluator shares the essential structure of the Lisp evaluator.</p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_508"><sup>1</sup></a> The same idea is pervasive throughout all of engineering. For example, electrical engineers use many different languages for describing circuits. Two of these are the language of electrical <em>networks</em> and the language of electrical <em>systems</em>. The network language emphasizes the physical modeling of devices in terms of discrete electrical elements. The primitive objects of the network language are primitive electrical components such as resistors, capacitors, inductors, and transistors, which are characterized in terms of physical variables called voltage and current. When describing circuits in the network language, the engineer is concerned with the physical characteristics of a design. In contrast, the primitive objects of the system language are signal-processing modules such as filters and amplifiers. Only the functional behavior of the modules is relevant, and signals are manipulated without concern for their physical realization as voltages and currents. The system language is erected on the network language, in the sense that the elements of signal-processing systems are constructed from electrical networks. Here, however, the concerns are with the large-scale organization of electrical devices to solve a given application problem; the physical feasibility of the parts is assumed. This layered collection of languages is another example of the stratified design technique illustrated by the picture language of section <a href="book-Z-H-15.html#%_sec_2.2.4">2.2.4</a>.</p>
<p><a href="#call_footnote_Temp_509"><sup>2</sup></a> The most important features that our evaluator leaves out are mechanisms for handling errors and supporting debugging. For a more extensive discussion of evaluators, see Friedman, Wand, and Haynes 1992, which gives an exposition of programming languages that proceeds via a sequence of evaluators written in Scheme.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-24.html">previous</a>, <a href="book-Z-H-26.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-25.html">previous</a>, <a href="book-Z-H-27.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_4.1">4.1  The Metacircular Evaluator</a></h2>
<p>Our evaluator for Lisp will be implemented as a Lisp program. It may seem circular to think about evaluating Lisp programs using an evaluator that is itself implemented in Lisp. However, evaluation is a process, so it is appropriate to describe the evaluation process using Lisp, which, after all, is our tool for describing processes.<a href="#footnote_Temp_510"><sup>3</sup></a> An evaluator that is written in the same language that it evaluates is said to be <em>metacircular</em>.</p>
<p>The metacircular evaluator is essentially a Scheme formulation of the environment model of evaluation described in section <a href="book-Z-H-21.html#%_sec_3.2">3.2</a>. Recall that the model has two basic parts:</p>
<blockquote>
<p>1. To evaluate a combination (a compound expression other than a special form), evaluate the subexpressions and then apply the value of the operator subexpression to the values of the operand subexpressions.</p>
<p></p>
<p>2. To apply a compound procedure to a set of arguments, evaluate the body of the procedure in a new environment. To construct this environment, extend the environment part of the procedure object by a frame in which the formal parameters of the procedure are bound to the arguments to which the procedure is applied.</p>
</blockquote>
<p>These two rules describe the essence of the evaluation process, a basic cycle in which expressions to be evaluated in environments are reduced to procedures to be applied to arguments, which in turn are reduced to new expressions to be evaluated in new environments, and so on, until we get down to symbols, whose values are looked up in the environment, and to primitive procedures, which are applied directly (see figure <a href="#%_fig_4.1">4.1</a>).<a href="#footnote_Temp_511"><sup>4</sup></a> This evaluation cycle will be embodied by the interplay between the two critical procedures in the evaluator, <code>eval</code> and <code>apply</code>, which are described in section <a href="#%_sec_4.1.1">4.1.1</a> (see figure <a href="#%_fig_4.1">4.1</a>).</p>
<p>The implementation of the evaluator will depend upon procedures that define the <em>syntax</em> of the expressions to be evaluated. We will use data abstraction to make the evaluator independent of the representation of the language. For example, rather than committing to a choice that an assignment is to be represented by a list beginning with the symbol <code>set!</code> we use an abstract predicate <code>assignment?</code> to test for an assignment, and we use abstract selectors <code>assignment-variable</code> and <code>assignment-value</code> to access the parts of an assignment. Implementation of expressions will be described in detail in section <a href="#%_sec_4.1.2">4.1.2</a>. There are also operations, described in section <a href="#%_sec_4.1.3">4.1.3</a>, that specify the representation of procedures and environments. For example, <code>make-procedure</code> constructs compound procedures, <code>lookup-variable-value</code> accesses the values of variables, and <code>apply-primitive-procedure</code> applies a primitive procedure to a given list of arguments.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.1.1">4.1.1  The Core of the Evaluator</a></h3>
<p></p>
<p></p>
<p><img src="ch4-Z-G-1.gif" /></p>
<p><strong>Figure 4.1:</strong>  The <code>eval</code>-<code>apply</code> cycle exposes the essence of a computer language.</p>
<p></p>
<p>The evaluation process can be described as the interplay between two procedures: <code>eval</code> and <code>apply</code>.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_512">Eval</a></h4>
<p><code>Eval</code> takes as arguments an expression and an environment. It classifies the expression and directs its evaluation. <code>Eval</code> is structured as a case analysis of the syntactic type of the expression to be evaluated. In order to keep the procedure general, we express the determination of the type of an expression abstractly, making no commitment to any particular representation for the various types of expressions. Each type of expression has a predicate that tests for it and an abstract means for selecting its parts. This <em>abstract syntax</em> makes it easy to see how we can change the syntax of the language by using the same evaluator, but with a different collection of syntax procedures.</p>
<p></p>
<h5><a href="book-Z-H-4.html#%_toc_%_sec_Temp_513">Primitive expressions</a></h5>
<p></p>
<p></p>
<ul>
<li>For self-evaluating expressions, such as numbers, <code>eval</code> returns the expression itself.</li>
<li><code>Eval</code> must look up variables in the environment to find their values.</li>
</ul>
<p></p>
<p></p>
<h5><a href="book-Z-H-4.html#%_toc_%_sec_Temp_514">Special forms</a></h5>
<p></p>
<p></p>
<ul>
<li>For quoted expressions, <code>eval</code> returns the expression that was quoted.</li>
<li>An assignment to (or a definition of) a variable must recursively call <code>eval</code> to compute the new value to be associated with the variable. The environment must be modified to change (or create) the binding of the variable.</li>
<li>An <code>if</code> expression requires special processing of its parts, so as to evaluate the consequent if the predicate is true, and otherwise to evaluate the alternative.</li>
<li>A <code>lambda</code> expression must be transformed into an applicable procedure by packaging together the parameters and body specified by the <code>lambda</code> expression with the environment of the evaluation.</li>
<li>A <code>begin</code> expression requires evaluating its sequence of expressions in the order in which they appear.</li>
<li>A case analysis (<code>cond</code>) is transformed into a nest of <code>if</code> expressions and then evaluated.</li>
</ul>
<p></p>
<p></p>
<h5><a href="book-Z-H-4.html#%_toc_%_sec_Temp_515">Combinations</a></h5>
<p></p>
<p></p>
<ul>
<li>For a procedure application, <code>eval</code> must recursively evaluate the operator part and the operands of the combination. The resulting procedure and arguments are passed to <code>apply</code>, which handles the actual procedure application.</li>
</ul>
<p></p>
<p></p>
<p></p>
<p>Here is the definition of <code>eval</code>:</p>
<p></p>
<p></p>
<p><code>(define (eval exp env)   (cond ((self-evaluating? exp) exp)         ((variable? exp) (lookup-variable-value exp env))         ((quoted? exp) (text-of-quotation exp))         ((assignment? exp) (eval-assignment exp env))         ((definition? exp) (eval-definition exp env))         ((if? exp) (eval-if exp env))         ((lambda? exp)          (make-procedure (lambda-parameters exp)                          (lambda-body exp)                          env))         ((begin? exp)           (eval-sequence (begin-actions exp) env))         ((cond? exp) (eval (cond-&gt;if exp) env))         ((application? exp)          (apply (eval (operator exp) env)                 (list-of-values (operands exp) env)))         (else          (error &quot;Unknown expression type -- EVAL&quot; exp))))</code></p>
<p></p>
<p></p>
<p>For clarity, <code>eval</code> has been implemented as a case analysis using <code>cond</code>. The disadvantage of this is that our procedure handles only a few distinguishable types of expressions, and no new ones can be defined without editing the definition of <code>eval</code>. In most Lisp implementations, dispatching on the type of an expression is done in a data-directed style. This allows a user to add new types of expressions that <code>eval</code> can distinguish, without modifying the definition of <code>eval</code> itself. (See exercise <a href="#%_thm_4.3">4.3</a>.)</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_516">Apply</a></h4>
<p><code>Apply</code> takes two arguments, a procedure and a list of arguments to which the procedure should be applied. <code>Apply</code> classifies procedures into two kinds: It calls <code>apply-primitive-procedure</code> to apply primitives; it applies compound procedures by sequentially evaluating the expressions that make up the body of the procedure. The environment for the evaluation of the body of a compound procedure is constructed by extending the base environment carried by the procedure to include a frame that binds the parameters of the procedure to the arguments to which the procedure is to be applied. Here is the definition of <code>apply</code>:</p>
<p></p>
<p></p>
<p><code>(define (apply procedure arguments)   (cond ((primitive-procedure? procedure)          (apply-primitive-procedure procedure arguments))         ((compound-procedure? procedure)          (eval-sequence            (procedure-body procedure)            (extend-environment              (procedure-parameters procedure)              arguments              (procedure-environment procedure))))         (else          (error           &quot;Unknown procedure type -- APPLY&quot; procedure))))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_517">Procedure arguments</a></h4>
<p>When <code>eval</code> processes a procedure application, it uses <code>list-of-values</code> to produce the list of arguments to which the procedure is to be applied. <code>List-of-values</code> takes as an argument the operands of the combination. It evaluates each operand and returns a list of the corresponding values:<a href="#footnote_Temp_518"><sup>5</sup></a></p>
<p></p>
<p></p>
<p><code>(define (list-of-values exps env)   (if (no-operands? exps)       '()       (cons (eval (first-operand exps) env)             (list-of-values (rest-operands exps) env))))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_519">Conditionals</a></h4>
<p><code>Eval-if</code> evaluates the predicate part of an <code>if</code> expression in the given environment. If the result is true, <code>eval-if</code> evaluates the consequent, otherwise it evaluates the alternative:</p>
<p></p>
<p></p>
<p><code>(define (eval-if exp env)   (if (true? (eval (if-predicate exp) env))       (eval (if-consequent exp) env)       (eval (if-alternative exp) env)))</code></p>
<p></p>
<p></p>
<p>The use of <code>true?</code> in <code>eval-if</code> highlights the issue of the connection between an implemented language and an implementation language. The <code>if-predicate</code> is evaluated in the language being implemented and thus yields a value in that language. The interpreter predicate <code>true?</code> translates that value into a value that can be tested by the <code>if</code> in the implementation language: The metacircular representation of truth might not be the same as that of the underlying Scheme.<a href="#footnote_Temp_520"><sup>6</sup></a></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_521">Sequences</a></h4>
<p><code>Eval-sequence</code> is used by <code>apply</code> to evaluate the sequence of expressions in a procedure body and by <code>eval</code> to evaluate the sequence of expressions in a <code>begin</code> expression. It takes as arguments a sequence of expressions and an environment, and evaluates the expressions in the order in which they occur. The value returned is the value of the final expression.</p>
<p></p>
<p></p>
<p><code>(define (eval-sequence exps env)   (cond ((last-exp? exps) (eval (first-exp exps) env))         (else (eval (first-exp exps) env)               (eval-sequence (rest-exps exps) env))))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_522">Assignments and definitions</a></h4>
<p>The following procedure handles assignments to variables. It calls <code>eval</code> to find the value to be assigned and transmits the variable and the resulting value to <code>set-variable-value!</code> to be installed in the designated environment.</p>
<p></p>
<p></p>
<p><code>(define (eval-assignment exp env)   (set-variable-value! (assignment-variable exp)                        (eval (assignment-value exp) env)                        env)   'ok)</code></p>
<p></p>
<p>Definitions of variables are handled in a similar manner.<a href="#footnote_Temp_523"><sup>7</sup></a></p>
<p></p>
<p></p>
<p><code>(define (eval-definition exp env)   (define-variable! (definition-variable exp)                     (eval (definition-value exp) env)                     env)   'ok)</code></p>
<p></p>
<p>We have chosen here to return the symbol <code>ok</code> as the value of an assignment or a definition.<a href="#footnote_Temp_524"><sup>8</sup></a></p>
<p></p>
<p><strong>Exercise 4.1.</strong>  Notice that we cannot tell whether the metacircular evaluator evaluates operands from left to right or from right to left. Its evaluation order is inherited from the underlying Lisp: If the arguments to <code>cons</code> in <code>list-of-values</code> are evaluated from left to right, then <code>list-of-values</code> will evaluate operands from left to right; and if the arguments to <code>cons</code> are evaluated from right to left, then <code>list-of-values</code> will evaluate operands from right to left.</p>
<p>Write a version of <code>list-of-values</code> that evaluates operands from left to right regardless of the order of evaluation in the underlying Lisp. Also write a version of <code>list-of-values</code> that evaluates operands from right to left.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.1.2">4.1.2  Representing Expressions</a></h3>
<p>The evaluator is reminiscent of the symbolic differentiation program discussed in section <a href="book-Z-H-16.html#%_sec_2.3.2">2.3.2</a>. Both programs operate on symbolic expressions. In both programs, the result of operating on a compound expression is determined by operating recursively on the pieces of the expression and combining the results in a way that depends on the type of the expression. In both programs we used data abstraction to decouple the general rules of operation from the details of how expressions are represented. In the differentiation program this meant that the same differentiation procedure could deal with algebraic expressions in prefix form, in infix form, or in some other form. For the evaluator, this means that the syntax of the language being evaluated is determined solely by the procedures that classify and extract pieces of expressions.</p>
<p></p>
<p></p>
<p>Here is the specification of the syntax of our language:</p>
<p></p>
<p></p>
<p>¤ The only self-evaluating items are numbers and strings:</p>
<p></p>
<p></p>
<p><code>(define (self-evaluating? exp)   (cond ((number? exp) true)         ((string? exp) true)         (else false)))</code></p>
<p></p>
<p>¤ Variables are represented by symbols:</p>
<p></p>
<p></p>
<p><code>(define (variable? exp) (symbol? exp))</code></p>
<p></p>
<p>¤ Quotations have the form <code>(quote &lt;text-of-quotation&gt;)</code>:<a href="#footnote_Temp_526"><sup>9</sup></a></p>
<p></p>
<p></p>
<p><code>(define (quoted? exp)   (tagged-list? exp 'quote))  (define (text-of-quotation exp) (cadr exp))</code></p>
<p></p>
<p><code>Quoted?</code> is defined in terms of the procedure <code>tagged-list?</code>, which identifies lists beginning with a designated symbol:</p>
<p></p>
<p></p>
<p><code>(define (tagged-list? exp tag)   (if (pair? exp)       (eq? (car exp) tag)       false))</code></p>
<p></p>
<p>¤ Assignments have the form <code>(set! &lt;var&gt; &lt;value&gt;)</code>:</p>
<p></p>
<p></p>
<p><code>(define (assignment? exp)   (tagged-list? exp 'set!)) (define (assignment-variable exp) (cadr exp)) (define (assignment-value exp) (caddr exp))</code></p>
<p></p>
<p>¤ Definitions have the form</p>
<p></p>
<p></p>
<p><code>(define &lt;var&gt; &lt;value&gt;)</code></p>
<p></p>
<p>or the form</p>
<p></p>
<p></p>
<p><code>(define (&lt;var&gt; &lt;parameter1&gt; ...</code> &lt;<em>parameter<sub><em>n</em></sub></em>&gt;)<br />   &lt;<em>body</em>&gt;)<br /></p>
<p></p>
<p>The latter form (standard procedure definition) is syntactic sugar for</p>
<p></p>
<p></p>
<p><code>(define &lt;var&gt;   (lambda (&lt;parameter1&gt; ...</code> &lt;<em>parameter<sub><em>n</em></sub></em>&gt;)<br />     &lt;<em>body</em>&gt;))<br /></p>
<p></p>
<p>The corresponding syntax procedures are the following:</p>
<p></p>
<p></p>
<p><code>(define (definition? exp)   (tagged-list? exp 'define)) (define (definition-variable exp)   (if (symbol? (cadr exp))       (cadr exp)       (caadr exp))) (define (definition-value exp)   (if (symbol? (cadr exp))       (caddr exp)       (make-lambda (cdadr exp)   ; formal parameters                    (cddr exp)))) ; body</code></p>
<p></p>
<p>¤ <code>Lambda</code> expressions are lists that begin with the symbol <code>lambda</code>:</p>
<p></p>
<p></p>
<p><code>(define (lambda? exp) (tagged-list? exp 'lambda)) (define (lambda-parameters exp) (cadr exp)) (define (lambda-body exp) (cddr exp))</code></p>
<p></p>
<p>We also provide a constructor for <code>lambda</code> expressions, which is used by <code>definition-value</code>, above:</p>
<p></p>
<p><code>(define (make-lambda parameters body)   (cons 'lambda (cons parameters body)))</code></p>
<p></p>
<p>¤ Conditionals begin with <code>if</code> and have a predicate, a consequent, and an (optional) alternative. If the expression has no alternative part, we provide <code>false</code> as the alternative.<a href="#footnote_Temp_527"><sup>10</sup></a></p>
<p></p>
<p></p>
<p><code>(define (if? exp) (tagged-list? exp 'if)) (define (if-predicate exp) (cadr exp)) (define (if-consequent exp) (caddr exp)) (define (if-alternative exp)   (if (not (null? (cdddr exp)))       (cadddr exp)       'false))</code></p>
<p></p>
<p>We also provide a constructor for <code>if</code> expressions, to be used by <code>cond-&gt;if</code> to transform <code>cond</code> expressions into <code>if</code> expressions:</p>
<p></p>
<p><code>(define (make-if predicate consequent alternative)   (list 'if predicate consequent alternative))</code></p>
<p></p>
<p>¤ <code>Begin</code> packages a sequence of expressions into a single expression. We include syntax operations on <code>begin</code> expressions to extract the actual sequence from the <code>begin</code> expression, as well as selectors that return the first expression and the rest of the expressions in the sequence.<a href="#footnote_Temp_528"><sup>11</sup></a></p>
<p></p>
<p></p>
<p><code>(define (begin? exp) (tagged-list? exp 'begin)) (define (begin-actions exp) (cdr exp)) (define (last-exp? seq) (null? (cdr seq))) (define (first-exp seq) (car seq)) (define (rest-exps seq) (cdr seq))</code></p>
<p></p>
<p>We also include a constructor <code>sequence-&gt;exp</code> (for use by <code>cond-&gt;if</code>) that transforms a sequence into a single expression, using <code>begin</code> if necessary:</p>
<p></p>
<p></p>
<p><code>(define (sequence-&gt;exp seq)   (cond ((null? seq) seq)         ((last-exp? seq) (first-exp seq))         (else (make-begin seq)))) (define (make-begin seq) (cons 'begin seq))</code></p>
<p></p>
<p>¤ A procedure application is any compound expression that is not one of the above expression types. The <code>car</code> of the expression is the operator, and the <code>cdr</code> is the list of operands:</p>
<p></p>
<p></p>
<p><code>(define (application? exp) (pair? exp)) (define (operator exp) (car exp)) (define (operands exp) (cdr exp)) (define (no-operands? ops) (null? ops)) (define (first-operand ops) (car ops)) (define (rest-operands ops) (cdr ops))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_529">Derived expressions</a></h4>
<p>Some special forms in our language can be defined in terms of expressions involving other special forms, rather than being implemented directly. One example is <code>cond</code>, which can be implemented as a nest of <code>if</code> expressions. For example, we can reduce the problem of evaluating the expression</p>
<p></p>
<p></p>
<p><code>(cond ((&gt; x 0) x)       ((= x 0) (display 'zero) 0)       (else (- x)))</code></p>
<p></p>
<p>to the problem of evaluating the following expression involving <code>if</code> and <code>begin</code> expressions:</p>
<p></p>
<p></p>
<p><code>(if (&gt; x 0)     x     (if (= x 0)         (begin (display 'zero)                0)         (- x)))</code></p>
<p></p>
<p>Implementing the evaluation of <code>cond</code> in this way simplifies the evaluator because it reduces the number of special forms for which the evaluation process must be explicitly specified.</p>
<p>We include syntax procedures that extract the parts of a <code>cond</code> expression, and a procedure <code>cond-&gt;if</code> that transforms <code>cond</code> expressions into <code>if</code> expressions. A case analysis begins with <code>cond</code> and has a list of predicate-action clauses. A clause is an <code>else</code> clause if its predicate is the symbol <code>else</code>.<a href="#footnote_Temp_530"><sup>12</sup></a></p>
<p></p>
<p></p>
<p><code>(define (cond? exp) (tagged-list? exp 'cond)) (define (cond-clauses exp) (cdr exp)) (define (cond-else-clause? clause)   (eq? (cond-predicate clause) 'else)) (define (cond-predicate clause) (car clause)) (define (cond-actions clause) (cdr clause)) (define (cond-&gt;if exp)   (expand-clauses (cond-clauses exp)))  (define (expand-clauses clauses)   (if (null? clauses)       'false                          ; no else</code> clause<br />       (let ((first (car clauses))<br />             (rest (cdr clauses)))<br />         (if (cond-else-clause? first)<br />             (if (null? rest)<br />                 (sequence-&gt;exp (cond-actions first))<br />                 (error &quot;ELSE clause isn't last -- COND-&gt;IF&quot;<br />                        clauses))<br />             (make-if (cond-predicate first)<br />                      (sequence-&gt;exp (cond-actions first))<br />                      (expand-clauses rest))))))<br /></p>
<p></p>
<p></p>
<p>Expressions (such as <code>cond</code>) that we choose to implement as syntactic transformations are called <em>derived expressions</em>. <code>Let</code> expressions are also derived expressions (see exercise <a href="#%_thm_4.6">4.6</a>).<a href="#footnote_Temp_531"><sup>13</sup></a></p>
<p></p>
<p><strong>Exercise 4.2.</strong>  Louis Reasoner plans to reorder the <code>cond</code> clauses in <code>eval</code> so that the clause for procedure applications appears before the clause for assignments. He argues that this will make the interpreter more efficient: Since programs usually contain more applications than assignments, definitions, and so on, his modified <code>eval</code> will usually check fewer clauses than the original <code>eval</code> before identifying the type of an expression.</p>
<p></p>
<p></p>
<p>a. What is wrong with Louis's plan? (Hint: What will Louis's evaluator do with the expression <code>(define x 3)</code>?)</p>
<p></p>
<p></p>
<p>b. Louis is upset that his plan didn't work. He is willing to go to any lengths to make his evaluator recognize procedure applications before it checks for most other kinds of expressions. Help him by changing the syntax of the evaluated language so that procedure applications start with <code>call</code>. For example, instead of <code>(factorial 3)</code> we will now have to write <code>(call factorial 3)</code> and instead of <code>(+ 1 2)</code> we will have to write <code>(call + 1 2)</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.3.</strong>  Rewrite <code>eval</code> so that the dispatch is done in data-directed style. Compare this with the data-directed differentiation procedure of exercise <a href="book-Z-H-17.html#%_thm_2.73">2.73</a>. (You may use the <code>car</code> of a compound expression as the type of the expression, as is appropriate for the syntax implemented in this section.) .</p>
<p></p>
<p></p>
<p><strong>Exercise 4.4.</strong>  Recall the definitions of the special forms <code>and</code> and <code>or</code> from chapter 1:</p>
<p></p>
<ul>
<li><code>and</code>: The expressions are evaluated from left to right. If any expression evaluates to false, false is returned; any remaining expressions are not evaluated. If all the expressions evaluate to true values, the value of the last expression is returned. If there are no expressions then true is returned.</li>
<li><code>or</code>: The expressions are evaluated from left to right. If any expression evaluates to a true value, that value is returned; any remaining expressions are not evaluated. If all expressions evaluate to false, or if there are no expressions, then false is returned.</li>
</ul>
<p>Install <code>and</code> and <code>or</code> as new special forms for the evaluator by defining appropriate syntax procedures and evaluation procedures <code>eval-and</code> and <code>eval-or</code>. Alternatively, show how to implement <code>and</code> and <code>or</code> as derived expressions.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.5.</strong>  Scheme allows an additional syntax for <code>cond</code> clauses, <code>(&lt;test&gt; =&gt; &lt;recipient&gt;)</code>. If &lt;<em>test</em>&gt; evaluates to a true value, then &lt;<em>recipient</em>&gt; is evaluated. Its value must be a procedure of one argument; this procedure is then invoked on the value of the &lt;<em>test</em>&gt;, and the result is returned as the value of the <code>cond</code> expression. For example</p>
<p></p>
<p></p>
<p><code>(cond ((assoc 'b '((a 1) (b 2))) =&gt; cadr)       (else false))</code></p>
<p></p>
<p>returns 2. Modify the handling of <code>cond</code> so that it supports this extended syntax.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.6.</strong>  <code>Let</code> expressions are derived expressions, because</p>
<p></p>
<p></p>
<p><code>(let ((&lt;var1&gt; &lt;exp1&gt;) ...</code> (&lt;<em>var<sub><em>n</em></sub></em>&gt; &lt;<em>exp<sub><em>n</em></sub></em>&gt;))<br />   &lt;<em>body</em>&gt;)<br /></p>
<p></p>
<p>is equivalent to</p>
<p></p>
<p></p>
<p><code>((lambda (&lt;var1&gt; ...</code> &lt;<em>var<sub><em>n</em></sub></em>&gt;)<br />    &lt;<em>body</em>&gt;)<br />  &lt;<em>exp<sub>1</sub></em>&gt;<br />  <img src="book-Z-G-D-18.gif" /><br />  &lt;<em>exp<sub><em>n</em></sub></em>&gt;)<br /></p>
<p></p>
<p>Implement a syntactic transformation <code>let-&gt;combination</code> that reduces evaluating <code>let</code> expressions to evaluating combinations of the type shown above, and add the appropriate clause to <code>eval</code> to handle <code>let</code> expressions.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.7.</strong>  <code>Let*</code> is similar to <code>let</code>, except that the bindings of the <code>let</code> variables are performed sequentially from left to right, and each binding is made in an environment in which all of the preceding bindings are visible. For example</p>
<p></p>
<p><code>(let* ((x 3)        (y (+ x 2))        (z (+ x y 5)))   (* x z))</code></p>
<p></p>
<p>returns 39. Explain how a <code>let*</code> expression can be rewritten as a set of nested <code>let</code> expressions, and write a procedure <code>let*-&gt;nested-lets</code> that performs this transformation. If we have already implemented <code>let</code> (exercise <a href="#%_thm_4.6">4.6</a>) and we want to extend the evaluator to handle <code>let*</code>, is it sufficient to add a clause to <code>eval</code> whose action is</p>
<p></p>
<p><code>(eval (let*-&gt;nested-lets exp) env)</code></p>
<p></p>
<p>or must we explicitly expand <code>let*</code> in terms of non-derived expressions?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.8.</strong>  ``Named <code>let</code>'' is a variant of <code>let</code> that has the form</p>
<p></p>
<p><code>(let &lt;var&gt; &lt;bindings&gt; &lt;body&gt;)</code></p>
<p></p>
<p>The &lt;<em>bindings</em>&gt; and &lt;<em>body</em>&gt; are just as in ordinary <code>let</code>, except that &lt;<em>var</em>&gt; is bound within &lt;<em>body</em>&gt; to a procedure whose body is &lt;<em>body</em>&gt; and whose parameters are the variables in the &lt;<em>bindings</em>&gt;. Thus, one can repeatedly execute the &lt;<em>body</em>&gt; by invoking the procedure named &lt;<em>var</em>&gt;. For example, the iterative Fibonacci procedure (section <a href="book-Z-H-11.html#%_sec_1.2.2">1.2.2</a>) can be rewritten using named <code>let</code> as follows:</p>
<p></p>
<p><code>(define (fib n)   (let fib-iter ((a 1)                  (b 0)                  (count n))     (if (= count 0)         b         (fib-iter (+ a b) a (- count 1)))))</code></p>
<p></p>
<p>Modify <code>let-&gt;combination</code> of exercise <a href="#%_thm_4.6">4.6</a> to also support named <code>let</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.9.</strong>  Many languages support a variety of iteration constructs, such as <code>do</code>, <code>for</code>, <code>while</code>, and <code>until</code>. In Scheme, iterative processes can be expressed in terms of ordinary procedure calls, so special iteration constructs provide no essential gain in computational power. On the other hand, such constructs are often convenient. Design some iteration constructs, give examples of their use, and show how to implement them as derived expressions.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.10.</strong>  By using data abstraction, we were able to write an <code>eval</code> procedure that is independent of the particular syntax of the language to be evaluated. To illustrate this, design and implement a new syntax for Scheme by modifying the procedures in this section, without changing <code>eval</code> or <code>apply</code>.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.1.3">4.1.3  Evaluator Data Structures</a></h3>
<p></p>
<p>In addition to defining the external syntax of expressions, the evaluator implementation must also define the data structures that the evaluator manipulates internally, as part of the execution of a program, such as the representation of procedures and environments and the representation of true and false.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_541">Testing of predicates</a></h4>
<p>For conditionals, we accept anything to be true that is not the explicit <code>false</code> object.</p>
<p></p>
<p></p>
<p><code>(define (true? x)   (not (eq? x false))) (define (false? x)   (eq? x false))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_542">Representing procedures</a></h4>
<p>To handle primitives, we assume that we have available the following procedures:</p>
<p></p>
<p></p>
<ul>
<li><code>(apply-primitive-procedure &lt;proc&gt; &lt;args&gt;)</code><br /> applies the given primitive procedure to the argument values in the list &lt;<em>args</em>&gt; and returns the result of the application.</li>
<li><code>(primitive-procedure? &lt;proc&gt;)</code><br /> tests whether &lt;<em>proc</em>&gt; is a primitive procedure.</li>
</ul>
<p></p>
<p>These mechanisms for handling primitives are further described in section <a href="#%_sec_4.1.4">4.1.4</a>.</p>
<p>Compound procedures are constructed from parameters, procedure bodies, and environments using the constructor <code>make-procedure</code>:</p>
<p></p>
<p></p>
<p><code>(define (make-procedure parameters body env)   (list 'procedure parameters body env)) (define (compound-procedure? p)   (tagged-list? p 'procedure)) (define (procedure-parameters p) (cadr p)) (define (procedure-body p) (caddr p)) (define (procedure-environment p) (cadddr p))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_543">Operations on Environments</a></h4>
<p>The evaluator needs operations for manipulating environments. As explained in section <a href="book-Z-H-21.html#%_sec_3.2">3.2</a>, an environment is a sequence of frames, where each frame is a table of bindings that associate variables with their corresponding values. We use the following operations for manipulating environments:</p>
<p></p>
<p></p>
<ul>
<li><code>(lookup-variable-value &lt;var&gt; &lt;env&gt;)</code><br /> returns the value that is bound to the symbol &lt;<em>var</em>&gt; in the environment &lt;<em>env</em>&gt;, or signals an error if the variable is unbound.</li>
<li><code>(extend-environment &lt;variables&gt; &lt;values&gt; &lt;base-env&gt;)</code><br /> returns a new environment, consisting of a new frame in which the symbols in the list &lt;<em>variables</em>&gt; are bound to the corresponding elements in the list &lt;<em>values</em>&gt;, where the enclosing environment is the environment &lt;<em>base-env</em>&gt;.</li>
<li><code>(define-variable! &lt;var&gt; &lt;value&gt; &lt;env&gt;)</code><br /> adds to the first frame in the environment &lt;<em>env</em>&gt; a new binding that associates the variable &lt;<em>var</em>&gt; with the value &lt;<em>value</em>&gt;.</li>
<li><code>(set-variable-value! &lt;var&gt; &lt;value&gt; &lt;env&gt;)</code><br /> changes the binding of the variable &lt;<em>var</em>&gt; in the environment &lt;<em>env</em>&gt; so that the variable is now bound to the value &lt;<em>value</em>&gt;, or signals an error if the variable is unbound.</li>
</ul>
<p></p>
<p>To implement these operations we represent an environment as a list of frames. The enclosing environment of an environment is the <code>cdr</code> of the list. The empty environment is simply the empty list.</p>
<p></p>
<p></p>
<p><code>(define (enclosing-environment env) (cdr env)) (define (first-frame env) (car env)) (define the-empty-environment '())</code></p>
<p></p>
<p>Each frame of an environment is represented as a pair of lists: a list of the variables bound in that frame and a list of the associated values.<a href="#footnote_Temp_544"><sup>14</sup></a></p>
<p></p>
<p><code>(define (make-frame variables values)   (cons variables values)) (define (frame-variables frame) (car frame)) (define (frame-values frame) (cdr frame)) (define (add-binding-to-frame! var val frame)   (set-car! frame (cons var (car frame)))   (set-cdr! frame (cons val (cdr frame))))</code></p>
<p></p>
<p></p>
<p>To extend an environment by a new frame that associates variables with values, we make a frame consisting of the list of variables and the list of values, and we adjoin this to the environment. We signal an error if the number of variables does not match the number of values.</p>
<p></p>
<p></p>
<p><code>(define (extend-environment vars vals base-env)   (if (= (length vars) (length vals))       (cons (make-frame vars vals) base-env)       (if (&lt; (length vars) (length vals))           (error &quot;Too many arguments supplied&quot; vars vals)           (error &quot;Too few arguments supplied&quot; vars vals))))</code></p>
<p></p>
<p></p>
<p>To look up a variable in an environment, we scan the list of variables in the first frame. If we find the desired variable, we return the corresponding element in the list of values. If we do not find the variable in the current frame, we search the enclosing environment, and so on. If we reach the empty environment, we signal an ``unbound variable'' error.</p>
<p></p>
<p></p>
<p><code>(define (lookup-variable-value var env)   (define (env-loop env)     (define (scan vars vals)       (cond ((null? vars)              (env-loop (enclosing-environment env)))             ((eq? var (car vars))              (car vals))             (else (scan (cdr vars) (cdr vals)))))     (if (eq? env the-empty-environment)         (error &quot;Unbound variable&quot; var)         (let ((frame (first-frame env)))           (scan (frame-variables frame)                 (frame-values frame)))))   (env-loop env))</code></p>
<p></p>
<p></p>
<p>To set a variable to a new value in a specified environment, we scan for the variable, just as in <code>lookup-variable-value</code>, and change the corresponding value when we find it.</p>
<p></p>
<p></p>
<p><code>(define (set-variable-value! var val env)   (define (env-loop env)     (define (scan vars vals)       (cond ((null? vars)              (env-loop (enclosing-environment env)))             ((eq? var (car vars))              (set-car! vals val))             (else (scan (cdr vars) (cdr vals)))))     (if (eq? env the-empty-environment)         (error &quot;Unbound variable -- SET!&quot; var)         (let ((frame (first-frame env)))           (scan (frame-variables frame)                 (frame-values frame)))))   (env-loop env))</code></p>
<p></p>
<p></p>
<p>To define a variable, we search the first frame for a binding for the variable, and change the binding if it exists (just as in <code>set-variable-value!</code>). If no such binding exists, we adjoin one to the first frame.</p>
<p></p>
<p></p>
<p><code>(define (define-variable! var val env)   (let ((frame (first-frame env)))     (define (scan vars vals)       (cond ((null? vars)              (add-binding-to-frame! var val frame))             ((eq? var (car vars))              (set-car! vals val))             (else (scan (cdr vars) (cdr vals)))))     (scan (frame-variables frame)           (frame-values frame))))</code></p>
<p></p>
<p></p>
<p>The method described here is only one of many plausible ways to represent environments. Since we used data abstraction to isolate the rest of the evaluator from the detailed choice of representation, we could change the environment representation if we wanted to. (See exercise <a href="#%_thm_4.11">4.11</a>.) In a production-quality Lisp system, the speed of the evaluator's environment operations -- especially that of variable lookup -- has a major impact on the performance of the system. The representation described here, although conceptually simple, is not efficient and would not ordinarily be used in a production system.<a href="#footnote_Temp_545"><sup>15</sup></a></p>
<p></p>
<p><strong>Exercise 4.11.</strong>  Instead of representing a frame as a pair of lists, we can represent a frame as a list of bindings, where each binding is a name-value pair. Rewrite the environment operations to use this alternative representation.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.12.</strong>  The procedures <code>set-variable-value!</code>, <code>define-variable!</code>, and <code>lookup-variable-value</code> can be expressed in terms of more abstract procedures for traversing the environment structure. Define abstractions that capture the common patterns and redefine the three procedures in terms of these abstractions.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.13.</strong>  Scheme allows us to create new bindings for variables by means of <code>define</code>, but provides no way to get rid of bindings. Implement for the evaluator a special form <code>make-unbound!</code> that removes the binding of a given symbol from the environment in which the <code>make-unbound!</code> expression is evaluated. This problem is not completely specified. For example, should we remove only the binding in the first frame of the environment? Complete the specification and justify any choices you make.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.1.4">4.1.4  Running the Evaluator as a Program</a></h3>
<p>Given the evaluator, we have in our hands a description (expressed in Lisp) of the process by which Lisp expressions are evaluated. One advantage of expressing the evaluator as a program is that we can run the program. This gives us, running within Lisp, a working model of how Lisp itself evaluates expressions. This can serve as a framework for experimenting with evaluation rules, as we shall do later in this chapter.</p>
<p>Our evaluator program reduces expressions ultimately to the application of primitive procedures. Therefore, all that we need to run the evaluator is to create a mechanism that calls on the underlying Lisp system to model the application of primitive procedures.</p>
<p>There must be a binding for each primitive procedure name, so that when <code>eval</code> evaluates the operator of an application of a primitive, it will find an object to pass to <code>apply</code>. We thus set up a global environment that associates unique objects with the names of the primitive procedures that can appear in the expressions we will be evaluating. The global environment also includes bindings for the symbols <code>true</code> and <code>false</code>, so that they can be used as variables in expressions to be evaluated.</p>
<p></p>
<p></p>
<p><code>(define (setup-environment)   (let ((initial-env          (extend-environment (primitive-procedure-names)                              (primitive-procedure-objects)                              the-empty-environment)))     (define-variable! 'true true initial-env)     (define-variable! 'false false initial-env)     initial-env)) (define the-global-environment (setup-environment))</code></p>
<p></p>
<p></p>
<p>It does not matter how we represent the primitive procedure objects, so long as <code>apply</code> can identify and apply them by using the procedures <code>primitive-procedure?</code> and <code>apply-primitive-procedure</code>. We have chosen to represent a primitive procedure as a list beginning with the symbol <code>primitive</code> and containing a procedure in the underlying Lisp that implements that primitive.</p>
<p></p>
<p></p>
<p><code>(define (primitive-procedure? proc)   (tagged-list? proc 'primitive))  (define (primitive-implementation proc) (cadr proc))</code></p>
<p></p>
<p></p>
<p><code>Setup-environment</code> will get the primitive names and implementation procedures from a list:<a href="#footnote_Temp_549"><sup>16</sup></a></p>
<p></p>
<p></p>
<p><code>(define primitive-procedures   (list (list 'car car)         (list 'cdr cdr)         (list 'cons cons)         (list 'null? null?)         &lt;more primitives&gt;         )) (define (primitive-procedure-names)   (map car        primitive-procedures))  (define (primitive-procedure-objects)   (map (lambda (proc) (list 'primitive (cadr proc)))        primitive-procedures))</code></p>
<p></p>
<p></p>
<p>To apply a primitive procedure, we simply apply the implementation procedure to the arguments, using the underlying Lisp system:<a href="#footnote_Temp_550"><sup>17</sup></a></p>
<p></p>
<p></p>
<p><code>(define (apply-primitive-procedure proc args)   (apply-in-underlying-scheme    (primitive-implementation proc) args))</code></p>
<p></p>
<p></p>
<p>For convenience in running the metacircular evaluator, we provide a <em>driver loop</em> that models the read-eval-print loop of the underlying Lisp system. It prints a <em>prompt</em>, reads an input expression, evaluates this expression in the global environment, and prints the result. We precede each printed result by an <em>output prompt</em> so as to distinguish the value of the expression from other output that may be printed.<a href="#footnote_Temp_551"><sup>18</sup></a></p>
<p></p>
<p></p>
<p><code>(define input-prompt &quot;;;; M-Eval input:&quot;) (define output-prompt &quot;;;; M-Eval value:&quot;) (define (driver-loop)   (prompt-for-input input-prompt)   (let ((input (read)))     (let ((output (eval input the-global-environment)))       (announce-output output-prompt)       (user-print output)))   (driver-loop)) (define (prompt-for-input string)   (newline) (newline) (display string) (newline))  (define (announce-output string)   (newline) (display string) (newline))</code></p>
<p></p>
<p>We use a special printing procedure, <code>user-print</code>, to avoid printing the environment part of a compound procedure, which may be a very long list (or may even contain cycles).</p>
<p></p>
<p></p>
<p><code>(define (user-print object)   (if (compound-procedure? object)       (display (list 'compound-procedure                      (procedure-parameters object)                      (procedure-body object)                      '&lt;procedure-env&gt;))       (display object)))</code></p>
<p></p>
<p></p>
<p>Now all we need to do to run the evaluator is to initialize the global environment and start the driver loop. Here is a sample interaction:</p>
<p></p>
<p></p>
<p><code>(define the-global-environment (setup-environment)) (driver-loop) ;;; M-Eval input: (define (append x y)   (if (null? x)       y       (cons (car x)             (append (cdr x) y)))) ;;; M-Eval value: ok ;;; M-Eval input: (append '(a b c) '(d e f)) ;;; M-Eval value: (a b c d e f)</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.14.</strong>  Eva Lu Ator and Louis Reasoner are each experimenting with the metacircular evaluator. Eva types in the definition of <code>map</code>, and runs some test programs that use it. They work fine. Louis, in contrast, has installed the system version of <code>map</code> as a primitive for the metacircular evaluator. When he tries it, things go terribly wrong. Explain why Louis's <code>map</code> fails even though Eva's works.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.1.5">4.1.5  Data as Programs</a></h3>
<p>In thinking about a Lisp program that evaluates Lisp expressions, an analogy might be helpful. One operational view of the meaning of a program is that a program is a description of an abstract (perhaps infinitely large) machine. For example, consider the familiar program to compute factorials:</p>
<p></p>
<p></p>
<p><code>(define (factorial n)   (if (= n 1)       1       (* (factorial (- n 1)) n)))</code></p>
<p></p>
<p>We may regard this program as the description of a machine containing parts that decrement, multiply, and test for equality, together with a two-position switch and another factorial machine. (The factorial machine is infinite because it contains another factorial machine within it.) Figure <a href="#%_fig_4.2">4.2</a> is a flow diagram for the factorial machine, showing how the parts are wired together.</p>
<p></p>
<p></p>
<p><img src="ch4-Z-G-2.gif" /></p>
<p><strong>Figure 4.2:</strong>  The factorial program, viewed as an abstract machine.</p>
<p></p>
<p>In a similar way, we can regard the evaluator as a very special machine that takes as input a description of a machine. Given this input, the evaluator configures itself to emulate the machine described. For example, if we feed our evaluator the definition of <code>factorial</code>, as shown in figure <a href="#%_fig_4.3">4.3</a>, the evaluator will be able to compute factorials.</p>
<p></p>
<p></p>
<p><img src="ch4-Z-G-3.gif" /></p>
<p><strong>Figure 4.3:</strong>  The evaluator emulating a factorial machine.</p>
<p></p>
<p>From this perspective, our evaluator is seen to be a <em>universal machine</em>. It mimics other machines when these are described as Lisp programs.<a href="#footnote_Temp_553"><sup>19</sup></a> This is striking. Try to imagine an analogous evaluator for electrical circuits. This would be a circuit that takes as input a signal encoding the plans for some other circuit, such as a filter. Given this input, the circuit evaluator would then behave like a filter with the same description. Such a universal electrical circuit is almost unimaginably complex. It is remarkable that the program evaluator is a rather simple program.<a href="#footnote_Temp_554"><sup>20</sup></a></p>
<p>Another striking aspect of the evaluator is that it acts as a bridge between the data objects that are manipulated by our programming language and the programming language itself. Imagine that the evaluator program (implemented in Lisp) is running, and that a user is typing expressions to the evaluator and observing the results. From the perspective of the user, an input expression such as <code>(* x x)</code> is an expression in the programming language, which the evaluator should execute. From the perspective of the evaluator, however, the expression is simply a list (in this case, a list of three symbols: <code>*</code>, <code>x</code>, and <code>x</code>) that is to be manipulated according to a well-defined set of rules.</p>
<p>That the user's programs are the evaluator's data need not be a source of confusion. In fact, it is sometimes convenient to ignore this distinction, and to give the user the ability to explicitly evaluate a data object as a Lisp expression, by making <code>eval</code> available for use in programs. Many Lisp dialects provide a primitive <code>eval</code> procedure that takes as arguments an expression and an environment and evaluates the expression relative to the environment.<a href="#footnote_Temp_555"><sup>21</sup></a> Thus,</p>
<p></p>
<p></p>
<p><code>(eval '(* 5 5) user-initial-environment)</code></p>
<p></p>
<p>and</p>
<p></p>
<p><code>(eval (cons '* (list 5 5)) user-initial-environment)</code></p>
<p></p>
<p>will both return 25.<a href="#footnote_Temp_556"><sup>22</sup></a></p>
<p></p>
<p><strong>Exercise 4.15.</strong>  Given a one-argument procedure <code>p</code> and an object <code>a</code>, <code>p</code> is said to ``halt'' on <code>a</code> if evaluating the expression <code>(p a)</code> returns a value (as opposed to terminating with an error message or running forever). Show that it is impossible to write a procedure <code>halts?</code> that correctly determines whether <code>p</code> halts on <code>a</code> for any procedure <code>p</code> and object <code>a</code>. Use the following reasoning: If you had such a procedure <code>halts?</code>, you could implement the following program:</p>
<p></p>
<p><code>(define (run-forever) (run-forever))  (define (try p)   (if (halts? p p)       (run-forever)       'halted))</code></p>
<p></p>
<p>Now consider evaluating the expression <code>(try try)</code> and show that any possible outcome (either halting or running forever) violates the intended behavior of <code>halts?</code>.<a href="#footnote_Temp_558"><sup>23</sup></a></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.1.6">4.1.6  Internal Definitions</a></h3>
<p>Our environment model of evaluation and our metacircular evaluator execute definitions in sequence, extending the environment frame one definition at a time. This is particularly convenient for interactive program development, in which the programmer needs to freely mix the application of procedures with the definition of new procedures. However, if we think carefully about the internal definitions used to implement block structure (introduced in section <a href="book-Z-H-10.html#%_sec_1.1.8">1.1.8</a>), we will find that name-by-name extension of the environment may not be the best way to define local variables.</p>
<p>Consider a procedure with internal definitions, such as</p>
<p></p>
<p></p>
<p><code>(define (f x)   (define (even? n)     (if (= n 0)         true         (odd? (- n 1))))   (define (odd? n)     (if (= n 0)         false         (even? (- n 1))))   &lt;rest of body of f</code>&gt;)<br /></p>
<p></p>
<p>Our intention here is that the name <code>odd?</code> in the body of the procedure <code>even?</code> should refer to the procedure <code>odd?</code> that is defined after <code>even?</code>. The scope of the name <code>odd?</code> is the entire body of <code>f</code>, not just the portion of the body of <code>f</code> starting at the point where the <code>define</code> for <code>odd?</code> occurs. Indeed, when we consider that <code>odd?</code> is itself defined in terms of <code>even?</code> -- so that <code>even?</code> and <code>odd?</code> are mutually recursive procedures -- we see that the only satisfactory interpretation of the two <code>define</code>s is to regard them as if the names <code>even?</code> and <code>odd?</code> were being added to the environment simultaneously. More generally, in block structure, the scope of a local name is the entire procedure body in which the <code>define</code> is evaluated.</p>
<p>As it happens, our interpreter will evaluate calls to <code>f</code> correctly, but for an ``accidental'' reason: Since the definitions of the internal procedures come first, no calls to these procedures will be evaluated until all of them have been defined. Hence, <code>odd?</code> will have been defined by the time <code>even?</code> is executed. In fact, our sequential evaluation mechanism will give the same result as a mechanism that directly implements simultaneous definition for any procedure in which the internal definitions come first in a body and evaluation of the value expressions for the defined variables doesn't actually use any of the defined variables. (For an example of a procedure that doesn't obey these restrictions, so that sequential definition isn't equivalent to simultaneous definition, see exercise <a href="#%_thm_4.19">4.19</a>.)<a href="#footnote_Temp_559"><sup>24</sup></a></p>
<p>There is, however, a simple way to treat definitions so that internally defined names have truly simultaneous scope -- just create all local variables that will be in the current environment before evaluating any of the value expressions. One way to do this is by a syntax transformation on <code>lambda</code> expressions. Before evaluating the body of a <code>lambda</code> expression, we ``scan out'' and eliminate all the internal definitions in the body. The internally defined variables will be created with a <code>let</code> and then set to their values by assignment. For example, the procedure</p>
<p></p>
<p></p>
<p><code>(lambda &lt;vars&gt;   (define u &lt;e1&gt;)   (define v &lt;e2&gt;)   &lt;e3&gt;)</code></p>
<p></p>
<p>would be transformed into</p>
<p></p>
<p></p>
<p><code>(lambda &lt;vars&gt;   (let ((u '*unassigned*)         (v '*unassigned*))     (set! u &lt;e1&gt;)     (set! v &lt;e2&gt;)     &lt;e3&gt;))</code></p>
<p></p>
<p>where <code>*unassigned*</code> is a special symbol that causes looking up a variable to signal an error if an attempt is made to use the value of the not-yet-assigned variable.</p>
<p>An alternative strategy for scanning out internal definitions is shown in exercise <a href="#%_thm_4.18">4.18</a>. Unlike the transformation shown above, this enforces the restriction that the defined variables' values can be evaluated without using any of the variables' values.<a href="#footnote_Temp_560"><sup>25</sup></a></p>
<p></p>
<p><strong>Exercise 4.16.</strong>  In this exercise we implement the method just described for interpreting internal definitions. We assume that the evaluator supports <code>let</code> (see exercise <a href="#%_thm_4.6">4.6</a>).</p>
<p>a.  Change <code>lookup-variable-value</code> (section <a href="#%_sec_4.1.3">4.1.3</a>) to signal an error if the value it finds is the symbol <code>*unassigned*</code>.</p>
<p>b.  Write a procedure <code>scan-out-defines</code> that takes a procedure body and returns an equivalent one that has no internal definitions, by making the transformation described above.</p>
<p>c.  Install <code>scan-out-defines</code> in the interpreter, either in <code>make-procedure</code> or in <code>procedure-body</code> (see section <a href="#%_sec_4.1.3">4.1.3</a>). Which place is better? Why?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.17.</strong>  Draw diagrams of the environment in effect when evaluating the expression &lt;<em>e3</em>&gt; in the procedure in the text, comparing how this will be structured when definitions are interpreted sequentially with how it will be structured if definitions are scanned out as described. Why is there an extra frame in the transformed program? Explain why this difference in environment structure can never make a difference in the behavior of a correct program. Design a way to make the interpreter implement the ``simultaneous'' scope rule for internal definitions without constructing the extra frame.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.18.</strong>  Consider an alternative strategy for scanning out definitions that translates the example in the text to</p>
<p></p>
<p><code>(lambda &lt;vars&gt;   (let ((u '*unassigned*)         (v '*unassigned*))     (let ((a &lt;e1&gt;)           (b &lt;e2&gt;))       (set! u a)       (set! v b))     &lt;e3&gt;))</code></p>
<p></p>
<p>Here <code>a</code> and <code>b</code> are meant to represent new variable names, created by the interpreter, that do not appear in the user's program. Consider the <code>solve</code> procedure from section <a href="book-Z-H-24.html#%_sec_3.5.4">3.5.4</a>:</p>
<p></p>
<p></p>
<p><code>(define (solve f y0 dt)   (define y (integral (delay dy) y0 dt))   (define dy (stream-map f y))   y)</code></p>
<p></p>
<p>Will this procedure work if internal definitions are scanned out as shown in this exercise? What if they are scanned out as shown in the text? Explain.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.19.</strong>  Ben Bitdiddle, Alyssa P. Hacker, and Eva Lu Ator are arguing about the desired result of evaluating the expression</p>
<p></p>
<p></p>
<p><code>(let ((a 1))   (define (f x)     (define b (+ a x))     (define a 5)     (+ a b))   (f 10))</code></p>
<p></p>
<p>Ben asserts that the result should be obtained using the sequential rule for <code>define</code>: <code>b</code> is defined to be 11, then <code>a</code> is defined to be 5, so the result is 16. Alyssa objects that mutual recursion requires the simultaneous scope rule for internal procedure definitions, and that it is unreasonable to treat procedure names differently from other names. Thus, she argues for the mechanism implemented in exercise <a href="#%_thm_4.16">4.16</a>. This would lead to <code>a</code> being unassigned at the time that the value for <code>b</code> is to be computed. Hence, in Alyssa's view the procedure should produce an error. Eva has a third opinion. She says that if the definitions of <code>a</code> and <code>b</code> are truly meant to be simultaneous, then the value 5 for <code>a</code> should be used in evaluating <code>b</code>. Hence, in Eva's view <code>a</code> should be 5, <code>b</code> should be 15, and the result should be 20. Which (if any) of these viewpoints do you support? Can you devise a way to implement internal definitions so that they behave as Eva prefers?<a href="#footnote_Temp_565"><sup>26</sup></a></p>
<p></p>
<p></p>
<p><strong>Exercise 4.20.</strong>  Because internal definitions look sequential but are actually simultaneous, some people prefer to avoid them entirely, and use the special form <code>letrec</code> instead. <code>Letrec</code> looks like <code>let</code>, so it is not surprising that the variables it binds are bound simultaneously and have the same scope as each other. The sample procedure <code>f</code> above can be written without internal definitions, but with exactly the same meaning, as</p>
<p></p>
<p></p>
<p><code>(define (f x)   (letrec ((even?             (lambda (n)               (if (= n 0)                   true                   (odd? (- n 1)))))            (odd?             (lambda (n)               (if (= n 0)                   false                   (even? (- n 1))))))     &lt;rest of body of f</code>&gt;))<br /></p>
<p></p>
<p><code>Letrec</code> expressions, which have the form</p>
<p></p>
<p><code>(letrec ((&lt;var1&gt; &lt;exp1&gt;) ...</code> (&lt;<em>var<sub><em>n</em></sub></em>&gt; &lt;<em>exp<sub><em>n</em></sub></em>&gt;))<br />   &lt;<em>body</em>&gt;)<br /></p>
<p></p>
<p>are a variation on <code>let</code> in which the expressions &lt;<em>exp<sub><em>k</em></sub></em>&gt; that provide the initial values for the variables &lt;<em>var<sub><em>k</em></sub></em>&gt; are evaluated in an environment that includes all the <code>letrec</code> bindings. This permits recursion in the bindings, such as the mutual recursion of <code>even?</code> and <code>odd?</code> in the example above, or the evaluation of 10 factorial with</p>
<p></p>
<p></p>
<p><code>(letrec ((fact           (lambda (n)             (if (= n 1)                 1                 (* n (fact (- n 1)))))))   (fact 10))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>a. Implement <code>letrec</code> as a derived expression, by transforming a <code>letrec</code> expression into a <code>let</code> expression as shown in the text above or in exercise <a href="#%_thm_4.18">4.18</a>. That is, the <code>letrec</code> variables should be created with a <code>let</code> and then be assigned their values with <code>set!</code>.</p>
<p></p>
<p></p>
<p>b. Louis Reasoner is confused by all this fuss about internal definitions. The way he sees it, if you don't like to use <code>define</code> inside a procedure, you can just use <code>let</code>. Illustrate what is loose about his reasoning by drawing an environment diagram that shows the environment in which the &lt;<em>rest of body of <code>f</code></em>&gt; is evaluated during evaluation of the expression <code>(f 5)</code>, with <code>f</code> defined as in this exercise. Draw an environment diagram for the same evaluation, but with <code>let</code> in place of <code>letrec</code> in the definition of <code>f</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.21.</strong>  Amazingly, Louis's intuition in exercise <a href="#%_thm_4.20">4.20</a> is correct. It is indeed possible to specify recursive procedures without using <code>letrec</code> (or even <code>define</code>), although the method for accomplishing this is much more subtle than Louis imagined. The following expression computes 10 factorial by applying a recursive factorial procedure:<a href="#footnote_Temp_568"><sup>27</sup></a></p>
<p></p>
<p><code>((lambda (n)    ((lambda (fact)       (fact fact n))     (lambda (ft k)       (if (= k 1)           1           (* k (ft ft (- k 1)))))))  10)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>a. Check (by evaluating the expression) that this really does compute factorials. Devise an analogous expression for computing Fibonacci numbers.</p>
<p></p>
<p></p>
<p>b. Consider the following procedure, which includes mutually recursive internal definitions:</p>
<p></p>
<p><code>(define (f x)   (define (even? n)     (if (= n 0)         true         (odd? (- n 1))))   (define (odd? n)     (if (= n 0)         false         (even? (- n 1))))   (even? x))</code></p>
<p></p>
<p>Fill in the missing expressions to complete an alternative definition of <code>f</code>, which uses neither internal definitions nor <code>letrec</code>:</p>
<p></p>
<p><code>(define (f x)   ((lambda (even? odd?)      (even? even? odd? x))    (lambda (ev? od? n)      (if (= n 0) true (od? &lt;??&gt; &lt;??&gt; &lt;??&gt;)))    (lambda (ev? od? n)      (if (= n 0) false (ev? &lt;??&gt; &lt;??&gt; &lt;??&gt;)))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.1.7">4.1.7  Separating Syntactic Analysis from Execution</a></h3>
<p>The evaluator implemented above is simple, but it is very inefficient, because the syntactic analysis of expressions is interleaved with their execution. Thus if a program is executed many times, its syntax is analyzed many times. Consider, for example, evaluating <code>(factorial 4)</code> using the following definition of <code>factorial</code>:</p>
<p></p>
<p></p>
<p><code>(define (factorial n)   (if (= n 1)       1       (* (factorial (- n 1)) n)))</code></p>
<p></p>
<p></p>
<p>Each time <code>factorial</code> is called, the evaluator must determine that the body is an <code>if</code> expression and extract the predicate. Only then can it evaluate the predicate and dispatch on its value. Each time it evaluates the expression <code>(* (factorial (- n 1)) n)</code>, or the subexpressions <code>(factorial (- n 1))</code> and <code>(- n 1)</code>, the evaluator must perform the case analysis in <code>eval</code> to determine that the expression is an application, and must extract its operator and operands. This analysis is expensive. Performing it repeatedly is wasteful.</p>
<p>We can transform the evaluator to be significantly more efficient by arranging things so that syntactic analysis is performed only once.<a href="#footnote_Temp_569"><sup>28</sup></a> We split <code>eval</code>, which takes an expression and an environment, into two parts. The procedure <code>analyze</code> takes only the expression. It performs the syntactic analysis and returns a new procedure, the <em>execution procedure</em>, that encapsulates the work to be done in executing the analyzed expression. The execution procedure takes an environment as its argument and completes the evaluation. This saves work because <code>analyze</code> will be called only once on an expression, while the execution procedure may be called many times.</p>
<p>With the separation into analysis and execution, <code>eval</code> now becomes</p>
<p></p>
<p></p>
<p><code>(define (eval exp env)   ((analyze exp) env))</code></p>
<p></p>
<p></p>
<p>The result of calling <code>analyze</code> is the execution procedure to be applied to the environment. The <code>analyze</code> procedure is the same case analysis as performed by the original <code>eval</code> of section <a href="#%_sec_4.1.1">4.1.1</a>, except that the procedures to which we dispatch perform only analysis, not full evaluation:</p>
<p></p>
<p></p>
<p><code>(define (analyze exp)   (cond ((self-evaluating? exp)           (analyze-self-evaluating exp))         ((quoted? exp) (analyze-quoted exp))         ((variable? exp) (analyze-variable exp))         ((assignment? exp) (analyze-assignment exp))         ((definition? exp) (analyze-definition exp))         ((if? exp) (analyze-if exp))         ((lambda? exp) (analyze-lambda exp))         ((begin? exp) (analyze-sequence (begin-actions exp)))         ((cond? exp) (analyze (cond-&gt;if exp)))         ((application? exp) (analyze-application exp))         (else          (error &quot;Unknown expression type -- ANALYZE&quot; exp))))</code></p>
<p></p>
<p></p>
<p>Here is the simplest syntactic analysis procedure, which handles self-evaluating expressions. It returns an execution procedure that ignores its environment argument and just returns the expression:</p>
<p></p>
<p></p>
<p><code>(define (analyze-self-evaluating exp)   (lambda (env) exp))</code></p>
<p></p>
<p></p>
<p>For a quoted expression, we can gain a little efficiency by extracting the text of the quotation only once, in the analysis phase, rather than in the execution phase.</p>
<p></p>
<p></p>
<p><code>(define (analyze-quoted exp)   (let ((qval (text-of-quotation exp)))     (lambda (env) qval)))</code></p>
<p></p>
<p></p>
<p>Looking up a variable value must still be done in the execution phase, since this depends upon knowing the environment.<a href="#footnote_Temp_570"><sup>29</sup></a></p>
<p></p>
<p></p>
<p><code>(define (analyze-variable exp)   (lambda (env) (lookup-variable-value exp env)))</code></p>
<p></p>
<p></p>
<p><code>Analyze-assignment</code> also must defer actually setting the variable until the execution, when the environment has been supplied. However, the fact that the <code>assignment-value</code> expression can be analyzed (recursively) during analysis is a major gain in efficiency, because the <code>assignment-value</code> expression will now be analyzed only once. The same holds true for definitions.</p>
<p></p>
<p></p>
<p><code>(define (analyze-assignment exp)   (let ((var (assignment-variable exp))         (vproc (analyze (assignment-value exp))))     (lambda (env)       (set-variable-value! var (vproc env) env)       'ok))) (define (analyze-definition exp)   (let ((var (definition-variable exp))         (vproc (analyze (definition-value exp))))     (lambda (env)       (define-variable! var (vproc env) env)       'ok)))</code></p>
<p></p>
<p></p>
<p>For <code>if</code> expressions, we extract and analyze the predicate, consequent, and alternative at analysis time.</p>
<p></p>
<p></p>
<p><code>(define (analyze-if exp)   (let ((pproc (analyze (if-predicate exp)))         (cproc (analyze (if-consequent exp)))         (aproc (analyze (if-alternative exp))))     (lambda (env)       (if (true? (pproc env))           (cproc env)           (aproc env)))))</code></p>
<p></p>
<p></p>
<p>Analyzing a <code>lambda</code> expression also achieves a major gain in efficiency: We analyze the <code>lambda</code> body only once, even though procedures resulting from evaluation of the <code>lambda</code> may be applied many times.</p>
<p></p>
<p></p>
<p><code>(define (analyze-lambda exp)   (let ((vars (lambda-parameters exp))         (bproc (analyze-sequence (lambda-body exp))))     (lambda (env) (make-procedure vars bproc env))))</code></p>
<p></p>
<p></p>
<p>Analysis of a sequence of expressions (as in a <code>begin</code> or the body of a <code>lambda</code> expression) is more involved.<a href="#footnote_Temp_571"><sup>30</sup></a> Each expression in the sequence is analyzed, yielding an execution procedure. These execution procedures are combined to produce an execution procedure that takes an environment as argument and sequentially calls each individual execution procedure with the environment as argument.</p>
<p></p>
<p></p>
<p><code>(define (analyze-sequence exps)   (define (sequentially proc1 proc2)     (lambda (env) (proc1 env) (proc2 env)))   (define (loop first-proc rest-procs)     (if (null? rest-procs)         first-proc         (loop (sequentially first-proc (car rest-procs))               (cdr rest-procs))))   (let ((procs (map analyze exps)))     (if (null? procs)         (error &quot;Empty sequence -- ANALYZE&quot;))     (loop (car procs) (cdr procs))))</code></p>
<p></p>
<p></p>
<p>To analyze an application, we analyze the operator and operands and construct an execution procedure that calls the operator execution procedure (to obtain the actual procedure to be applied) and the operand execution procedures (to obtain the actual arguments). We then pass these to <code>execute-application</code>, which is the analog of <code>apply</code> in section <a href="#%_sec_4.1.1">4.1.1</a>. <code>Execute-application</code> differs from <code>apply</code> in that the procedure body for a compound procedure has already been analyzed, so there is no need to do further analysis. Instead, we just call the execution procedure for the body on the extended environment.</p>
<p></p>
<p><code>(define (analyze-application exp)   (let ((fproc (analyze (operator exp)))         (aprocs (map analyze (operands exp))))     (lambda (env)       (execute-application (fproc env)                            (map (lambda (aproc) (aproc env))                                 aprocs))))) (define (execute-application proc args)   (cond ((primitive-procedure? proc)          (apply-primitive-procedure proc args))         ((compound-procedure? proc)          ((procedure-body proc)           (extend-environment (procedure-parameters proc)                               args                               (procedure-environment proc))))         (else          (error           &quot;Unknown procedure type -- EXECUTE-APPLICATION&quot;           proc))))</code></p>
<p></p>
<p></p>
<p>Our new evaluator uses the same data structures, syntax procedures, and run-time support procedures as in sections <a href="#%_sec_4.1.2">4.1.2</a>,  <a href="#%_sec_4.1.3">4.1.3</a>, and <a href="#%_sec_4.1.4">4.1.4</a>.</p>
<p></p>
<p><strong>Exercise 4.22.</strong>  Extend the evaluator in this section to support the special form <code>let</code>. (See exercise <a href="#%_thm_4.6">4.6</a>.)</p>
<p></p>
<p></p>
<p><strong>Exercise 4.23.</strong>  Alyssa P. Hacker doesn't understand why <code>analyze-sequence</code> needs to be so complicated. All the other analysis procedures are straightforward transformations of the corresponding evaluation procedures (or <code>eval</code> clauses) in section <a href="#%_sec_4.1.1">4.1.1</a>. She expected <code>analyze-sequence</code> to look like this:</p>
<p></p>
<p></p>
<p><code>(define (analyze-sequence exps)   (define (execute-sequence procs env)     (cond ((null? (cdr procs)) ((car procs) env))           (else ((car procs) env)                 (execute-sequence (cdr procs) env))))   (let ((procs (map analyze exps)))     (if (null? procs)         (error &quot;Empty sequence -- ANALYZE&quot;))     (lambda (env) (execute-sequence procs env))))</code></p>
<p></p>
<p>Eva Lu Ator explains to Alyssa that the version in the text does more of the work of evaluating a sequence at analysis time. Alyssa's sequence-execution procedure, rather than having the calls to the individual execution procedures built in, loops through the procedures in order to call them: In effect, although the individual expressions in the sequence have been analyzed, the sequence itself has not been.</p>
<p>Compare the two versions of <code>analyze-sequence</code>. For example, consider the common case (typical of procedure bodies) where the sequence has just one expression. What work will the execution procedure produced by Alyssa's program do? What about the execution procedure produced by the program in the text above? How do the two versions compare for a sequence with two expressions?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.24.</strong>  Design and carry out some experiments to compare the speed of the original metacircular evaluator with the version in this section. Use your results to estimate the fraction of time that is spent in analysis versus execution for various procedures.</p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_510"><sup>3</sup></a> Even so, there will remain important aspects of the evaluation process that are not elucidated by our evaluator. The most important of these are the detailed mechanisms by which procedures call other procedures and return values to their callers. We will address these issues in chapter 5, where we take a closer look at the evaluation process by implementing the evaluator as a simple register machine.</p>
<p><a href="#call_footnote_Temp_511"><sup>4</sup></a> If we grant ourselves the ability to apply primitives, then what remains for us to implement in the evaluator? The job of the evaluator is not to specify the primitives of the language, but rather to provide the connective tissue -- the means of combination and the means of abstraction -- that binds a collection of primitives to form a language. Specifically:</p>
<p></p>
<ul>
<li>The evaluator enables us to deal with nested expressions. For example, although simply applying primitives would suffice for evaluating the expression <code>(+ 1 6)</code>, it is not adequate for handling <code>(+ 1 (* 2 3))</code>. As far as the primitive procedure <code>+</code> is concerned, its arguments must be numbers, and it would choke if we passed it the expression <code>(* 2 3)</code> as an argument. One important role of the evaluator is to choreograph procedure composition so that <code>(* 2 3)</code> is reduced to 6 before being passed as an argument to <code>+</code>.</li>
<li>The evaluator allows us to use variables. For example, the primitive procedure for addition has no way to deal with expressions such as <code>(+ x 1)</code>. We need an evaluator to keep track of variables and obtain their values before invoking the primitive procedures.</li>
<li>The evaluator allows us to define compound procedures. This involves keeping track of procedure definitions, knowing how to use these definitions in evaluating expressions, and providing a mechanism that enables procedures to accept arguments.</li>
<li>The evaluator provides the special forms, which must be evaluated differently from procedure calls.</li>
</ul>
<p></p>
<p><a href="#call_footnote_Temp_518"><sup>5</sup></a> We could have simplified the <code>application?</code> clause in <code>eval</code> by using <code>map</code> (and stipulating that <code>operands</code> returns a list) rather than writing an explicit <code>list-of-values</code> procedure. We chose not to use <code>map</code> here to emphasize the fact that the evaluator can be implemented without any use of higher-order procedures (and thus could be written in a language that doesn't have higher-order procedures), even though the language that it supports will include higher-order procedures.</p>
<p><a href="#call_footnote_Temp_520"><sup>6</sup></a> In this case, the language being implemented and the implementation language are the same. Contemplation of the meaning of <code>true?</code> here yields expansion of consciousness without the abuse of substance.</p>
<p><a href="#call_footnote_Temp_523"><sup>7</sup></a> This implementation of <code>define</code> ignores a subtle issue in the handling of internal definitions, although it works correctly in most cases. We will see what the problem is and how to solve it in section <a href="#%_sec_4.1.6">4.1.6</a>.</p>
<p><a href="#call_footnote_Temp_524"><sup>8</sup></a> As we said when we introduced <code>define</code> and <code>set!</code>, these values are implementation-dependent in Scheme -- that is, the implementor can choose what value to return.</p>
<p><a href="#call_footnote_Temp_526"><sup>9</sup></a> As mentioned in section <a href="book-Z-H-16.html#%_sec_2.3.1">2.3.1</a>, the evaluator sees a quoted expression as a list beginning with <code>quote</code>, even if the expression is typed with the quotation mark. For example, the expression <code>'a</code> would be seen by the evaluator as <code>(quote a)</code>. See exercise <a href="book-Z-H-16.html#%_thm_2.55">2.55</a>.</p>
<p><a href="#call_footnote_Temp_527"><sup>10</sup></a> The value of an <code>if</code> expression when the predicate is false and there is no alternative is unspecified in Scheme; we have chosen here to make it false. We will support the use of the variables <code>true</code> and <code>false</code> in expressions to be evaluated by binding them in the global environment. See section <a href="#%_sec_4.1.4">4.1.4</a>.</p>
<p><a href="#call_footnote_Temp_528"><sup>11</sup></a> These selectors for a list of expressions -- and the corresponding ones for a list of operands -- are not intended as a data abstraction. They are introduced as mnemonic names for the basic list operations in order to make it easier to understand the explicit-control evaluator in section <a href="book-Z-H-34.html#%_sec_5.4">5.4</a>.</p>
<p><a href="#call_footnote_Temp_530"><sup>12</sup></a> The value of a <code>cond</code> expression when all the predicates are false and there is no <code>else</code> clause is unspecified in Scheme; we have chosen here to make it false.</p>
<p><a href="#call_footnote_Temp_531"><sup>13</sup></a> Practical Lisp systems provide a mechanism that allows a user to add new derived expressions and specify their implementation as syntactic transformations without modifying the evaluator. Such a user-defined transformation is called a <em>macro</em>. Although it is easy to add an elementary mechanism for defining macros, the resulting language has subtle name-conflict problems. There has been much research on mechanisms for macro definition that do not cause these difficulties. See, for example, Kohlbecker 1986, Clinger and Rees 1991, and Hanson 1991.</p>
<p><a href="#call_footnote_Temp_544"><sup>14</sup></a> Frames are not really a data abstraction in the following code: <code>Set-variable-value!</code> and <code>define-variable!</code> use <code>set-car!</code> to directly modify the values in a frame. The purpose of the frame procedures is to make the environment-manipulation procedures easy to read.</p>
<p><a href="#call_footnote_Temp_545"><sup>15</sup></a> The drawback of this representation (as well as the variant in exercise <a href="#%_thm_4.11">4.11</a>) is that the evaluator may have to search through many frames in order to find the binding for a given variable. (Such an approach is referred to as <em>deep binding</em>.) One way to avoid this inefficiency is to make use of a strategy called <em>lexical addressing</em>, which will be discussed in section <a href="book-Z-H-35.html#%_sec_5.5.6">5.5.6</a>.</p>
<p><a href="#call_footnote_Temp_549"><sup>16</sup></a> Any procedure defined in the underlying Lisp can be used as a primitive for the metacircular evaluator. The name of a primitive installed in the evaluator need not be the same as the name of its implementation in the underlying Lisp; the names are the same here because the metacircular evaluator implements Scheme itself. Thus, for example, we could put <code>(list 'first car)</code> or <code>(list 'square (lambda (x) (* x x)))</code> in the list of <code>primitive-procedures</code>.</p>
<p><a href="#call_footnote_Temp_550"><sup>17</sup></a> <code>Apply-in-underlying-scheme</code> is the <code>apply</code> procedure we have used in earlier chapters. The metacircular evaluator's <code>apply</code> procedure (section <a href="#%_sec_4.1.1">4.1.1</a>) models the working of this primitive. Having two different things called <code>apply</code> leads to a technical problem in running the metacircular evaluator, because defining the metacircular evaluator's <code>apply</code> will mask the definition of the primitive. One way around this is to rename the metacircular <code>apply</code> to avoid conflict with the name of the primitive procedure. We have assumed instead that we have saved a reference to the underlying <code>apply</code> by doing</p>
<p></p>
<p><code>(define apply-in-underlying-scheme apply)</code></p>
<p></p>
<p>before defining the metacircular <code>apply</code>. This allows us to access the original version of <code>apply</code> under a different name.</p>
<p><a href="#call_footnote_Temp_551"><sup>18</sup></a> The primitive procedure <code>read</code> waits for input from the user, and returns the next complete expression that is typed. For example, if the user types <code>(+ 23 x)</code>, <code>read</code> returns a three-element list containing the symbol <code>+</code>, the number 23, and the symbol <code>x</code>. If the user types <code>'x</code>, <code>read</code> returns a two-element list containing the symbol <code>quote</code> and the symbol <code>x</code>.</p>
<p><a href="#call_footnote_Temp_553"><sup>19</sup></a> The fact that the machines are described in Lisp is inessential. If we give our evaluator a Lisp program that behaves as an evaluator for some other language, say C, the Lisp evaluator will emulate the C evaluator, which in turn can emulate any machine described as a C program. Similarly, writing a Lisp evaluator in C produces a C program that can execute any Lisp program. The deep idea here is that any evaluator can emulate any other. Thus, the notion of ``what can in principle be computed'' (ignoring practicalities of time and memory required) is independent of the language or the computer, and instead reflects an underlying notion of <em>computability</em>. This was first demonstrated in a clear way by Alan M. Turing (1912-1954), whose 1936 paper laid the foundations for theoretical computer science. In the paper, Turing presented a simple computational model -- now known as a <em>Turing machine</em> -- and argued that any ``effective process'' can be formulated as a program for such a machine. (This argument is known as the <em>Church-Turing thesis</em>.) Turing then implemented a universal machine, i.e., a Turing machine that behaves as an evaluator for Turing-machine programs. He used this framework to demonstrate that there are well-posed problems that cannot be computed by Turing machines (see exercise <a href="#%_thm_4.15">4.15</a>), and so by implication cannot be formulated as ``effective processes.'' Turing went on to make fundamental contributions to practical computer science as well. For example, he invented the idea of structuring programs using general-purpose subroutines. See Hodges 1983 for a biography of Turing.</p>
<p><a href="#call_footnote_Temp_554"><sup>20</sup></a> Some people find it counterintuitive that an evaluator, which is implemented by a relatively simple procedure, can emulate programs that are more complex than the evaluator itself. The existence of a universal evaluator machine is a deep and wonderful property of computation. <em>Recursion theory</em>, a branch of mathematical logic, is concerned with logical limits of computation. Douglas Hofstadter's beautiful book <em>Gödel, Escher, Bach</em> (1979) explores some of these ideas.</p>
<p><a href="#call_footnote_Temp_555"><sup>21</sup></a> Warning: This <code>eval</code> primitive is not identical to the <code>eval</code> procedure we implemented in section <a href="#%_sec_4.1.1">4.1.1</a>, because it uses <em>actual</em> Scheme environments rather than the sample environment structures we built in section <a href="#%_sec_4.1.3">4.1.3</a>. These actual environments cannot be manipulated by the user as ordinary lists; they must be accessed via <code>eval</code> or other special operations. Similarly, the <code>apply</code> primitive we saw earlier is not identical to the metacircular <code>apply</code>, because it uses actual Scheme procedures rather than the procedure objects we constructed in sections <a href="#%_sec_4.1.3">4.1.3</a> and <a href="#%_sec_4.1.4">4.1.4</a>.</p>
<p><a href="#call_footnote_Temp_556"><sup>22</sup></a> The MIT implementation of Scheme includes <code>eval</code>, as well as a symbol <code>user-initial-environment</code> that is bound to the initial environment in which the user's input expressions are evaluated.</p>
<p><a href="#call_footnote_Temp_558"><sup>23</sup></a> Although we stipulated that <code>halts?</code> is given a procedure object, notice that this reasoning still applies even if <code>halts?</code> can gain access to the procedure's text and its environment. This is Turing's celebrated <em>Halting Theorem</em>, which gave the first clear example of a <em>non-computable</em> problem, i.e., a well-posed task that cannot be carried out as a computational procedure.</p>
<p><a href="#call_footnote_Temp_559"><sup>24</sup></a> Wanting programs to not depend on this evaluation mechanism is the reason for the ``management is not responsible'' remark in footnote <a href="book-Z-H-10.html#footnote_Temp_45">28</a> of chapter 1. By insisting that internal definitions come first and do not use each other while the definitions are being evaluated, the IEEE standard for Scheme leaves implementors some choice in the mechanism used to evaluate these definitions. The choice of one evaluation rule rather than another here may seem like a small issue, affecting only the interpretation of ``badly formed'' programs. However, we will see in section <a href="book-Z-H-35.html#%_sec_5.5.6">5.5.6</a> that moving to a model of simultaneous scoping for internal definitions avoids some nasty difficulties that would otherwise arise in implementing a compiler.</p>
<p><a href="#call_footnote_Temp_560"><sup>25</sup></a> The IEEE standard for Scheme allows for different implementation strategies by specifying that it is up to the programmer to obey this restriction, not up to the implementation to enforce it. Some Scheme implementations, including MIT Scheme, use the transformation shown above. Thus, some programs that don't obey this restriction will in fact run in such implementations.</p>
<p><a href="#call_footnote_Temp_565"><sup>26</sup></a> The MIT implementors of Scheme support Alyssa on the following grounds: Eva is in principle correct -- the definitions should be regarded as simultaneous. But it seems difficult to implement a general, efficient mechanism that does what Eva requires. In the absence of such a mechanism, it is better to generate an error in the difficult cases of simultaneous definitions (Alyssa's notion) than to produce an incorrect answer (as Ben would have it).</p>
<p><a href="#call_footnote_Temp_568"><sup>27</sup></a> This example illustrates a programming trick for formulating recursive procedures without using <code>define</code>. The most general trick of this sort is the <em>Y</em> <em>operator</em>, which can be used to give a ``pure <img src="book-Z-G-D-6.gif" />-calculus'' implementation of recursion. (See Stoy 1977 for details on the lambda calculus, and Gabriel 1988 for an exposition of the <em>Y</em> operator in Scheme.)</p>
<p><a href="#call_footnote_Temp_569"><sup>28</sup></a> This technique is an integral part of the compilation process, which we shall discuss in chapter 5. Jonathan Rees wrote a Scheme interpreter like this in about 1982 for the T project (Rees and Adams 1982). Marc Feeley (1986) (see also Feeley and Lapalme 1987) independently invented this technique in his master's thesis.</p>
<p><a href="#call_footnote_Temp_570"><sup>29</sup></a> There is, however, an important part of the variable search that <em>can</em> be done as part of the syntactic analysis. As we will show in section <a href="book-Z-H-35.html#%_sec_5.5.6">5.5.6</a>, one can determine the position in the environment structure where the value of the variable will be found, thus obviating the need to scan the environment for the entry that matches the variable.</p>
<p><a href="#call_footnote_Temp_571"><sup>30</sup></a> See exercise <a href="#%_thm_4.23">4.23</a> for some insight into the processing of sequences.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-25.html">previous</a>, <a href="book-Z-H-27.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-26.html">previous</a>, <a href="book-Z-H-28.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_4.2">4.2  Variations on a Scheme -- Lazy Evaluation</a></h2>
<p>Now that we have an evaluator expressed as a Lisp program, we can experiment with alternative choices in language design simply by modifying the evaluator. Indeed, new languages are often invented by first writing an evaluator that embeds the new language within an existing high-level language. For example, if we wish to discuss some aspect of a proposed modification to Lisp with another member of the Lisp community, we can supply an evaluator that embodies the change. The recipient can then experiment with the new evaluator and send back comments as further modifications. Not only does the high-level implementation base make it easier to test and debug the evaluator; in addition, the embedding enables the designer to snarf<a href="#footnote_Temp_575"><sup>31</sup></a> features from the underlying language, just as our embedded Lisp evaluator uses primitives and control structure from the underlying Lisp. Only later (if ever) need the designer go to the trouble of building a complete implementation in a low-level language or in hardware. In this section and the next we explore some variations on Scheme that provide significant additional expressive power.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.2.1">4.2.1  Normal Order and Applicative Order</a></h3>
<p></p>
<p>In section <a href="book-Z-H-10.html#%_sec_1.1">1.1</a>, where we began our discussion of models of evaluation, we noted that Scheme is an <em>applicative-order</em> language, namely, that all the arguments to Scheme procedures are evaluated when the procedure is applied. In contrast, <em>normal-order</em> languages delay evaluation of procedure arguments until the actual argument values are needed. Delaying evaluation of procedure arguments until the last possible moment (e.g., until they are required by a primitive operation) is called <em>lazy evaluation</em>.<a href="#footnote_Temp_576"><sup>32</sup></a> Consider the procedure</p>
<p></p>
<p></p>
<p><code>(define (try a b)   (if (= a 0) 1 b))</code></p>
<p></p>
<p>Evaluating <code>(try 0 (/ 1 0))</code> generates an error in Scheme. With lazy evaluation, there would be no error. Evaluating the expression would return 1, because the argument <code>(/ 1 0)</code> would never be evaluated.</p>
<p>An example that exploits lazy evaluation is the definition of a procedure <code>unless</code></p>
<p></p>
<p></p>
<p><code>(define (unless condition usual-value exceptional-value)   (if condition exceptional-value usual-value))</code></p>
<p></p>
<p>that can be used in expressions such as</p>
<p></p>
<p></p>
<p><code>(unless (= b 0)         (/ a b)         (begin (display &quot;exception: returning 0&quot;)                0))</code></p>
<p></p>
<p>This won't work in an applicative-order language because both the usual value and the exceptional value will be evaluated before <code>unless</code> is called (compare exercise <a href="book-Z-H-10.html#%_thm_1.6">1.6</a>). An advantage of lazy evaluation is that some procedures, such as <code>unless</code>, can do useful computation even if evaluation of some of their arguments would produce errors or would not terminate.</p>
<p>If the body of a procedure is entered before an argument has been evaluated we say that the procedure is <em>non-strict</em> in that argument. If the argument is evaluated before the body of the procedure is entered we say that the procedure is <em>strict</em> in that argument.<a href="#footnote_Temp_577"><sup>33</sup></a> In a purely applicative-order language, all procedures are strict in each argument. In a purely normal-order language, all compound procedures are non-strict in each argument, and primitive procedures may be either strict or non-strict. There are also languages (see exercise <a href="#%_thm_4.31">4.31</a>) that give programmers detailed control over the strictness of the procedures they define.</p>
<p>A striking example of a procedure that can usefully be made non-strict is <code>cons</code> (or, in general, almost any constructor for data structures). One can do useful computation, combining elements to form data structures and operating on the resulting data structures, even if the values of the elements are not known. It makes perfect sense, for instance, to compute the length of a list without knowing the values of the individual elements in the list. We will exploit this idea in section <a href="#%_sec_4.2.3">4.2.3</a> to implement the streams of chapter 3 as lists formed of non-strict <code>cons</code> pairs.</p>
<p></p>
<p><strong>Exercise 4.25.</strong>  Suppose that (in ordinary applicative-order Scheme) we define <code>unless</code> as shown above and then define <code>factorial</code> in terms of <code>unless</code> as</p>
<p></p>
<p></p>
<p><code>(define (factorial n)   (unless (= n 1)           (* n (factorial (- n 1)))           1))</code></p>
<p></p>
<p>What happens if we attempt to evaluate <code>(factorial 5)</code>? Will our definitions work in a normal-order language?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.26.</strong>  Ben Bitdiddle and Alyssa P. Hacker disagree over the importance of lazy evaluation for implementing things such as <code>unless</code>. Ben points out that it's possible to implement <code>unless</code> in applicative order as a special form. Alyssa counters that, if one did that, <code>unless</code> would be merely syntax, not a procedure that could be used in conjunction with higher-order procedures. Fill in the details on both sides of the argument. Show how to implement <code>unless</code> as a derived expression (like <code>cond</code> or <code>let</code>), and give an example of a situation where it might be useful to have <code>unless</code> available as a procedure, rather than as a special form.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.2.2">4.2.2  An Interpreter with Lazy Evaluation</a></h3>
<p>In this section we will implement a normal-order language that is the same as Scheme except that compound procedures are non-strict in each argument. Primitive procedures will still be strict. It is not difficult to modify the evaluator of section <a href="book-Z-H-26.html#%_sec_4.1.1">4.1.1</a> so that the language it interprets behaves this way. Almost all the required changes center around procedure application.</p>
<p>The basic idea is that, when applying a procedure, the interpreter must determine which arguments are to be evaluated and which are to be delayed. The delayed arguments are not evaluated; instead, they are transformed into objects called <em>thunk</em>s.<a href="#footnote_Temp_580"><sup>34</sup></a> The thunk must contain the information required to produce the value of the argument when it is needed, as if it had been evaluated at the time of the application. Thus, the thunk must contain the argument expression and the environment in which the procedure application is being evaluated.</p>
<p>The process of evaluating the expression in a thunk is called <em>forcing</em>.<a href="#footnote_Temp_581"><sup>35</sup></a> In general, a thunk will be forced only when its value is needed: when it is passed to a primitive procedure that will use the value of the thunk; when it is the value of a predicate of a conditional; and when it is the value of an operator that is about to be applied as a procedure. One design choice we have available is whether or not to <em>memoize</em> thunks, as we did with delayed objects in section <a href="book-Z-H-24.html#%_sec_3.5.1">3.5.1</a>. With memoization, the first time a thunk is forced, it stores the value that is computed. Subsequent forcings simply return the stored value without repeating the computation. We'll make our interpreter memoize, because this is more efficient for many applications. There are tricky considerations here, however.<a href="#footnote_Temp_582"><sup>36</sup></a></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_583">Modifying the evaluator</a></h4>
<p>The main difference between the lazy evaluator and the one in section <a href="book-Z-H-26.html#%_sec_4.1">4.1</a> is in the handling of procedure applications in <code>eval</code> and <code>apply</code>.</p>
<p>The <code>application?</code> clause of <code>eval</code> becomes</p>
<p></p>
<p></p>
<p><code>((application? exp)  (apply (actual-value (operator exp) env)         (operands exp)         env))</code></p>
<p></p>
<p>This is almost the same as the <code>application?</code> clause of <code>eval</code> in section <a href="book-Z-H-26.html#%_sec_4.1.1">4.1.1</a>. For lazy evaluation, however, we call <code>apply</code> with the operand expressions, rather than the arguments produced by evaluating them. Since we will need the environment to construct thunks if the arguments are to be delayed, we must pass this as well. We still evaluate the operator, because <code>apply</code> needs the actual procedure to be applied in order to dispatch on its type (primitive versus compound) and apply it.</p>
<p>Whenever we need the actual value of an expression, we use</p>
<p></p>
<p><code>(define (actual-value exp env)   (force-it (eval exp env)))</code></p>
<p></p>
<p>instead of just <code>eval</code>, so that if the expression's value is a thunk, it will be forced.</p>
<p>Our new version of <code>apply</code> is also almost the same as the version in section <a href="book-Z-H-26.html#%_sec_4.1.1">4.1.1</a>. The difference is that <code>eval</code> has passed in unevaluated operand expressions: For primitive procedures (which are strict), we evaluate all the arguments before applying the primitive; for compound procedures (which are non-strict) we delay all the arguments before applying the procedure.</p>
<p></p>
<p></p>
<p><code>(define (apply procedure arguments env)   (cond ((primitive-procedure? procedure)          (apply-primitive-procedure           procedure           (list-of-arg-values arguments env)))  ; changed         ((compound-procedure? procedure)          (eval-sequence           (procedure-body procedure)           (extend-environment            (procedure-parameters procedure)            (list-of-delayed-args arguments env) ; changed            (procedure-environment procedure))))         (else          (error           &quot;Unknown procedure type -- APPLY&quot; procedure))))</code></p>
<p></p>
<p>The procedures that process the arguments are just like <code>list-of-values</code> from section <a href="book-Z-H-26.html#%_sec_4.1.1">4.1.1</a>, except that <code>list-of-delayed-args</code> delays the arguments instead of evaluating them, and <code>list-of-arg-values</code> uses <code>actual-value</code> instead of <code>eval</code>:</p>
<p></p>
<p></p>
<p><code>(define (list-of-arg-values exps env)   (if (no-operands? exps)       '()       (cons (actual-value (first-operand exps) env)             (list-of-arg-values (rest-operands exps)                                 env)))) (define (list-of-delayed-args exps env)   (if (no-operands? exps)       '()       (cons (delay-it (first-operand exps) env)             (list-of-delayed-args (rest-operands exps)                                   env))))</code></p>
<p></p>
<p></p>
<p>The other place we must change the evaluator is in the handling of <code>if</code>, where we must use <code>actual-value</code> instead of <code>eval</code> to get the value of the predicate expression before testing whether it is true or false:</p>
<p></p>
<p></p>
<p><code>(define (eval-if exp env)   (if (true? (actual-value (if-predicate exp) env))       (eval (if-consequent exp) env)       (eval (if-alternative exp) env)))</code></p>
<p></p>
<p></p>
<p>Finally, we must change the <code>driver-loop</code> procedure (section <a href="book-Z-H-26.html#%_sec_4.1.4">4.1.4</a>) to use <code>actual-value</code> instead of <code>eval</code>, so that if a delayed value is propagated back to the read-eval-print loop, it will be forced before being printed. We also change the prompts to indicate that this is the lazy evaluator:</p>
<p></p>
<p></p>
<p><code>(define input-prompt &quot;;;; L-Eval input:&quot;) (define output-prompt &quot;;;; L-Eval value:&quot;) (define (driver-loop)   (prompt-for-input input-prompt)   (let ((input (read)))     (let ((output            (actual-value input the-global-environment)))       (announce-output output-prompt)       (user-print output)))   (driver-loop))</code></p>
<p></p>
<p></p>
<p>With these changes made, we can start the evaluator and test it. The successful evaluation of the <code>try</code> expression discussed in section <a href="#%_sec_4.2.1">4.2.1</a> indicates that the interpreter is performing lazy evaluation:</p>
<p></p>
<p></p>
<p><code>(define the-global-environment (setup-environment)) (driver-loop) ;;; L-Eval input: (define (try a b)   (if (= a 0) 1 b)) ;;; L-Eval value: ok ;;; L-Eval input: (try 0 (/ 1 0)) ;;; L-Eval value: 1</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_584">Representing thunks</a></h4>
<p>Our evaluator must arrange to create thunks when procedures are applied to arguments and to force these thunks later. A thunk must package an expression together with the environment, so that the argument can be produced later. To force the thunk, we simply extract the expression and environment from the thunk and evaluate the expression in the environment. We use <code>actual-value</code> rather than <code>eval</code> so that in case the value of the expression is itself a thunk, we will force that, and so on, until we reach something that is not a thunk:</p>
<p></p>
<p></p>
<p><code>(define (force-it obj)   (if (thunk? obj)       (actual-value (thunk-exp obj) (thunk-env obj))       obj))</code></p>
<p></p>
<p></p>
<p>One easy way to package an expression with an environment is to make a list containing the expression and the environment. Thus, we create a thunk as follows:</p>
<p></p>
<p></p>
<p><code>(define (delay-it exp env)   (list 'thunk exp env))  (define (thunk? obj)   (tagged-list? obj 'thunk))  (define (thunk-exp thunk) (cadr thunk))  (define (thunk-env thunk) (caddr thunk))</code></p>
<p></p>
<p></p>
<p>Actually, what we want for our interpreter is not quite this, but rather thunks that have been memoized. When a thunk is forced, we will turn it into an evaluated thunk by replacing the stored expression with its value and changing the <code>thunk</code> tag so that it can be recognized as already evaluated.<a href="#footnote_Temp_585"><sup>37</sup></a></p>
<p></p>
<p></p>
<p><code>(define (evaluated-thunk? obj)   (tagged-list? obj 'evaluated-thunk))  (define (thunk-value evaluated-thunk) (cadr evaluated-thunk)) (define (force-it obj)   (cond ((thunk? obj)          (let ((result (actual-value                         (thunk-exp obj)                         (thunk-env obj))))            (set-car! obj 'evaluated-thunk)            (set-car! (cdr obj) result)  ; replace exp</code> with its value<br />            (set-cdr! (cdr obj) '())     <em>; forget unneeded <code>env</code></em><br />            result))<br />         ((evaluated-thunk? obj)<br />          (thunk-value obj))<br />         (else obj)))<br /></p>
<p></p>
<p>Notice that the same <code>delay-it</code> procedure works both with and without memoization.</p>
<p></p>
<p><strong>Exercise 4.27.</strong>  Suppose we type in the following definitions to the lazy evaluator:</p>
<p></p>
<p><code>(define count 0) (define (id x)   (set! count (+ count 1))   x)</code></p>
<p></p>
<p>Give the missing values in the following sequence of interactions, and explain your answers.<a href="#footnote_Temp_587"><sup>38</sup></a></p>
<p></p>
<p><code>(define w (id (id 10))) ;;; L-Eval input: count ;;; L-Eval value: &lt;response&gt; ;;; L-Eval input: w ;;; L-Eval value: &lt;response&gt; ;;; L-Eval input: count ;;; L-Eval value: &lt;response&gt;</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.28.</strong>  <code>Eval</code> uses <code>actual-value</code> rather than <code>eval</code> to evaluate the operator before passing it to <code>apply</code>, in order to force the value of the operator. Give an example that demonstrates the need for this forcing.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.29.</strong>  Exhibit a program that you would expect to run much more slowly without memoization than with memoization. Also, consider the following interaction, where the <code>id</code> procedure is defined as in exercise <a href="#%_thm_4.27">4.27</a> and <code>count</code> starts at 0:</p>
<p></p>
<p><code>(define (square x)   (* x x)) ;;; L-Eval input: (square (id 10)) ;;; L-Eval value: &lt;response&gt; ;;; L-Eval input: count ;;; L-Eval value: &lt;response&gt;</code></p>
<p></p>
<p>Give the responses both when the evaluator memoizes and when it does not.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.30.</strong>  Cy D. Fect, a reformed C programmer, is worried that some side effects may never take place, because the lazy evaluator doesn't force the expressions in a sequence. Since the value of an expression in a sequence other than the last one is not used (the expression is there only for its effect, such as assigning to a variable or printing), there can be no subsequent use of this value (e.g., as an argument to a primitive procedure) that will cause it to be forced. Cy thus thinks that when evaluating sequences, we must force all expressions in the sequence except the final one. He proposes to modify <code>eval-sequence</code> from section <a href="book-Z-H-26.html#%_sec_4.1.1">4.1.1</a> to use <code>actual-value</code> rather than <code>eval</code>:</p>
<p></p>
<p></p>
<p><code>(define (eval-sequence exps env)   (cond ((last-exp? exps) (eval (first-exp exps) env))         (else (actual-value (first-exp exps) env)               (eval-sequence (rest-exps exps) env))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>a. Ben Bitdiddle thinks Cy is wrong. He shows Cy the <code>for-each</code> procedure described in exercise <a href="book-Z-H-15.html#%_thm_2.23">2.23</a>, which gives an important example of a sequence with side effects:</p>
<p></p>
<p></p>
<p><code>(define (for-each proc items)   (if (null? items)       'done       (begin (proc (car items))              (for-each proc (cdr items)))))</code></p>
<p></p>
<p>He claims that the evaluator in the text (with the original <code>eval-sequence</code>) handles this correctly:</p>
<p></p>
<p></p>
<p><code>;;; L-Eval input: (for-each (lambda (x) (newline) (display x))           (list 57 321 88)) 57 321 88 ;;; L-Eval value: done</code></p>
<p></p>
<p>Explain why Ben is right about the behavior of <code>for-each</code>.</p>
<p></p>
<p></p>
<p>b. Cy agrees that Ben is right about the <code>for-each</code> example, but says that that's not the kind of program he was thinking about when he proposed his change to <code>eval-sequence</code>. He defines the following two procedures in the lazy evaluator:</p>
<p></p>
<p></p>
<p><code>(define (p1 x)   (set! x (cons x '(2)))   x)  (define (p2 x)   (define (p e)     e     x)   (p (set! x (cons x '(2)))))</code></p>
<p></p>
<p>What are the values of <code>(p1 1)</code> and <code>(p2 1)</code> with the original <code>eval-sequence</code>? What would the values be with Cy's proposed change to <code>eval-sequence</code>?</p>
<p></p>
<p></p>
<p>c. Cy also points out that changing <code>eval-sequence</code> as he proposes does not affect the behavior of the example in part a. Explain why this is true.</p>
<p></p>
<p></p>
<p>d. How do you think sequences ought to be treated in the lazy evaluator? Do you like Cy's approach, the approach in the text, or some other approach?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.31.</strong>  The approach taken in this section is somewhat unpleasant, because it makes an incompatible change to Scheme. It might be nicer to implement lazy evaluation as an <em>upward-compatible extension</em>, that is, so that ordinary Scheme programs will work as before. We can do this by extending the syntax of procedure declarations to let the user control whether or not arguments are to be delayed. While we're at it, we may as well also give the user the choice between delaying with and without memoization. For example, the definition</p>
<p></p>
<p><code>(define (f a (b lazy) c (d lazy-memo))   ...</code>)<br /></p>
<p></p>
<p>would define <code>f</code> to be a procedure of four arguments, where the first and third arguments are evaluated when the procedure is called, the second argument is delayed, and the fourth argument is both delayed and memoized. Thus, ordinary procedure definitions will produce the same behavior as ordinary Scheme, while adding the <code>lazy-memo</code> declaration to each parameter of every compound procedure will produce the behavior of the lazy evaluator defined in this section. Design and implement the changes required to produce such an extension to Scheme. You will have to implement new syntax procedures to handle the new syntax for <code>define</code>. You must also arrange for <code>eval</code> or <code>apply</code> to determine when arguments are to be delayed, and to force or delay arguments accordingly, and you must arrange for forcing to memoize or not, as appropriate.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.2.3">4.2.3  Streams as Lazy Lists</a></h3>
<p>In section <a href="book-Z-H-24.html#%_sec_3.5.1">3.5.1</a>, we showed how to implement streams as delayed lists. We introduced special forms <code>delay</code> and <code>cons-stream</code>, which allowed us to construct a ``promise'' to compute the <code>cdr</code> of a stream, without actually fulfilling that promise until later. We could use this general technique of introducing special forms whenever we need more control over the evaluation process, but this is awkward. For one thing, a special form is not a first-class object like a procedure, so we cannot use it together with higher-order procedures.<a href="#footnote_Temp_592"><sup>39</sup></a> Additionally, we were forced to create streams as a new kind of data object similar but not identical to lists, and this required us to reimplement many ordinary list operations (<code>map</code>, <code>append</code>, and so on) for use with streams.</p>
<p>With lazy evaluation, streams and lists can be identical, so there is no need for special forms or for separate list and stream operations. All we need to do is to arrange matters so that <code>cons</code> is non-strict. One way to accomplish this is to extend the lazy evaluator to allow for non-strict primitives, and to implement <code>cons</code> as one of these. An easier way is to recall (section <a href="book-Z-H-14.html#%_sec_2.1.3">2.1.3</a>) that there is no fundamental need to implement <code>cons</code> as a primitive at all. Instead, we can represent pairs as procedures:<a href="#footnote_Temp_593"><sup>40</sup></a></p>
<p></p>
<p></p>
<p><code>(define (cons x y)   (lambda (m) (m x y))) (define (car z)   (z (lambda (p q) p))) (define (cdr z)   (z (lambda (p q) q)))</code></p>
<p></p>
<p></p>
<p>In terms of these basic operations, the standard definitions of the list operations will work with infinite lists (streams) as well as finite ones, and the stream operations can be implemented as list operations. Here are some examples:</p>
<p></p>
<p></p>
<p><code>(define (list-ref items n)   (if (= n 0)       (car items)       (list-ref (cdr items) (- n 1)))) (define (map proc items)   (if (null? items)       '()       (cons (proc (car items))             (map proc (cdr items))))) (define (scale-list items factor)   (map (lambda (x) (* x factor))        items)) (define (add-lists list1 list2)   (cond ((null? list1) list2)         ((null? list2) list1)         (else (cons (+ (car list1) (car list2))                     (add-lists (cdr list1) (cdr list2)))))) (define ones (cons 1 ones)) (define integers (cons 1 (add-lists ones integers))) ;;; L-Eval input: (list-ref integers 17) ;;; L-Eval value: 18</code></p>
<p></p>
<p></p>
<p>Note that these lazy lists are even lazier than the streams of chapter 3: The <code>car</code> of the list, as well as the <code>cdr</code>, is delayed.<a href="#footnote_Temp_594"><sup>41</sup></a> In fact, even accessing the <code>car</code> or <code>cdr</code> of a lazy pair need not force the value of a list element. The value will be forced only when it is really needed -- e.g., for use as the argument of a primitive, or to be printed as an answer.</p>
<p>Lazy pairs also help with the problem that arose with streams in section <a href="book-Z-H-24.html#%_sec_3.5.4">3.5.4</a>, where we found that formulating stream models of systems with loops may require us to sprinkle our programs with explicit <code>delay</code> operations, beyond the ones supplied by <code>cons-stream</code>. With lazy evaluation, all arguments to procedures are delayed uniformly. For instance, we can implement procedures to integrate lists and solve differential equations as we originally intended in section <a href="book-Z-H-24.html#%_sec_3.5.4">3.5.4</a>:</p>
<p></p>
<p></p>
<p><code>(define (integral integrand initial-value dt)   (define int     (cons initial-value           (add-lists (scale-list integrand dt)                     int)))   int) (define (solve f y0 dt)   (define y (integral dy y0 dt))   (define dy (map f y))   y) ;;; L-Eval input: (list-ref (solve (lambda (x) x) 1 0.001) 1000) ;;; L-Eval value: 2.716924</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.32.</strong>  Give some examples that illustrate the difference between the streams of chapter 3 and the ``lazier'' lazy lists described in this section. How can you take advantage of this extra laziness?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.33.</strong>  Ben Bitdiddle tests the lazy list implementation given above by evaluating the expression</p>
<p></p>
<p><code>(car '(a b c))</code></p>
<p></p>
<p>To his surprise, this produces an error. After some thought, he realizes that the ``lists'' obtained by reading in quoted expressions are different from the lists manipulated by the new definitions of <code>cons</code>, <code>car</code>, and <code>cdr</code>. Modify the evaluator's treatment of quoted expressions so that quoted lists typed at the driver loop will produce true lazy lists.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.34.</strong>  Modify the driver loop for the evaluator so that lazy pairs and lists will print in some reasonable way. (What are you going to do about infinite lists?) You may also need to modify the representation of lazy pairs so that the evaluator can identify them in order to print them.</p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_575"><sup>31</sup></a> Snarf: ``To grab, especially a large document or file for the purpose of using it either with or without the owner's permission.'' Snarf down: ``To snarf, sometimes with the connotation of absorbing, processing, or understanding.'' (These definitions were snarfed from Steele et al. 1983. See also Raymond 1993.)</p>
<p><a href="#call_footnote_Temp_576"><sup>32</sup></a> The difference between the ``lazy'' terminology and the ``normal-order'' terminology is somewhat fuzzy. Generally, ``lazy'' refers to the mechanisms of particular evaluators, while ``normal-order'' refers to the semantics of languages, independent of any particular evaluation strategy. But this is not a hard-and-fast distinction, and the two terminologies are often used interchangeably.</p>
<p><a href="#call_footnote_Temp_577"><sup>33</sup></a> The ``strict'' versus ``non-strict'' terminology means essentially the same thing as ``applicative-order'' versus ``normal-order,'' except that it refers to individual procedures and arguments rather than to the language as a whole. At a conference on programming languages you might hear someone say, ``The normal-order language Hassle has certain strict primitives. Other procedures take their arguments by lazy evaluation.''</p>
<p><a href="#call_footnote_Temp_580"><sup>34</sup></a> The word <em>thunk</em> was invented by an informal working group that was discussing the implementation of call-by-name in Algol 60. They observed that most of the analysis of (``thinking about'') the expression could be done at compile time; thus, at run time, the expression would already have been ``thunk'' about (Ingerman et al. 1960).</p>
<p><a href="#call_footnote_Temp_581"><sup>35</sup></a> This is analogous to the use of <code>force</code> on the delayed objects that were introduced in chapter 3 to represent streams. The critical difference between what we are doing here and what we did in chapter 3 is that we are building delaying and forcing into the evaluator, and thus making this uniform and automatic throughout the language.</p>
<p><a href="#call_footnote_Temp_582"><sup>36</sup></a> Lazy evaluation combined with memoization is sometimes referred to as <em>call-by-need</em> argument passing, in contrast to <em>call-by-name</em> argument passing. (Call-by-name, introduced in Algol 60, is similar to non-memoized lazy evaluation.) As language designers, we can build our evaluator to memoize, not to memoize, or leave this an option for programmers (exercise <a href="#%_thm_4.31">4.31</a>). As you might expect from chapter 3, these choices raise issues that become both subtle and confusing in the presence of assignments. (See exercises <a href="#%_thm_4.27">4.27</a> and <a href="#%_thm_4.29">4.29</a>.) An excellent article by Clinger (1982) attempts to clarify the multiple dimensions of confusion that arise here.</p>
<p><a href="#call_footnote_Temp_585"><sup>37</sup></a> Notice that we also erase the <code>env</code> from the thunk once the expression's value has been computed. This makes no difference in the values returned by the interpreter. It does help save space, however, because removing the reference from the thunk to the <code>env</code> once it is no longer needed allows this structure to be <em>garbage-collected</em> and its space recycled, as we will discuss in section <a href="book-Z-H-33.html#%_sec_5.3">5.3</a>.</p>
<p>Similarly, we could have allowed unneeded environments in the memoized delayed objects of section <a href="book-Z-H-24.html#%_sec_3.5.1">3.5.1</a> to be garbage-collected, by having <code>memo-proc</code> do something like <code>(set! proc '())</code> to discard the procedure <code>proc</code> (which includes the environment in which the <code>delay</code> was evaluated) after storing its value.</p>
<p><a href="#call_footnote_Temp_587"><sup>38</sup></a> This exercise demonstrates that the interaction between lazy evaluation and side effects can be very confusing. This is just what you might expect from the discussion in chapter 3.</p>
<p><a href="#call_footnote_Temp_592"><sup>39</sup></a> This is precisely the issue with the <code>unless</code> procedure, as in exercise <a href="#%_thm_4.26">4.26</a>.</p>
<p><a href="#call_footnote_Temp_593"><sup>40</sup></a> This is the procedural representation described in exercise <a href="book-Z-H-14.html#%_thm_2.4">2.4</a>. Essentially any procedural representation (e.g., a message-passing implementation) would do as well. Notice that we can install these definitions in the lazy evaluator simply by typing them at the driver loop. If we had originally included <code>cons</code>, <code>car</code>, and <code>cdr</code> as primitives in the global environment, they will be redefined. (Also see exercises <a href="#%_thm_4.33">4.33</a> and <a href="#%_thm_4.34">4.34</a>.)</p>
<p><a href="#call_footnote_Temp_594"><sup>41</sup></a> This permits us to create delayed versions of more general kinds of list structures, not just sequences. Hughes 1990 discusses some applications of ``lazy trees.''</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-26.html">previous</a>, <a href="book-Z-H-28.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-27.html">previous</a>, <a href="book-Z-H-29.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_4.3">4.3  Variations on a Scheme -- Nondeterministic Computing</a></h2>
<p>In this section, we extend the Scheme evaluator to support a programming paradigm called <em>nondeterministic computing</em> by building into the evaluator a facility to support automatic search. This is a much more profound change to the language than the introduction of lazy evaluation in section <a href="book-Z-H-27.html#%_sec_4.2">4.2</a>.</p>
<p>Nondeterministic computing, like stream processing, is useful for ``generate and test'' applications. Consider the task of starting with two lists of positive integers and finding a pair of integers -- one from the first list and one from the second list -- whose sum is prime. We saw how to handle this with finite sequence operations in section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a> and with infinite streams in section <a href="book-Z-H-24.html#%_sec_3.5.3">3.5.3</a>. Our approach was to generate the sequence of all possible pairs and filter these to select the pairs whose sum is prime. Whether we actually generate the entire sequence of pairs first as in chapter 2, or interleave the generating and filtering as in chapter 3, is immaterial to the essential image of how the computation is organized.</p>
<p>The nondeterministic approach evokes a different image. Imagine simply that we choose (in some way) a number from the first list and a number from the second list and require (using some mechanism) that their sum be prime. This is expressed by following procedure:</p>
<p></p>
<p></p>
<p><code>(define (prime-sum-pair list1 list2)   (let ((a (an-element-of list1))         (b (an-element-of list2)))     (require (prime? (+ a b)))     (list a b)))</code></p>
<p></p>
<p>It might seem as if this procedure merely restates the problem, rather than specifying a way to solve it. Nevertheless, this is a legitimate nondeterministic program.<a href="#footnote_Temp_598"><sup>42</sup></a></p>
<p>The key idea here is that expressions in a nondeterministic language can have more than one possible value. For instance, <code>an-element-of</code> might return any element of the given list. Our nondeterministic program evaluator will work by automatically choosing a possible value and keeping track of the choice. If a subsequent requirement is not met, the evaluator will try a different choice, and it will keep trying new choices until the evaluation succeeds, or until we run out of choices. Just as the lazy evaluator freed the programmer from the details of how values are delayed and forced, the nondeterministic program evaluator will free the programmer from the details of how choices are made.</p>
<p>It is instructive to contrast the different images of time evoked by nondeterministic evaluation and stream processing. Stream processing uses lazy evaluation to decouple the time when the stream of possible answers is assembled from the time when the actual stream elements are produced. The evaluator supports the illusion that all the possible answers are laid out before us in a timeless sequence. With nondeterministic evaluation, an expression represents the exploration of a set of possible worlds, each determined by a set of choices. Some of the possible worlds lead to dead ends, while others have useful values. The nondeterministic program evaluator supports the illusion that time branches, and that our programs have different possible execution histories. When we reach a dead end, we can revisit a previous choice point and proceed along a different branch.</p>
<p>The nondeterministic program evaluator implemented below is called the <code>amb</code> evaluator because it is based on a new special form called <code>amb</code>. We can type the above definition of <code>prime-sum-pair</code> at the <code>amb</code> evaluator driver loop (along with definitions of <code>prime?</code>, <code>an-element-of</code>, and <code>require</code>) and run the procedure as follows:</p>
<p></p>
<p></p>
<p><code>;;; Amb-Eval input: (prime-sum-pair '(1 3 5 8) '(20 35 110)) ;;; Starting a new problem ;;; Amb-Eval value: (3 20)</code></p>
<p></p>
<p>The value returned was obtained after the evaluator repeatedly chose elements from each of the lists, until a successful choice was made.</p>
<p>Section <a href="#%_sec_4.3.1">4.3.1</a> introduces <code>amb</code> and explains how it supports nondeterminism through the evaluator's automatic search mechanism. Section <a href="#%_sec_4.3.2">4.3.2</a> presents examples of nondeterministic programs, and section <a href="#%_sec_4.3.3">4.3.3</a> gives the details of how to implement the <code>amb</code> evaluator by modifying the ordinary Scheme evaluator.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.3.1">4.3.1  Amb and Search</a></h3>
<p></p>
<p>To extend Scheme to support nondeterminism, we introduce a new special form called <code>amb</code>.<a href="#footnote_Temp_599"><sup>43</sup></a> The expression <code>(amb &lt;e1&gt; &lt;e2&gt; ...</code> &lt;<em><em>e</em><sub><em>n</em></sub></em>&gt;) returns the value of one of the <em>n</em> expressions &lt;<em><em>e</em><sub><em>i</em></sub></em>&gt; ``ambiguously.'' For example, the expression</p>
<p></p>
<p></p>
<p><code>(list (amb 1 2 3) (amb 'a 'b))</code></p>
<p></p>
<p>can have six possible values:</p>
<table>
<tbody>
<tr class="odd">
<td align="left"><code>(1 a) </code></td>
<td align="left"><code>(1 b) </code></td>
<td align="left"><code>(2 a) </code></td>
<td align="left"><code>(2 b) </code></td>
<td align="left"><code>(3 a) </code></td>
<td align="left"><code>(3 b)</code></td>
</tr>
</tbody>
</table>
<p><code>Amb</code> with a single choice produces an ordinary (single) value.</p>
<p><code>Amb</code> with no choices -- the expression <code>(amb)</code> -- is an expression with no acceptable values. Operationally, we can think of <code>(amb)</code> as an expression that when evaluated causes the computation to ``fail'': The computation aborts and no value is produced. Using this idea, we can express the requirement that a particular predicate expression <code>p</code> must be true as follows:</p>
<p></p>
<p></p>
<p><code>(define (require p)   (if (not p) (amb)))</code></p>
<p></p>
<p></p>
<p>With <code>amb</code> and <code>require</code>, we can implement the <code>an-element-of</code> procedure used above:</p>
<p></p>
<p></p>
<p><code>(define (an-element-of items)   (require (not (null? items)))   (amb (car items) (an-element-of (cdr items))))</code></p>
<p></p>
<p><code>An-element-of</code> fails if the list is empty. Otherwise it ambiguously returns either the first element of the list or an element chosen from the rest of the list.</p>
<p>We can also express infinite ranges of choices. The following procedure potentially returns any integer greater than or equal to some given <em>n</em>:</p>
<p></p>
<p></p>
<p><code>(define (an-integer-starting-from n)   (amb n (an-integer-starting-from (+ n 1))))</code></p>
<p></p>
<p>This is like the stream procedure <code>integers-starting-from</code> described in section <a href="book-Z-H-24.html#%_sec_3.5.2">3.5.2</a>, but with an important difference: The stream procedure returns an object that represents the sequence of all integers beginning with <em>n</em>, whereas the <code>amb</code> procedure returns a single integer.<a href="#footnote_Temp_600"><sup>44</sup></a></p>
<p>Abstractly, we can imagine that evaluating an <code>amb</code> expression causes time to split into branches, where the computation continues on each branch with one of the possible values of the expression. We say that <code>amb</code> represents a <em>nondeterministic choice point</em>. If we had a machine with a sufficient number of processors that could be dynamically allocated, we could implement the search in a straightforward way. Execution would proceed as in a sequential machine, until an <code>amb</code> expression is encountered. At this point, more processors would be allocated and initialized to continue all of the parallel executions implied by the choice. Each processor would proceed sequentially as if it were the only choice, until it either terminates by encountering a failure, or it further subdivides, or it finishes.<a href="#footnote_Temp_601"><sup>45</sup></a></p>
<p>On the other hand, if we have a machine that can execute only one process (or a few concurrent processes), we must consider the alternatives sequentially. One could imagine modifying an evaluator to pick at random a branch to follow whenever it encounters a choice point. Random choice, however, can easily lead to failing values. We might try running the evaluator over and over, making random choices and hoping to find a non-failing value, but it is better to <em>systematically search</em> all possible execution paths. The <code>amb</code> evaluator that we will develop and work with in this section implements a systematic search as follows: When the evaluator encounters an application of <code>amb</code>, it initially selects the first alternative. This selection may itself lead to a further choice. The evaluator will always initially choose the first alternative at each choice point. If a choice results in a failure, then the evaluator automagically<a href="#footnote_Temp_602"><sup>46</sup></a> <em>backtracks</em> to the most recent choice point and tries the next alternative. If it runs out of alternatives at any choice point, the evaluator will back up to the previous choice point and resume from there. This process leads to a search strategy known as <em>depth-first search</em> or <em>chronological backtracking</em>.<a href="#footnote_Temp_603"><sup>47</sup></a></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_604">Driver loop</a></h4>
<p>The driver loop for the <code>amb</code> evaluator has some unusual properties. It reads an expression and prints the value of the first non-failing execution, as in the <code>prime-sum-pair</code> example shown above. If we want to see the value of the next successful execution, we can ask the interpreter to backtrack and attempt to generate a second non-failing execution. This is signaled by typing the symbol <code>try-again</code>. If any expression except <code>try-again</code> is given, the interpreter will start a new problem, discarding the unexplored alternatives in the previous problem. Here is a sample interaction:</p>
<p></p>
<p></p>
<p><code>;;; Amb-Eval input: (prime-sum-pair '(1 3 5 8) '(20 35 110)) ;;; Starting a new problem ;;; Amb-Eval value: (3 20) ;;; Amb-Eval input: try-again ;;; Amb-Eval value: (3 110) ;;; Amb-Eval input: try-again ;;; Amb-Eval value: (8 35) ;;; Amb-Eval input: try-again ;;; There are no more values of (prime-sum-pair (quote (1 3 5 8)) (quote (20 35 110))) ;;; Amb-Eval input: (prime-sum-pair '(19 27 30) '(11 36 58)) ;;; Starting a new problem ;;; Amb-Eval value: (30 11)</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.35.</strong>  Write a procedure <code>an-integer-between</code> that returns an integer between two given bounds. This can be used to implement a procedure that finds Pythagorean triples, i.e., triples of integers (<em>i</em>,<em>j</em>,<em>k</em>) between the given bounds such that <em>i</em> &lt; <em>j</em> and <em>i</em><sup>2</sup> + <em>j</em><sup>2</sup> = <em>k</em><sup>2</sup>, as follows:</p>
<p></p>
<p><code>(define (a-pythagorean-triple-between low high)   (let ((i (an-integer-between low high)))     (let ((j (an-integer-between i high)))       (let ((k (an-integer-between j high)))         (require (= (+ (* i i) (* j j)) (* k k)))         (list i j k)))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.36.</strong>  Exercise <a href="book-Z-H-24.html#%_thm_3.69">3.69</a> discussed how to generate the stream of <em>all</em> Pythagorean triples, with no upper bound on the size of the integers to be searched. Explain why simply replacing <code>an-integer-between</code> by <code>an-integer-starting-from</code> in the procedure in exercise <a href="#%_thm_4.35">4.35</a> is not an adequate way to generate arbitrary Pythagorean triples. Write a procedure that actually will accomplish this. (That is, write a procedure for which repeatedly typing <code>try-again</code> would in principle eventually generate all Pythagorean triples.)</p>
<p></p>
<p></p>
<p><strong>Exercise 4.37.</strong>  Ben Bitdiddle claims that the following method for generating Pythagorean triples is more efficient than the one in exercise <a href="#%_thm_4.35">4.35</a>. Is he correct? (Hint: Consider the number of possibilities that must be explored.)</p>
<p></p>
<p></p>
<p><code>(define (a-pythagorean-triple-between low high)   (let ((i (an-integer-between low high))         (hsq (* high high)))     (let ((j (an-integer-between i high)))       (let ((ksq (+ (* i i) (* j j))))         (require (&gt;= hsq ksq))         (let ((k (sqrt ksq)))           (require (integer? k))           (list i j k))))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.3.2">4.3.2  Examples of Nondeterministic Programs</a></h3>
<p></p>
<p>Section <a href="#%_sec_4.3.3">4.3.3</a> describes the implementation of the <code>amb</code> evaluator. First, however, we give some examples of how it can be used. The advantage of nondeterministic programming is that we can suppress the details of how search is carried out, thereby expressing our programs at a higher level of abstraction.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_608">Logic Puzzles</a></h4>
<p>The following puzzle (taken from Dinesman 1968) is typical of a large class of simple logic puzzles:</p>
<blockquote>
Baker, Cooper, Fletcher, Miller, and Smith live on different floors of an apartment house that contains only five floors. Baker does not live on the top floor. Cooper does not live on the bottom floor. Fletcher does not live on either the top or the bottom floor. Miller lives on a higher floor than does Cooper. Smith does not live on a floor adjacent to Fletcher's. Fletcher does not live on a floor adjacent to Cooper's. Where does everyone live?
</blockquote>
<p>We can determine who lives on each floor in a straightforward way by enumerating all the possibilities and imposing the given restrictions:<a href="#footnote_Temp_609"><sup>48</sup></a></p>
<p></p>
<p></p>
<p><code>(define (multiple-dwelling)   (let ((baker (amb 1 2 3 4 5))         (cooper (amb 1 2 3 4 5))         (fletcher (amb 1 2 3 4 5))         (miller (amb 1 2 3 4 5))         (smith (amb 1 2 3 4 5)))     (require      (distinct? (list baker cooper fletcher miller smith)))     (require (not (= baker 5)))     (require (not (= cooper 1)))     (require (not (= fletcher 5)))     (require (not (= fletcher 1)))     (require (&gt; miller cooper))     (require (not (= (abs (- smith fletcher)) 1)))     (require (not (= (abs (- fletcher cooper)) 1)))     (list (list 'baker baker)           (list 'cooper cooper)           (list 'fletcher fletcher)           (list 'miller miller)           (list 'smith smith))))</code></p>
<p></p>
<p></p>
<p>Evaluating the expression <code>(multiple-dwelling)</code> produces the result</p>
<p></p>
<p><code>((baker 3) (cooper 2) (fletcher 4) (miller 5) (smith 1))</code></p>
<p></p>
<p>Although this simple procedure works, it is very slow. Exercises <a href="#%_thm_4.39">4.39</a> and <a href="#%_thm_4.40">4.40</a> discuss some possible improvements.</p>
<p></p>
<p><strong>Exercise 4.38.</strong>  Modify the multiple-dwelling procedure to omit the requirement that Smith and Fletcher do not live on adjacent floors. How many solutions are there to this modified puzzle?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.39.</strong>  Does the order of the restrictions in the multiple-dwelling procedure affect the answer? Does it affect the time to find an answer? If you think it matters, demonstrate a faster program obtained from the given one by reordering the restrictions. If you think it does not matter, argue your case.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.40.</strong>  In the multiple dwelling problem, how many sets of assignments are there of people to floors, both before and after the requirement that floor assignments be distinct? It is very inefficient to generate all possible assignments of people to floors and then leave it to backtracking to eliminate them. For example, most of the restrictions depend on only one or two of the person-floor variables, and can thus be imposed before floors have been selected for all the people. Write and demonstrate a much more efficient nondeterministic procedure that solves this problem based upon generating only those possibilities that are not already ruled out by previous restrictions. (Hint: This will require a nest of <code>let</code> expressions.)</p>
<p></p>
<p></p>
<p><strong>Exercise 4.41.</strong>  Write an ordinary Scheme program to solve the multiple dwelling puzzle.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.42.</strong>  Solve the following ``Liars'' puzzle (from Phillips 1934):</p>
<blockquote>
<p>Five schoolgirls sat for an examination. Their parents -- so they thought -- showed an undue degree of interest in the result. They therefore agreed that, in writing home about the examination, each girl should make one true statement and one untrue one. The following are the relevant passages from their letters:</p>
<p></p>
<ul>
<li>Betty: ``Kitty was second in the examination. I was only third.''</li>
<li>Ethel: ``You'll be glad to hear that I was on top. Joan was second.''</li>
<li>Joan: ``I was third, and poor old Ethel was bottom.''</li>
<li>Kitty: ``I came out second. Mary was only fourth.''</li>
<li>Mary: ``I was fourth. Top place was taken by Betty.''</li>
</ul>
<p>What in fact was the order in which the five girls were placed?</p>
</blockquote>
<p></p>
<p></p>
<p><strong>Exercise 4.43.</strong>  Use the <code>amb</code> evaluator to solve the following puzzle:<a href="#footnote_Temp_616"><sup>49</sup></a></p>
<blockquote>
Mary Ann Moore's father has a yacht and so has each of his four friends: Colonel Downing, Mr. Hall, Sir Barnacle Hood, and Dr. Parker. Each of the five also has one daughter and each has named his yacht after a daughter of one of the others. Sir Barnacle's yacht is the Gabrielle, Mr. Moore owns the Lorna; Mr. Hall the Rosalind. The Melissa, owned by Colonel Downing, is named after Sir Barnacle's daughter. Gabrielle's father owns the yacht that is named after Dr. Parker's daughter. Who is Lorna's father?
</blockquote>
<p>Try to write the program so that it runs efficiently (see exercise <a href="#%_thm_4.40">4.40</a>). Also determine how many solutions there are if we are not told that Mary Ann's last name is Moore.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.44.</strong>  Exercise <a href="book-Z-H-15.html#%_thm_2.42">2.42</a> described the ``eight-queens puzzle'' of placing queens on a chessboard so that no two attack each other. Write a nondeterministic program to solve this puzzle.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_618">Parsing natural language</a></h4>
<p>Programs designed to accept natural language as input usually start by attempting to <em>parse</em> the input, that is, to match the input against some grammatical structure. For example, we might try to recognize simple sentences consisting of an article followed by a noun followed by a verb, such as ``The cat eats.'' To accomplish such an analysis, we must be able to identify the parts of speech of individual words. We could start with some lists that classify various words:<a href="#footnote_Temp_619"><sup>50</sup></a></p>
<p></p>
<p></p>
<p><code>(define nouns '(noun student professor cat class)) (define verbs '(verb studies lectures eats sleeps)) (define articles '(article the a))</code></p>
<p></p>
<p>We also need a <em>grammar</em>, that is, a set of rules describing how grammatical elements are composed from simpler elements. A very simple grammar might stipulate that a sentence always consists of two pieces -- a noun phrase followed by a verb -- and that a noun phrase consists of an article followed by a noun. With this grammar, the sentence ``The cat eats'' is parsed as follows:</p>
<p></p>
<p></p>
<p><code>(sentence (noun-phrase (article the) (noun cat))           (verb eats))</code></p>
<p></p>
<p></p>
<p>We can generate such a parse with a simple program that has separate procedures for each of the grammatical rules. To parse a sentence, we identify its two constituent pieces and return a list of these two elements, tagged with the symbol <code>sentence</code>:</p>
<p></p>
<p></p>
<p><code>(define (parse-sentence)   (list 'sentence          (parse-noun-phrase)          (parse-word verbs)))</code></p>
<p></p>
<p>A noun phrase, similarly, is parsed by finding an article followed by a noun:</p>
<p></p>
<p><code>(define (parse-noun-phrase)   (list 'noun-phrase         (parse-word articles)         (parse-word nouns)))</code></p>
<p></p>
<p></p>
<p>At the lowest level, parsing boils down to repeatedly checking that the next unparsed word is a member of the list of words for the required part of speech. To implement this, we maintain a global variable <code>*unparsed*</code>, which is the input that has not yet been parsed. Each time we check a word, we require that <code>*unparsed*</code> must be non-empty and that it should begin with a word from the designated list. If so, we remove that word from <code>*unparsed*</code> and return the word together with its part of speech (which is found at the head of the list):<a href="#footnote_Temp_620"><sup>51</sup></a></p>
<p></p>
<p></p>
<p><code>(define (parse-word word-list)   (require (not (null? *unparsed*)))   (require (memq (car *unparsed*) (cdr word-list)))   (let ((found-word (car *unparsed*)))     (set! *unparsed* (cdr *unparsed*))     (list (car word-list) found-word)))</code></p>
<p></p>
<p></p>
<p>To start the parsing, all we need to do is set <code>*unparsed*</code> to be the entire input, try to parse a sentence, and check that nothing is left over:</p>
<p></p>
<p></p>
<p><code>(define *unparsed* '()) (define (parse input)   (set! *unparsed* input)   (let ((sent (parse-sentence)))     (require (null? *unparsed*))     sent))</code></p>
<p></p>
<p></p>
<p>We can now try the parser and verify that it works for our simple test sentence:</p>
<p></p>
<p></p>
<p><code>;;; Amb-Eval input: (parse '(the cat eats)) ;;; Starting a new problem ;;; Amb-Eval value: (sentence (noun-phrase (article the) (noun cat)) (verb eats))</code></p>
<p></p>
<p></p>
<p>The <code>amb</code> evaluator is useful here because it is convenient to express the parsing constraints with the aid of <code>require</code>. Automatic search and backtracking really pay off, however, when we consider more complex grammars where there are choices for how the units can be decomposed.</p>
<p>Let's add to our grammar a list of prepositions:</p>
<p></p>
<p></p>
<p><code>(define prepositions '(prep for to in by with))</code></p>
<p></p>
<p>and define a prepositional phrase (e.g., ``for the cat'') to be a preposition followed by a noun phrase:</p>
<p></p>
<p></p>
<p><code>(define (parse-prepositional-phrase)   (list 'prep-phrase         (parse-word prepositions)         (parse-noun-phrase)))</code></p>
<p></p>
<p>Now we can define a sentence to be a noun phrase followed by a verb phrase, where a verb phrase can be either a verb or a verb phrase extended by a prepositional phrase:<a href="#footnote_Temp_621"><sup>52</sup></a></p>
<p></p>
<p></p>
<p><code>(define (parse-sentence)   (list 'sentence          (parse-noun-phrase)          (parse-verb-phrase))) (define (parse-verb-phrase)   (define (maybe-extend verb-phrase)     (amb verb-phrase          (maybe-extend (list 'verb-phrase                              verb-phrase                              (parse-prepositional-phrase)))))   (maybe-extend (parse-word verbs)))</code></p>
<p></p>
<p></p>
<p>While we're at it, we can also elaborate the definition of noun phrases to permit such things as ``a cat in the class.'' What we used to call a noun phrase, we'll now call a simple noun phrase, and a noun phrase will now be either a simple noun phrase or a noun phrase extended by a prepositional phrase:</p>
<p></p>
<p></p>
<p><code>(define (parse-simple-noun-phrase)   (list 'simple-noun-phrase         (parse-word articles)         (parse-word nouns))) (define (parse-noun-phrase)   (define (maybe-extend noun-phrase)     (amb noun-phrase          (maybe-extend (list 'noun-phrase                              noun-phrase                              (parse-prepositional-phrase)))))   (maybe-extend (parse-simple-noun-phrase)))</code></p>
<p></p>
<p></p>
<p>Our new grammar lets us parse more complex sentences. For example</p>
<p></p>
<p><code>(parse '(the student with the cat sleeps in the class))</code></p>
<p></p>
<p>produces</p>
<p></p>
<p></p>
<p><code>(sentence  (noun-phrase   (simple-noun-phrase (article the) (noun student))   (prep-phrase (prep with)                (simple-noun-phrase                 (article the) (noun cat))))  (verb-phrase   (verb sleeps)   (prep-phrase (prep in)                (simple-noun-phrase                 (article the) (noun class)))))</code></p>
<p></p>
<p></p>
<p>Observe that a given input may have more than one legal parse. In the sentence ``The professor lectures to the student with the cat,'' it may be that the professor is lecturing with the cat, or that the student has the cat. Our nondeterministic program finds both possibilities:</p>
<p></p>
<p></p>
<p><code>(parse '(the professor lectures to the student with the cat))</code></p>
<p></p>
<p>produces</p>
<p></p>
<p></p>
<p><code>(sentence  (simple-noun-phrase (article the) (noun professor))  (verb-phrase   (verb-phrase    (verb lectures)    (prep-phrase (prep to)                 (simple-noun-phrase                  (article the) (noun student))))   (prep-phrase (prep with)                (simple-noun-phrase                 (article the) (noun cat)))))</code></p>
<p></p>
<p>Asking the evaluator to try again yields</p>
<p></p>
<p><code>(sentence  (simple-noun-phrase (article the) (noun professor))  (verb-phrase   (verb lectures)   (prep-phrase (prep to)                (noun-phrase                 (simple-noun-phrase                  (article the) (noun student))                 (prep-phrase (prep with)                              (simple-noun-phrase                               (article the) (noun cat)))))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.45.</strong>  With the grammar given above, the following sentence can be parsed in five different ways: ``The professor lectures to the student in the class with the cat.'' Give the five parses and explain the differences in shades of meaning among them.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.46.</strong>  The evaluators in sections <a href="book-Z-H-26.html#%_sec_4.1">4.1</a> and <a href="book-Z-H-27.html#%_sec_4.2">4.2</a> do not determine what order operands are evaluated in. We will see that the <code>amb</code> evaluator evaluates them from left to right. Explain why our parsing program wouldn't work if the operands were evaluated in some other order.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.47.</strong>  Louis Reasoner suggests that, since a verb phrase is either a verb or a verb phrase followed by a prepositional phrase, it would be much more straightforward to define the procedure <code>parse-verb-phrase</code> as follows (and similarly for noun phrases):</p>
<p></p>
<p><code>(define (parse-verb-phrase)   (amb (parse-word verbs)        (list 'verb-phrase              (parse-verb-phrase)              (parse-prepositional-phrase))))</code></p>
<p></p>
<p>Does this work? Does the program's behavior change if we interchange the order of expressions in the <code>amb</code>?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.48.</strong>  Extend the grammar given above to handle more complex sentences. For example, you could extend noun phrases and verb phrases to include adjectives and adverbs, or you could handle compound sentences.<a href="#footnote_Temp_626"><sup>53</sup></a></p>
<p></p>
<p></p>
<p><strong>Exercise 4.49.</strong>  Alyssa P. Hacker is more interested in generating interesting sentences than in parsing them. She reasons that by simply changing the procedure <code>parse-word</code> so that it ignores the ``input sentence'' and instead always succeeds and generates an appropriate word, we can use the programs we had built for parsing to do generation instead. Implement Alyssa's idea, and show the first half-dozen or so sentences generated.<a href="#footnote_Temp_628"><sup>54</sup></a></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.3.3">4.3.3  Implementing the <code>Amb</code> Evaluator</a></h3>
<p>The evaluation of an ordinary Scheme expression may return a value, may never terminate, or may signal an error. In nondeterministic Scheme the evaluation of an expression may in addition result in the discovery of a dead end, in which case evaluation must backtrack to a previous choice point. The interpretation of nondeterministic Scheme is complicated by this extra case.</p>
<p>We will construct the <code>amb</code> evaluator for nondeterministic Scheme by modifying the analyzing evaluator of section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a>.<a href="#footnote_Temp_629"><sup>55</sup></a> As in the analyzing evaluator, evaluation of an expression is accomplished by calling an execution procedure produced by analysis of that expression. The difference between the interpretation of ordinary Scheme and the interpretation of nondeterministic Scheme will be entirely in the execution procedures.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_630">Execution procedures and continuations</a></h4>
<p>Recall that the execution procedures for the ordinary evaluator take one argument: the environment of execution. In contrast, the execution procedures in the <code>amb</code> evaluator take three arguments: the environment, and two procedures called <em>continuation procedures</em>. The evaluation of an expression will finish by calling one of these two continuations: If the evaluation results in a value, the <em>success continuation</em> is called with that value; if the evaluation results in the discovery of a dead end, the <em>failure continuation</em> is called. Constructing and calling appropriate continuations is the mechanism by which the nondeterministic evaluator implements backtracking.</p>
<p>It is the job of the success continuation to receive a value and proceed with the computation. Along with that value, the success continuation is passed another failure continuation, which is to be called subsequently if the use of that value leads to a dead end.</p>
<p>It is the job of the failure continuation to try another branch of the nondeterministic process. The essence of the nondeterministic language is in the fact that expressions may represent choices among alternatives. The evaluation of such an expression must proceed with one of the indicated alternative choices, even though it is not known in advance which choices will lead to acceptable results. To deal with this, the evaluator picks one of the alternatives and passes this value to the success continuation. Together with this value, the evaluator constructs and passes along a failure continuation that can be called later to choose a different alternative.</p>
<p>A failure is triggered during evaluation (that is, a failure continuation is called) when a user program explicitly rejects the current line of attack (for example, a call to <code>require</code> may result in execution of <code>(amb)</code>, an expression that always fails -- see section <a href="#%_sec_4.3.1">4.3.1</a>). The failure continuation in hand at that point will cause the most recent choice point to choose another alternative. If there are no more alternatives to be considered at that choice point, a failure at an earlier choice point is triggered, and so on. Failure continuations are also invoked by the driver loop in response to a <code>try-again</code> request, to find another value of the expression.</p>
<p>In addition, if a side-effect operation (such as assignment to a variable) occurs on a branch of the process resulting from a choice, it may be necessary, when the process finds a dead end, to undo the side effect before making a new choice. This is accomplished by having the side-effect operation produce a failure continuation that undoes the side effect and propagates the failure.</p>
<p>In summary, failure continuations are constructed by</p>
<p></p>
<ul>
<li><code>amb</code> expressions -- to provide a mechanism to make alternative choices if the current choice made by the <code>amb</code> expression leads to a dead end;</li>
<li>the top-level driver -- to provide a mechanism to report failure when the choices are exhausted;</li>
<li>assignments -- to intercept failures and undo assignments during backtracking.</li>
</ul>
<p></p>
<p>Failures are initiated only when a dead end is encountered. This occurs</p>
<p></p>
<ul>
<li>if the user program executes <code>(amb)</code>;</li>
<li>if the user types <code>try-again</code> at the top-level driver.</li>
</ul>
<p></p>
<p>Failure continuations are also called during processing of a failure:</p>
<p></p>
<ul>
<li>When the failure continuation created by an assignment finishes undoing a side effect, it calls the failure continuation it intercepted, in order to propagate the failure back to the choice point that led to this assignment or to the top level.</li>
<li>When the failure continuation for an <code>amb</code> runs out of choices, it calls the failure continuation that was originally given to the <code>amb</code>, in order to propagate the failure back to the previous choice point or to the top level.</li>
</ul>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_631">Structure of the evaluator</a></h4>
<p>The syntax- and data-representation procedures for the <code>amb</code> evaluator, and also the basic <code>analyze</code> procedure, are identical to those in the evaluator of section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a>, except for the fact that we need additional syntax procedures to recognize the <code>amb</code> special form:<a href="#footnote_Temp_632"><sup>56</sup></a></p>
<p></p>
<p><code>(define (amb? exp) (tagged-list? exp 'amb)) (define (amb-choices exp) (cdr exp))</code></p>
<p></p>
<p>We must also add to the dispatch in <code>analyze</code> a clause that will recognize this special form and generate an appropriate execution procedure:</p>
<p></p>
<p></p>
<p><code>((amb? exp) (analyze-amb exp))</code></p>
<p></p>
<p></p>
<p>The top-level procedure <code>ambeval</code> (similar to the version of <code>eval</code> given in section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a>) analyzes the given expression and applies the resulting execution procedure to the given environment, together with two given continuations:</p>
<p></p>
<p></p>
<p><code>(define (ambeval exp env succeed fail)   ((analyze exp) env succeed fail))</code></p>
<p></p>
<p></p>
<p>A success continuation is a procedure of two arguments: the value just obtained and another failure continuation to be used if that value leads to a subsequent failure. A failure continuation is a procedure of no arguments. So the general form of an execution procedure is</p>
<p></p>
<p></p>
<p><code>(lambda (env succeed fail)   ;; succeed</code> is <code>(lambda (value fail) ...</code>)<br />   <em>;; <code>fail</code> is <code>(lambda () ...</code>)</em><br />   <code>...</code>)<br /></p>
<p></p>
<p></p>
<p>For example, executing</p>
<p></p>
<p></p>
<p><code>(ambeval &lt;exp&gt;          the-global-environment          (lambda (value fail) value)          (lambda () 'failed))</code></p>
<p></p>
<p>will attempt to evaluate the given expression and will return either the expression's value (if the evaluation succeeds) or the symbol <code>failed</code> (if the evaluation fails). The call to <code>ambeval</code> in the driver loop shown below uses much more complicated continuation procedures, which continue the loop and support the <code>try-again</code> request.</p>
<p>Most of the complexity of the <code>amb</code> evaluator results from the mechanics of passing the continuations around as the execution procedures call each other. In going through the following code, you should compare each of the execution procedures with the corresponding procedure for the ordinary evaluator given in section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a>.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_633">Simple expressions</a></h4>
<p>The execution procedures for the simplest kinds of expressions are essentially the same as those for the ordinary evaluator, except for the need to manage the continuations. The execution procedures simply succeed with the value of the expression, passing along the failure continuation that was passed to them.</p>
<p></p>
<p></p>
<p><code>(define (analyze-self-evaluating exp)   (lambda (env succeed fail)     (succeed exp fail))) (define (analyze-quoted exp)   (let ((qval (text-of-quotation exp)))     (lambda (env succeed fail)       (succeed qval fail)))) (define (analyze-variable exp)   (lambda (env succeed fail)     (succeed (lookup-variable-value exp env)              fail))) (define (analyze-lambda exp)   (let ((vars (lambda-parameters exp))         (bproc (analyze-sequence (lambda-body exp))))     (lambda (env succeed fail)       (succeed (make-procedure vars bproc env)                fail))))</code></p>
<p></p>
<p></p>
<p>Notice that looking up a variable always ``succeeds.'' If <code>lookup-variable-value</code> fails to find the variable, it signals an error, as usual. Such a ``failure'' indicates a program bug -- a reference to an unbound variable; it is not an indication that we should try another nondeterministic choice instead of the one that is currently being tried.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_634">Conditionals and sequences</a></h4>
<p>Conditionals are also handled in a similar way as in the ordinary evaluator. The execution procedure generated by <code>analyze-if</code> invokes the predicate execution procedure <code>pproc</code> with a success continuation that checks whether the predicate value is true and goes on to execute either the consequent or the alternative. If the execution of <code>pproc</code> fails, the original failure continuation for the <code>if</code> expression is called.</p>
<p></p>
<p></p>
<p><code>(define (analyze-if exp)   (let ((pproc (analyze (if-predicate exp)))         (cproc (analyze (if-consequent exp)))         (aproc (analyze (if-alternative exp))))     (lambda (env succeed fail)       (pproc env              ;; success continuation for evaluating the predicate              ;; to obtain pred-value</code><br />              (lambda (pred-value fail2)<br />                (if (true? pred-value)<br />                    (cproc env succeed fail2)<br />                    (aproc env succeed fail2)))<br />              <em>;; failure continuation for evaluating the predicate</em><br />              fail))))<br /></p>
<p></p>
<p></p>
<p>Sequences are also handled in the same way as in the previous evaluator, except for the machinations in the subprocedure <code>sequentially</code> that are required for passing the continuations. Namely, to sequentially execute <code>a</code> and then <code>b</code>, we call <code>a</code> with a success continuation that calls <code>b</code>.</p>
<p></p>
<p></p>
<p><code>(define (analyze-sequence exps)   (define (sequentially a b)     (lambda (env succeed fail)       (a env          ;; success continuation for calling a</code><br />          (lambda (a-value fail2)<br />            (b env succeed fail2))<br />          <em>;; failure continuation for calling <code>a</code></em><br />          fail)))<br />   (define (loop first-proc rest-procs)<br />     (if (null? rest-procs)<br />         first-proc<br />         (loop (sequentially first-proc (car rest-procs))<br />               (cdr rest-procs))))<br />   (let ((procs (map analyze exps)))<br />     (if (null? procs)<br />         (error &quot;Empty sequence -- ANALYZE&quot;))<br />     (loop (car procs) (cdr procs))))<br /></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_635">Definitions and assignments</a></h4>
<p>Definitions are another case where we must go to some trouble to manage the continuations, because it is necessary to evaluate the definition-value expression before actually defining the new variable. To accomplish this, the definition-value execution procedure <code>vproc</code> is called with the environment, a success continuation, and the failure continuation. If the execution of <code>vproc</code> succeeds, obtaining a value <code>val</code> for the defined variable, the variable is defined and the success is propagated:</p>
<p></p>
<p></p>
<p><code>(define (analyze-definition exp)   (let ((var (definition-variable exp))         (vproc (analyze (definition-value exp))))     (lambda (env succeed fail)       (vproc env                                      (lambda (val fail2)                (define-variable! var val env)                (succeed 'ok fail2))              fail))))</code></p>
<p></p>
<p></p>
<p>Assignments are more interesting. This is the first place where we really use the continuations, rather than just passing them around. The execution procedure for assignments starts out like the one for definitions. It first attempts to obtain the new value to be assigned to the variable. If this evaluation of <code>vproc</code> fails, the assignment fails.</p>
<p>If <code>vproc</code> succeeds, however, and we go on to make the assignment, we must consider the possibility that this branch of the computation might later fail, which will require us to backtrack out of the assignment. Thus, we must arrange to undo the assignment as part of the backtracking process.<a href="#footnote_Temp_636"><sup>57</sup></a></p>
<p>This is accomplished by giving <code>vproc</code> a success continuation (marked with the comment ``*1*'' below) that saves the old value of the variable before assigning the new value to the variable and proceeding from the assignment. The failure continuation that is passed along with the value of the assignment (marked with the comment ``*2*'' below) restores the old value of the variable before continuing the failure. That is, a successful assignment provides a failure continuation that will intercept a subsequent failure; whatever failure would otherwise have called <code>fail2</code> calls this procedure instead, to undo the assignment before actually calling <code>fail2</code>.</p>
<p></p>
<p></p>
<p><code>(define (analyze-assignment exp)   (let ((var (assignment-variable exp))         (vproc (analyze (assignment-value exp))))     (lambda (env succeed fail)       (vproc env              (lambda (val fail2)        ; *1*                (let ((old-value                       (lookup-variable-value var env)))                   (set-variable-value! var val env)                  (succeed 'ok                           (lambda ()    ; *2*                             (set-variable-value! var                                                  old-value                                                  env)                             (fail2)))))              fail))))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_637">Procedure applications</a></h4>
<p>The execution procedure for applications contains no new ideas except for the technical complexity of managing the continuations. This complexity arises in <code>analyze-application</code>, due to the need to keep track of the success and failure continuations as we evaluate the operands. We use a procedure <code>get-args</code> to evaluate the list of operands, rather than a simple <code>map</code> as in the ordinary evaluator.</p>
<p></p>
<p></p>
<p><code>(define (analyze-application exp)   (let ((fproc (analyze (operator exp)))         (aprocs (map analyze (operands exp))))     (lambda (env succeed fail)       (fproc env              (lambda (proc fail2)                (get-args aprocs                          env                          (lambda (args fail3)                            (execute-application                             proc args succeed fail3))                          fail2))              fail))))</code></p>
<p></p>
<p></p>
<p>In <code>get-args</code>, notice how <code>cdr</code>ing down the list of <code>aproc</code> execution procedures and <code>cons</code>ing up the resulting list of <code>args</code> is accomplished by calling each <code>aproc</code> in the list with a success continuation that recursively calls <code>get-args</code>. Each of these recursive calls to <code>get-args</code> has a success continuation whose value is the <code>cons</code> of the newly obtained argument onto the list of accumulated arguments:</p>
<p></p>
<p></p>
<p><code>(define (get-args aprocs env succeed fail)   (if (null? aprocs)       (succeed '() fail)       ((car aprocs) env                     ;; success continuation for this aproc</code><br />                     (lambda (arg fail2)<br />                       (get-args (cdr aprocs)<br />                                 env<br />                                 <em>;; success continuation for recursive</em><br />                                 <em>;; call to <code>get-args</code></em><br />                                 (lambda (args fail3)<br />                                   (succeed (cons arg args)<br />                                            fail3))<br />                                 fail2))<br />                     fail)))<br /></p>
<p></p>
<p></p>
<p>The actual procedure application, which is performed by <code>execute-application</code>, is accomplished in the same way as for the ordinary evaluator, except for the need to manage the continuations.</p>
<p></p>
<p></p>
<p><code>(define (execute-application proc args succeed fail)   (cond ((primitive-procedure? proc)          (succeed (apply-primitive-procedure proc args)                   fail))         ((compound-procedure? proc)          ((procedure-body proc)           (extend-environment (procedure-parameters proc)                               args                               (procedure-environment proc))           succeed           fail))         (else          (error           &quot;Unknown procedure type -- EXECUTE-APPLICATION&quot;           proc))))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_638">Evaluating <code>amb</code> expressions</a></h4>
<p>The <code>amb</code> special form is the key element in the nondeterministic language. Here we see the essence of the interpretation process and the reason for keeping track of the continuations. The execution procedure for <code>amb</code> defines a loop <code>try-next</code> that cycles through the execution procedures for all the possible values of the <code>amb</code> expression. Each execution procedure is called with a failure continuation that will try the next one. When there are no more alternatives to try, the entire <code>amb</code> expression fails.</p>
<p></p>
<p></p>
<p><code>(define (analyze-amb exp)   (let ((cprocs (map analyze (amb-choices exp))))     (lambda (env succeed fail)       (define (try-next choices)         (if (null? choices)             (fail)             ((car choices) env                            succeed                            (lambda ()                              (try-next (cdr choices))))))       (try-next cprocs))))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_639">Driver loop</a></h4>
<p>The driver loop for the <code>amb</code> evaluator is complex, due to the mechanism that permits the user to try again in evaluating an expression. The driver uses a procedure called <code>internal-loop</code>, which takes as argument a procedure <code>try-again</code>. The intent is that calling <code>try-again</code> should go on to the next untried alternative in the nondeterministic evaluation. <code>Internal-loop</code> either calls <code>try-again</code> in response to the user typing <code>try-again</code> at the driver loop, or else starts a new evaluation by calling <code>ambeval</code>.</p>
<p>The failure continuation for this call to <code>ambeval</code> informs the user that there are no more values and re-invokes the driver loop.</p>
<p>The success continuation for the call to <code>ambeval</code> is more subtle. We print the obtained value and then invoke the internal loop again with a <code>try-again</code> procedure that will be able to try the next alternative. This <code>next-alternative</code> procedure is the second argument that was passed to the success continuation. Ordinarily, we think of this second argument as a failure continuation to be used if the current evaluation branch later fails. In this case, however, we have completed a successful evaluation, so we can invoke the ``failure'' alternative branch in order to search for additional successful evaluations.</p>
<p></p>
<p></p>
<p><code>(define input-prompt &quot;;;; Amb-Eval input:&quot;) (define output-prompt &quot;;;; Amb-Eval value:&quot;) (define (driver-loop)   (define (internal-loop try-again)     (prompt-for-input input-prompt)     (let ((input (read)))       (if (eq? input 'try-again)           (try-again)           (begin             (newline)             (display &quot;;;; Starting a new problem &quot;)             (ambeval input                      the-global-environment                      ;; ambeval</code> success<br />                      (lambda (val next-alternative)<br />                        (announce-output output-prompt)<br />                        (user-print val)<br />                        (internal-loop next-alternative))<br />                      <em>;; <code>ambeval</code> failure</em><br />                      (lambda ()<br />                        (announce-output<br />                         &quot;;;; There are no more values of&quot;)<br />                        (user-print input)<br />                        (driver-loop)))))))<br />   (internal-loop<br />    (lambda ()<br />      (newline)<br />      (display &quot;;;; There is no current problem&quot;)<br />      (driver-loop))))<br /></p>
<p></p>
<p>The initial call to <code>internal-loop</code> uses a <code>try-again</code> procedure that complains that there is no current problem and restarts the driver loop. This is the behavior that will happen if the user types <code>try-again</code> when there is no evaluation in progress.</p>
<p></p>
<p><strong>Exercise 4.50.</strong>  Implement a new special form <code>ramb</code> that is like <code>amb</code> except that it searches alternatives in a random order, rather than from left to right. Show how this can help with Alyssa's problem in exercise <a href="#%_thm_4.49">4.49</a>.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.51.</strong>  Implement a new kind of assignment called <code>permanent-set!</code> that is not undone upon failure. For example, we can choose two distinct elements from a list and count the number of trials required to make a successful choice as follows:</p>
<p></p>
<p></p>
<p><code>(define count 0) (let ((x (an-element-of '(a b c)))       (y (an-element-of '(a b c))))   (permanent-set! count (+ count 1))   (require (not (eq? x y)))   (list x y count)) ;;; Starting a new problem ;;; Amb-Eval value: (a b 2) ;;; Amb-Eval input: try-again ;;; Amb-Eval value: (a c 3)</code></p>
<p></p>
<p>What values would have been displayed if we had used <code>set!</code> here rather than <code>permanent-set!</code> ?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.52.</strong>  Implement a new construct called <code>if-fail</code> that permits the user to catch the failure of an expression. <code>If-fail</code> takes two expressions. It evaluates the first expression as usual and returns as usual if the evaluation succeeds. If the evaluation fails, however, the value of the second expression is returned, as in the following example:</p>
<p></p>
<p><code>;;; Amb-Eval input: (if-fail (let ((x (an-element-of '(1 3 5))))            (require (even? x))            x)          'all-odd) ;;; Starting a new problem ;;; Amb-Eval value: all-odd ;;; Amb-Eval input: (if-fail (let ((x (an-element-of '(1 3 5 8))))            (require (even? x))            x)          'all-odd) ;;; Starting a new problem ;;; Amb-Eval value: 8</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.53.</strong>  With <code>permanent-set!</code> as described in exercise <a href="#%_thm_4.51">4.51</a> and <code>if-fail</code> as in exercise <a href="#%_thm_4.52">4.52</a>, what will be the result of evaluating</p>
<p></p>
<p><code>(let ((pairs '()))   (if-fail (let ((p (prime-sum-pair '(1 3 5 8) '(20 35 110))))              (permanent-set! pairs (cons p pairs))              (amb))            pairs))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.54.</strong>  If we had not realized that <code>require</code> could be implemented as an ordinary procedure that uses <code>amb</code>, to be defined by the user as part of a nondeterministic program, we would have had to implement it as a special form. This would require syntax procedures</p>
<p></p>
<p></p>
<p><code>(define (require? exp) (tagged-list? exp 'require))  (define (require-predicate exp) (cadr exp))</code></p>
<p></p>
<p>and a new clause in the dispatch in <code>analyze</code></p>
<p></p>
<p></p>
<p><code>((require? exp) (analyze-require exp))</code></p>
<p></p>
<p>as well the procedure <code>analyze-require</code> that handles <code>require</code> expressions. Complete the following definition of <code>analyze-require</code>.</p>
<p></p>
<p></p>
<p><code>(define (analyze-require exp)   (let ((pproc (analyze (require-predicate exp))))     (lambda (env succeed fail)       (pproc env              (lambda (pred-value fail2)                (if &lt;??&gt;                    &lt;??&gt;                    (succeed 'ok fail2)))              fail))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_598"><sup>42</sup></a> We assume that we have previously defined a procedure <code>prime?</code> that tests whether numbers are prime. Even with <code>prime?</code> defined, the <code>prime-sum-pair</code> procedure may look suspiciously like the unhelpful ``pseudo-Lisp'' attempt to define the square-root function, which we described at the beginning of section <a href="book-Z-H-10.html#%_sec_1.1.7">1.1.7</a>. In fact, a square-root procedure along those lines can actually be formulated as a nondeterministic program. By incorporating a search mechanism into the evaluator, we are eroding the distinction between purely declarative descriptions and imperative specifications of how to compute answers. We'll go even farther in this direction in section <a href="book-Z-H-29.html#%_sec_4.4">4.4</a>.</p>
<p><a href="#call_footnote_Temp_599"><sup>43</sup></a> The idea of <code>amb</code> for nondeterministic programming was first described in 1961 by John McCarthy (see McCarthy 1967).</p>
<p><a href="#call_footnote_Temp_600"><sup>44</sup></a> In actuality, the distinction between nondeterministically returning a single choice and returning all choices depends somewhat on our point of view. From the perspective of the code that uses the value, the nondeterministic choice returns a single value. From the perspective of the programmer designing the code, the nondeterministic choice potentially returns all possible values, and the computation branches so that each value is investigated separately.</p>
<p><a href="#call_footnote_Temp_601"><sup>45</sup></a> One might object that this is a hopelessly inefficient mechanism. It might require millions of processors to solve some easily stated problem this way, and most of the time most of those processors would be idle. This objection should be taken in the context of history. Memory used to be considered just such an expensive commodity. In 1964 a megabyte of RAM cost about $400,000. Now every personal computer has many megabytes of RAM, and most of the time most of that RAM is unused. It is hard to underestimate the cost of mass-produced electronics.</p>
<p><a href="#call_footnote_Temp_602"><sup>46</sup></a> Automagically: ``Automatically, but in a way which, for some reason (typically because it is too complicated, or too ugly, or perhaps even too trivial), the speaker doesn't feel like explaining.'' (Steele 1983, Raymond 1993)</p>
<p><a href="#call_footnote_Temp_603"><sup>47</sup></a> The integration of automatic search strategies into programming languages has had a long and checkered history. The first suggestions that nondeterministic algorithms might be elegantly encoded in a programming language with search and automatic backtracking came from Robert Floyd (1967). Carl Hewitt (1969) invented a programming language called Planner that explicitly supported automatic chronological backtracking, providing for a built-in depth-first search strategy. Sussman, Winograd, and Charniak (1971) implemented a subset of this language, called MicroPlanner, which was used to support work in problem solving and robot planning. Similar ideas, arising from logic and theorem proving, led to the genesis in Edinburgh and Marseille of the elegant language Prolog (which we will discuss in section <a href="book-Z-H-29.html#%_sec_4.4">4.4</a>). After sufficient frustration with automatic search, McDermott and Sussman (1972) developed a language called Conniver, which included mechanisms for placing the search strategy under programmer control. This proved unwieldy, however, and Sussman and Stallman (1975) found a more tractable approach while investigating methods of symbolic analysis for electrical circuits. They developed a non-chronological backtracking scheme that was based on tracing out the logical dependencies connecting facts, a technique that has come to be known as <em>dependency-directed backtracking</em>. Although their method was complex, it produced reasonably efficient programs because it did little redundant search. Doyle (1979) and McAllester (1978, 1980) generalized and clarified the methods of Stallman and Sussman, developing a new paradigm for formulating search that is now called <em>truth maintenance</em>. Modern problem-solving systems all use some form of truth-maintenance system as a substrate. See Forbus and deKleer 1993 for a discussion of elegant ways to build truth-maintenance systems and applications using truth maintenance. Zabih, McAllester, and Chapman 1987 describes a nondeterministic extension to Scheme that is based on <code>amb</code>; it is similar to the interpreter described in this section, but more sophisticated, because it uses dependency-directed backtracking rather than chronological backtracking. Winston 1992 gives an introduction to both kinds of backtracking.</p>
<p><a href="#call_footnote_Temp_609"><sup>48</sup></a> Our program uses the following procedure to determine if the elements of a list are distinct:</p>
<p></p>
<p><code>(define (distinct? items)   (cond ((null? items) true)         ((null? (cdr items)) true)         ((member (car items) (cdr items)) false)         (else (distinct? (cdr items)))))</code></p>
<p></p>
<p><code>Member</code> is like <code>memq</code> except that it uses <code>equal?</code> instead of <code>eq?</code> to test for equality.</p>
<p><a href="#call_footnote_Temp_616"><sup>49</sup></a> This is taken from a booklet called ``Problematical Recreations,'' published in the 1960s by Litton Industries, where it is attributed to the <em>Kansas State Engineer</em>.</p>
<p><a href="#call_footnote_Temp_619"><sup>50</sup></a> Here we use the convention that the first element of each list designates the part of speech for the rest of the words in the list.</p>
<p><a href="#call_footnote_Temp_620"><sup>51</sup></a> Notice that <code>parse-word</code> uses <code>set!</code> to modify the unparsed input list. For this to work, our <code>amb</code> evaluator must undo the effects of <code>set!</code> operations when it backtracks.</p>
<p><a href="#call_footnote_Temp_621"><sup>52</sup></a> Observe that this definition is recursive -- a verb may be followed by any number of prepositional phrases.</p>
<p><a href="#call_footnote_Temp_626"><sup>53</sup></a> This kind of grammar can become arbitrarily complex, but it is only a toy as far as real language understanding is concerned. Real natural-language understanding by computer requires an elaborate mixture of syntactic analysis and interpretation of meaning. On the other hand, even toy parsers can be useful in supporting flexible command languages for programs such as information-retrieval systems. Winston 1992 discusses computational approaches to real language understanding and also the applications of simple grammars to command languages.</p>
<p><a href="#call_footnote_Temp_628"><sup>54</sup></a> Although Alyssa's idea works just fine (and is surprisingly simple), the sentences that it generates are a bit boring -- they don't sample the possible sentences of this language in a very interesting way. In fact, the grammar is highly recursive in many places, and Alyssa's technique ``falls into'' one of these recursions and gets stuck. See exercise <a href="#%_thm_4.50">4.50</a> for a way to deal with this.</p>
<p><a href="#call_footnote_Temp_629"><sup>55</sup></a> We chose to implement the lazy evaluator in section <a href="book-Z-H-27.html#%_sec_4.2">4.2</a> as a modification of the ordinary metacircular evaluator of section <a href="book-Z-H-26.html#%_sec_4.1.1">4.1.1</a>. In contrast, we will base the <code>amb</code> evaluator on the analyzing evaluator of section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a>, because the execution procedures in that evaluator provide a convenient framework for implementing backtracking.</p>
<p><a href="#call_footnote_Temp_632"><sup>56</sup></a> We assume that the evaluator supports <code>let</code> (see exercise <a href="book-Z-H-26.html#%_thm_4.22">4.22</a>), which we have used in our nondeterministic programs.</p>
<p><a href="#call_footnote_Temp_636"><sup>57</sup></a> We didn't worry about undoing definitions, since we can assume that internal definitions are scanned out (section <a href="book-Z-H-26.html#%_sec_4.1.6">4.1.6</a>).</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-27.html">previous</a>, <a href="book-Z-H-29.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-28.html">previous</a>, <a href="book-Z-H-30.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_4.4">4.4  Logic Programming</a></h2>
<p>In chapter 1 we stressed that computer science deals with imperative (how to) knowledge, whereas mathematics deals with declarative (what is) knowledge. Indeed, programming languages require that the programmer express knowledge in a form that indicates the step-by-step methods for solving particular problems. On the other hand, high-level languages provide, as part of the language implementation, a substantial amount of methodological knowledge that frees the user from concern with numerous details of how a specified computation will progress.</p>
<p>Most programming languages, including Lisp, are organized around computing the values of mathematical functions. Expression-oriented languages (such as Lisp, Fortran, and Algol) capitalize on the ``pun'' that an expression that describes the value of a function may also be interpreted as a means of computing that value. Because of this, most programming languages are strongly biased toward unidirectional computations (computations with well-defined inputs and outputs). There are, however, radically different programming languages that relax this bias. We saw one such example in section <a href="book-Z-H-22.html#%_sec_3.3.5">3.3.5</a>, where the objects of computation were arithmetic constraints. In a constraint system the direction and the order of computation are not so well specified; in carrying out a computation the system must therefore provide more detailed ``how to'' knowledge than would be the case with an ordinary arithmetic computation. This does not mean, however, that the user is released altogether from the responsibility of providing imperative knowledge. There are many constraint networks that implement the same set of constraints, and the user must choose from the set of mathematically equivalent networks a suitable network to specify a particular computation.</p>
<p>The nondeterministic program evaluator of section <a href="book-Z-H-28.html#%_sec_4.3">4.3</a> also moves away from the view that programming is about constructing algorithms for computing unidirectional functions. In a nondeterministic language, expressions can have more than one value, and, as a result, the computation is dealing with relations rather than with single-valued functions. Logic programming extends this idea by combining a relational vision of programming with a powerful kind of symbolic pattern matching called <em>unification</em>.<a href="#footnote_Temp_645"><sup>58</sup></a></p>
<p>This approach, when it works, can be a very powerful way to write programs. Part of the power comes from the fact that a single ``what is'' fact can be used to solve a number of different problems that would have different ``how to'' components. As an example, consider the <code>append</code> operation, which takes two lists as arguments and combines their elements to form a single list. In a procedural language such as Lisp, we could define <code>append</code> in terms of the basic list constructor <code>cons</code>, as we did in section <a href="book-Z-H-15.html#%_sec_2.2.1">2.2.1</a>:</p>
<p></p>
<p></p>
<p><code>(define (append x y)   (if (null? x)       y       (cons (car x) (append (cdr x) y))))</code></p>
<p></p>
<p>This procedure can be regarded as a translation into Lisp of the following two rules, the first of which covers the case where the first list is empty and the second of which handles the case of a nonempty list, which is a <code>cons</code> of two parts:</p>
<p></p>
<p></p>
<ul>
<li>For any list <code>y</code>, the empty list and <code>y</code> <code>append</code> to form <code>y</code>.</li>
<li>For any <code>u</code>, <code>v</code>, <code>y</code>, and <code>z</code>, <code>(cons u v)</code> and <code>y</code> <code>append</code> to form <code>(cons u z)</code> if <code>v</code> and <code>y</code> <code>append</code> to form <code>z</code>.<a href="#footnote_Temp_646"><sup>59</sup></a></li>
</ul>
<p></p>
<p>Using the <code>append</code> procedure, we can answer questions such as</p>
<blockquote>
Find the <code>append</code> of <code>(a b)</code> and <code>(c d)</code>.
</blockquote>
<p>But the same two rules are also sufficient for answering the following sorts of questions, which the procedure can't answer:</p>
<blockquote>
Find a list <code>y</code> that <code>append</code>s with <code>(a b)</code> to produce <code>(a b c d)</code>.
Find all <code>x</code> and <code>y</code> that <code>append</code> to form <code>(a b c d)</code>.
</blockquote>
<p>In a logic programming language, the programmer writes an <code>append</code> ``procedure'' by stating the two rules about <code>append</code> given above. ``How to'' knowledge is provided automatically by the interpreter to allow this single pair of rules to be used to answer all three types of questions about <code>append</code>.<a href="#footnote_Temp_647"><sup>60</sup></a></p>
<p>Contemporary logic programming languages (including the one we implement here) have substantial deficiencies, in that their general ``how to'' methods can lead them into spurious infinite loops or other undesirable behavior. Logic programming is an active field of research in computer science.<a href="#footnote_Temp_648"><sup>61</sup></a></p>
<p>Earlier in this chapter we explored the technology of implementing interpreters and described the elements that are essential to an interpreter for a Lisp-like language (indeed, to an interpreter for any conventional language). Now we will apply these ideas to discuss an interpreter for a logic programming language. We call this language the <em>query language</em>, because it is very useful for retrieving information from data bases by formulating <em>queries</em>, or questions, expressed in the language. Even though the query language is very different from Lisp, we will find it convenient to describe the language in terms of the same general framework we have been using all along: as a collection of primitive elements, together with means of combination that enable us to combine simple elements to create more complex elements and means of abstraction that enable us to regard complex elements as single conceptual units. An interpreter for a logic programming language is considerably more complex than an interpreter for a language like Lisp. Nevertheless, we will see that our query-language interpreter contains many of the same elements found in the interpreter of section <a href="book-Z-H-26.html#%_sec_4.1">4.1</a>. In particular, there will be an ``eval'' part that classifies expressions according to type and an ``apply'' part that implements the language's abstraction mechanism (procedures in the case of Lisp, and <em>rules</em> in the case of logic programming). Also, a central role is played in the implementation by a frame data structure, which determines the correspondence between symbols and their associated values. One additional interesting aspect of our query-language implementation is that we make substantial use of streams, which were introduced in chapter 3.</p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.4.1">4.4.1  Deductive Information Retrieval</a></h3>
<p>Logic programming excels in providing interfaces to data bases for information retrieval. The query language we shall implement in this chapter is designed to be used in this way.</p>
<p>In order to illustrate what the query system does, we will show how it can be used to manage the data base of personnel records for Microshaft, a thriving high-technology company in the Boston area. The language provides pattern-directed access to personnel information and can also take advantage of general rules in order to make logical deductions.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_649">A sample data base</a></h4>
<p>The personnel data base for Microshaft contains <em>assertions</em> about company personnel. Here is the information about Ben Bitdiddle, the resident computer wizard:</p>
<p></p>
<p></p>
<p><code>(address (Bitdiddle Ben) (Slumerville (Ridge Road) 10)) (job (Bitdiddle Ben) (computer wizard)) (salary (Bitdiddle Ben) 60000)</code></p>
<p></p>
<p>Each assertion is a list (in this case a triple) whose elements can themselves be lists.</p>
<p>As resident wizard, Ben is in charge of the company's computer division, and he supervises two programmers and one technician. Here is the information about them:</p>
<p></p>
<p></p>
<p><code>(address (Hacker Alyssa P) (Cambridge (Mass Ave) 78)) (job (Hacker Alyssa P) (computer programmer)) (salary (Hacker Alyssa P) 40000) (supervisor (Hacker Alyssa P) (Bitdiddle Ben)) (address (Fect Cy D) (Cambridge (Ames Street) 3)) (job (Fect Cy D) (computer programmer)) (salary (Fect Cy D) 35000) (supervisor (Fect Cy D) (Bitdiddle Ben)) (address (Tweakit Lem E) (Boston (Bay State Road) 22)) (job (Tweakit Lem E) (computer technician)) (salary (Tweakit Lem E) 25000) (supervisor (Tweakit Lem E) (Bitdiddle Ben))</code></p>
<p></p>
<p>There is also a programmer trainee, who is supervised by Alyssa:</p>
<p></p>
<p><code>(address (Reasoner Louis) (Slumerville (Pine Tree Road) 80)) (job (Reasoner Louis) (computer programmer trainee)) (salary (Reasoner Louis) 30000) (supervisor (Reasoner Louis) (Hacker Alyssa P))</code></p>
<p></p>
<p>All of these people are in the computer division, as indicated by the word <code>computer</code> as the first item in their job descriptions.</p>
<p>Ben is a high-level employee. His supervisor is the company's big wheel himself:</p>
<p></p>
<p></p>
<p><code>(supervisor (Bitdiddle Ben) (Warbucks Oliver)) (address (Warbucks Oliver) (Swellesley (Top Heap Road))) (job (Warbucks Oliver) (administration big wheel)) (salary (Warbucks Oliver) 150000)</code></p>
<p></p>
<p></p>
<p>Besides the computer division supervised by Ben, the company has an accounting division, consisting of a chief accountant and his assistant:</p>
<p></p>
<p></p>
<p><code>(address (Scrooge Eben) (Weston (Shady Lane) 10)) (job (Scrooge Eben) (accounting chief accountant)) (salary (Scrooge Eben) 75000) (supervisor (Scrooge Eben) (Warbucks Oliver)) (address (Cratchet Robert) (Allston (N Harvard Street) 16)) (job (Cratchet Robert) (accounting scrivener)) (salary (Cratchet Robert) 18000) (supervisor (Cratchet Robert) (Scrooge Eben))</code></p>
<p></p>
<p>There is also a secretary for the big wheel:</p>
<p></p>
<p></p>
<p><code>(address (Aull DeWitt) (Slumerville (Onion Square) 5)) (job (Aull DeWitt) (administration secretary)) (salary (Aull DeWitt) 25000) (supervisor (Aull DeWitt) (Warbucks Oliver))</code></p>
<p></p>
<p></p>
<p>The data base also contains assertions about which kinds of jobs can be done by people holding other kinds of jobs. For instance, a computer wizard can do the jobs of both a computer programmer and a computer technician:</p>
<p></p>
<p></p>
<p><code>(can-do-job (computer wizard) (computer programmer)) (can-do-job (computer wizard) (computer technician))</code></p>
<p></p>
<p>A computer programmer could fill in for a trainee:</p>
<p></p>
<p><code>(can-do-job (computer programmer)             (computer programmer trainee))</code></p>
<p></p>
<p>Also, as is well known,</p>
<p></p>
<p><code>(can-do-job (administration secretary)             (administration big wheel))</code></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_650">Simple queries</a></h4>
<p>The query language allows users to retrieve information from the data base by posing queries in response to the system's prompt. For example, to find all computer programmers one can say</p>
<p></p>
<p></p>
<p><code>;;; Query input: (job ?x (computer programmer))</code></p>
<p></p>
<p>The system will respond with the following items:</p>
<p></p>
<p></p>
<p><code>;;; Query results: (job (Hacker Alyssa P) (computer programmer)) (job (Fect Cy D) (computer programmer))</code></p>
<p></p>
<p></p>
<p>The input query specifies that we are looking for entries in the data base that match a certain <em>pattern</em>. In this example, the pattern specifies entries consisting of three items, of which the first is the literal symbol <code>job</code>, the second can be anything, and the third is the literal list <code>(computer programmer)</code>. The ``anything'' that can be the second item in the matching list is specified by a <em>pattern variable</em>, <code>?x</code>. The general form of a pattern variable is a symbol, taken to be the name of the variable, preceded by a question mark. We will see below why it is useful to specify names for pattern variables rather than just putting <code>?</code> into patterns to represent ``anything.'' The system responds to a simple query by showing all entries in the data base that match the specified pattern.</p>
<p>A pattern can have more than one variable. For example, the query</p>
<p></p>
<p><code>(address ?x ?y)</code></p>
<p></p>
<p>will list all the employees' addresses.</p>
<p>A pattern can have no variables, in which case the query simply determines whether that pattern is an entry in the data base. If so, there will be one match; if not, there will be no matches.</p>
<p>The same pattern variable can appear more than once in a query, specifying that the same ``anything'' must appear in each position. This is why variables have names. For example,</p>
<p></p>
<p></p>
<p><code>(supervisor ?x ?x)</code></p>
<p></p>
<p>finds all people who supervise themselves (though there are no such assertions in our sample data base).</p>
<p>The query</p>
<p></p>
<p><code>(job ?x (computer ?type))</code></p>
<p></p>
<p>matches all job entries whose third item is a two-element list whose first item is <code>computer</code>:</p>
<p></p>
<p></p>
<p><code>(job (Bitdiddle Ben) (computer wizard)) (job (Hacker Alyssa P) (computer programmer)) (job (Fect Cy D) (computer programmer)) (job (Tweakit Lem E) (computer technician))</code></p>
<p></p>
<p>This same pattern does <em>not</em> match</p>
<p></p>
<p><code>(job (Reasoner Louis) (computer programmer trainee))</code></p>
<p></p>
<p>because the third item in the entry is a list of three elements, and the pattern's third item specifies that there should be two elements. If we wanted to change the pattern so that the third item could be any list beginning with <code>computer</code>, we could specify<a href="#footnote_Temp_651"><sup>62</sup></a></p>
<p></p>
<p></p>
<p><code>(job ?x (computer . ?type))</code></p>
<p></p>
<p>For example,</p>
<p></p>
<p><code>(computer . ?type)</code></p>
<p></p>
<p>matches the data</p>
<p></p>
<p></p>
<p><code>(computer programmer trainee)</code></p>
<p></p>
<p>with <code>?type</code> as the list <code>(programmer trainee)</code>. It also matches the data</p>
<p></p>
<p></p>
<p><code>(computer programmer)</code></p>
<p></p>
<p>with <code>?type</code> as the list <code>(programmer)</code>, and matches the data</p>
<p></p>
<p></p>
<p><code>(computer)</code></p>
<p></p>
<p>with <code>?type</code> as the empty list <code>()</code>.</p>
<p>We can describe the query language's processing of simple queries as follows:</p>
<p></p>
<p></p>
<ul>
<li>The system finds all assignments to variables in the query pattern that <em>satisfy</em> the pattern -- that is, all sets of values for the variables such that if the pattern variables are <em>instantiated with</em> (replaced by) the values, the result is in the data base.</li>
<li>The system responds to the query by listing all instantiations of the query pattern with the variable assignments that satisfy it.</li>
</ul>
<p></p>
<p>Note that if the pattern has no variables, the query reduces to a determination of whether that pattern is in the data base. If so, the empty assignment, which assigns no values to variables, satisfies that pattern for that data base.</p>
<p></p>
<p><strong>Exercise 4.55.</strong>  Give simple queries that retrieve the following information from the data base:</p>
<p></p>
<p></p>
<p>a. all people supervised by Ben Bitdiddle;</p>
<p></p>
<p></p>
<p>b. the names and jobs of all people in the accounting division;</p>
<p></p>
<p></p>
<p>c. the names and addresses of all people who live in Slumerville.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_653">Compound queries</a></h4>
<p>Simple queries form the primitive operations of the query language. In order to form compound operations, the query language provides means of combination. One thing that makes the query language a logic programming language is that the means of combination mirror the means of combination used in forming logical expressions: <code>and</code>, <code>or</code>, and <code>not</code>. (Here <code>and</code>, <code>or</code>, and <code>not</code> are not the Lisp primitives, but rather operations built into the query language.)</p>
<p>We can use <code>and</code> as follows to find the addresses of all the computer programmers:</p>
<p></p>
<p></p>
<p><code>(and (job ?person (computer programmer))      (address ?person ?where))</code></p>
<p></p>
<p>The resulting output is</p>
<p></p>
<p><code>(and (job (Hacker Alyssa P) (computer programmer))      (address (Hacker Alyssa P) (Cambridge (Mass Ave) 78))) (and (job (Fect Cy D) (computer programmer))      (address (Fect Cy D) (Cambridge (Ames Street) 3)))</code></p>
<p></p>
<p>In general,</p>
<p></p>
<p><code>(and &lt;query1&gt; &lt;query2&gt; ...</code> &lt;<em>query<sub><em>n</em></sub></em>&gt;)<br /></p>
<p></p>
<p>is satisfied by all sets of values for the pattern variables that simultaneously satisfy &lt;<em>query<sub>1</sub></em>&gt; <code>...</code> &lt;<em>query<sub><em>n</em></sub></em>&gt;.</p>
<p>As for simple queries, the system processes a compound query by finding all assignments to the pattern variables that satisfy the query, then displaying instantiations of the query with those values.</p>
<p>Another means of constructing compound queries is through <code>or</code>. For example,</p>
<p></p>
<p></p>
<p><code>(or (supervisor ?x (Bitdiddle Ben))     (supervisor ?x (Hacker Alyssa P)))</code></p>
<p></p>
<p>will find all employees supervised by Ben Bitdiddle or Alyssa P. Hacker:</p>
<p></p>
<p></p>
<p><code>(or (supervisor (Hacker Alyssa P) (Bitdiddle Ben))     (supervisor (Hacker Alyssa P) (Hacker Alyssa P))) (or (supervisor (Fect Cy D) (Bitdiddle Ben))     (supervisor (Fect Cy D) (Hacker Alyssa P))) (or (supervisor (Tweakit Lem E) (Bitdiddle Ben))     (supervisor (Tweakit Lem E) (Hacker Alyssa P))) (or (supervisor (Reasoner Louis) (Bitdiddle Ben))     (supervisor (Reasoner Louis) (Hacker Alyssa P)))</code></p>
<p></p>
<p>In general,</p>
<p></p>
<p><code>(or &lt;query1&gt; &lt;query2&gt; ...</code> &lt;<em>query<sub><em>n</em></sub></em>&gt;)<br /></p>
<p></p>
<p>is satisfied by all sets of values for the pattern variables that satisfy at least one of &lt;<em>query<sub>1</sub></em>&gt; <code>...</code> &lt;<em>query<sub><em>n</em></sub></em>&gt;.</p>
<p>Compound queries can also be formed with <code>not</code>. For example,</p>
<p></p>
<p><code>(and (supervisor ?x (Bitdiddle Ben))      (not (job ?x (computer programmer))))</code></p>
<p></p>
<p>finds all people supervised by Ben Bitdiddle who are not computer programmers. In general,</p>
<p></p>
<p></p>
<p><code>(not &lt;query1&gt;)</code></p>
<p></p>
<p>is satisfied by all assignments to the pattern variables that do not satisfy &lt;<em>query<sub>1</sub></em>&gt;.<a href="#footnote_Temp_654"><sup>63</sup></a></p>
<p>The final combining form is called <code>lisp-value</code>. When <code>lisp-value</code> is the first element of a pattern, it specifies that the next element is a Lisp predicate to be applied to the rest of the (instantiated) elements as arguments. In general,</p>
<p></p>
<p></p>
<p><code>(lisp-value &lt;predicate&gt; &lt;arg1&gt; ...</code> &lt;<em>arg<sub><em>n</em></sub></em>&gt;)<br /></p>
<p></p>
<p>will be satisfied by assignments to the pattern variables for which the &lt;<em>predicate</em>&gt; applied to the instantiated &lt;<em>arg<sub>1</sub></em>&gt; <code>...</code> &lt;<em>arg<sub><em>n</em></sub></em>&gt; is true. For example, to find all people whose salary is greater than $30,000 we could write<a href="#footnote_Temp_655"><sup>64</sup></a></p>
<p></p>
<p></p>
<p><code>(and (salary ?person ?amount)      (lisp-value &gt; ?amount 30000))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.56.</strong>  Formulate compound queries that retrieve the following information:</p>
<p></p>
<p></p>
<p>a. the names of all people who are supervised by Ben Bitdiddle, together with their addresses;</p>
<p></p>
<p></p>
<p>b. all people whose salary is less than Ben Bitdiddle's, together with their salary and Ben Bitdiddle's salary;</p>
<p></p>
<p></p>
<p>c. all people who are supervised by someone who is not in the computer division, together with the supervisor's name and job.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_657">Rules</a></h4>
<p>In addition to primitive queries and compound queries, the query language provides means for abstracting queries. These are given by <em>rules</em>. The rule</p>
<p></p>
<p></p>
<p><code>(rule (lives-near ?person-1 ?person-2)       (and (address ?person-1 (?town . ?rest-1))            (address ?person-2 (?town . ?rest-2))            (not (same ?person-1 ?person-2))))</code></p>
<p></p>
<p>specifies that two people live near each other if they live in the same town. The final <code>not</code> clause prevents the rule from saying that all people live near themselves. The <code>same</code> relation is defined by a very simple rule:<a href="#footnote_Temp_658"><sup>65</sup></a></p>
<p></p>
<p></p>
<p><code>(rule (same ?x ?x))</code></p>
<p></p>
<p></p>
<p>The following rule declares that a person is a ``wheel'' in an organization if he supervises someone who is in turn a supervisor:</p>
<p></p>
<p></p>
<p><code>(rule (wheel ?person)       (and (supervisor ?middle-manager ?person)            (supervisor ?x ?middle-manager)))</code></p>
<p></p>
<p></p>
<p>The general form of a rule is</p>
<p></p>
<p><code>(rule &lt;conclusion&gt; &lt;body&gt;)</code></p>
<p></p>
<p>where &lt;<em>conclusion</em>&gt; is a pattern and &lt;<em>body</em>&gt; is any query.<a href="#footnote_Temp_659"><sup>66</sup></a> We can think of a rule as representing a large (even infinite) set of assertions, namely all instantiations of the rule conclusion with variable assignments that satisfy the rule body. When we described simple queries (patterns), we said that an assignment to variables satisfies a pattern if the instantiated pattern is in the data base. But the pattern needn't be explicitly in the data base as an assertion. It can be an implicit assertion implied by a rule. For example, the query</p>
<p></p>
<p><code>(lives-near ?x (Bitdiddle Ben))</code></p>
<p></p>
<p>results in</p>
<p></p>
<p><code>(lives-near (Reasoner Louis) (Bitdiddle Ben)) (lives-near (Aull DeWitt) (Bitdiddle Ben))</code></p>
<p></p>
<p>To find all computer programmers who live near Ben Bitdiddle, we can ask</p>
<p></p>
<p><code>(and (job ?x (computer programmer))      (lives-near ?x (Bitdiddle Ben)))</code></p>
<p></p>
<p></p>
<p>As in the case of compound procedures, rules can be used as parts of other rules (as we saw with the <code>lives-near</code> rule above) or even be defined recursively. For instance, the rule</p>
<p></p>
<p><code>(rule (outranked-by ?staff-person ?boss)       (or (supervisor ?staff-person ?boss)           (and (supervisor ?staff-person ?middle-manager)                (outranked-by ?middle-manager ?boss))))</code></p>
<p></p>
<p>says that a staff person is outranked by a boss in the organization if the boss is the person's supervisor or (recursively) if the person's supervisor is outranked by the boss.</p>
<p></p>
<p><strong>Exercise 4.57.</strong>  Define a rule that says that person 1 can replace person 2 if either person 1 does the same job as person 2 or someone who does person 1's job can also do person 2's job, and if person 1 and person 2 are not the same person. Using your rule, give queries that find the following:</p>
<p>a.  all people who can replace Cy D. Fect;</p>
<p>b.  all people who can replace someone who is being paid more than they are, together with the two salaries.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.58.</strong>  Define a rule that says that a person is a ``big shot'' in a division if the person works in the division but does not have a supervisor who works in the division.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.59.</strong>  Ben Bitdiddle has missed one meeting too many. Fearing that his habit of forgetting meetings could cost him his job, Ben decides to do something about it. He adds all the weekly meetings of the firm to the Microshaft data base by asserting the following:</p>
<p></p>
<p><code>(meeting accounting (Monday 9am)) (meeting administration (Monday 10am)) (meeting computer (Wednesday 3pm)) (meeting administration (Friday 1pm))</code></p>
<p></p>
<p>Each of the above assertions is for a meeting of an entire division. Ben also adds an entry for the company-wide meeting that spans all the divisions. All of the company's employees attend this meeting.</p>
<p></p>
<p><code>(meeting whole-company (Wednesday 4pm))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>a. On Friday morning, Ben wants to query the data base for all the meetings that occur that day. What query should he use?</p>
<p></p>
<p></p>
<p>b. Alyssa P. Hacker is unimpressed. She thinks it would be much more useful to be able to ask for her meetings by specifying her name. So she designs a rule that says that a person's meetings include all <code>whole-company</code> meetings plus all meetings of that person's division. Fill in the body of Alyssa's rule.</p>
<p></p>
<p><code>(rule (meeting-time ?person ?day-and-time)       &lt;rule-body&gt;)</code></p>
<p></p>
<p></p>
<p>c. Alyssa arrives at work on Wednesday morning and wonders what meetings she has to attend that day. Having defined the above rule, what query should she make to find this out?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.60.</strong>  By giving the query</p>
<p></p>
<p><code>(lives-near ?person (Hacker Alyssa P))</code></p>
<p></p>
<p>Alyssa P. Hacker is able to find people who live near her, with whom she can ride to work. On the other hand, when she tries to find all pairs of people who live near each other by querying</p>
<p></p>
<p></p>
<p><code>(lives-near ?person-1 ?person-2)</code></p>
<p></p>
<p>she notices that each pair of people who live near each other is listed twice; for example,</p>
<p></p>
<p></p>
<p><code>(lives-near (Hacker Alyssa P) (Fect Cy D)) (lives-near (Fect Cy D) (Hacker Alyssa P))</code></p>
<p></p>
<p>Why does this happen? Is there a way to find a list of people who live near each other, in which each pair appears only once? Explain.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_664">Logic as programs</a></h4>
<p>We can regard a rule as a kind of logical implication: <em>If</em> an assignment of values to pattern variables satisfies the body, <em>then</em> it satisfies the conclusion. Consequently, we can regard the query language as having the ability to perform <em>logical deductions</em> based upon the rules. As an example, consider the <code>append</code> operation described at the beginning of section <a href="#%_sec_4.4">4.4</a>. As we said, <code>append</code> can be characterized by the following two rules:</p>
<p></p>
<p></p>
<ul>
<li>For any list <code>y</code>, the empty list and <code>y</code> <code>append</code> to form <code>y</code>.</li>
<li>For any <code>u</code>, <code>v</code>, <code>y</code>, and <code>z</code>, <code>(cons u v)</code> and <code>y</code> <code>append</code> to form <code>(cons u z)</code> if <code>v</code> and <code>y</code> <code>append</code> to form <code>z</code>.</li>
</ul>
<p></p>
<p>To express this in our query language, we define two rules for a relation</p>
<p></p>
<p><code>(append-to-form x y z)</code></p>
<p></p>
<p>which we can interpret to mean ``<code>x</code> and <code>y</code> <code>append</code> to form <code>z</code>'':</p>
<p></p>
<p></p>
<p><code>(rule (append-to-form () ?y ?y)) (rule (append-to-form (?u . ?v) ?y (?u . ?z))       (append-to-form ?v ?y ?z))</code></p>
<p></p>
<p>The first rule has no body, which means that the conclusion holds for any value of <code>?y</code>. Note how the second rule makes use of dotted-tail notation to name the <code>car</code> and <code>cdr</code> of a list.</p>
<p>Given these two rules, we can formulate queries that compute the <code>append</code> of two lists:</p>
<p></p>
<p><code>;;; Query input: (append-to-form (a b) (c d) ?z) ;;; Query results: (append-to-form (a b) (c d) (a b c d))</code></p>
<p></p>
<p>What is more striking, we can use the same rules to ask the question ``Which list, when <code>append</code>ed to <code>(a b)</code>, yields <code>(a b c d)</code>?'' This is done as follows:</p>
<p></p>
<p><code>;;; Query input: (append-to-form (a b) ?y (a b c d)) ;;; Query results: (append-to-form (a b) (c d) (a b c d))</code></p>
<p></p>
<p>We can also ask for all pairs of lists that <code>append</code> to form <code>(a b c d)</code>:</p>
<p></p>
<p><code>;;; Query input: (append-to-form ?x ?y (a b c d)) ;;; Query results: (append-to-form () (a b c d) (a b c d)) (append-to-form (a) (b c d) (a b c d)) (append-to-form (a b) (c d) (a b c d)) (append-to-form (a b c) (d) (a b c d)) (append-to-form (a b c d) () (a b c d))</code></p>
<p></p>
<p></p>
<p>The query system may seem to exhibit quite a bit of intelligence in using the rules to deduce the answers to the queries above. Actually, as we will see in the next section, the system is following a well-determined algorithm in unraveling the rules. Unfortunately, although the system works impressively in the <code>append</code> case, the general methods may break down in more complex cases, as we will see in section <a href="#%_sec_4.4.3">4.4.3</a>.</p>
<p></p>
<p><strong>Exercise 4.61.</strong>  The following rules implement a <code>next-to</code> relation that finds adjacent elements of a list:</p>
<p></p>
<p><code>(rule (?x next-to ?y in (?x ?y . ?u)))  (rule (?x next-to ?y in (?v . ?z))       (?x next-to ?y in ?z))</code></p>
<p></p>
<p>What will the response be to the following queries?</p>
<p></p>
<p><code>(?x next-to ?y in (1 (2 3) 4))  (?x next-to 1 in (2 1 3 1))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.62.</strong>  Define rules to implement the <code>last-pair</code> operation of exercise <a href="book-Z-H-15.html#%_thm_2.17">2.17</a>, which returns a list containing the last element of a nonempty list. Check your rules on queries such as <code>(last-pair (3) ?x)</code>, <code>(last-pair (1 2 3) ?x)</code>, and <code>(last-pair (2 ?x) (3))</code>. Do your rules work correctly on queries such as <code>(last-pair ?x (3))</code> ?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.63.</strong>  The following data base (see Genesis 4) traces the genealogy of the descendants of Ada back to Adam, by way of Cain:</p>
<p></p>
<p></p>
<p><code>(son Adam Cain) (son Cain Enoch) (son Enoch Irad) (son Irad Mehujael) (son Mehujael Methushael) (son Methushael Lamech) (wife Lamech Ada) (son Ada Jabal) (son Ada Jubal)</code></p>
<p></p>
<p>Formulate rules such as ``If <em>S</em> is the son of <em>F</em>, and <em>F</em> is the son of <em>G</em>, then <em>S</em> is the grandson of <em>G</em>'' and ``If <em>W</em> is the wife of <em>M</em>, and <em>S</em> is the son of <em>W</em>, then <em>S</em> is the son of <em>M</em>'' (which was supposedly more true in biblical times than today) that will enable the query system to find the grandson of Cain; the sons of Lamech; the grandsons of Methushael. (See exercise <a href="#%_thm_4.69">4.69</a> for some rules to deduce more complicated relationships.)</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.4.2">4.4.2  How the Query System Works</a></h3>
<p>In section <a href="#%_sec_4.4.4">4.4.4</a> we will present an implementation of the query interpreter as a collection of procedures. In this section we give an overview that explains the general structure of the system independent of low-level implementation details. After describing the implementation of the interpreter, we will be in a position to understand some of its limitations and some of the subtle ways in which the query language's logical operations differ from the operations of mathematical logic.</p>
<p>It should be apparent that the query evaluator must perform some kind of search in order to match queries against facts and rules in the data base. One way to do this would be to implement the query system as a nondeterministic program, using the <code>amb</code> evaluator of section <a href="book-Z-H-28.html#%_sec_4.3">4.3</a> (see exercise <a href="#%_thm_4.78">4.78</a>). Another possibility is to manage the search with the aid of streams. Our implementation follows this second approach.</p>
<p>The query system is organized around two central operations called <em>pattern matching</em> and <em>unification</em>. We first describe pattern matching and explain how this operation, together with the organization of information in terms of streams of frames, enables us to implement both simple and compound queries. We next discuss unification, a generalization of pattern matching needed to implement rules. Finally, we show how the entire query interpreter fits together through a procedure that classifies expressions in a manner analogous to the way <code>eval</code> classifies expressions for the interpreter described in section <a href="book-Z-H-26.html#%_sec_4.1">4.1</a>.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_668">Pattern matching</a></h4>
<p>A <em>pattern matcher</em> is a program that tests whether some datum fits a specified pattern. For example, the data list <code>((a b) c (a b))</code> matches the pattern <code>(?x c ?x)</code> with the pattern variable <code>?x</code> bound to <code>(a b)</code>. The same data list matches the pattern <code>(?x ?y ?z)</code> with <code>?x</code> and <code>?z</code> both bound to <code>(a b)</code> and <code>?y</code> bound to <code>c</code>. It also matches the pattern <code>((?x ?y) c (?x ?y))</code> with <code>?x</code> bound to <code>a</code> and <code>?y</code> bound to <code>b</code>. However, it does not match the pattern <code>(?x a ?y)</code>, since that pattern specifies a list whose second element is the symbol <code>a</code>.</p>
<p>The pattern matcher used by the query system takes as inputs a pattern, a datum, and a <em>frame</em> that specifies bindings for various pattern variables. It checks whether the datum matches the pattern in a way that is consistent with the bindings already in the frame. If so, it returns the given frame augmented by any bindings that may have been determined by the match. Otherwise, it indicates that the match has failed.</p>
<p>For example, using the pattern <code>(?x ?y ?x)</code> to match <code>(a b a)</code> given an empty frame will return a frame specifying that <code>?x</code> is bound to <code>a</code> and <code>?y</code> is bound to <code>b</code>. Trying the match with the same pattern, the same datum, and a frame specifying that <code>?y</code> is bound to <code>a</code> will fail. Trying the match with the same pattern, the same datum, and a frame in which <code>?y</code> is bound to <code>b</code> and <code>?x</code> is unbound will return the given frame augmented by a binding of <code>?x</code> to <code>a</code>.</p>
<p>The pattern matcher is all the mechanism that is needed to process simple queries that don't involve rules. For instance, to process the query</p>
<p></p>
<p></p>
<p><code>(job ?x (computer programmer))</code></p>
<p></p>
<p>we scan through all assertions in the data base and select those that match the pattern with respect to an initially empty frame. For each match we find, we use the frame returned by the match to instantiate the pattern with a value for <code>?x</code>.</p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_669">Streams of frames</a></h4>
<p>The testing of patterns against frames is organized through the use of streams. Given a single frame, the matching process runs through the data-base entries one by one. For each data-base entry, the matcher generates either a special symbol indicating that the match has failed or an extension to the frame. The results for all the data-base entries are collected into a stream, which is passed through a filter to weed out the failures. The result is a stream of all the frames that extend the given frame via a match to some assertion in the data base.<a href="#footnote_Temp_670"><sup>67</sup></a></p>
<p>In our system, a query takes an input stream of frames and performs the above matching operation for every frame in the stream, as indicated in figure <a href="#%_fig_4.4">4.4</a>. That is, for each frame in the input stream, the query generates a new stream consisting of all extensions to that frame by matches to assertions in the data base. All these streams are then combined to form one huge stream, which contains all possible extensions of every frame in the input stream. This stream is the output of the query.</p>
<p></p>
<p></p>
<p><img src="ch4-Z-G-4.gif" /></p>
<p><strong>Figure 4.4:</strong>  A query processes a stream of frames.</p>
<p></p>
<p>To answer a simple query, we use the query with an input stream consisting of a single empty frame. The resulting output stream contains all extensions to the empty frame (that is, all answers to our query). This stream of frames is then used to generate a stream of copies of the original query pattern with the variables instantiated by the values in each frame, and this is the stream that is finally printed.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_671">Compound queries</a></h4>
<p>The real elegance of the stream-of-frames implementation is evident when we deal with compound queries. The processing of compound queries makes use of the ability of our matcher to demand that a match be consistent with a specified frame. For example, to handle the <code>and</code> of two queries, such as</p>
<p></p>
<p></p>
<p><code>(and (can-do-job ?x (computer programmer trainee))      (job ?person ?x))</code></p>
<p></p>
<p>(informally, ``Find all people who can do the job of a computer programmer trainee''), we first find all entries that match the pattern</p>
<p></p>
<p></p>
<p><code>(can-do-job ?x (computer programmer trainee))</code></p>
<p></p>
<p>This produces a stream of frames, each of which contains a binding for <code>?x</code>. Then for each frame in the stream we find all entries that match</p>
<p></p>
<p></p>
<p><code>(job ?person ?x)</code></p>
<p></p>
<p>in a way that is consistent with the given binding for <code>?x</code>. Each such match will produce a frame containing bindings for <code>?x</code> and <code>?person</code>. The <code>and</code> of two queries can be viewed as a series combination of the two component queries, as shown in figure <a href="#%_fig_4.5">4.5</a>. The frames that pass through the first query filter are filtered and further extended by the second query.</p>
<p></p>
<p></p>
<p><img src="ch4-Z-G-5.gif" /></p>
<p><strong>Figure 4.5:</strong>  The <code>and</code> combination of two queries is produced by operating on the stream of frames in series.</p>
<p></p>
<p>Figure <a href="#%_fig_4.6">4.6</a> shows the analogous method for computing the <code>or</code> of two queries as a parallel combination of the two component queries. The input stream of frames is extended separately by each query. The two resulting streams are then merged to produce the final output stream.</p>
<p></p>
<p></p>
<p><img src="ch4-Z-G-6.gif" /></p>
<p><strong>Figure 4.6:</strong>  The <code>or</code> combination of two queries is produced by operating on the stream of frames in parallel and merging the results.</p>
<p></p>
<p>Even from this high-level description, it is apparent that the processing of compound queries can be slow. For example, since a query may produce more than one output frame for each input frame, and each query in an <code>and</code> gets its input frames from the previous query, an <code>and</code> query could, in the worst case, have to perform a number of matches that is exponential in the number of queries (see exercise <a href="#%_thm_4.76">4.76</a>).<a href="#footnote_Temp_672"><sup>68</sup></a> Though systems for handling only simple queries are quite practical, dealing with complex queries is extremely difficult.<a href="#footnote_Temp_673"><sup>69</sup></a></p>
<p>From the stream-of-frames viewpoint, the <code>not</code> of some query acts as a filter that removes all frames for which the query can be satisfied. For instance, given the pattern</p>
<p></p>
<p></p>
<p><code>(not (job ?x (computer programmer)))</code></p>
<p></p>
<p>we attempt, for each frame in the input stream, to produce extension frames that satisfy <code>(job ?x (computer programmer))</code>. We remove from the input stream all frames for which such extensions exist. The result is a stream consisting of only those frames in which the binding for <code>?x</code> does not satisfy <code>(job ?x (computer programmer))</code>. For example, in processing the query</p>
<p></p>
<p></p>
<p><code>(and (supervisor ?x ?y)      (not (job ?x (computer programmer))))</code></p>
<p></p>
<p>the first clause will generate frames with bindings for <code>?x</code> and <code>?y</code>. The <code>not</code> clause will then filter these by removing all frames in which the binding for <code>?x</code> satisfies the restriction that <code>?x</code> is a computer programmer.<a href="#footnote_Temp_674"><sup>70</sup></a></p>
<p>The <code>lisp-value</code> special form is implemented as a similar filter on frame streams. We use each frame in the stream to instantiate any variables in the pattern, then apply the Lisp predicate. We remove from the input stream all frames for which the predicate fails.</p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_675">Unification</a></h4>
<p>In order to handle rules in the query language, we must be able to find the rules whose conclusions match a given query pattern. Rule conclusions are like assertions except that they can contain variables, so we will need a generalization of pattern matching -- called <em>unification</em> -- in which both the ``pattern'' and the ``datum'' may contain variables.</p>
<p>A unifier takes two patterns, each containing constants and variables, and determines whether it is possible to assign values to the variables that will make the two patterns equal. If so, it returns a frame containing these bindings. For example, unifying <code>(?x a ?y)</code> and <code>(?y ?z a)</code> will specify a frame in which <code>?x</code>, <code>?y</code>, and <code>?z</code> must all be bound to <code>a</code>. On the other hand, unifying <code>(?x ?y a)</code> and <code>(?x b ?y)</code> will fail, because there is no value for <code>?y</code> that can make the two patterns equal. (For the second elements of the patterns to be equal, <code>?y</code> would have to be <code>b</code>; however, for the third elements to be equal, <code>?y</code> would have to be <code>a</code>.) The unifier used in the query system, like the pattern matcher, takes a frame as input and performs unifications that are consistent with this frame.</p>
<p>The unification algorithm is the most technically difficult part of the query system. With complex patterns, performing unification may seem to require deduction. To unify <code>(?x ?x)</code> and <code>((a ?y c) (a b ?z))</code>, for example, the algorithm must infer that <code>?x</code> should be <code>(a b c)</code>, <code>?y</code> should be <code>b</code>, and <code>?z</code> should be <code>c</code>. We may think of this process as solving a set of equations among the pattern components. In general, these are simultaneous equations, which may require substantial manipulation to solve.<a href="#footnote_Temp_676"><sup>71</sup></a> For example, unifying <code>(?x ?x)</code> and <code>((a ?y c) (a b ?z))</code> may be thought of as specifying the simultaneous equations</p>
<p></p>
<p></p>
<p><code>?x  =  (a ?y c) ?x  =  (a b ?z)</code></p>
<p></p>
<p>These equations imply that</p>
<p></p>
<p></p>
<p><code>(a ?y c)  =  (a b ?z)</code></p>
<p></p>
<p>which in turn implies that</p>
<p></p>
<p></p>
<p><code>a  =  a, ?y  =  b, c  =  ?z,</code></p>
<p></p>
<p>and hence that</p>
<p></p>
<p></p>
<p><code>?x  =  (a b c)</code></p>
<p></p>
<p></p>
<p>In a successful pattern match, all pattern variables become bound, and the values to which they are bound contain only constants. This is also true of all the examples of unification we have seen so far. In general, however, a successful unification may not completely determine the variable values; some variables may remain unbound and others may be bound to values that contain variables.</p>
<p>Consider the unification of <code>(?x a)</code> and <code>((b ?y) ?z)</code>. We can deduce that <code>?x  =  (b ?y)</code> and <code>a  =  ?z</code>, but we cannot further solve for <code>?x</code> or <code>?y</code>. The unification doesn't fail, since it is certainly possible to make the two patterns equal by assigning values to <code>?x</code> and <code>?y</code>. Since this match in no way restricts the values <code>?y</code> can take on, no binding for <code>?y</code> is put into the result frame. The match does, however, restrict the value of <code>?x</code>. Whatever value <code>?y</code> has, <code>?x</code> must be <code>(b ?y)</code>. A binding of <code>?x</code> to the pattern <code>(b ?y)</code> is thus put into the frame. If a value for <code>?y</code> is later determined and added to the frame (by a pattern match or unification that is required to be consistent with this frame), the previously bound <code>?x</code> will refer to this value.<a href="#footnote_Temp_677"><sup>72</sup></a></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_678">Applying rules</a></h4>
<p>Unification is the key to the component of the query system that makes inferences from rules. To see how this is accomplished, consider processing a query that involves applying a rule, such as</p>
<p></p>
<p></p>
<p><code>(lives-near ?x (Hacker Alyssa P))</code></p>
<p></p>
<p>To process this query, we first use the ordinary pattern-match procedure described above to see if there are any assertions in the data base that match this pattern. (There will not be any in this case, since our data base includes no direct assertions about who lives near whom.) The next step is to attempt to unify the query pattern with the conclusion of each rule. We find that the pattern unifies with the conclusion of the rule</p>
<p></p>
<p></p>
<p><code>(rule (lives-near ?person-1 ?person-2)       (and (address ?person-1 (?town . ?rest-1))            (address ?person-2 (?town . ?rest-2))            (not (same ?person-1 ?person-2))))</code></p>
<p></p>
<p>resulting in a frame specifying that <code>?person-2</code> is bound to <code>(Hacker Alyssa P)</code> and that <code>?x</code> should be bound to (have the same value as) <code>?person-1</code>. Now, relative to this frame, we evaluate the compound query given by the body of the rule. Successful matches will extend this frame by providing a binding for <code>?person-1</code>, and consequently a value for <code>?x</code>, which we can use to instantiate the original query pattern.</p>
<p>In general, the query evaluator uses the following method to apply a rule when trying to establish a query pattern in a frame that specifies bindings for some of the pattern variables:</p>
<p></p>
<p></p>
<ul>
<li>Unify the query with the conclusion of the rule to form, if successful, an extension of the original frame.</li>
<li>Relative to the extended frame, evaluate the query formed by the body of the rule.</li>
</ul>
<p></p>
<p>Notice how similar this is to the method for applying a procedure in the <code>eval</code>/<code>apply</code> evaluator for Lisp:</p>
<p></p>
<ul>
<li>Bind the procedure's parameters to its arguments to form a frame that extends the original procedure environment.</li>
<li>Relative to the extended environment, evaluate the expression formed by the body of the procedure.</li>
</ul>
<p></p>
<p>The similarity between the two evaluators should come as no surprise. Just as procedure definitions are the means of abstraction in Lisp, rule definitions are the means of abstraction in the query language. In each case, we unwind the abstraction by creating appropriate bindings and evaluating the rule or procedure body relative to these.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_679">Simple queries</a></h4>
<p>We saw earlier in this section how to evaluate simple queries in the absence of rules. Now that we have seen how to apply rules, we can describe how to evaluate simple queries by using both rules and assertions.</p>
<p>Given the query pattern and a stream of frames, we produce, for each frame in the input stream, two streams:</p>
<p></p>
<p></p>
<ul>
<li>a stream of extended frames obtained by matching the pattern against all assertions in the data base (using the pattern matcher), and</li>
<li>a stream of extended frames obtained by applying all possible rules (using the unifier).<a href="#footnote_Temp_680"><sup>73</sup></a></li>
</ul>
<p></p>
<p>Appending these two streams produces a stream that consists of all the ways that the given pattern can be satisfied consistent with the original frame. These streams (one for each frame in the input stream) are now all combined to form one large stream, which therefore consists of all the ways that any of the frames in the original input stream can be extended to produce a match with the given pattern.</p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_681">The query evaluator and the driver loop</a></h4>
<p>Despite the complexity of the underlying matching operations, the system is organized much like an evaluator for any language. The procedure that coordinates the matching operations is called <code>qeval</code>, and it plays a role analogous to that of the <code>eval</code> procedure for Lisp. <code>Qeval</code> takes as inputs a query and a stream of frames. Its output is a stream of frames, corresponding to successful matches to the query pattern, that extend some frame in the input stream, as indicated in figure <a href="#%_fig_4.4">4.4</a>. Like <code>eval</code>, <code>qeval</code> classifies the different types of expressions (queries) and dispatches to an appropriate procedure for each. There is a procedure for each special form (<code>and</code>, <code>or</code>, <code>not</code>, and <code>lisp-value</code>) and one for simple queries.</p>
<p>The driver loop, which is analogous to the <code>driver-loop</code> procedure for the other evaluators in this chapter, reads queries from the terminal. For each query, it calls <code>qeval</code> with the query and a stream that consists of a single empty frame. This will produce the stream of all possible matches (all possible extensions to the empty frame). For each frame in the resulting stream, it instantiates the original query using the values of the variables found in the frame. This stream of instantiated queries is then printed.<a href="#footnote_Temp_682"><sup>74</sup></a></p>
<p>The driver also checks for the special command <code>assert!</code>, which signals that the input is not a query but rather an assertion or rule to be added to the data base. For instance,</p>
<p></p>
<p></p>
<p><code>(assert! (job (Bitdiddle Ben) (computer wizard))) (assert! (rule (wheel ?person)                (and (supervisor ?middle-manager ?person)                     (supervisor ?x ?middle-manager))))</code></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.4.3">4.4.3  Is Logic Programming Mathematical Logic?</a></h3>
<p>The means of combination used in the query language may at first seem identical to the operations <code>and</code>, <code>or</code>, and <code>not</code> of mathematical logic, and the application of query-language rules is in fact accomplished through a legitimate method of inference.<a href="#footnote_Temp_683"><sup>75</sup></a> This identification of the query language with mathematical logic is not really valid, though, because the query language provides a <em>control structure</em> that interprets the logical statements procedurally. We can often take advantage of this control structure. For example, to find all of the supervisors of programmers we could formulate a query in either of two logically equivalent forms:</p>
<p></p>
<p></p>
<p><code>(and (job ?x (computer programmer))      (supervisor ?x ?y))</code></p>
<p></p>
<p>or</p>
<p></p>
<p><code>(and (supervisor ?x ?y)      (job ?x (computer programmer)))</code></p>
<p></p>
<p>If a company has many more supervisors than programmers (the usual case), it is better to use the first form rather than the second because the data base must be scanned for each intermediate result (frame) produced by the first clause of the <code>and</code>.</p>
<p>The aim of logic programming is to provide the programmer with techniques for decomposing a computational problem into two separate problems: ``what'' is to be computed, and ``how'' this should be computed. This is accomplished by selecting a subset of the statements of mathematical logic that is powerful enough to be able to describe anything one might want to compute, yet weak enough to have a controllable procedural interpretation. The intention here is that, on the one hand, a program specified in a logic programming language should be an effective program that can be carried out by a computer. Control (``how'' to compute) is effected by using the order of evaluation of the language. We should be able to arrange the order of clauses and the order of subgoals within each clause so that the computation is done in an order deemed to be effective and efficient. At the same time, we should be able to view the result of the computation (``what'' to compute) as a simple consequence of the laws of logic.</p>
<p>Our query language can be regarded as just such a procedurally interpretable subset of mathematical logic. An assertion represents a simple fact (an atomic proposition). A rule represents the implication that the rule conclusion holds for those cases where the rule body holds. A rule has a natural procedural interpretation: To establish the conclusion of the rule, establish the body of the rule. Rules, therefore, specify computations. However, because rules can also be regarded as statements of mathematical logic, we can justify any ``inference'' accomplished by a logic program by asserting that the same result could be obtained by working entirely within mathematical logic.<a href="#footnote_Temp_684"><sup>76</sup></a></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_685">Infinite loops</a></h4>
<p>A consequence of the procedural interpretation of logic programs is that it is possible to construct hopelessly inefficient programs for solving certain problems. An extreme case of inefficiency occurs when the system falls into infinite loops in making deductions. As a simple example, suppose we are setting up a data base of famous marriages, including</p>
<p></p>
<p></p>
<p><code>(assert! (married Minnie Mickey))</code></p>
<p></p>
<p>If we now ask</p>
<p></p>
<p></p>
<p><code>(married Mickey ?who)</code></p>
<p></p>
<p>we will get no response, because the system doesn't know that if <em>A</em> is married to <em>B</em>, then <em>B</em> is married to <em>A</em>. So we assert the rule</p>
<p></p>
<p></p>
<p><code>(assert! (rule (married ?x ?y)                (married ?y ?x)))</code></p>
<p></p>
<p>and again query</p>
<p></p>
<p></p>
<p><code>(married Mickey ?who)</code></p>
<p></p>
<p>Unfortunately, this will drive the system into an infinite loop, as follows:</p>
<p></p>
<p></p>
<ul>
<li>The system finds that the <code>married</code> rule is applicable; that is, the rule conclusion <code>(married ?x ?y)</code> successfully unifies with the query pattern <code>(married Mickey ?who)</code> to produce a frame in which <code>?x</code> is bound to <code>Mickey</code> and <code>?y</code> is bound to <code>?who</code>. So the interpreter proceeds to evaluate the rule body <code>(married ?y ?x)</code> in this frame -- in effect, to process the query <code>(married ?who Mickey)</code>.</li>
<li>One answer appears directly as an assertion in the data base: <code>(married Minnie Mickey)</code>.</li>
<li>The <code>married</code> rule is also applicable, so the interpreter again evaluates the rule body, which this time is equivalent to <code>(married Mickey ?who)</code>.</li>
</ul>
<p></p>
<p>The system is now in an infinite loop. Indeed, whether the system will find the simple answer <code>(married Minnie Mickey)</code> before it goes into the loop depends on implementation details concerning the order in which the system checks the items in the data base. This is a very simple example of the kinds of loops that can occur. Collections of interrelated rules can lead to loops that are much harder to anticipate, and the appearance of a loop can depend on the order of clauses in an <code>and</code> (see exercise <a href="#%_thm_4.64">4.64</a>) or on low-level details concerning the order in which the system processes queries.<a href="#footnote_Temp_686"><sup>77</sup></a></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_687">Problems with <code>not</code></a></h4>
<p>Another quirk in the query system concerns <code>not</code>. Given the data base of section <a href="#%_sec_4.4.1">4.4.1</a>, consider the following two queries:</p>
<p></p>
<p></p>
<p><code>(and (supervisor ?x ?y)      (not (job ?x (computer programmer)))) (and (not (job ?x (computer programmer)))      (supervisor ?x ?y))</code></p>
<p></p>
<p>These two queries do not produce the same result. The first query begins by finding all entries in the data base that match <code>(supervisor ?x ?y)</code>, and then filters the resulting frames by removing the ones in which the value of <code>?x</code> satisfies <code>(job ?x (computer programmer))</code>. The second query begins by filtering the incoming frames to remove those that can satisfy <code>(job ?x (computer programmer))</code>. Since the only incoming frame is empty, it checks the data base to see if there are any patterns that satisfy <code>(job ?x (computer programmer))</code>. Since there generally are entries of this form, the <code>not</code> clause filters out the empty frame and returns an empty stream of frames. Consequently, the entire compound query returns an empty stream.</p>
<p>The trouble is that our implementation of <code>not</code> really is meant to serve as a filter on values for the variables. If a <code>not</code> clause is processed with a frame in which some of the variables remain unbound (as does <code>?x</code> in the example above), the system will produce unexpected results. Similar problems occur with the use of <code>lisp-value</code> -- the Lisp predicate can't work if some of its arguments are unbound. See exercise <a href="#%_thm_4.77">4.77</a>.</p>
<p>There is also a much more serious way in which the <code>not</code> of the query language differs from the <code>not</code> of mathematical logic. In logic, we interpret the statement ``not <em>P</em>'' to mean that <em>P</em> is not true. In the query system, however, ``not <em>P</em>'' means that <em>P</em> is not deducible from the knowledge in the data base. For example, given the personnel data base of section <a href="#%_sec_4.4.1">4.4.1</a>, the system would happily deduce all sorts of <code>not</code> statements, such as that Ben Bitdiddle is not a baseball fan, that it is not raining outside, and that 2 + 2 is not 4.<a href="#footnote_Temp_688"><sup>78</sup></a> In other words, the <code>not</code> of logic programming languages reflects the so-called <em>closed world assumption</em> that all relevant information has been included in the data base.<a href="#footnote_Temp_689"><sup>79</sup></a></p>
<p><strong>Exercise 4.64.</strong>  Louis Reasoner mistakenly deletes the <code>outranked-by</code> rule (section <a href="#%_sec_4.4.1">4.4.1</a>) from the data base. When he realizes this, he quickly reinstalls it. Unfortunately, he makes a slight change in the rule, and types it in as</p>
<p></p>
<p></p>
<p><code>(rule (outranked-by ?staff-person ?boss)       (or (supervisor ?staff-person ?boss)           (and (outranked-by ?middle-manager ?boss)                (supervisor ?staff-person ?middle-manager))))</code></p>
<p></p>
<p>Just after Louis types this information into the system, DeWitt Aull comes by to find out who outranks Ben Bitdiddle. He issues the query</p>
<p></p>
<p></p>
<p><code>(outranked-by (Bitdiddle Ben) ?who)</code></p>
<p></p>
<p>After answering, the system goes into an infinite loop. Explain why.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.65.</strong>  Cy D. Fect, looking forward to the day when he will rise in the organization, gives a query to find all the wheels (using the <code>wheel</code> rule of section <a href="#%_sec_4.4.1">4.4.1</a>):</p>
<p></p>
<p></p>
<p><code>(wheel ?who)</code></p>
<p></p>
<p>To his surprise, the system responds</p>
<p></p>
<p></p>
<p><code>;;; Query results: (wheel (Warbucks Oliver)) (wheel (Bitdiddle Ben)) (wheel (Warbucks Oliver)) (wheel (Warbucks Oliver)) (wheel (Warbucks Oliver))</code></p>
<p></p>
<p>Why is Oliver Warbucks listed four times?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.66.</strong>  Ben has been generalizing the query system to provide statistics about the company. For example, to find the total salaries of all the computer programmers one will be able to say</p>
<p></p>
<p></p>
<p><code>(sum ?amount      (and (job ?x (computer programmer))           (salary ?x ?amount)))</code></p>
<p></p>
<p>In general, Ben's new system allows expressions of the form</p>
<p></p>
<p></p>
<p><code>(accumulation-function &lt;variable&gt;                        &lt;query pattern&gt;)</code></p>
<p></p>
<p>where <code>accumulation-function</code> can be things like <code>sum</code>, <code>average</code>, or <code>maximum</code>. Ben reasons that it should be a cinch to implement this. He will simply feed the query pattern to <code>qeval</code>. This will produce a stream of frames. He will then pass this stream through a mapping function that extracts the value of the designated variable from each frame in the stream and feed the resulting stream of values to the accumulation function. Just as Ben completes the implementation and is about to try it out, Cy walks by, still puzzling over the <code>wheel</code> query result in exercise <a href="#%_thm_4.65">4.65</a>. When Cy shows Ben the system's response, Ben groans, ``Oh, no, my simple accumulation scheme won't work!''</p>
<p>What has Ben just realized? Outline a method he can use to salvage the situation.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.67.</strong>  Devise a way to install a loop detector in the query system so as to avoid the kinds of simple loops illustrated in the text and in exercise <a href="#%_thm_4.64">4.64</a>. The general idea is that the system should maintain some sort of history of its current chain of deductions and should not begin processing a query that it is already working on. Describe what kind of information (patterns and frames) is included in this history, and how the check should be made. (After you study the details of the query-system implementation in section <a href="#%_sec_4.4.4">4.4.4</a>, you may want to modify the system to include your loop detector.)</p>
<p></p>
<p></p>
<p><strong>Exercise 4.68.</strong>  Define rules to implement the <code>reverse</code> operation of exercise <a href="book-Z-H-15.html#%_thm_2.18">2.18</a>, which returns a list containing the same elements as a given list in reverse order. (Hint: Use <code>append-to-form</code>.) Can your rules answer both <code>(reverse (1 2 3) ?x)</code> and <code>(reverse ?x (1 2 3))</code> ?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.69.</strong>  Beginning with the data base and the rules you formulated in exercise <a href="#%_thm_4.63">4.63</a>, devise a rule for adding ``greats'' to a grandson relationship. This should enable the system to deduce that Irad is the great-grandson of Adam, or that Jabal and Jubal are the great-great-great-great-great-grandsons of Adam. (Hint: Represent the fact about Irad, for example, as <code>((great grandson) Adam Irad)</code>. Write rules that determine if a list ends in the word <code>grandson</code>. Use this to express a rule that allows one to derive the relationship <code>((great .  ?rel) ?x ?y)</code>, where <code>?rel</code> is a list ending in <code>grandson</code>.) Check your rules on queries such as <code>((great grandson) ?g ?ggs)</code> and <code>(?relationship Adam Irad)</code>.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_4.4.4">4.4.4  Implementing the Query System</a></h3>
<p></p>
<p>Section <a href="#%_sec_4.4.2">4.4.2</a> described how the query system works. Now we fill in the details by presenting a complete implementation of the system.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_4.4.4.1">4.4.4.1  The Driver Loop and Instantiation</a></h4>
<p></p>
<p>The driver loop for the query system repeatedly reads input expressions. If the expression is a rule or assertion to be added to the data base, then the information is added. Otherwise the expression is assumed to be a query. The driver passes this query to the evaluator <code>qeval</code> together with an initial frame stream consisting of a single empty frame. The result of the evaluation is a stream of frames generated by satisfying the query with variable values found in the data base. These frames are used to form a new stream consisting of copies of the original query in which the variables are instantiated with values supplied by the stream of frames, and this final stream is printed at the terminal:</p>
<p></p>
<p></p>
<p><code>(define input-prompt &quot;;;; Query input:&quot;) (define output-prompt &quot;;;; Query results:&quot;) (define (query-driver-loop)   (prompt-for-input input-prompt)   (let ((q (query-syntax-process (read))))     (cond ((assertion-to-be-added? q)            (add-rule-or-assertion! (add-assertion-body q))            (newline)            (display &quot;Assertion added to data base.&quot;)            (query-driver-loop))           (else            (newline)            (display output-prompt)            (display-stream             (stream-map              (lambda (frame)                (instantiate q                             frame                             (lambda (v f)                               (contract-question-mark v))))              (qeval q (singleton-stream '()))))            (query-driver-loop)))))</code></p>
<p></p>
<p>Here, as in the other evaluators in this chapter, we use an abstract syntax for the expressions of the query language. The implementation of the expression syntax, including the predicate <code>assertion-to-be-added?</code> and the selector <code>add-assertion-body</code>, is given in section <a href="#%_sec_4.4.4.7">4.4.4.7</a>. <code>Add-rule-or-assertion!</code> is defined in section <a href="#%_sec_4.4.4.5">4.4.4.5</a>.</p>
<p>Before doing any processing on an input expression, the driver loop transforms it syntactically into a form that makes the processing more efficient. This involves changing the representation of pattern variables. When the query is instantiated, any variables that remain unbound are transformed back to the input representation before being printed. These transformations are performed by the two procedures <code>query-syntax-process</code> and <code>contract-question-mark</code> (section  <a href="#%_sec_4.4.4.7">4.4.4.7</a>).</p>
<p>To instantiate an expression, we copy it, replacing any variables in the expression by their values in a given frame. The values are themselves instantiated, since they could contain variables (for example, if <code>?x</code> in <code>exp</code> is bound to <code>?y</code> as the result of unification and <code>?y</code> is in turn bound to 5). The action to take if a variable cannot be instantiated is given by a procedural argument to <code>instantiate</code>.</p>
<p></p>
<p></p>
<p><code>(define (instantiate exp frame unbound-var-handler)   (define (copy exp)     (cond ((var? exp)            (let ((binding (binding-in-frame exp frame)))              (if binding                  (copy (binding-value binding))                  (unbound-var-handler exp frame))))           ((pair? exp)            (cons (copy (car exp)) (copy (cdr exp))))           (else exp)))   (copy exp))</code></p>
<p></p>
<p>The procedures that manipulate bindings are defined in section <a href="#%_sec_4.4.4.8">4.4.4.8</a>.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_4.4.4.2">4.4.4.2  The Evaluator</a></h4>
<p></p>
<p>The <code>qeval</code> procedure, called by the <code>query-driver-loop</code>, is the basic evaluator of the query system. It takes as inputs a query and a stream of frames, and it returns a stream of extended frames. It identifies special forms by a data-directed dispatch using <code>get</code> and <code>put</code>, just as we did in implementing generic operations in chapter 2. Any query that is not identified as a special form is assumed to be a simple query, to be processed by <code>simple-query</code>.</p>
<p></p>
<p></p>
<p><code>(define (qeval query frame-stream)   (let ((qproc (get (type query) 'qeval)))     (if qproc         (qproc (contents query) frame-stream)         (simple-query query frame-stream))))</code></p>
<p></p>
<p><code>Type</code> and <code>contents</code>, defined in section <a href="#%_sec_4.4.4.7">4.4.4.7</a>, implement the abstract syntax of the special forms.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_696">Simple queries</a></h4>
<p>The <code>simple-query</code> procedure handles simple queries. It takes as arguments a simple query (a pattern) together with a stream of frames, and it returns the stream formed by extending each frame by all data-base matches of the query.</p>
<p></p>
<p></p>
<p><code>(define (simple-query query-pattern frame-stream)   (stream-flatmap    (lambda (frame)      (stream-append-delayed       (find-assertions query-pattern frame)       (delay (apply-rules query-pattern frame))))    frame-stream))</code></p>
<p></p>
<p></p>
<p>For each frame in the input stream, we use <code>find-assertions</code> (section <a href="#%_sec_4.4.4.3">4.4.4.3</a>) to match the pattern against all assertions in the data base, producing a stream of extended frames, and we use <code>apply-rules</code> (section <a href="#%_sec_4.4.4.4">4.4.4.4</a>) to apply all possible rules, producing another stream of extended frames. These two streams are combined (using <code>stream-append-delayed</code>, section <a href="#%_sec_4.4.4.6">4.4.4.6</a>) to make a stream of all the ways that the given pattern can be satisfied consistent with the original frame (see exercise <a href="#%_thm_4.71">4.71</a>). The streams for the individual input frames are combined using <code>stream-flatmap</code> (section <a href="#%_sec_4.4.4.6">4.4.4.6</a>) to form one large stream of all the ways that any of the frames in the original input stream can be extended to produce a match with the given pattern.</p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_697">Compound queries</a></h4>
<p><code>And</code> queries are handled as illustrated in figure <a href="#%_fig_4.5">4.5</a> by the <code>conjoin</code> procedure. <code>Conjoin</code> takes as inputs the conjuncts and the frame stream and returns the stream of extended frames. First, <code>conjoin</code> processes the stream of frames to find the stream of all possible frame extensions that satisfy the first query in the conjunction. Then, using this as the new frame stream, it recursively applies <code>conjoin</code> to the rest of the queries.</p>
<p></p>
<p></p>
<p><code>(define (conjoin conjuncts frame-stream)   (if (empty-conjunction? conjuncts)       frame-stream       (conjoin (rest-conjuncts conjuncts)                (qeval (first-conjunct conjuncts)                       frame-stream))))</code></p>
<p></p>
<p>The expression</p>
<p></p>
<p><code>(put 'and 'qeval conjoin)</code></p>
<p></p>
<p>sets up <code>qeval</code> to dispatch to <code>conjoin</code> when an <code>and</code> form is encountered.</p>
<p><code>Or</code> queries are handled similarly, as shown in figure <a href="#%_fig_4.6">4.6</a>. The output streams for the various disjuncts of the <code>or</code> are computed separately and merged using the <code>interleave-delayed</code> procedure from section <a href="#%_sec_4.4.4.6">4.4.4.6</a>. (See exercises <a href="#%_thm_4.71">4.71</a> and <a href="#%_thm_4.72">4.72</a>.)</p>
<p></p>
<p></p>
<p><code>(define (disjoin disjuncts frame-stream)   (if (empty-disjunction? disjuncts)       the-empty-stream       (interleave-delayed        (qeval (first-disjunct disjuncts) frame-stream)        (delay (disjoin (rest-disjuncts disjuncts)                        frame-stream))))) (put 'or 'qeval disjoin)</code></p>
<p></p>
<p>The predicates and selectors for the syntax of conjuncts and disjuncts are given in section <a href="#%_sec_4.4.4.7">4.4.4.7</a>.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_698">Filters</a></h4>
<p><code>Not</code> is handled by the method outlined in section <a href="#%_sec_4.4.2">4.4.2</a>. We attempt to extend each frame in the input stream to satisfy the query being negated, and we include a given frame in the output stream only if it cannot be extended.</p>
<p></p>
<p></p>
<p><code>(define (negate operands frame-stream)   (stream-flatmap    (lambda (frame)      (if (stream-null? (qeval (negated-query operands)                               (singleton-stream frame)))          (singleton-stream frame)          the-empty-stream))    frame-stream)) (put 'not 'qeval negate)</code></p>
<p></p>
<p></p>
<p><code>Lisp-value</code> is a filter similar to <code>not</code>. Each frame in the stream is used to instantiate the variables in the pattern, the indicated predicate is applied, and the frames for which the predicate returns false are filtered out of the input stream. An error results if there are unbound pattern variables.</p>
<p></p>
<p></p>
<p><code>(define (lisp-value call frame-stream)   (stream-flatmap    (lambda (frame)      (if (execute           (instantiate            call            frame            (lambda (v f)              (error &quot;Unknown pat var -- LISP-VALUE&quot; v))))          (singleton-stream frame)          the-empty-stream))    frame-stream)) (put 'lisp-value 'qeval lisp-value)</code></p>
<p></p>
<p></p>
<p><code>Execute</code>, which applies the predicate to the arguments, must <code>eval</code> the predicate expression to get the procedure to apply. However, it must not evaluate the arguments, since they are already the actual arguments, not expressions whose evaluation (in Lisp) will produce the arguments. Note that <code>execute</code> is implemented using <code>eval</code> and <code>apply</code> from the underlying Lisp system.</p>
<p></p>
<p></p>
<p><code>(define (execute exp)   (apply (eval (predicate exp) user-initial-environment)          (args exp)))</code></p>
<p></p>
<p></p>
<p>The <code>always-true</code> special form provides for a query that is always satisfied. It ignores its contents (normally empty) and simply passes through all the frames in the input stream. <code>Always-true</code> is used by the <code>rule-body</code> selector (section <a href="#%_sec_4.4.4.7">4.4.4.7</a>) to provide bodies for rules that were defined without bodies (that is, rules whose conclusions are always satisfied).</p>
<p></p>
<p></p>
<p><code>(define (always-true ignore frame-stream) frame-stream) (put 'always-true 'qeval always-true)</code></p>
<p></p>
<p>The selectors that define the syntax of <code>not</code> and <code>lisp-value</code> are given in section <a href="#%_sec_4.4.4.7">4.4.4.7</a>.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_4.4.4.3">4.4.4.3  Finding Assertions by Pattern Matching</a></h4>
<p></p>
<p><code>Find-assertions</code>, called by <code>simple-query</code> (section <a href="#%_sec_4.4.4.2">4.4.4.2</a>), takes as input a pattern and a frame. It returns a stream of frames, each extending the given one by a data-base match of the given pattern. It uses <code>fetch-assertions</code> (section <a href="#%_sec_4.4.4.5">4.4.4.5</a>) to get a stream of all the assertions in the data base that should be checked for a match against the pattern and the frame. The reason for <code>fetch-assertions</code> here is that we can often apply simple tests that will eliminate many of the entries in the data base from the pool of candidates for a successful match. The system would still work if we eliminated <code>fetch-assertions</code> and simply checked a stream of all assertions in the data base, but the computation would be less efficient because we would need to make many more calls to the matcher.</p>
<p></p>
<p></p>
<p><code>(define (find-assertions pattern frame)   (stream-flatmap (lambda (datum)                     (check-an-assertion datum pattern frame))                   (fetch-assertions pattern frame)))</code></p>
<p></p>
<p></p>
<p><code>Check-an-assertion</code> takes as arguments a pattern, a data object (assertion), and a frame and returns either a one-element stream containing the extended frame or <code>the-empty-stream</code> if the match fails.</p>
<p></p>
<p></p>
<p><code>(define (check-an-assertion assertion query-pat query-frame)   (let ((match-result          (pattern-match query-pat assertion query-frame)))     (if (eq? match-result 'failed)         the-empty-stream         (singleton-stream match-result))))</code></p>
<p></p>
<p>The basic pattern matcher returns either the symbol <code>failed</code> or an extension of the given frame. The basic idea of the matcher is to check the pattern against the data, element by element, accumulating bindings for the pattern variables. If the pattern and the data object are the same, the match succeeds and we return the frame of bindings accumulated so far. Otherwise, if the pattern is a variable we extend the current frame by binding the variable to the data, so long as this is consistent with the bindings already in the frame. If the pattern and the data are both pairs, we (recursively) match the <code>car</code> of the pattern against the <code>car</code> of the data to produce a frame; in this frame we then match the <code>cdr</code> of the pattern against the <code>cdr</code> of the data. If none of these cases are applicable, the match fails and we return the symbol <code>failed</code>.</p>
<p></p>
<p></p>
<p><code>(define (pattern-match pat dat frame)   (cond ((eq? frame 'failed) 'failed)         ((equal? pat dat) frame)         ((var? pat) (extend-if-consistent pat dat frame))         ((and (pair? pat) (pair? dat))          (pattern-match (cdr pat)                         (cdr dat)                         (pattern-match (car pat)                                        (car dat)                                        frame)))         (else 'failed)))</code></p>
<p></p>
<p></p>
<p>Here is the procedure that extends a frame by adding a new binding, if this is consistent with the bindings already in the frame:</p>
<p></p>
<p></p>
<p><code>(define (extend-if-consistent var dat frame)   (let ((binding (binding-in-frame var frame)))     (if binding         (pattern-match (binding-value binding) dat frame)         (extend var dat frame))))</code></p>
<p></p>
<p>If there is no binding for the variable in the frame, we simply add the binding of the variable to the data. Otherwise we match, in the frame, the data against the value of the variable in the frame. If the stored value contains only constants, as it must if it was stored during pattern matching by <code>extend-if-consistent</code>, then the match simply tests whether the stored and new values are the same. If so, it returns the unmodified frame; if not, it returns a failure indication. The stored value may, however, contain pattern variables if it was stored during unification (see section <a href="#%_sec_4.4.4.4">4.4.4.4</a>). The recursive match of the stored pattern against the new data will add or check bindings for the variables in this pattern. For example, suppose we have a frame in which <code>?x</code> is bound to <code>(f ?y)</code> and <code>?y</code> is unbound, and we wish to augment this frame by a binding of <code>?x</code> to <code>(f b)</code>. We look up <code>?x</code> and find that it is bound to <code>(f ?y)</code>. This leads us to match <code>(f ?y)</code> against the proposed new value <code>(f b)</code> in the same frame. Eventually this match extends the frame by adding a binding of <code>?y</code> to <code>b</code>. <code>?X</code> remains bound to <code>(f ?y)</code>. We never modify a stored binding and we never store more than one binding for a given variable.</p>
<p>The procedures used by <code>extend-if-consistent</code> to manipulate bindings are defined in section <a href="#%_sec_4.4.4.8">4.4.4.8</a>.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_699">Patterns with dotted tails</a></h4>
<p>If a pattern contains a dot followed by a pattern variable, the pattern variable matches the rest of the data list (rather than the next element of the data list), just as one would expect with the dotted-tail notation described in exercise <a href="book-Z-H-15.html#%_thm_2.20">2.20</a>. Although the pattern matcher we have just implemented doesn't look for dots, it does behave as we want. This is because the Lisp <code>read</code> primitive, which is used by <code>query-driver-loop</code> to read the query and represent it as a list structure, treats dots in a special way.</p>
<p>When <code>read</code> sees a dot, instead of making the next item be the next element of a list (the <code>car</code> of a <code>cons</code> whose <code>cdr</code> will be the rest of the list) it makes the next item be the <code>cdr</code> of the list structure. For example, the list structure produced by <code>read</code> for the pattern <code>(computer ?type)</code> could be constructed by evaluating the expression <code>(cons 'computer (cons '?type '()))</code>, and that for <code>(computer . ?type)</code> could be constructed by evaluating the expression <code>(cons 'computer '?type)</code>.</p>
<p>Thus, as <code>pattern-match</code> recursively compares <code>car</code>s and <code>cdr</code>s of a data list and a pattern that had a dot, it eventually matches the variable after the dot (which is a <code>cdr</code> of the pattern) against a sublist of the data list, binding the variable to that list. For example, matching the pattern <code>(computer . ?type)</code> against <code>(computer programmer trainee)</code> will match <code>?type</code> against the list <code>(programmer trainee)</code>.</p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_4.4.4.4">4.4.4.4  Rules and Unification</a></h4>
<p></p>
<p><code>Apply-rules</code> is the rule analog of <code>find-assertions</code> (section <a href="#%_sec_4.4.4.3">4.4.4.3</a>). It takes as input a pattern and a frame, and it forms a stream of extension frames by applying rules from the data base. <code>Stream-flatmap</code> maps <code>apply-a-rule</code> down the stream of possibly applicable rules (selected by <code>fetch-rules</code>, section <a href="#%_sec_4.4.4.5">4.4.4.5</a>) and combines the resulting streams of frames.</p>
<p></p>
<p></p>
<p><code>(define (apply-rules pattern frame)   (stream-flatmap (lambda (rule)                     (apply-a-rule rule pattern frame))                   (fetch-rules pattern frame)))</code></p>
<p></p>
<p></p>
<p><code>Apply-a-rule</code> applies rules using the method outlined in section <a href="#%_sec_4.4.2">4.4.2</a>. It first augments its argument frame by unifying the rule conclusion with the pattern in the given frame. If this succeeds, it evaluates the rule body in this new frame.</p>
<p>Before any of this happens, however, the program renames all the variables in the rule with unique new names. The reason for this is to prevent the variables for different rule applications from becoming confused with each other. For instance, if two rules both use a variable named <code>?x</code>, then each one may add a binding for <code>?x</code> to the frame when it is applied. These two <code>?x</code>'s have nothing to do with each other, and we should not be fooled into thinking that the two bindings must be consistent. Rather than rename variables, we could devise a more clever environment structure; however, the renaming approach we have chosen here is the most straightforward, even if not the most efficient. (See exercise <a href="#%_thm_4.79">4.79</a>.) Here is the <code>apply-a-rule</code> procedure:</p>
<p></p>
<p></p>
<p><code>(define (apply-a-rule rule query-pattern query-frame)   (let ((clean-rule (rename-variables-in rule)))     (let ((unify-result            (unify-match query-pattern                         (conclusion clean-rule)                         query-frame)))       (if (eq? unify-result 'failed)           the-empty-stream           (qeval (rule-body clean-rule)                  (singleton-stream unify-result))))))</code></p>
<p></p>
<p>The selectors <code>rule-body</code> and <code>conclusion</code> that extract parts of a rule are defined in section <a href="#%_sec_4.4.4.7">4.4.4.7</a>.</p>
<p>We generate unique variable names by associating a unique identifier (such as a number) with each rule application and combining this identifier with the original variable names. For example, if the rule-application identifier is 7, we might change each <code>?x</code> in the rule to <code>?x-7</code> and each <code>?y</code> in the rule to <code>?y-7</code>. (<code>Make-new-variable</code> and <code>new-rule-application-id</code> are included with the syntax procedures in section <a href="#%_sec_4.4.4.7">4.4.4.7</a>.)</p>
<p></p>
<p></p>
<p><code>(define (rename-variables-in rule)   (let ((rule-application-id (new-rule-application-id)))     (define (tree-walk exp)       (cond ((var? exp)              (make-new-variable exp rule-application-id))             ((pair? exp)              (cons (tree-walk (car exp))                    (tree-walk (cdr exp))))             (else exp)))     (tree-walk rule)))</code></p>
<p></p>
<p>The unification algorithm is implemented as a procedure that takes as inputs two patterns and a frame and returns either the extended frame or the symbol <code>failed</code>. The unifier is like the pattern matcher except that it is symmetrical -- variables are allowed on both sides of the match. <code>Unify-match</code> is basically the same as <code>pattern-match</code>, except that there is extra code (marked ``<code>***</code>'' below) to handle the case where the object on the right side of the match is a variable.</p>
<p></p>
<p></p>
<p><code>(define (unify-match p1 p2 frame)   (cond ((eq? frame 'failed) 'failed)         ((equal? p1 p2) frame)         ((var? p1) (extend-if-possible p1 p2 frame))         ((var? p2) (extend-if-possible p2 p1 frame))  ; ***         ((and (pair? p1) (pair? p2))          (unify-match (cdr p1)                       (cdr p2)                       (unify-match (car p1)                                    (car p2)                                    frame)))         (else 'failed)))</code></p>
<p></p>
<p></p>
<p>In unification, as in one-sided pattern matching, we want to accept a proposed extension of the frame only if it is consistent with existing bindings. The procedure <code>extend-if-possible</code> used in unification is the same as the <code>extend-if-consistent</code> used in pattern matching except for two special checks, marked ``<code>***</code>'' in the program below. In the first case, if the variable we are trying to match is not bound, but the value we are trying to match it with is itself a (different) variable, it is necessary to check to see if the value is bound, and if so, to match its value. If both parties to the match are unbound, we may bind either to the other.</p>
<p>The second check deals with attempts to bind a variable to a pattern that includes that variable. Such a situation can occur whenever a variable is repeated in both patterns. Consider, for example, unifying the two patterns <code>(?x ?x)</code> and <code>(?y &lt;expression involving ?y</code>&gt;) in a frame where both <code>?x</code> and <code>?y</code> are unbound. First <code>?x</code> is matched against <code>?y</code>, making a binding of <code>?x</code> to <code>?y</code>. Next, the same <code>?x</code> is matched against the given expression involving <code>?y</code>. Since <code>?x</code> is already bound to <code>?y</code>, this results in matching <code>?y</code> against the expression. If we think of the unifier as finding a set of values for the pattern variables that make the patterns the same, then these patterns imply instructions to find a <code>?y</code> such that <code>?y</code> is equal to the expression involving <code>?y</code>. There is no general method for solving such equations, so we reject such bindings; these cases are recognized by the predicate <code>depends-on?</code>.<a href="#footnote_Temp_700"><sup>80</sup></a> On the other hand, we do not want to reject attempts to bind a variable to itself. For example, consider unifying <code>(?x ?x)</code> and <code>(?y ?y)</code>. The second attempt to bind <code>?x</code> to <code>?y</code> matches <code>?y</code> (the stored value of <code>?x</code>) against <code>?y</code> (the new value of <code>?x</code>). This is taken care of by the <code>equal?</code> clause of <code>unify-match</code>.</p>
<p></p>
<p></p>
<p><code>(define (extend-if-possible var val frame)   (let ((binding (binding-in-frame var frame)))     (cond (binding            (unify-match             (binding-value binding) val frame))           ((var? val)                      ; ***            (let ((binding (binding-in-frame val frame)))              (if binding                  (unify-match                   var (binding-value binding) frame)                  (extend var val frame))))           ((depends-on? val var frame)     ; ***            'failed)           (else (extend var val frame)))))</code></p>
<p></p>
<p></p>
<p><code>Depends-on?</code> is a predicate that tests whether an expression proposed to be the value of a pattern variable depends on the variable. This must be done relative to the current frame because the expression may contain occurrences of a variable that already has a value that depends on our test variable. The structure of <code>depends-on?</code> is a simple recursive tree walk in which we substitute for the values of variables whenever necessary.</p>
<p></p>
<p></p>
<p><code>(define (depends-on? exp var frame)   (define (tree-walk e)     (cond ((var? e)            (if (equal? var e)                true                (let ((b (binding-in-frame e frame)))                  (if b                      (tree-walk (binding-value b))                      false))))           ((pair? e)            (or (tree-walk (car e))                (tree-walk (cdr e))))           (else false)))   (tree-walk exp))</code></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_4.4.4.5">4.4.4.5  Maintaining the Data Base</a></h4>
<p>One important problem in designing logic programming languages is that of arranging things so that as few irrelevant data-base entries as possible will be examined in checking a given pattern. In our system, in addition to storing all assertions in one big stream, we store all assertions whose <code>car</code>s are constant symbols in separate streams, in a table indexed by the symbol. To fetch an assertion that may match a pattern, we first check to see if the <code>car</code> of the pattern is a constant symbol. If so, we return (to be tested using the matcher) all the stored assertions that have the same <code>car</code>. If the pattern's <code>car</code> is not a constant symbol, we return all the stored assertions. Cleverer methods could also take advantage of information in the frame, or try also to optimize the case where the <code>car</code> of the pattern is not a constant symbol. We avoid building our criteria for indexing (using the <code>car</code>, handling only the case of constant symbols) into the program; instead we call on predicates and selectors that embody our criteria.</p>
<p></p>
<p></p>
<p><code>(define THE-ASSERTIONS the-empty-stream) (define (fetch-assertions pattern frame)   (if (use-index? pattern)       (get-indexed-assertions pattern)       (get-all-assertions))) (define (get-all-assertions) THE-ASSERTIONS) (define (get-indexed-assertions pattern)   (get-stream (index-key-of pattern) 'assertion-stream))</code></p>
<p></p>
<p><code>Get-stream</code> looks up a stream in the table and returns an empty stream if nothing is stored there.</p>
<p></p>
<p></p>
<p><code>(define (get-stream key1 key2)   (let ((s (get key1 key2)))     (if s s the-empty-stream)))</code></p>
<p></p>
<p></p>
<p>Rules are stored similarly, using the <code>car</code> of the rule conclusion. Rule conclusions are arbitrary patterns, however, so they differ from assertions in that they can contain variables. A pattern whose <code>car</code> is a constant symbol can match rules whose conclusions start with a variable as well as rules whose conclusions have the same <code>car</code>. Thus, when fetching rules that might match a pattern whose <code>car</code> is a constant symbol we fetch all rules whose conclusions start with a variable as well as those whose conclusions have the same <code>car</code> as the pattern. For this purpose we store all rules whose conclusions start with a variable in a separate stream in our table, indexed by the symbol <code>?</code>.</p>
<p></p>
<p></p>
<p><code>(define THE-RULES the-empty-stream) (define (fetch-rules pattern frame)   (if (use-index? pattern)       (get-indexed-rules pattern)       (get-all-rules))) (define (get-all-rules) THE-RULES) (define (get-indexed-rules pattern)   (stream-append    (get-stream (index-key-of pattern) 'rule-stream)    (get-stream '? 'rule-stream)))</code></p>
<p></p>
<p></p>
<p><code>Add-rule-or-assertion!</code> is used by <code>query-driver-loop</code> to add assertions and rules to the data base. Each item is stored in the index, if appropriate, and in a stream of all assertions or rules in the data base.</p>
<p></p>
<p></p>
<p><code>(define (add-rule-or-assertion! assertion)   (if (rule? assertion)       (add-rule! assertion)       (add-assertion! assertion))) (define (add-assertion! assertion)   (store-assertion-in-index assertion)   (let ((old-assertions THE-ASSERTIONS))     (set! THE-ASSERTIONS           (cons-stream assertion old-assertions))     'ok)) (define (add-rule! rule)   (store-rule-in-index rule)   (let ((old-rules THE-RULES))     (set! THE-RULES (cons-stream rule old-rules))     'ok))</code></p>
<p></p>
<p></p>
<p>To actually store an assertion or a rule, we check to see if it can be indexed. If so, we store it in the appropriate stream.</p>
<p></p>
<p></p>
<p><code>(define (store-assertion-in-index assertion)   (if (indexable? assertion)       (let ((key (index-key-of assertion)))         (let ((current-assertion-stream                (get-stream key 'assertion-stream)))           (put key                'assertion-stream                (cons-stream assertion                             current-assertion-stream)))))) (define (store-rule-in-index rule)   (let ((pattern (conclusion rule)))     (if (indexable? pattern)         (let ((key (index-key-of pattern)))           (let ((current-rule-stream                  (get-stream key 'rule-stream)))             (put key                  'rule-stream                  (cons-stream rule                               current-rule-stream)))))))</code></p>
<p></p>
<p></p>
<p>The following procedures define how the data-base index is used. A pattern (an assertion or a rule conclusion) will be stored in the table if it starts with a variable or a constant symbol.</p>
<p></p>
<p></p>
<p><code>(define (indexable? pat)   (or (constant-symbol? (car pat))       (var? (car pat))))</code></p>
<p></p>
<p>The key under which a pattern is stored in the table is either <code>?</code> (if it starts with a variable) or the constant symbol with which it starts.</p>
<p></p>
<p></p>
<p><code>(define (index-key-of pat)   (let ((key (car pat)))     (if (var? key) '? key)))</code></p>
<p></p>
<p>The index will be used to retrieve items that might match a pattern if the pattern starts with a constant symbol.</p>
<p></p>
<p></p>
<p><code>(define (use-index? pat)   (constant-symbol? (car pat)))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.70.</strong>  What is the purpose of the <code>let</code> bindings in the procedures <code>add-assertion!</code> and <code>add-rule!</code> ? What would be wrong with the following implementation of <code>add-assertion!</code> ? Hint: Recall the definition of the infinite stream of ones in section <a href="book-Z-H-24.html#%_sec_3.5.2">3.5.2</a>: <code>(define ones (cons-stream 1 ones))</code>.</p>
<p></p>
<p></p>
<p><code>(define (add-assertion! assertion)   (store-assertion-in-index assertion)   (set! THE-ASSERTIONS         (cons-stream assertion THE-ASSERTIONS))   'ok)</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_4.4.4.6">4.4.4.6  Stream Operations</a></h4>
<p>The query system uses a few stream operations that were not presented in chapter 3.</p>
<p><code>Stream-append-delayed</code> and <code>interleave-delayed</code> are just like <code>stream-append</code> and <code>interleave</code> (section <a href="book-Z-H-24.html#%_sec_3.5.3">3.5.3</a>), except that they take a delayed argument (like the <code>integral</code> procedure in section <a href="book-Z-H-24.html#%_sec_3.5.4">3.5.4</a>). This postpones looping in some cases (see exercise <a href="#%_thm_4.71">4.71</a>).</p>
<p></p>
<p></p>
<p><code>(define (stream-append-delayed s1 delayed-s2)   (if (stream-null? s1)       (force delayed-s2)       (cons-stream        (stream-car s1)        (stream-append-delayed (stream-cdr s1) delayed-s2)))) (define (interleave-delayed s1 delayed-s2)   (if (stream-null? s1)       (force delayed-s2)       (cons-stream        (stream-car s1)        (interleave-delayed (force delayed-s2)                            (delay (stream-cdr s1))))))</code></p>
<p></p>
<p></p>
<p><code>Stream-flatmap</code>, which is used throughout the query evaluator to map a procedure over a stream of frames and combine the resulting streams of frames, is the stream analog of the <code>flatmap</code> procedure introduced for ordinary lists in section <a href="book-Z-H-15.html#%_sec_2.2.3">2.2.3</a>. Unlike ordinary <code>flatmap</code>, however, we accumulate the streams with an interleaving process, rather than simply appending them (see exercises <a href="#%_thm_4.72">4.72</a> and  <a href="#%_thm_4.73">4.73</a>).</p>
<p></p>
<p></p>
<p><code>(define (stream-flatmap proc s)   (flatten-stream (stream-map proc s))) (define (flatten-stream stream)   (if (stream-null? stream)       the-empty-stream       (interleave-delayed        (stream-car stream)        (delay (flatten-stream (stream-cdr stream))))))</code></p>
<p></p>
<p></p>
<p>The evaluator also uses the following simple procedure to generate a stream consisting of a single element:</p>
<p></p>
<p></p>
<p><code>(define (singleton-stream x)   (cons-stream x the-empty-stream))</code></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_4.4.4.7">4.4.4.7  Query Syntax Procedures</a></h4>
<p><code>Type</code> and <code>contents</code>, used by <code>qeval</code> (section <a href="#%_sec_4.4.4.2">4.4.4.2</a>), specify that a special form is identified by the symbol in its <code>car</code>. They are the same as the <code>type-tag</code> and <code>contents</code> procedures in section <a href="book-Z-H-17.html#%_sec_2.4.2">2.4.2</a>, except for the error message.</p>
<p></p>
<p></p>
<p><code>(define (type exp)   (if (pair? exp)       (car exp)       (error &quot;Unknown expression TYPE&quot; exp))) (define (contents exp)   (if (pair? exp)       (cdr exp)       (error &quot;Unknown expression CONTENTS&quot; exp)))</code></p>
<p></p>
<p></p>
<p>The following procedures, used by <code>query-driver-loop</code> (in section <a href="#%_sec_4.4.4.1">4.4.4.1</a>), specify that rules and assertions are added to the data base by expressions of the form <code>(assert! &lt;rule-or-assertion&gt;):</code></p>
<p></p>
<p></p>
<p><code>(define (assertion-to-be-added? exp)   (eq? (type exp) 'assert!)) (define (add-assertion-body exp)   (car (contents exp)))</code></p>
<p></p>
<p></p>
<p>Here are the syntax definitions for the <code>and</code>, <code>or</code>, <code>not</code>, and <code>lisp-value</code> special forms (section <a href="#%_sec_4.4.4.2">4.4.4.2</a>):</p>
<p></p>
<p></p>
<p><code>(define (empty-conjunction? exps) (null? exps)) (define (first-conjunct exps) (car exps)) (define (rest-conjuncts exps) (cdr exps)) (define (empty-disjunction? exps) (null? exps)) (define (first-disjunct exps) (car exps)) (define (rest-disjuncts exps) (cdr exps)) (define (negated-query exps) (car exps)) (define (predicate exps) (car exps)) (define (args exps) (cdr exps))</code></p>
<p></p>
<p></p>
<p>The following three procedures define the syntax of rules:</p>
<p></p>
<p></p>
<p><code>(define (rule? statement)   (tagged-list? statement 'rule)) (define (conclusion rule) (cadr rule)) (define (rule-body rule)   (if (null? (cddr rule))       '(always-true)       (caddr rule)))</code></p>
<p></p>
<p></p>
<p><code>Query-driver-loop</code> (section <a href="#%_sec_4.4.4.1">4.4.4.1</a>) calls <code>query-syntax-process</code> to transform pattern variables in the expression, which have the form <code>?symbol</code>, into the internal format <code>(? symbol)</code>. That is to say, a pattern such as <code>(job ?x ?y)</code> is actually represented internally by the system as <code>(job (? x) (? y))</code>. This increases the efficiency of query processing, since it means that the system can check to see if an expression is a pattern variable by checking whether the <code>car</code> of the expression is the symbol <code>?</code>, rather than having to extract characters from the symbol. The syntax transformation is accomplished by the following procedure:<a href="#footnote_Temp_702"><sup>81</sup></a></p>
<p></p>
<p></p>
<p><code>(define (query-syntax-process exp)   (map-over-symbols expand-question-mark exp)) (define (map-over-symbols proc exp)   (cond ((pair? exp)          (cons (map-over-symbols proc (car exp))                (map-over-symbols proc (cdr exp))))         ((symbol? exp) (proc exp))         (else exp))) (define (expand-question-mark symbol)   (let ((chars (symbol-&gt;string symbol)))     (if (string=? (substring chars 0 1) &quot;?&quot;)         (list '?               (string-&gt;symbol                (substring chars 1 (string-length chars))))         symbol)))</code></p>
<p></p>
<p></p>
<p>Once the variables are transformed in this way, the variables in a pattern are lists starting with <code>?</code>, and the constant symbols (which need to be recognized for data-base indexing, section <a href="#%_sec_4.4.4.5">4.4.4.5</a>) are just the symbols.</p>
<p></p>
<p></p>
<p><code>(define (var? exp)   (tagged-list? exp '?)) (define (constant-symbol? exp) (symbol? exp))</code></p>
<p></p>
<p></p>
<p>Unique variables are constructed during rule application (in section <a href="#%_sec_4.4.4.4">4.4.4.4</a>) by means of the following procedures. The unique identifier for a rule application is a number, which is incremented each time a rule is applied.</p>
<p></p>
<p></p>
<p><code>(define rule-counter 0) (define (new-rule-application-id)   (set! rule-counter (+ 1 rule-counter))   rule-counter) (define (make-new-variable var rule-application-id)   (cons '? (cons rule-application-id (cdr var))))</code></p>
<p></p>
<p></p>
<p>When <code>query-driver-loop</code> instantiates the query to print the answer, it converts any unbound pattern variables back to the right form for printing, using</p>
<p></p>
<p></p>
<p><code>(define (contract-question-mark variable)   (string-&gt;symbol    (string-append &quot;?&quot;       (if (number? (cadr variable))          (string-append (symbol-&gt;string (caddr variable))                         &quot;-&quot;                         (number-&gt;string (cadr variable)))          (symbol-&gt;string (cadr variable))))))</code></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_4.4.4.8">4.4.4.8  Frames and Bindings</a></h4>
<p></p>
<p>Frames are represented as lists of bindings, which are variable-value pairs:</p>
<p></p>
<p></p>
<p><code>(define (make-binding variable value)   (cons variable value)) (define (binding-variable binding)   (car binding)) (define (binding-value binding)   (cdr binding)) (define (binding-in-frame variable frame)   (assoc variable frame)) (define (extend variable value frame)   (cons (make-binding variable value) frame))</code></p>
<p></p>
<p></p>
<p><strong>Exercise 4.71.</strong>  Louis Reasoner wonders why the <code>simple-query</code> and <code>disjoin</code> procedures (section <a href="#%_sec_4.4.4.2">4.4.4.2</a>) are implemented using explicit <code>delay</code> operations, rather than being defined as follows:</p>
<p></p>
<p></p>
<p><code>(define (simple-query query-pattern frame-stream)   (stream-flatmap    (lambda (frame)      (stream-append (find-assertions query-pattern frame)                     (apply-rules query-pattern frame)))    frame-stream)) (define (disjoin disjuncts frame-stream)   (if (empty-disjunction? disjuncts)       the-empty-stream       (interleave        (qeval (first-disjunct disjuncts) frame-stream)        (disjoin (rest-disjuncts disjuncts) frame-stream))))</code></p>
<p></p>
<p>Can you give examples of queries where these simpler definitions would lead to undesirable behavior?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.72.</strong>  Why do <code>disjoin</code> and <code>stream-flatmap</code> interleave the streams rather than simply append them? Give examples that illustrate why interleaving works better. (Hint: Why did we use <code>interleave</code> in section <a href="book-Z-H-24.html#%_sec_3.5.3">3.5.3</a>?)</p>
<p></p>
<p></p>
<p><strong>Exercise 4.73.</strong>  Why does <code>flatten-stream</code> use <code>delay</code> explicitly? What would be wrong with defining it as follows:</p>
<p></p>
<p><code>(define (flatten-stream stream)   (if (stream-null? stream)       the-empty-stream       (interleave        (stream-car stream)        (flatten-stream (stream-cdr stream)))))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 4.74.</strong>  Alyssa P. Hacker proposes to use a simpler version of <code>stream-flatmap</code> in <code>negate</code>, <code>lisp-value</code>, and <code>find-assertions</code>. She observes that the procedure that is mapped over the frame stream in these cases always produces either the empty stream or a singleton stream, so no interleaving is needed when combining these streams.</p>
<p></p>
<p></p>
<p>a. Fill in the missing expressions in Alyssa's program.</p>
<p></p>
<p><code>(define (simple-stream-flatmap proc s)   (simple-flatten (stream-map proc s)))  (define (simple-flatten stream)   (stream-map &lt;??&gt;               (stream-filter &lt;??&gt; stream)))</code></p>
<p></p>
<p></p>
<p></p>
<p>b. Does the query system's behavior change if we change it in this way?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.75.</strong>  Implement for the query language a new special form called <code>unique</code>. <code>Unique</code> should succeed if there is precisely one item in the data base satisfying a specified query. For example,</p>
<p></p>
<p></p>
<p><code>(unique (job ?x (computer wizard)))</code></p>
<p></p>
<p>should print the one-item stream</p>
<p></p>
<p></p>
<p><code>(unique (job (Bitdiddle Ben) (computer wizard)))</code></p>
<p></p>
<p>since Ben is the only computer wizard, and</p>
<p></p>
<p></p>
<p><code>(unique (job ?x (computer programmer)))</code></p>
<p></p>
<p>should print the empty stream, since there is more than one computer programmer. Moreover,</p>
<p></p>
<p></p>
<p><code>(and (job ?x ?j) (unique (job ?anyone ?j)))</code></p>
<p></p>
<p>should list all the jobs that are filled by only one person, and the people who fill them.</p>
<p>There are two parts to implementing <code>unique</code>. The first is to write a procedure that handles this special form, and the second is to make <code>qeval</code> dispatch to that procedure. The second part is trivial, since <code>qeval</code> does its dispatching in a data-directed way. If your procedure is called <code>uniquely-asserted</code>, all you need to do is</p>
<p></p>
<p></p>
<p><code>(put 'unique 'qeval uniquely-asserted)</code></p>
<p></p>
<p>and <code>qeval</code> will dispatch to this procedure for every query whose <code>type</code> (<code>car</code>) is the symbol <code>unique</code>.</p>
<p>The real problem is to write the procedure <code>uniquely-asserted</code>. This should take as input the <code>contents</code> (<code>cdr</code>) of the <code>unique</code> query, together with a stream of frames. For each frame in the stream, it should use <code>qeval</code> to find the stream of all extensions to the frame that satisfy the given query. Any stream that does not have exactly one item in it should be eliminated. The remaining streams should be passed back to be accumulated into one big stream that is the result of the <code>unique</code> query. This is similar to the implementation of the <code>not</code> special form.</p>
<p>Test your implementation by forming a query that lists all people who supervise precisely one person.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.76.</strong>  Our implementation of <code>and</code> as a series combination of queries (figure <a href="#%_fig_4.5">4.5</a>) is elegant, but it is inefficient because in processing the second query of the <code>and</code> we must scan the data base for each frame produced by the first query. If the data base has <em>N</em> elements, and a typical query produces a number of output frames proportional to <em>N</em> (say <em>N</em>/<em>k</em>), then scanning the data base for each frame produced by the first query will require <em>N</em><sup>2</sup>/<em>k</em> calls to the pattern matcher. Another approach would be to process the two clauses of the <code>and</code> separately, then look for all pairs of output frames that are compatible. If each query produces <em>N</em>/<em>k</em> output frames, then this means that we must perform <em>N</em><sup>2</sup>/<em>k</em><sup>2</sup> compatibility checks -- a factor of <em>k</em> fewer than the number of matches required in our current method.</p>
<p>Devise an implementation of <code>and</code> that uses this strategy. You must implement a procedure that takes two frames as inputs, checks whether the bindings in the frames are compatible, and, if so, produces a frame that merges the two sets of bindings. This operation is similar to unification.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.77.</strong>  In section <a href="#%_sec_4.4.3">4.4.3</a> we saw that <code>not</code> and <code>lisp-value</code> can cause the query language to give ``wrong'' answers if these filtering operations are applied to frames in which variables are unbound. Devise a way to fix this shortcoming. One idea is to perform the filtering in a ``delayed'' manner by appending to the frame a ``promise'' to filter that is fulfilled only when enough variables have been bound to make the operation possible. We could wait to perform filtering until all other operations have been performed. However, for efficiency's sake, we would like to perform filtering as soon as possible so as to cut down on the number of intermediate frames generated.</p>
<p></p>
<p></p>
<p><strong>Exercise 4.78.</strong>  Redesign the query language as a nondeterministic program to be implemented using the evaluator of section <a href="book-Z-H-28.html#%_sec_4.3">4.3</a>, rather than as a stream process. In this approach, each query will produce a single answer (rather than the stream of all answers) and the user can type <code>try-again</code> to see more answers. You should find that much of the mechanism we built in this section is subsumed by nondeterministic search and backtracking. You will probably also find, however, that your new query language has subtle differences in behavior from the one implemented here. Can you find examples that illustrate this difference?</p>
<p></p>
<p></p>
<p><strong>Exercise 4.79.</strong>  When we implemented the Lisp evaluator in section <a href="book-Z-H-26.html#%_sec_4.1">4.1</a>, we saw how to use local environments to avoid name conflicts between the parameters of procedures. For example, in evaluating</p>
<p></p>
<p></p>
<p><code>(define (square x)   (* x x)) (define (sum-of-squares x y)   (+ (square x) (square y))) (sum-of-squares 3 4)</code></p>
<p></p>
<p>there is no confusion between the <code>x</code> in <code>square</code> and the <code>x</code> in <code>sum-of-squares</code>, because we evaluate the body of each procedure in an environment that is specially constructed to contain bindings for the local variables. In the query system, we used a different strategy to avoid name conflicts in applying rules. Each time we apply a rule we rename the variables with new names that are guaranteed to be unique. The analogous strategy for the Lisp evaluator would be to do away with local environments and simply rename the variables in the body of a procedure each time we apply the procedure.</p>
<p>Implement for the query language a rule-application method that uses environments rather than renaming. See if you can build on your environment structure to create constructs in the query language for dealing with large systems, such as the rule analog of block-structured procedures. Can you relate any of this to the problem of making deductions in a context (e.g., ``If I supposed that <em>P</em> were true, then I would be able to deduce <em>A</em> and <em>B</em>.'') as a method of problem solving? (This problem is open-ended. A good answer is probably worth a Ph.D.)</p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_645"><sup>58</sup></a> Logic programming has grown out of a long history of research in automatic theorem proving. Early theorem-proving programs could accomplish very little, because they exhaustively searched the space of possible proofs. The major breakthrough that made such a search plausible was the discovery in the early 1960s of the <em>unification algorithm</em> and the <em>resolution principle</em> (Robinson 1965). Resolution was used, for example, by Green and Raphael (1968) (see also Green 1969) as the basis for a deductive question-answering system. During most of this period, researchers concentrated on algorithms that are guaranteed to find a proof if one exists. Such algorithms were difficult to control and to direct toward a proof. Hewitt (1969) recognized the possibility of merging the control structure of a programming language with the operations of a logic-manipulation system, leading to the work in automatic search mentioned in section <a href="book-Z-H-28.html#%_sec_4.3.1">4.3.1</a> (footnote <a href="book-Z-H-28.html#footnote_Temp_603">47</a>). At the same time that this was being done, Colmerauer, in Marseille, was developing rule-based systems for manipulating natural language (see Colmerauer et al. 1973). He invented a programming language called Prolog for representing those rules. Kowalski (1973; 1979), in Edinburgh, recognized that execution of a Prolog program could be interpreted as proving theorems (using a proof technique called linear Horn-clause resolution). The merging of the last two strands led to the logic-programming movement. Thus, in assigning credit for the development of logic programming, the French can point to Prolog's genesis at the University of Marseille, while the British can highlight the work at the University of Edinburgh. According to people at MIT, logic programming was developed by these groups in an attempt to figure out what Hewitt was talking about in his brilliant but impenetrable Ph.D. thesis. For a history of logic programming, see Robinson 1983.</p>
<p><a href="#call_footnote_Temp_646"><sup>59</sup></a> To see the correspondence between the rules and the procedure, let <code>x</code> in the procedure (where <code>x</code> is nonempty) correspond to <code>(cons u v)</code> in the rule. Then <code>z</code> in the rule corresponds to the <code>append</code> of <code>(cdr x)</code> and <code>y</code>.</p>
<p><a href="#call_footnote_Temp_647"><sup>60</sup></a> This certainly does not relieve the user of the entire problem of how to compute the answer. There are many different mathematically equivalent sets of rules for formulating the <code>append</code> relation, only some of which can be turned into effective devices for computing in any direction. In addition, sometimes ``what is'' information gives no clue ``how to'' compute an answer. For example, consider the problem of computing the <em>y</em> such that <em>y</em><sup>2</sup> = <em>x</em>.</p>
<p><a href="#call_footnote_Temp_648"><sup>61</sup></a> Interest in logic programming peaked during the early 80s when the Japanese government began an ambitious project aimed at building superfast computers optimized to run logic programming languages. The speed of such computers was to be measured in LIPS (Logical Inferences Per Second) rather than the usual FLOPS (FLoating-point Operations Per Second). Although the project succeeded in developing hardware and software as originally planned, the international computer industry moved in a different direction. See Feigenbaum and Shrobe 1993 for an overview evaluation of the Japanese project. The logic programming community has also moved on to consider relational programming based on techniques other than simple pattern matching, such as the ability to deal with numerical constraints such as the ones illustrated in the constraint-propagation system of section <a href="book-Z-H-22.html#%_sec_3.3.5">3.3.5</a>.</p>
<p><a href="#call_footnote_Temp_651"><sup>62</sup></a> This uses the dotted-tail notation introduced in exercise <a href="book-Z-H-15.html#%_thm_2.20">2.20</a>.</p>
<p><a href="#call_footnote_Temp_654"><sup>63</sup></a> Actually, this description of <code>not</code> is valid only for simple cases. The real behavior of <code>not</code> is more complex. We will examine <code>not</code>'s peculiarities in sections <a href="#%_sec_4.4.2">4.4.2</a> and <a href="#%_sec_4.4.3">4.4.3</a>.</p>
<p><a href="#call_footnote_Temp_655"><sup>64</sup></a> <code>Lisp-value</code> should be used only to perform an operation not provided in the query language. In particular, it should not be used to test equality (since that is what the matching in the query language is designed to do) or inequality (since that can be done with the <code>same</code> rule shown below).</p>
<p><a href="#call_footnote_Temp_658"><sup>65</sup></a> Notice that we do not need <code>same</code> in order to make two things be the same: We just use the same pattern variable for each -- in effect, we have one thing instead of two things in the first place. For example, see <code>?town</code> in the <code>lives-near</code> rule and <code>?middle-manager</code> in the <code>wheel</code> rule below. <code>Same</code> is useful when we want to force two things to be different, such as <code>?person-1</code> and <code>?person-2</code> in the <code>lives-near</code> rule. Although using the same pattern variable in two parts of a query forces the same value to appear in both places, using different pattern variables does not force different values to appear. (The values assigned to different pattern variables may be the same or different.)</p>
<p><a href="#call_footnote_Temp_659"><sup>66</sup></a> We will also allow rules without bodies, as in <code>same</code>, and we will interpret such a rule to mean that the rule conclusion is satisfied by any values of the variables.</p>
<p><a href="#call_footnote_Temp_670"><sup>67</sup></a> Because matching is generally very expensive, we would like to avoid applying the full matcher to every element of the data base. This is usually arranged by breaking up the process into a fast, coarse match and the final match. The coarse match filters the data base to produce a small set of candidates for the final match. With care, we can arrange our data base so that some of the work of coarse matching can be done when the data base is constructed rather then when we want to select the candidates. This is called <em>indexing</em> the data base. There is a vast technology built around data-base-indexing schemes. Our implementation, described in section <a href="#%_sec_4.4.4">4.4.4</a>, contains a simple-minded form of such an optimization.</p>
<p><a href="#call_footnote_Temp_672"><sup>68</sup></a> But this kind of exponential explosion is not common in <code>and</code> queries because the added conditions tend to reduce rather than expand the number of frames produced.</p>
<p><a href="#call_footnote_Temp_673"><sup>69</sup></a> There is a large literature on data-base-management systems that is concerned with how to handle complex queries efficiently.</p>
<p><a href="#call_footnote_Temp_674"><sup>70</sup></a> There is a subtle difference between this filter implementation of <code>not</code> and the usual meaning of <code>not</code> in mathematical logic. See section <a href="#%_sec_4.4.3">4.4.3</a>.</p>
<p><a href="#call_footnote_Temp_676"><sup>71</sup></a> In one-sided pattern matching, all the equations that contain pattern variables are explicit and already solved for the unknown (the pattern variable).</p>
<p><a href="#call_footnote_Temp_677"><sup>72</sup></a> Another way to think of unification is that it generates the most general pattern that is a specialization of the two input patterns. That is, the unification of <code>(?x a)</code> and <code>((b ?y) ?z)</code> is <code>((b ?y) a)</code>, and the unification of <code>(?x a ?y)</code> and <code>(?y ?z a)</code>, discussed above, is <code>(a a a)</code>. For our implementation, it is more convenient to think of the result of unification as a frame rather than a pattern.</p>
<p><a href="#call_footnote_Temp_680"><sup>73</sup></a> Since unification is a generalization of matching, we could simplify the system by using the unifier to produce both streams. Treating the easy case with the simple matcher, however, illustrates how matching (as opposed to full-blown unification) can be useful in its own right.</p>
<p><a href="#call_footnote_Temp_682"><sup>74</sup></a> The reason we use streams (rather than lists) of frames is that the recursive application of rules can generate infinite numbers of values that satisfy a query. The delayed evaluation embodied in streams is crucial here: The system will print responses one by one as they are generated, regardless of whether there are a finite or infinite number of responses.</p>
<p><a href="#call_footnote_Temp_683"><sup>75</sup></a> That a particular method of inference is legitimate is not a trivial assertion. One must prove that if one starts with true premises, only true conclusions can be derived. The method of inference represented by rule applications is <em>modus ponens</em>, the familiar method of inference that says that if <em>A</em> is true and <em>A implies B</em> is true, then we may conclude that <em>B</em> is true.</p>
<p><a href="#call_footnote_Temp_684"><sup>76</sup></a> We must qualify this statement by agreeing that, in speaking of the ``inference'' accomplished by a logic program, we assume that the computation terminates. Unfortunately, even this qualified statement is false for our implementation of the query language (and also false for programs in Prolog and most other current logic programming languages) because of our use of <code>not</code> and <code>lisp-value</code>. As we will describe below, the <code>not</code> implemented in the query language is not always consistent with the <code>not</code> of mathematical logic, and <code>lisp-value</code> introduces additional complications. We could implement a language consistent with mathematical logic by simply removing <code>not</code> and <code>lisp-value</code> from the language and agreeing to write programs using only simple queries, <code>and</code>, and <code>or</code>. However, this would greatly restrict the expressive power of the language. One of the major concerns of research in logic programming is to find ways to achieve more consistency with mathematical logic without unduly sacrificing expressive power.</p>
<p><a href="#call_footnote_Temp_686"><sup>77</sup></a> This is not a problem of the logic but one of the procedural interpretation of the logic provided by our interpreter. We could write an interpreter that would not fall into a loop here. For example, we could enumerate all the proofs derivable from our assertions and our rules in a breadth-first rather than a depth-first order. However, such a system makes it more difficult to take advantage of the order of deductions in our programs. One attempt to build sophisticated control into such a program is described in deKleer et al. 1977. Another technique, which does not lead to such serious control problems, is to put in special knowledge, such as detectors for particular kinds of loops (exercise <a href="#%_thm_4.67">4.67</a>). However, there can be no general scheme for reliably preventing a system from going down infinite paths in performing deductions. Imagine a diabolical rule of the form ``To show <em>P</em>(<em>x</em>) is true, show that <em>P</em>(<em>f</em>(<em>x</em>)) is true,'' for some suitably chosen function <em>f</em>.</p>
<p><a href="#call_footnote_Temp_688"><sup>78</sup></a> Consider the query <code>(not (baseball-fan (Bitdiddle Ben)))</code>. The system finds that <code>(baseball-fan (Bitdiddle Ben))</code> is not in the data base, so the empty frame does not satisfy the pattern and is not filtered out of the initial stream of frames. The result of the query is thus the empty frame, which is used to instantiate the input query to produce <code>(not (baseball-fan (Bitdiddle Ben)))</code>.</p>
<p><a href="#call_footnote_Temp_689"><sup>79</sup></a> A discussion and justification of this treatment of <code>not</code> can be found in the article by Clark (1978).</p>
<p><a href="#call_footnote_Temp_700"><sup>80</sup></a> In general, unifying <code>?y</code> with an expression involving <code>?y</code> would require our being able to find a fixed point of the equation <code>?y</code> = &lt;<em>expression involving <code>?y</code></em>&gt;. It is sometimes possible to syntactically form an expression that appears to be the solution. For example, <code>?y</code>  =  <code>(f ?y)</code> seems to have the fixed point <code>(f (f (f ...</code> ))), which we can produce by beginning with the expression <code>(f ?y)</code> and repeatedly substituting <code>(f ?y)</code> for <code>?y</code>. Unfortunately, not every such equation has a meaningful fixed point. The issues that arise here are similar to the issues of manipulating infinite series in mathematics. For example, we know that 2 is the solution to the equation <em>y</em> = 1 + <em>y</em>/2. Beginning with the expression 1 + <em>y</em>/2 and repeatedly substituting 1 + <em>y</em>/2 for <em>y</em> gives</p>
<p></p>
<p><img src="ch4-Z-G-7.gif" /></p>
<p>which leads to</p>
<p></p>
<p><img src="ch4-Z-G-8.gif" /></p>
<p>However, if we try the same manipulation beginning with the observation that - 1 is the solution to the equation <em>y</em> = 1 + 2<em>y</em>, we obtain</p>
<p></p>
<p><img src="ch4-Z-G-9.gif" /></p>
<p>which leads to</p>
<p></p>
<p><img src="ch4-Z-G-10.gif" /></p>
<p>Although the formal manipulations used in deriving these two equations are identical, the first result is a valid assertion about infinite series but the second is not. Similarly, for our unification results, reasoning with an arbitrary syntactically constructed expression may lead to errors.</p>
<p><a href="#call_footnote_Temp_702"><sup>81</sup></a> Most Lisp systems give the user the ability to modify the ordinary <code>read</code> procedure to perform such transformations by defining <em>reader macro characters</em>. Quoted expressions are already handled in this way: The reader automatically translates <code>'expression</code> into <code>(quote expression)</code> before the evaluator sees it. We could arrange for <code>?expression</code> to be transformed into <code>(? expression)</code> in the same way; however, for the sake of clarity we have included the transformation procedure here explicitly.</p>
<p><code>Expand-question-mark</code> and <code>contract-question-mark</code> use several procedures with <code>string</code> in their names. These are Scheme primitives.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-28.html">previous</a>, <a href="book-Z-H-30.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-29.html">previous</a>, <a href="book-Z-H-31.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h1 class="chapter"></h1>
<p><a href="book-Z-H-4.html#%_toc_%_chap_5">Chapter 5</a></p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_5">Computing with Register Machines</a></p>
<p></p>
<p></p>
<table>
<col width="100%" />
<tbody>
<tr class="odd">
<td align="left"><p>My aim is to show that the heavenly machine is not a kind of divine, live being, but a kind of clockwork (and he who believes that a clock has soul attributes the maker's glory to the work), insofar as nearly all the manifold motions are caused by a most simple and material force, just as all motions of the clock are caused by a single weight.</p>
<p>Johannes Kepler (letter to Herwart von Hohenburg, 1605)</p></td>
</tr>
</tbody>
</table>
<p></p>
<p>We began this book by studying processes and by describing processes in terms of procedures written in Lisp. To explain the meanings of these procedures, we used a succession of models of evaluation: the substitution model of chapter 1, the environment model of chapter 3, and the metacircular evaluator of chapter 4. Our examination of the metacircular evaluator, in particular, dispelled much of the mystery of how Lisp-like languages are interpreted. But even the metacircular evaluator leaves important questions unanswered, because it fails to elucidate the mechanisms of control in a Lisp system. For instance, the evaluator does not explain how the evaluation of a subexpression manages to return a value to the expression that uses this value, nor does the evaluator explain how some recursive procedures generate iterative processes (that is, are evaluated using constant space) whereas other recursive procedures generate recursive processes. These questions remain unanswered because the metacircular evaluator is itself a Lisp program and hence inherits the control structure of the underlying Lisp system. In order to provide a more complete description of the control structure of the Lisp evaluator, we must work at a more primitive level than Lisp itself.</p>
<p>In this chapter we will describe processes in terms of the step-by-step operation of a traditional computer. Such a computer, or <em>register machine</em>, sequentially executes <em>instructions</em> that manipulate the contents of a fixed set of storage elements called <em>registers</em>. A typical register-machine instruction applies a primitive operation to the contents of some registers and assigns the result to another register. Our descriptions of processes executed by register machines will look very much like ``machine-language'' programs for traditional computers. However, instead of focusing on the machine language of any particular computer, we will examine several Lisp procedures and design a specific register machine to execute each procedure. Thus, we will approach our task from the perspective of a hardware architect rather than that of a machine-language computer programmer. In designing register machines, we will develop mechanisms for implementing important programming constructs such as recursion. We will also present a language for describing designs for register machines. In section <a href="book-Z-H-32.html#%_sec_5.2">5.2</a> we will implement a Lisp program that uses these descriptions to simulate the machines we design.</p>
<p>Most of the primitive operations of our register machines are very simple. For example, an operation might add the numbers fetched from two registers, producing a result to be stored into a third register. Such an operation can be performed by easily described hardware. In order to deal with list structure, however, we will also use the memory operations <code>car</code>, <code>cdr</code>, and <code>cons</code>, which require an elaborate storage-allocation mechanism. In section <a href="book-Z-H-33.html#%_sec_5.3">5.3</a> we study their implementation in terms of more elementary operations.</p>
<p>In section <a href="book-Z-H-34.html#%_sec_5.4">5.4</a>, after we have accumulated experience formulating simple procedures as register machines, we will design a machine that carries out the algorithm described by the metacircular evaluator of section <a href="book-Z-H-26.html#%_sec_4.1">4.1</a>. This will fill in the gap in our understanding of how Scheme expressions are interpreted, by providing an explicit model for the mechanisms of control in the evaluator. In section <a href="book-Z-H-35.html#%_sec_5.5">5.5</a> we will study a simple compiler that translates Scheme programs into sequences of instructions that can be executed directly with the registers and operations of the evaluator register machine.</p>
<p></p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-29.html">previous</a>, <a href="book-Z-H-31.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-30.html">previous</a>, <a href="book-Z-H-32.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_5.1">5.1  Designing Register Machines</a></h2>
<p>To design a register machine, we must design its <em>data paths</em> (registers and operations) and the <em>controller</em> that sequences these operations. To illustrate the design of a simple register machine, let us examine Euclid's Algorithm, which is used to compute the greatest common divisor (GCD) of two integers. As we saw in section <a href="book-Z-H-11.html#%_sec_1.2.5">1.2.5</a>, Euclid's Algorithm can be carried out by an iterative process, as specified by the following procedure:</p>
<p></p>
<p></p>
<p><code>(define (gcd a b)   (if (= b 0)       a       (gcd b (remainder a b))))</code></p>
<p></p>
<p></p>
<p>A machine to carry out this algorithm must keep track of two numbers, <em>a</em> and <em>b</em>, so let us assume that these numbers are stored in two registers with those names. The basic operations required are testing whether the contents of register <code>b</code> is zero and computing the remainder of the contents of register <code>a</code> divided by the contents of register <code>b</code>. The remainder operation is a complex process, but assume for the moment that we have a primitive device that computes remainders. On each cycle of the GCD algorithm, the contents of register <code>a</code> must be replaced by the contents of register <code>b</code>, and the contents of <code>b</code> must be replaced by the remainder of the old contents of <code>a</code> divided by the old contents of <code>b</code>. It would be convenient if these replacements could be done simultaneously, but in our model of register machines we will assume that only one register can be assigned a new value at each step. To accomplish the replacements, our machine will use a third ``temporary'' register, which we call <code>t</code>. (First the remainder will be placed in <code>t</code>, then the contents of <code>b</code> will be placed in <code>a</code>, and finally the remainder stored in <code>t</code> will be placed in <code>b</code>.)</p>
<p>We can illustrate the registers and operations required for this machine by using the data-path diagram shown in figure <a href="#%_fig_5.1">5.1</a>. In this diagram, the registers (<code>a</code>, <code>b</code>, and <code>t</code>) are represented by rectangles. Each way to assign a value to a register is indicated by an arrow with an <code>X</code> behind the head, pointing from the source of data to the register. We can think of the <code>X</code> as a button that, when pushed, allows the value at the source to ``flow'' into the designated register. The label next to each button is the name we will use to refer to the button. The names are arbitrary, and can be chosen to have mnemonic value (for example, <code>a&lt;-b</code> denotes pushing the button that assigns the contents of register <code>b</code> to register <code>a</code>). The source of data for a register can be another register (as in the <code>a&lt;-b</code> assignment), an operation result (as in the <code>t&lt;-r</code> assignment), or a constant (a built-in value that cannot be changed, represented in a data-path diagram by a triangle containing the constant).</p>
<p>An operation that computes a value from constants and the contents of registers is represented in a data-path diagram by a trapezoid containing a name for the operation. For example, the box marked <code>rem</code> in figure <a href="#%_fig_5.1">5.1</a> represents an operation that computes the remainder of the contents of the registers <code>a</code> and <code>b</code> to which it is attached. Arrows (without buttons) point from the input registers and constants to the box, and arrows connect the operation's output value to registers. A test is represented by a circle containing a name for the test. For example, our GCD machine has an operation that tests whether the contents of register <code>b</code> is zero. A test also has arrows from its input registers and constants, but it has no output arrows; its value is used by the controller rather than by the data paths. Overall, the data-path diagram shows the registers and operations that are required for the machine and how they must be connected. If we view the arrows as wires and the <code>X</code> buttons as switches, the data-path diagram is very like the wiring diagram for a machine that could be constructed from electrical components.</p>
<p></p>
<p></p>
<p></p>
<p><img src="ch5-Z-G-1.gif" /></p>
<p><strong>Figure 5.1:</strong>  Data paths for a GCD machine.</p>
<p></p>
<p>In order for the data paths to actually compute GCDs, the buttons must be pushed in the correct sequence. We will describe this sequence in terms of a controller diagram, as illustrated in figure <a href="#%_fig_5.2">5.2</a>. The elements of the controller diagram indicate how the data-path components should be operated. The rectangular boxes in the controller diagram identify data-path buttons to be pushed, and the arrows describe the sequencing from one step to the next. The diamond in the diagram represents a decision. One of the two sequencing arrows will be followed, depending on the value of the data-path test identified in the diamond. We can interpret the controller in terms of a physical analogy: Think of the diagram as a maze in which a marble is rolling. When the marble rolls into a box, it pushes the data-path button that is named by the box. When the marble rolls into a decision node (such as the test for <code>b</code> = 0), it leaves the node on the path determined by the result of the indicated test. Taken together, the data paths and the controller completely describe a machine for computing GCDs. We start the controller (the rolling marble) at the place marked <code>start</code>, after placing numbers in registers <code>a</code> and <code>b</code>. When the controller reaches <code>done</code>, we will find the value of the GCD in register <code>a</code>.</p>
<p></p>
<p><img src="ch5-Z-G-2.gif" /></p>
<p><strong>Figure 5.2:</strong>  Controller for a GCD machine.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.1.</strong>  Design a register machine to compute factorials using the iterative algorithm specified by the following procedure. Draw data-path and controller diagrams for this machine.</p>
<p></p>
<p></p>
<p><code>(define (factorial n)   (define (iter product counter)     (if (&gt; counter n)         product         (iter (* counter product)               (+ counter 1))))   (iter 1 1))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.1.1">5.1.1  A Language for Describing Register Machines</a></h3>
<p>Data-path and controller diagrams are adequate for representing simple machines such as GCD, but they are unwieldy for describing large machines such as a Lisp interpreter. To make it possible to deal with complex machines, we will create a language that presents, in textual form, all the information given by the data-path and controller diagrams. We will start with a notation that directly mirrors the diagrams.</p>
<p></p>
<p>We define the data paths of a machine by describing the registers and the operations. To describe a register, we give it a name and specify the buttons that control assignment to it. We give each of these buttons a name and specify the source of the data that enters the register under the button's control. (The source is a register, a constant, or an operation.) To describe an operation, we give it a name and specify its inputs (registers or constants).</p>
<p>We define the controller of a machine as a sequence of <em>instructions</em> together with <em>labels</em> that identify <em>entry points</em> in the sequence. An instruction is one of the following:</p>
<p></p>
<ul>
<li>The name of a data-path button to push to assign a value to a register. (This corresponds to a box in the controller diagram.)</li>
<li>A <code>test</code> instruction, that performs a specified test.</li>
<li>A conditional branch (<code>branch</code> instruction) to a location indicated by a controller label, based on the result of the previous test. (The test and branch together correspond to a diamond in the controller diagram.) If the test is false, the controller should continue with the next instruction in the sequence. Otherwise, the controller should continue with the instruction after the label.</li>
<li>An unconditional branch (<code>goto</code> instruction) naming a controller label at which to continue execution.</li>
</ul>
<p>The machine starts at the beginning of the controller instruction sequence and stops when execution reaches the end of the sequence. Except when a branch changes the flow of control, instructions are executed in the order in which they are listed.</p>
<p></p>
<p></p>
<p></p>
<p><code>(data-paths  (registers   ((name a)    (buttons ((name a&lt;-b) (source (register b)))))   ((name b)    (buttons ((name b&lt;-t) (source (register t)))))   ((name t)    (buttons ((name t&lt;-r) (source (operation rem))))))   (operations   ((name rem)    (inputs (register a) (register b)))   ((name =)    (inputs (register b) (constant 0)))))  (controller  test-b                           ; label    (test =)                       ; test    (branch (label gcd-done))      ; conditional branch    (t&lt;-r)                         ; button push    (a&lt;-b)                         ; button push    (b&lt;-t)                         ; button push    (goto (label test-b))          ; unconditional branch  gcd-done)                        ; label</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.3:</strong>  A specification of the GCD machine.</p>
<p></p>
<p>Figure <a href="#%_fig_5.3">5.3</a> shows the GCD machine described in this way. This example only hints at the generality of these descriptions, since the GCD machine is a very simple case: Each register has only one button, and each button and test is used only once in the controller.</p>
<p>Unfortunately, it is difficult to read such a description. In order to understand the controller instructions we must constantly refer back to the definitions of the button names and the operation names, and to understand what the buttons do we may have to refer to the definitions of the operation names. We will thus transform our notation to combine the information from the data-path and controller descriptions so that we see it all together.</p>
<p>To obtain this form of description, we will replace the arbitrary button and operation names by the definitions of their behavior. That is, instead of saying (in the controller) ``Push button <code>t&lt;-r</code>'' and separately saying (in the data paths) ``Button <code>t&lt;-r</code> assigns the value of the <code>rem</code> operation to register <code>t</code>'' and ``The <code>rem</code> operation's inputs are the contents of registers <code>a</code> and <code>b</code>,'' we will say (in the controller) ``Push the button that assigns to register <code>t</code> the value of the <code>rem</code> operation on the contents of registers <code>a</code> and <code>b</code>.'' Similarly, instead of saying (in the controller) ``Perform the <code>=</code> test'' and separately saying (in the data paths) ``The <code>=</code> test operates on the contents of register <code>b</code> and the constant 0,'' we will say ``Perform the <code>=</code> test on the contents of register <code>b</code> and the constant 0.'' We will omit the data-path description, leaving only the controller sequence. Thus, the GCD machine is described as follows:</p>
<p></p>
<p></p>
<p><code>(controller  test-b    (test (op =) (reg b) (const 0))    (branch (label gcd-done))    (assign t (op rem) (reg a) (reg b))    (assign a (reg b))    (assign b (reg t))    (goto (label test-b))  gcd-done)</code></p>
<p></p>
<p></p>
<p>This form of description is easier to read than the kind illustrated in figure <a href="#%_fig_5.3">5.3</a>, but it also has disadvantages:</p>
<p></p>
<ul>
<li>It is more verbose for large machines, because complete descriptions of the data-path elements are repeated whenever the elements are mentioned in the controller instruction sequence. (This is not a problem in the GCD example, because each operation and button is used only once.) Moreover, repeating the data-path descriptions obscures the actual data-path structure of the machine; it is not obvious for a large machine how many registers, operations, and buttons there are and how they are interconnected.</li>
<li>Because the controller instructions in a machine definition look like Lisp expressions, it is easy to forget that they are not arbitrary Lisp expressions. They can notate only legal machine operations. For example, operations can operate directly only on constants and the contents of registers, not on the results of other operations.</li>
</ul>
<p>In spite of these disadvantages, we will use this register-machine language throughout this chapter, because we will be more concerned with understanding controllers than with understanding the elements and connections in data paths. We should keep in mind, however, that data-path design is crucial in designing real machines.</p>
<p></p>
<p><strong>Exercise 5.2.</strong>  Use the register-machine language to describe the iterative factorial machine of exercise <a href="#%_thm_5.1">5.1</a>.</p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_714">Actions</a></h4>
<p>Let us modify the GCD machine so that we can type in the numbers whose GCD we want and get the answer printed at our terminal. We will not discuss how to make a machine that can read and print, but will assume (as we do when we use <code>read</code> and <code>display</code> in Scheme) that they are available as primitive operations.<a href="#footnote_Temp_715"><sup>1</sup></a></p>
<p><code>Read</code> is like the operations we have been using in that it produces a value that can be stored in a register. But <code>read</code> does not take inputs from any registers; its value depends on something that happens outside the parts of the machine we are designing. We will allow our machine's operations to have such behavior, and thus will draw and notate the use of <code>read</code> just as we do any other operation that computes a value.</p>
<p><code>Print</code>, on the other hand, differs from the operations we have been using in a fundamental way: It does not produce an output value to be stored in a register. Though it has an effect, this effect is not on a part of the machine we are designing. We will refer to this kind of operation as an <em>action</em>. We will represent an action in a data-path diagram just as we represent an operation that computes a value -- as a trapezoid that contains the name of the action. Arrows point to the action box from any inputs (registers or constants). We also associate a button with the action. Pushing the button makes the action happen. To make a controller push an action button we use a new kind of instruction called <code>perform</code>. Thus, the action of printing the contents of register <code>a</code> is represented in a controller sequence by the instruction</p>
<p></p>
<p></p>
<p><code>(perform (op print) (reg a))</code></p>
<p></p>
<p></p>
<p>Figure <a href="#%_fig_5.4">5.4</a> shows the data paths and controller for the new GCD machine. Instead of having the machine stop after printing the answer, we have made it start over, so that it repeatedly reads a pair of numbers, computes their GCD, and prints the result. This structure is like the driver loops we used in the interpreters of chapter 4.</p>
<p></p>
<p></p>
<p><img src="ch5-Z-G-3.gif" /></p>
<p></p>
<p><code> (controller   gcd-loop     (assign a (op read))     (assign b (op read))   test-b     (test (op =) (reg b) (const 0))     (branch (label gcd-done))     (assign t (op rem) (reg a) (reg b))     (assign a (reg b))     (assign b (reg t))     (goto (label test-b))   gcd-done     (perform (op print) (reg a))     (goto (label gcd-loop)))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.4:</strong>  A GCD machine that reads inputs and prints results.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.1.2">5.1.2  Abstraction in Machine Design</a></h3>
<p>We will often define a machine to include ``primitive'' operations that are actually very complex. For example, in sections <a href="book-Z-H-34.html#%_sec_5.4">5.4</a> and <a href="book-Z-H-35.html#%_sec_5.5">5.5</a> we will treat Scheme's environment manipulations as primitive. Such abstraction is valuable because it allows us to ignore the details of parts of a machine so that we can concentrate on other aspects of the design. The fact that we have swept a lot of complexity under the rug, however, does not mean that a machine design is unrealistic. We can always replace the complex ``primitives'' by simpler primitive operations.</p>
<p>Consider the GCD machine. The machine has an instruction that computes the remainder of the contents of registers <code>a</code> and <code>b</code> and assigns the result to register <code>t</code>. If we want to construct the GCD machine without using a primitive remainder operation, we must specify how to compute remainders in terms of simpler operations, such as subtraction. Indeed, we can write a Scheme procedure that finds remainders in this way:</p>
<p></p>
<p></p>
<p><code>(define (remainder n d)   (if (&lt; n d)       n       (remainder (- n d) d)))</code></p>
<p></p>
<p>We can thus replace the remainder operation in the GCD machine's data paths with a subtraction operation and a comparison test. Figure <a href="#%_fig_5.5">5.5</a> shows the data paths and controller for the elaborated machine. The instruction</p>
<p></p>
<p></p>
<p><img src="ch5-Z-G-4.gif" /></p>
<p><strong>Figure 5.5:</strong>  Data paths and controller for the elaborated GCD machine.</p>
<p></p>
<p></p>
<p></p>
<p><code>(assign t (op rem) (reg a) (reg b))</code></p>
<p></p>
<p>in the GCD controller definition is replaced by a sequence of instructions that contains a loop, as shown in figure <a href="#%_fig_5.6">5.6</a>.</p>
<p></p>
<p></p>
<p></p>
<p><code>(controller  test-b    (test (op =) (reg b) (const 0))    (branch (label gcd-done))    (assign t (reg a))  rem-loop    (test (op &lt;) (reg t) (reg b))    (branch (label rem-done))    (assign t (op -) (reg t) (reg b))    (goto (label rem-loop))  rem-done    (assign a (reg b))    (assign b (reg t))    (goto (label test-b))  gcd-done)</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.6:</strong>  Controller instruction sequence for the GCD machine in figure <a href="#%_fig_5.5">5.5</a>.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.3.</strong>  Design a machine to compute square roots using Newton's method, as described in section <a href="book-Z-H-10.html#%_sec_1.1.7">1.1.7</a>:</p>
<p></p>
<p></p>
<p><code>(define (sqrt x)   (define (good-enough? guess)     (&lt; (abs (- (square guess) x)) 0.001))   (define (improve guess)     (average guess (/ x guess)))   (define (sqrt-iter guess)     (if (good-enough? guess)         guess         (sqrt-iter (improve guess))))   (sqrt-iter 1.0))</code></p>
<p></p>
<p>Begin by assuming that <code>good-enough?</code> and <code>improve</code> operations are available as primitives. Then show how to expand these in terms of arithmetic operations. Describe each version of the <code>sqrt</code> machine design by drawing a data-path diagram and writing a controller definition in the register-machine language.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.1.3">5.1.3  Subroutines</a></h3>
<p>When designing a machine to perform a computation, we would often prefer to arrange for components to be shared by different parts of the computation rather than duplicate the components. Consider a machine that includes two GCD computations -- one that finds the GCD of the contents of registers <code>a</code> and <code>b</code> and one that finds the GCD of the contents of registers <code>c</code> and <code>d</code>. We might start by assuming we have a primitive <code>gcd</code> operation, then expand the two instances of <code>gcd</code> in terms of more primitive operations. Figure <a href="#%_fig_5.7">5.7</a> shows just the GCD portions of the resulting machine's data paths, without showing how they connect to the rest of the machine. The figure also shows the corresponding portions of the machine's controller sequence.</p>
<p></p>
<p></p>
<p><img src="ch5-Z-G-5.gif" /></p>
<p></p>
<p><code>gcd-1  (test (op =) (reg b) (const 0))  (branch (label after-gcd-1))  (assign t (op rem) (reg a) (reg b))  (assign a (reg b))  (assign b (reg t))  (goto (label gcd-1)) after-gcd-1      gcd-2  (test (op =) (reg d) (const 0))  (branch (label after-gcd-2))  (assign s (op rem) (reg c) (reg d))  (assign c (reg d))  (assign d (reg s))  (goto (label gcd-2)) after-gcd-2</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.7:</strong>  Portions of the data paths and controller sequence for a machine with two GCD computations.</p>
<p></p>
<p>This machine has two remainder operation boxes and two boxes for testing equality. If the duplicated components are complicated, as is the remainder box, this will not be an economical way to build the machine. We can avoid duplicating the data-path components by using the same components for both GCD computations, provided that doing so will not affect the rest of the larger machine's computation. If the values in registers <code>a</code> and <code>b</code> are not needed by the time the controller gets to <code>gcd-2</code> (or if these values can be moved to other registers for safekeeping), we can change the machine so that it uses registers <code>a</code> and <code>b</code>, rather than registers <code>c</code> and <code>d</code>, in computing the second GCD as well as the first. If we do this, we obtain the controller sequence shown in figure <a href="#%_fig_5.8">5.8</a>.</p>
<p>We have removed the duplicate data-path components (so that the data paths are again as in figure <a href="#%_fig_5.1">5.1</a>), but the controller now has two GCD sequences that differ only in their entry-point labels. It would be better to replace these two sequences by branches to a single sequence -- a <code>gcd</code> <em>subroutine</em> -- at the end of which we branch back to the correct place in the main instruction sequence. We can accomplish this as follows: Before branching to <code>gcd</code>, we place a distinguishing value (such as 0 or 1) into a special register, <code>continue</code>. At the end of the <code>gcd</code> subroutine we return either to <code>after-gcd-1</code> or to <code>after-gcd-2</code>, depending on the value of the <code>continue</code> register. Figure <a href="#%_fig_5.9">5.9</a> shows the relevant portion of the resulting controller sequence, which includes only a single copy of the <code>gcd</code> instructions.</p>
<p></p>
<p></p>
<p></p>
<p><code>gcd-1  (test (op =) (reg b) (const 0))  (branch (label after-gcd-1))  (assign t (op rem) (reg a) (reg b))  (assign a (reg b))  (assign b (reg t))  (goto (label gcd-1)) after-gcd-1    gcd-2  (test (op =) (reg b) (const 0))  (branch (label after-gcd-2))  (assign t (op rem) (reg a) (reg b))  (assign a (reg b))  (assign b (reg t))  (goto (label gcd-2)) after-gcd-2</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.8:</strong>  Portions of the controller sequence for a machine that uses the same data-path components for two different GCD computations.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><code>gcd  (test (op =) (reg b) (const 0))  (branch (label gcd-done))  (assign t (op rem) (reg a) (reg b))  (assign a (reg b))  (assign b (reg t))  (goto (label gcd)) gcd-done  (test (op =) (reg continue) (const 0))         (branch (label after-gcd-1))  (goto (label after-gcd-2))    ;; Before branching to gcd</code> from the first place where<br /> <em>;; it is needed, we place 0 in the <code>continue</code> register</em><br />  (assign continue (const 0))<br />  (goto (label gcd))<br /> after-gcd-1<br />   <img src="book-Z-G-D-18.gif" /><br /> <em>;; Before the second use of <code>gcd</code>, we place 1 in the <code>continue</code> register</em><br />  (assign continue (const 1))<br />  (goto (label gcd))<br /> after-gcd-2<br /></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.9:</strong>  Using a <code>continue</code> register to avoid the duplicate controller sequence in figure <a href="#%_fig_5.8">5.8</a>.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><code>gcd  (test (op =) (reg b) (const 0))  (branch (label gcd-done))  (assign t (op rem) (reg a) (reg b))  (assign a (reg b))  (assign b (reg t))  (goto (label gcd)) gcd-done  (goto (reg continue))     ;; Before calling gcd</code>, we assign to <code>continue</code><br /> <em>;; the label to which <code>gcd</code> should return.</em><br />  (assign continue (label after-gcd-1))<br />  (goto (label gcd))<br /> after-gcd-1<br />    <img src="book-Z-G-D-18.gif" /><br /> <em>;; Here is the second call to <code>gcd</code>, with a different continuation.</em><br />  (assign continue (label after-gcd-2))<br />  (goto (label gcd))<br /> after-gcd-2<br /></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.10:</strong>  Assigning labels to the <code>continue</code> register simplifies and generalizes the strategy shown in figure <a href="#%_fig_5.9">5.9</a>.</p>
<p></p>
<p>This is a reasonable approach for handling small problems, but it would be awkward if there were many instances of GCD computations in the controller sequence. To decide where to continue executing after the <code>gcd</code> subroutine, we would need tests in the data paths and branch instructions in the controller for all the places that use <code>gcd</code>. A more powerful method for implementing subroutines is to have the <code>continue</code> register hold the label of the entry point in the controller sequence at which execution should continue when the subroutine is finished. Implementing this strategy requires a new kind of connection between the data paths and the controller of a register machine: There must be a way to assign to a register a label in the controller sequence in such a way that this value can be fetched from the register and used to continue execution at the designated entry point.</p>
<p>To reflect this ability, we will extend the <code>assign</code> instruction of the register-machine language to allow a register to be assigned as value a label from the controller sequence (as a special kind of constant). We will also extend the <code>goto</code> instruction to allow execution to continue at the entry point described by the contents of a register rather than only at an entry point described by a constant label. Using these new constructs we can terminate the <code>gcd</code> subroutine with a branch to the location stored in the <code>continue</code> register. This leads to the controller sequence shown in figure <a href="#%_fig_5.10">5.10</a>.</p>
<p>A machine with more than one subroutine could use multiple continuation registers (e.g., <code>gcd-continue</code>, <code>factorial-continue</code>) or we could have all subroutines share a single <code>continue</code> register. Sharing is more economical, but we must be careful if we have a subroutine (<code>sub1</code>) that calls another subroutine (<code>sub2</code>). Unless <code>sub1</code> saves the contents of <code>continue</code> in some other register before setting up <code>continue</code> for the call to <code>sub2</code>, <code>sub1</code> will not know where to go when it is finished. The mechanism developed in the next section to handle recursion also provides a better solution to this problem of nested subroutine calls.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.1.4">5.1.4  Using a Stack to Implement Recursion</a></h3>
<p>With the ideas illustrated so far, we can implement any iterative process by specifying a register machine that has a register corresponding to each state variable of the process. The machine repeatedly executes a controller loop, changing the contents of the registers, until some termination condition is satisfied. At each point in the controller sequence, the state of the machine (representing the state of the iterative process) is completely determined by the contents of the registers (the values of the state variables).</p>
<p>Implementing recursive processes, however, requires an additional mechanism. Consider the following recursive method for computing factorials, which we first examined in section <a href="book-Z-H-11.html#%_sec_1.2.1">1.2.1</a>:</p>
<p></p>
<p></p>
<p><code>(define (factorial n)   (if (= n 1)       1       (* (factorial (- n 1)) n)))</code></p>
<p></p>
<p>As we see from the procedure, computing <em>n</em>! requires computing (<em>n</em> - 1)!. Our GCD machine, modeled on the procedure</p>
<p></p>
<p></p>
<p><code>(define (gcd a b)   (if (= b 0)       a       (gcd b (remainder a b))))</code></p>
<p></p>
<p>similarly had to compute another GCD. But there is an important difference between the <code>gcd</code> procedure, which reduces the original computation to a new GCD computation, and <code>factorial</code>, which requires computing another factorial as a subproblem. In GCD, the answer to the new GCD computation is the answer to the original problem. To compute the next GCD, we simply place the new arguments in the input registers of the GCD machine and reuse the machine's data paths by executing the same controller sequence. When the machine is finished solving the final GCD problem, it has completed the entire computation.</p>
<p>In the case of factorial (or any recursive process) the answer to the new factorial subproblem is not the answer to the original problem. The value obtained for (<em>n</em> - 1)! must be multiplied by <em>n</em> to get the final answer. If we try to imitate the GCD design, and solve the factorial subproblem by decrementing the <code>n</code> register and rerunning the factorial machine, we will no longer have available the old value of <code>n</code> by which to multiply the result. We thus need a second factorial machine to work on the subproblem. This second factorial computation itself has a factorial subproblem, which requires a third factorial machine, and so on. Since each factorial machine contains another factorial machine within it, the total machine contains an infinite nest of similar machines and hence cannot be constructed from a fixed, finite number of parts.</p>
<p>Nevertheless, we can implement the factorial process as a register machine if we can arrange to use the same components for each nested instance of the machine. Specifically, the machine that computes <em>n</em>! should use the same components to work on the subproblem of computing (<em>n</em> - 1)!, on the subproblem for (<em>n</em> - 2)!, and so on. This is plausible because, although the factorial process dictates that an unbounded number of copies of the same machine are needed to perform a computation, only one of these copies needs to be active at any given time. When the machine encounters a recursive subproblem, it can suspend work on the main problem, reuse the same physical parts to work on the subproblem, then continue the suspended computation.</p>
<p>In the subproblem, the contents of the registers will be different than they were in the main problem. (In this case the <code>n</code> register is decremented.) In order to be able to continue the suspended computation, the machine must save the contents of any registers that will be needed after the subproblem is solved so that these can be restored to continue the suspended computation. In the case of factorial, we will save the old value of <code>n</code>, to be restored when we are finished computing the factorial of the decremented <code>n</code> register.<a href="#footnote_Temp_717"><sup>2</sup></a></p>
<p>Since there is no <em>a priori</em> limit on the depth of nested recursive calls, we may need to save an arbitrary number of register values. These values must be restored in the reverse of the order in which they were saved, since in a nest of recursions the last subproblem to be entered is the first to be finished. This dictates the use of a <em>stack</em>, or ``last in, first out'' data structure, to save register values. We can extend the register-machine language to include a stack by adding two kinds of instructions: Values are placed on the stack using a <code>save</code> instruction and restored from the stack using a <code>restore</code> instruction. After a sequence of values has been <code>save</code>d on the stack, a sequence of <code>restore</code>s will retrieve these values in reverse order.<a href="#footnote_Temp_718"><sup>3</sup></a></p>
<p>With the aid of the stack, we can reuse a single copy of the factorial machine's data paths for each factorial subproblem. There is a similar design issue in reusing the controller sequence that operates the data paths. To reexecute the factorial computation, the controller cannot simply loop back to the beginning, as with an iterative process, because after solving the (<em>n</em> - 1)! subproblem the machine must still multiply the result by <em>n</em>. The controller must suspend its computation of <em>n</em>!, solve the (<em>n</em> - 1)! subproblem, then continue its computation of <em>n</em>!. This view of the factorial computation suggests the use of the subroutine mechanism described in section <a href="#%_sec_5.1.3">5.1.3</a>, which has the controller use a <code>continue</code> register to transfer to the part of the sequence that solves a subproblem and then continue where it left off on the main problem. We can thus make a factorial subroutine that returns to the entry point stored in the <code>continue</code> register. Around each subroutine call, we save and restore <code>continue</code> just as we do the <code>n</code> register, since each ``level'' of the factorial computation will use the same <code>continue</code> register. That is, the factorial subroutine must put a new value in <code>continue</code> when it calls itself for a subproblem, but it will need the old value in order to return to the place that called it to solve a subproblem.</p>
<p>Figure <a href="#%_fig_5.11">5.11</a> shows the data paths and controller for a machine that implements the recursive <code>factorial</code> procedure. The machine has a stack and three registers, called <code>n</code>, <code>val</code>, and <code>continue</code>. To simplify the data-path diagram, we have not named the register-assignment buttons, only the stack-operation buttons (<code>sc</code> and <code>sn</code> to save registers, <code>rc</code> and <code>rn</code> to restore registers). To operate the machine, we put in register <code>n</code> the number whose factorial we wish to compute and start the machine. When the machine reaches <code>fact-done</code>, the computation is finished and the answer will be found in the <code>val</code> register. In the controller sequence, <code>n</code> and <code>continue</code> are saved before each recursive call and restored upon return from the call. Returning from a call is accomplished by branching to the location stored in <code>continue</code>. <code>Continue</code> is initialized when the machine starts so that the last return will go to <code>fact-done</code>. The <code>val</code> register, which holds the result of the factorial computation, is not saved before the recursive call, because the old contents of <code>val</code> is not useful after the subroutine returns. Only the new value, which is the value produced by the subcomputation, is needed. Although in principle the factorial computation requires an infinite machine, the machine in figure <a href="#%_fig_5.11">5.11</a> is actually finite except for the stack, which is potentially unbounded. Any particular physical implementation of a stack, however, will be of finite size, and this will limit the depth of recursive calls that can be handled by the machine. This implementation of factorial illustrates the general strategy for realizing recursive algorithms as ordinary register machines augmented by stacks. When a recursive subproblem is encountered, we save on the stack the registers whose current values will be required after the subproblem is solved, solve the recursive subproblem, then restore the saved registers and continue execution on the main problem. The <code>continue</code> register must always be saved. Whether there are other registers that need to be saved depends on the particular machine, since not all recursive computations need the original values of registers that are modified during solution of the subproblem (see exercise <a href="#%_thm_5.4">5.4</a>).</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_719">A double recursion</a></h4>
<p>Let us examine a more complex recursive process, the tree-recursive computation of the Fibonacci numbers, which we introduced in section <a href="book-Z-H-11.html#%_sec_1.2.2">1.2.2</a>:</p>
<p></p>
<p><code>(define (fib n)   (if (&lt; n 2)       n       (+ (fib (- n 1)) (fib (- n 2)))))</code></p>
<p></p>
<p>Just as with factorial, we can implement the recursive Fibonacci computation as a register machine with registers <code>n</code>, <code>val</code>, and <code>continue</code>. The machine is more complex than the one for factorial, because there are two places in the controller sequence where we need to perform recursive calls -- once to compute Fib(<em>n</em> - 1) and once to compute Fib(<em>n</em> - 2). To set up for each of these calls, we save the registers whose values will be needed later, set the <code>n</code> register to the number whose Fib we need to compute recursively (<em>n</em> - 1 or <em>n</em> - 2), and assign to <code>continue</code> the entry point in the main sequence to which to return (<code>afterfib-n-1</code> or <code>afterfib-n-2</code>, respectively). We then go to <code>fib-loop</code>. When we return from the recursive call, the answer is in <code>val</code>. Figure <a href="#%_fig_5.12">5.12</a> shows the controller sequence for this machine.</p>
<p></p>
<p></p>
<p><img src="ch5-Z-G-6.gif" /></p>
<p></p>
<p><code>(controller    (assign continue (label fact-done))     ; set up final return address  fact-loop    (test (op =) (reg n) (const 1))    (branch (label base-case))    ;; Set up for the recursive call by saving n</code> and <code>continue</code>.<br />    <em>;; Set up <code>continue</code> so that the computation will continue</em><br />    <em>;; at <code>after-fact</code> when the subroutine returns.</em><br />    (save continue)<br />    (save n)<br />    (assign n (op -) (reg n) (const 1))<br />    (assign continue (label after-fact))<br />    (goto (label fact-loop))<br />  after-fact<br />    (restore n)<br />    (restore continue)<br />    (assign val (op *) (reg n) (reg val))   <em>; <code>val</code> now contains</em> <em>n</em>(<em>n</em> - 1)!<br />    (goto (reg continue))                   <em>; return to caller</em><br />  base-case<br />    (assign val (const 1))                  <em>; base case:</em>1! = 1<br />    (goto (reg continue))                   <em>; return to caller</em><br />  fact-done)<br /></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.11:</strong>  A recursive factorial machine.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><code>(controller    (assign continue (label fib-done))  fib-loop    (test (op &lt;) (reg n) (const 2))    (branch (label immediate-answer))    ;; set up to compute Fib(n - 1)    (save continue)    (assign continue (label afterfib-n-1))    (save n)                           ; save old value of n</code><br />    (assign n (op -) (reg n) (const 1))<em>; clobber <code>n</code> to <em>n</em> - 1</em><br />    (goto (label fib-loop))            <em>; perform recursive call</em><br />  afterfib-n-1                         <em>; upon return, <code>val</code> contains <em>F</em><em>i</em><em>b</em>(<em>n</em> - 1)</em><br />    (restore n)<br />    (restore continue)<br />    <em>;; set up to compute <em>F</em><em>i</em><em>b</em>(<em>n</em> - 2)</em><br />    (assign n (op -) (reg n) (const 2))<br />    (save continue)<br />    (assign continue (label afterfib-n-2))<br />    (save val)                         <em>; save <em>F</em><em>i</em><em>b</em>(<em>n</em> - 1)</em><br />    (goto (label fib-loop))<br />  afterfib-n-2                         <em>; upon return, <code>val</code> contains <em>F</em><em>i</em><em>b</em>(<em>n</em> - 2)</em><br />    (assign n (reg val))               <em>; <code>n</code> now contains <em>F</em><em>i</em><em>b</em>(<em>n</em> - 2)</em><br />    (restore val)                      <em>; <code>val</code> now contains <em>F</em><em>i</em><em>b</em>(<em>n</em> - 1)</em><br />    (restore continue)<br />    (assign val                        <em>;  <em>F</em><em>i</em><em>b</em>(<em>n</em> - 1) +  <em>F</em><em>i</em><em>b</em>(<em>n</em> - 2)</em><br />            (op +) (reg val) (reg n)) <br />    (goto (reg continue))              <em>; return to caller, answer is in <code>val</code></em><br />  immediate-answer<br />    (assign val (reg n))               <em>; base case:  <em>F</em><em>i</em><em>b</em>(<em>n</em>) = <em>n</em></em><br />    (goto (reg continue))<br />  fib-done)<br /></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.12:</strong>  Controller for a machine to compute Fibonacci numbers.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.4.</strong>  Specify register machines that implement each of the following procedures. For each machine, write a controller instruction sequence and draw a diagram showing the data paths.</p>
<p></p>
<p></p>
<p>a. Recursive exponentiation:</p>
<p></p>
<p></p>
<p><code>(define (expt b n)   (if (= n 0)       1       (* b (expt b (- n 1)))))</code></p>
<p></p>
<p></p>
<p></p>
<p>b. Iterative exponentiation:</p>
<p></p>
<p></p>
<p><code>(define (expt b n)   (define (expt-iter counter product)     (if (= counter 0)         product         (expt-iter (- counter 1) (* b product))))   (expt-iter n 1))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 5.5.</strong>  Hand-simulate the factorial and Fibonacci machines, using some nontrivial input (requiring execution of at least one recursive call). Show the contents of the stack at each significant point in the execution.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.6.</strong>  Ben Bitdiddle observes that the Fibonacci machine's controller sequence has an extra <code>save</code> and an extra <code>restore</code>, which can be removed to make a faster machine. Where are these instructions?</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.1.5">5.1.5  Instruction Summary</a></h3>
<p>A controller instruction in our register-machine language has one of the following forms, where each &lt;<em>input<sub><em>i</em></sub></em>&gt; is either <code>(reg &lt;register-name&gt;)</code> or <code>(const &lt;constant-value&gt;)</code>.</p>
<p>These instructions were introduced in section <a href="#%_sec_5.1.1">5.1.1</a>:</p>
<p></p>
<p><code>(assign &lt;register-name&gt; (reg &lt;register-name&gt;))  (assign &lt;register-name&gt; (const &lt;constant-value&gt;))  (assign &lt;register-name&gt; (op &lt;operation-name&gt;) &lt;input1&gt; ...</code> &lt;<em>input<sub><em>n</em></sub></em>&gt;)<br /> <br /> (perform (op &lt;<em>operation-name</em>&gt;) &lt;<em>input<sub>1</sub></em>&gt; <code>...</code> &lt;<em>input<sub><em>n</em></sub></em>&gt;)<br /> <br /> (test (op &lt;<em>operation-name</em>&gt;) &lt;<em>input<sub>1</sub></em>&gt; <code>...</code> &lt;<em>input<sub><em>n</em></sub></em>&gt;)<br /> <br /> (branch (label &lt;<em>label-name</em>&gt;))<br /> <br /> (goto (label &lt;<em>label-name</em>&gt;))<br /></p>
<p></p>
<p></p>
<p>The use of registers to hold labels was introduced in section <a href="#%_sec_5.1.3">5.1.3</a>:</p>
<p></p>
<p><code>(assign &lt;register-name&gt; (label &lt;label-name&gt;))  (goto (reg &lt;register-name&gt;))</code></p>
<p></p>
<p></p>
<p>Instructions to use the stack were introduced in section <a href="#%_sec_5.1.4">5.1.4</a>:</p>
<p></p>
<p><code>(save &lt;register-name&gt;)  (restore &lt;register-name&gt;)</code></p>
<p></p>
<p></p>
<p>The only kind of &lt;<em>constant-value</em>&gt; we have seen so far is a number, but later we will use strings, symbols, and lists. For example, <code>(const &quot;abc&quot;)</code> is the string <code>&quot;abc&quot;</code>, <code>(const abc)</code> is the symbol <code>abc</code>, <code>(const (a b c))</code> is the list <code>(a b c)</code>, and <code>(const ())</code> is the empty list.</p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_715"><sup>1</sup></a> This assumption glosses over a great deal of complexity. Usually a large portion of the implementation of a Lisp system is dedicated to making reading and printing work.</p>
<p><a href="#call_footnote_Temp_717"><sup>2</sup></a> One might argue that we don't need to save the old <code>n</code>; after we decrement it and solve the subproblem, we could simply increment it to recover the old value. Although this strategy works for factorial, it cannot work in general, since the old value of a register cannot always be computed from the new one.</p>
<p><a href="#call_footnote_Temp_718"><sup>3</sup></a> In section <a href="book-Z-H-33.html#%_sec_5.3">5.3</a> we will see how to implement a stack in terms of more primitive operations.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-30.html">previous</a>, <a href="book-Z-H-32.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-31.html">previous</a>, <a href="book-Z-H-33.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_5.2">5.2  A Register-Machine Simulator</a></h2>
<p>In order to gain a good understanding of the design of register machines, we must test the machines we design to see if they perform as expected. One way to test a design is to hand-simulate the operation of the controller, as in exercise <a href="book-Z-H-31.html#%_thm_5.5">5.5</a>. But this is extremely tedious for all but the simplest machines. In this section we construct a simulator for machines described in the register-machine language. The simulator is a Scheme program with four interface procedures. The first uses a description of a register machine to construct a model of the machine (a data structure whose parts correspond to the parts of the machine to be simulated), and the other three allow us to simulate the machine by manipulating the model:</p>
<blockquote>
<p><code>(make-machine &lt;register-names&gt; &lt;operations&gt; &lt;controller&gt;)</code><br /> constructs and returns a model of the machine with the given registers, operations, and controller.</p>
<p></p>
<p><code>(set-register-contents! &lt;machine-model&gt; &lt;register-name&gt; &lt;value&gt;)</code><br /> stores a value in a simulated register in the given machine.</p>
<p></p>
<p><code>(get-register-contents &lt;machine-model&gt; &lt;register-name&gt;)</code><br /> returns the contents of a simulated register in the given machine.</p>
<p></p>
<p><code>(start &lt;machine-model&gt;)</code><br /> simulates the execution of the given machine, starting from the beginning of the controller sequence and stopping when it reaches the end of the sequence.</p>
</blockquote>
<p>As an example of how these procedures are used, we can define <code>gcd-machine</code> to be a model of the GCD machine of section <a href="book-Z-H-31.html#%_sec_5.1.1">5.1.1</a> as follows:</p>
<p></p>
<p></p>
<p><code>(define gcd-machine   (make-machine    '(a b t)    (list (list 'rem remainder) (list '= =))    '(test-b        (test (op =) (reg b) (const 0))        (branch (label gcd-done))        (assign t (op rem) (reg a) (reg b))        (assign a (reg b))        (assign b (reg t))        (goto (label test-b))      gcd-done)))</code></p>
<p></p>
<p>The first argument to <code>make-machine</code> is a list of register names. The next argument is a table (a list of two-element lists) that pairs each operation name with a Scheme procedure that implements the operation (that is, produces the same output value given the same input values). The last argument specifies the controller as a list of labels and machine instructions, as in section <a href="book-Z-H-31.html#%_sec_5.1">5.1</a>.</p>
<p>To compute GCDs with this machine, we set the input registers, start the machine, and examine the result when the simulation terminates:</p>
<p></p>
<p><code>(set-register-contents! gcd-machine 'a 206) done (set-register-contents! gcd-machine 'b 40) done (start gcd-machine) done (get-register-contents gcd-machine 'a) 2</code></p>
<p></p>
<p>This computation will run much more slowly than a <code>gcd</code> procedure written in Scheme, because we will simulate low-level machine instructions, such as <code>assign</code>, by much more complex operations.</p>
<p></p>
<p><strong>Exercise 5.7.</strong>  Use the simulator to test the machines you designed in exercise <a href="book-Z-H-31.html#%_thm_5.4">5.4</a>.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.2.1">5.2.1  The Machine Model</a></h3>
<p></p>
<p>The machine model generated by <code>make-machine</code> is represented as a procedure with local state using the message-passing techniques developed in chapter 3. To build this model, <code>make-machine</code> begins by calling the procedure <code>make-new-machine</code> to construct the parts of the machine model that are common to all register machines. This basic machine model constructed by <code>make-new-machine</code> is essentially a container for some registers and a stack, together with an execution mechanism that processes the controller instructions one by one.</p>
<p><code>Make-machine</code> then extends this basic model (by sending it messages) to include the registers, operations, and controller of the particular machine being defined. First it allocates a register in the new machine for each of the supplied register names and installs the designated operations in the machine. Then it uses an <em>assembler</em> (described below in section <a href="#%_sec_5.2.2">5.2.2</a>) to transform the controller list into instructions for the new machine and installs these as the machine's instruction sequence. <code>Make-machine</code> returns as its value the modified machine model.</p>
<p></p>
<p></p>
<p><code>(define (make-machine register-names ops controller-text)   (let ((machine (make-new-machine)))     (for-each (lambda (register-name)                 ((machine 'allocate-register) register-name))               register-names)     ((machine 'install-operations) ops)         ((machine 'install-instruction-sequence)      (assemble controller-text machine))     machine))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_724">Registers</a></h4>
<p>We will represent a register as a procedure with local state, as in chapter 3. The procedure <code>make-register</code> creates a register that holds a value that can be accessed or changed:</p>
<p></p>
<p></p>
<p><code>(define (make-register name)   (let ((contents '*unassigned*))     (define (dispatch message)       (cond ((eq? message 'get) contents)             ((eq? message 'set)              (lambda (value) (set! contents value)))             (else              (error &quot;Unknown request -- REGISTER&quot; message))))     dispatch))</code></p>
<p></p>
<p>The following procedures are used to access registers:</p>
<p></p>
<p></p>
<p><code>(define (get-contents register)   (register 'get))  (define (set-contents! register value)   ((register 'set) value))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_725">The stack</a></h4>
<p>We can also represent a stack as a procedure with local state. The procedure <code>make-stack</code> creates a stack whose local state consists of a list of the items on the stack. A stack accepts requests to <code>push</code> an item onto the stack, to <code>pop</code> the top item off the stack and return it, and to <code>initialize</code> the stack to empty.</p>
<p></p>
<p></p>
<p><code>(define (make-stack)   (let ((s '()))     (define (push x)       (set! s (cons x s)))     (define (pop)       (if (null? s)           (error &quot;Empty stack -- POP&quot;)           (let ((top (car s)))             (set! s (cdr s))             top)))     (define (initialize)       (set! s '())       'done)     (define (dispatch message)       (cond ((eq? message 'push) push)             ((eq? message 'pop) (pop))             ((eq? message 'initialize) (initialize))             (else (error &quot;Unknown request -- STACK&quot;                          message))))     dispatch))</code></p>
<p></p>
<p>The following procedures are used to access stacks:</p>
<p></p>
<p></p>
<p><code>(define (pop stack)   (stack 'pop))  (define (push stack value)   ((stack 'push) value))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_726">The basic machine</a></h4>
<p>The <code>make-new-machine</code> procedure, shown in figure <a href="#%_fig_5.13">5.13</a>, constructs an object whose local state consists of a stack, an initially empty instruction sequence, a list of operations that initially contains an operation to initialize the stack, and a <em>register table</em> that initially contains two registers, named <code>flag</code> and <code>pc</code> (for ``program counter''). The internal procedure <code>allocate-register</code> adds new entries to the register table, and the internal procedure <code>lookup-register</code> looks up registers in the table.</p>
<p>The <code>flag</code> register is used to control branching in the simulated machine. <code>Test</code> instructions set the contents of <code>flag</code> to the result of the test (true or false). <code>Branch</code> instructions decide whether or not to branch by examining the contents of <code>flag</code>.</p>
<p>The <code>pc</code> register determines the sequencing of instructions as the machine runs. This sequencing is implemented by the internal procedure <code>execute</code>. In the simulation model, each machine instruction is a data structure that includes a procedure of no arguments, called the <em>instruction execution procedure</em>, such that calling this procedure simulates executing the instruction. As the simulation runs, <code>pc</code> points to the place in the instruction sequence beginning with the next instruction to be executed. <code>Execute</code> gets that instruction, executes it by calling the instruction execution procedure, and repeats this cycle until there are no more instructions to execute (i.e., until <code>pc</code> points to the end of the instruction sequence).</p>
<p></p>
<p></p>
<p></p>
<p><code>(define (make-new-machine)   (let ((pc (make-register 'pc))         (flag (make-register 'flag))         (stack (make-stack))         (the-instruction-sequence '()))     (let ((the-ops            (list (list 'initialize-stack                        (lambda () (stack 'initialize)))))           (register-table            (list (list 'pc pc) (list 'flag flag))))       (define (allocate-register name)         (if (assoc name register-table)             (error &quot;Multiply defined register: &quot; name)             (set! register-table                   (cons (list name (make-register name))                         register-table)))         'register-allocated)       (define (lookup-register name)         (let ((val (assoc name register-table)))           (if val               (cadr val)               (error &quot;Unknown register:&quot; name))))       (define (execute)         (let ((insts (get-contents pc)))           (if (null? insts)               'done               (begin                 ((instruction-execution-proc (car insts)))                 (execute)))))       (define (dispatch message)         (cond ((eq? message 'start)                (set-contents! pc the-instruction-sequence)                (execute))               ((eq? message 'install-instruction-sequence)                (lambda (seq) (set! the-instruction-sequence seq)))               ((eq? message 'allocate-register) allocate-register)               ((eq? message 'get-register) lookup-register)               ((eq? message 'install-operations)                (lambda (ops) (set! the-ops (append the-ops ops))))               ((eq? message 'stack) stack)               ((eq? message 'operations) the-ops)               (else (error &quot;Unknown request -- MACHINE&quot; message))))       dispatch)))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.13:</strong>  The <code>make-new-machine</code> procedure, which implements the basic machine model.</p>
<p></p>
<p>As part of its operation, each instruction execution procedure modifies <code>pc</code> to indicate the next instruction to be executed. <code>Branch</code> and <code>goto</code> instructions change <code>pc</code> to point to the new destination. All other instructions simply advance <code>pc</code>, making it point to the next instruction in the sequence. Observe that each call to <code>execute</code> calls <code>execute</code> again, but this does not produce an infinite loop because running the instruction execution procedure changes the contents of <code>pc</code>.</p>
<p><code>Make-new-machine</code> returns a <code>dispatch</code> procedure that implements message-passing access to the internal state. Notice that starting the machine is accomplished by setting <code>pc</code> to the beginning of the instruction sequence and calling <code>execute</code>.</p>
<p>For convenience, we provide an alternate procedural interface to a machine's <code>start</code> operation, as well as procedures to set and examine register contents, as specified at the beginning of section <a href="#%_sec_5.2">5.2</a>:</p>
<p></p>
<p></p>
<p><code>(define (start machine)   (machine 'start)) (define (get-register-contents machine register-name)   (get-contents (get-register machine register-name))) (define (set-register-contents! machine register-name value)   (set-contents! (get-register machine register-name) value)   'done)</code></p>
<p></p>
<p>These procedures (and many procedures in sections <a href="#%_sec_5.2.2">5.2.2</a> and <a href="#%_sec_5.2.3">5.2.3</a>) use the following to look up the register with a given name in a given machine:</p>
<p></p>
<p><code>(define (get-register machine reg-name)   ((machine 'get-register) reg-name))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.2.2">5.2.2  The Assembler</a></h3>
<p>The assembler transforms the sequence of controller expressions for a machine into a corresponding list of machine instructions, each with its execution procedure. Overall, the assembler is much like the evaluators we studied in chapter 4 -- there is an input language (in this case, the register-machine language) and we must perform an appropriate action for each type of expression in the language.</p>
<p>The technique of producing an execution procedure for each instruction is just what we used in section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a> to speed up the evaluator by separating analysis from runtime execution. As we saw in chapter 4, much useful analysis of Scheme expressions could be performed without knowing the actual values of variables. Here, analogously, much useful analysis of register-machine-language expressions can be performed without knowing the actual contents of machine registers. For example, we can replace references to registers by pointers to the register objects, and we can replace references to labels by pointers to the place in the instruction sequence that the label designates.</p>
<p>Before it can generate the instruction execution procedures, the assembler must know what all the labels refer to, so it begins by scanning the controller text to separate the labels from the instructions. As it scans the text, it constructs both a list of instructions and a table that associates each label with a pointer into that list. Then the assembler augments the instruction list by inserting the execution procedure for each instruction.</p>
<p>The <code>assemble</code> procedure is the main entry to the assembler. It takes the controller text and the machine model as arguments and returns the instruction sequence to be stored in the model. <code>Assemble</code> calls <code>extract-labels</code> to build the initial instruction list and label table from the supplied controller text. The second argument to <code>extract-labels</code> is a procedure to be called to process these results: This procedure uses <code>update-insts!</code> to generate the instruction execution procedures and insert them into the instruction list, and returns the modified list.</p>
<p></p>
<p><code>(define (assemble controller-text machine)   (extract-labels controller-text     (lambda (insts labels)       (update-insts! insts labels machine)       insts)))</code></p>
<p></p>
<p></p>
<p><code>Extract-labels</code> takes as arguments a list <code>text</code> (the sequence of controller instruction expressions) and a <code>receive</code> procedure. <code>Receive</code> will be called with two values: (1) a list <code>insts</code> of instruction data structures, each containing an instruction from <code>text</code>; and (2) a table called <code>labels</code>, which associates each label from <code>text</code> with the position in the list <code>insts</code> that the label designates.</p>
<p></p>
<p></p>
<p><code>(define (extract-labels text receive)   (if (null? text)       (receive '() '())       (extract-labels (cdr text)        (lambda (insts labels)          (let ((next-inst (car text)))            (if (symbol? next-inst)                (receive insts                         (cons (make-label-entry next-inst                                                 insts)                               labels))                (receive (cons (make-instruction next-inst)                               insts)                         labels)))))))</code></p>
<p></p>
<p><code>Extract-labels</code> works by sequentially scanning the elements of the <code>text</code> and accumulating the <code>insts</code> and the <code>labels</code>. If an element is a symbol (and thus a label) an appropriate entry is added to the <code>labels</code> table. Otherwise the element is accumulated onto the <code>insts</code> list.<a href="#footnote_Temp_727"><sup>4</sup></a></p>
<p><code>Update-insts!</code> modifies the instruction list, which initially contains only the text of the instructions, to include the corresponding execution procedures:</p>
<p></p>
<p></p>
<p><code>(define (update-insts! insts labels machine)   (let ((pc (get-register machine 'pc))         (flag (get-register machine 'flag))         (stack (machine 'stack))         (ops (machine 'operations)))     (for-each      (lambda (inst)        (set-instruction-execution-proc!          inst         (make-execution-procedure          (instruction-text inst) labels machine          pc flag stack ops)))      insts)))</code></p>
<p></p>
<p></p>
<p>The machine instruction data structure simply pairs the instruction text with the corresponding execution procedure. The execution procedure is not yet available when <code>extract-labels</code> constructs the instruction, and is inserted later by <code>update-insts!</code>.</p>
<p></p>
<p><code>(define (make-instruction text)   (cons text '())) (define (instruction-text inst)   (car inst)) (define (instruction-execution-proc inst)   (cdr inst)) (define (set-instruction-execution-proc! inst proc)   (set-cdr! inst proc))</code></p>
<p></p>
<p>The instruction text is not used by our simulator, but it is handy to keep around for debugging (see exercise <a href="#%_thm_5.16">5.16</a>).</p>
<p>Elements of the label table are pairs:</p>
<p></p>
<p><code>(define (make-label-entry label-name insts)   (cons label-name insts))</code></p>
<p></p>
<p>Entries will be looked up in the table with</p>
<p></p>
<p><code>(define (lookup-label labels label-name)   (let ((val (assoc label-name labels)))     (if val         (cdr val)         (error &quot;Undefined label -- ASSEMBLE&quot; label-name))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 5.8.</strong>  The following register-machine code is ambiguous, because the label <code>here</code> is defined more than once:</p>
<p></p>
<p><code>start   (goto (label here)) here   (assign a (const 3))   (goto (label there)) here   (assign a (const 4))   (goto (label there)) there</code></p>
<p></p>
<p>With the simulator as written, what will the contents of register <code>a</code> be when control reaches <code>there</code>? Modify the <code>extract-labels</code> procedure so that the assembler will signal an error if the same label name is used to indicate two different locations.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.2.3">5.2.3  Generating Execution Procedures for Instructions</a></h3>
<p>The assembler calls <code>make-execution-procedure</code> to generate the execution procedure for an instruction. Like the <code>analyze</code> procedure in the evaluator of section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a>, this dispatches on the type of instruction to generate the appropriate execution procedure.</p>
<p></p>
<p><code>(define (make-execution-procedure inst labels machine                                   pc flag stack ops)   (cond ((eq? (car inst) 'assign)          (make-assign inst machine labels ops pc))         ((eq? (car inst) 'test)          (make-test inst machine labels ops flag pc))         ((eq? (car inst) 'branch)          (make-branch inst machine labels flag pc))         ((eq? (car inst) 'goto)          (make-goto inst machine labels pc))         ((eq? (car inst) 'save)          (make-save inst machine stack pc))         ((eq? (car inst) 'restore)          (make-restore inst machine stack pc))         ((eq? (car inst) 'perform)          (make-perform inst machine labels ops pc))         (else (error &quot;Unknown instruction type -- ASSEMBLE&quot;                      inst))))</code></p>
<p></p>
<p></p>
<p>For each type of instruction in the register-machine language, there is a generator that builds an appropriate execution procedure. The details of these procedures determine both the syntax and meaning of the individual instructions in the register-machine language. We use data abstraction to isolate the detailed syntax of register-machine expressions from the general execution mechanism, as we did for evaluators in section <a href="book-Z-H-26.html#%_sec_4.1.2">4.1.2</a>, by using syntax procedures to extract and classify the parts of an instruction.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_729"><code>Assign</code> instructions</a></h4>
<p>The <code>make-assign</code> procedure handles <code>assign</code> instructions:</p>
<p></p>
<p><code>(define (make-assign inst machine labels operations pc)   (let ((target          (get-register machine (assign-reg-name inst)))         (value-exp (assign-value-exp inst)))     (let ((value-proc            (if (operation-exp? value-exp)                (make-operation-exp                 value-exp machine labels operations)                (make-primitive-exp                 (car value-exp) machine labels))))       (lambda ()                ; execution procedure for assign</code><br />         (set-contents! target (value-proc))<br />         (advance-pc pc)))))<br /></p>
<p></p>
<p><code>Make-assign</code> extracts the target register name (the second element of the instruction) and the value expression (the rest of the list that forms the instruction) from the <code>assign</code> instruction using the selectors</p>
<p></p>
<p><code>(define (assign-reg-name assign-instruction)   (cadr assign-instruction)) (define (assign-value-exp assign-instruction)   (cddr assign-instruction))</code></p>
<p></p>
<p>The register name is looked up with <code>get-register</code> to produce the target register object. The value expression is passed to <code>make-operation-exp</code> if the value is the result of an operation, and to <code>make-primitive-exp</code> otherwise. These procedures (shown below) parse the value expression and produce an execution procedure for the value. This is a procedure of no arguments, called <code>value-proc</code>, which will be evaluated during the simulation to produce the actual value to be assigned to the register. Notice that the work of looking up the register name and parsing the value expression is performed just once, at assembly time, not every time the instruction is simulated. This saving of work is the reason we use execution procedures, and corresponds directly to the saving in work we obtained by separating program analysis from execution in the evaluator of section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a>.</p>
<p>The result returned by <code>make-assign</code> is the execution procedure for the <code>assign</code> instruction. When this procedure is called (by the machine model's <code>execute</code> procedure), it sets the contents of the target register to the result obtained by executing <code>value-proc</code>. Then it advances the <code>pc</code> to the next instruction by running the procedure</p>
<p></p>
<p><code>(define (advance-pc pc)   (set-contents! pc (cdr (get-contents pc))))</code></p>
<p></p>
<p><code>Advance-pc</code> is the normal termination for all instructions except <code>branch</code> and <code>goto</code>.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_730"><code>Test</code>, <code>branch</code>, and <code>goto</code> instructions</a></h4>
<p><code>Make-test</code> handles <code>test</code> instructions in a similar way. It extracts the expression that specifies the condition to be tested and generates an execution procedure for it. At simulation time, the procedure for the condition is called, the result is assigned to the <code>flag</code> register, and the <code>pc</code> is advanced:</p>
<p></p>
<p><code>(define (make-test inst machine labels operations flag pc)   (let ((condition (test-condition inst)))     (if (operation-exp? condition)         (let ((condition-proc                (make-operation-exp                 condition machine labels operations)))           (lambda ()             (set-contents! flag (condition-proc))             (advance-pc pc)))         (error &quot;Bad TEST instruction -- ASSEMBLE&quot; inst)))) (define (test-condition test-instruction)   (cdr test-instruction))</code></p>
<p></p>
<p></p>
<p>The execution procedure for a <code>branch</code> instruction checks the contents of the <code>flag</code> register and either sets the contents of the <code>pc</code> to the branch destination (if the branch is taken) or else just advances the <code>pc</code> (if the branch is not taken). Notice that the indicated destination in a <code>branch</code> instruction must be a label, and the <code>make-branch</code> procedure enforces this. Notice also that the label is looked up at assembly time, not each time the <code>branch</code> instruction is simulated.</p>
<p></p>
<p></p>
<p><code>(define (make-branch inst machine labels flag pc)   (let ((dest (branch-dest inst)))     (if (label-exp? dest)         (let ((insts                (lookup-label labels (label-exp-label dest))))           (lambda ()             (if (get-contents flag)                 (set-contents! pc insts)                 (advance-pc pc))))         (error &quot;Bad BRANCH instruction -- ASSEMBLE&quot; inst)))) (define (branch-dest branch-instruction)   (cadr branch-instruction))</code></p>
<p></p>
<p></p>
<p>A <code>goto</code> instruction is similar to a branch, except that the destination may be specified either as a label or as a register, and there is no condition to check -- the <code>pc</code> is always set to the new destination.</p>
<p></p>
<p><code>(define (make-goto inst machine labels pc)   (let ((dest (goto-dest inst)))     (cond ((label-exp? dest)            (let ((insts                   (lookup-label labels                                 (label-exp-label dest))))              (lambda () (set-contents! pc insts))))           ((register-exp? dest)            (let ((reg                   (get-register machine                                 (register-exp-reg dest))))              (lambda ()                (set-contents! pc (get-contents reg)))))           (else (error &quot;Bad GOTO instruction -- ASSEMBLE&quot;                        inst))))) (define (goto-dest goto-instruction)   (cadr goto-instruction))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_731">Other instructions</a></h4>
<p>The stack instructions <code>save</code> and <code>restore</code> simply use the stack with the designated register and advance the <code>pc</code>:</p>
<p></p>
<p><code>(define (make-save inst machine stack pc)   (let ((reg (get-register machine                            (stack-inst-reg-name inst))))     (lambda ()       (push stack (get-contents reg))       (advance-pc pc)))) (define (make-restore inst machine stack pc)   (let ((reg (get-register machine                            (stack-inst-reg-name inst))))     (lambda ()       (set-contents! reg (pop stack))           (advance-pc pc)))) (define (stack-inst-reg-name stack-instruction)   (cadr stack-instruction))</code></p>
<p></p>
<p></p>
<p>The final instruction type, handled by <code>make-perform</code>, generates an execution procedure for the action to be performed. At simulation time, the action procedure is executed and the <code>pc</code> advanced.</p>
<p></p>
<p><code>(define (make-perform inst machine labels operations pc)   (let ((action (perform-action inst)))     (if (operation-exp? action)         (let ((action-proc                (make-operation-exp                 action machine labels operations)))           (lambda ()             (action-proc)             (advance-pc pc)))         (error &quot;Bad PERFORM instruction -- ASSEMBLE&quot; inst)))) (define (perform-action inst) (cdr inst))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_732">Execution procedures for subexpressions</a></h4>
<p>The value of a <code>reg</code>, <code>label</code>, or <code>const</code> expression may be needed for assignment to a register (<code>make-assign</code>) or for input to an operation (<code>make-operation-exp</code>, below). The following procedure generates execution procedures to produce values for these expressions during the simulation:</p>
<p></p>
<p><code>(define (make-primitive-exp exp machine labels)   (cond ((constant-exp? exp)          (let ((c (constant-exp-value exp)))            (lambda () c)))         ((label-exp? exp)          (let ((insts                 (lookup-label labels                               (label-exp-label exp))))            (lambda () insts)))         ((register-exp? exp)          (let ((r (get-register machine                                 (register-exp-reg exp))))            (lambda () (get-contents r))))         (else          (error &quot;Unknown expression type -- ASSEMBLE&quot; exp))))</code></p>
<p></p>
<p>The syntax of <code>reg</code>, <code>label</code>, and <code>const</code> expressions is determined by</p>
<p></p>
<p><code>(define (register-exp? exp) (tagged-list? exp 'reg)) (define (register-exp-reg exp) (cadr exp)) (define (constant-exp? exp) (tagged-list? exp 'const)) (define (constant-exp-value exp) (cadr exp)) (define (label-exp? exp) (tagged-list? exp 'label)) (define (label-exp-label exp) (cadr exp))</code></p>
<p></p>
<p></p>
<p><code>Assign</code>, <code>perform</code>, and <code>test</code> instructions may include the application of a machine operation (specified by an <code>op</code> expression) to some operands (specified by <code>reg</code> and <code>const</code> expressions). The following procedure produces an execution procedure for an ``operation expression'' -- a list containing the operation and operand expressions from the instruction:</p>
<p></p>
<p><code>(define (make-operation-exp exp machine labels operations)   (let ((op (lookup-prim (operation-exp-op exp) operations))         (aprocs          (map (lambda (e)                 (make-primitive-exp e machine labels))               (operation-exp-operands exp))))     (lambda ()       (apply op (map (lambda (p) (p)) aprocs)))))</code></p>
<p></p>
<p>The syntax of operation expressions is determined by</p>
<p></p>
<p><code>(define (operation-exp? exp)   (and (pair? exp) (tagged-list? (car exp) 'op))) (define (operation-exp-op operation-exp)   (cadr (car operation-exp))) (define (operation-exp-operands operation-exp)   (cdr operation-exp))</code></p>
<p></p>
<p>Observe that the treatment of operation expressions is very much like the treatment of procedure applications by the <code>analyze-application</code> procedure in the evaluator of section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a> in that we generate an execution procedure for each operand. At simulation time, we call the operand procedures and apply the Scheme procedure that simulates the operation to the resulting values. The simulation procedure is found by looking up the operation name in the operation table for the machine:</p>
<p></p>
<p><code>(define (lookup-prim symbol operations)   (let ((val (assoc symbol operations)))     (if val         (cadr val)         (error &quot;Unknown operation -- ASSEMBLE&quot; symbol))))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 5.9.</strong>  The treatment of machine operations above permits them to operate on labels as well as on constants and the contents of registers. Modify the expression-processing procedures to enforce the condition that operations can be used only with registers and constants.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.10.</strong>  Design a new syntax for register-machine instructions and modify the simulator to use your new syntax. Can you implement your new syntax without changing any part of the simulator except the syntax procedures in this section?</p>
<p></p>
<p></p>
<p><strong>Exercise 5.11.</strong>  When we introduced <code>save</code> and <code>restore</code> in section <a href="book-Z-H-31.html#%_sec_5.1.4">5.1.4</a>, we didn't specify what would happen if you tried to restore a register that was not the last one saved, as in the sequence</p>
<p></p>
<p></p>
<p><code>(save y) (save x) (restore y)</code></p>
<p></p>
<p>There are several reasonable possibilities for the meaning of <code>restore</code>:</p>
<p>a.  <code>(restore y)</code> puts into <code>y</code> the last value saved on the stack, regardless of what register that value came from. This is the way our simulator behaves. Show how to take advantage of this behavior to eliminate one instruction from the Fibonacci machine of section <a href="book-Z-H-31.html#%_sec_5.1.4">5.1.4</a> (figure <a href="book-Z-H-31.html#%_fig_5.12">5.12</a>).</p>
<p>b.  <code>(restore y)</code> puts into <code>y</code> the last value saved on the stack, but only if that value was saved from <code>y</code>; otherwise, it signals an error. Modify the simulator to behave this way. You will have to change <code>save</code> to put the register name on the stack along with the value.</p>
<p>c.  <code>(restore y)</code> puts into <code>y</code> the last value saved from <code>y</code> regardless of what other registers were saved after <code>y</code> and not restored. Modify the simulator to behave this way. You will have to associate a separate stack with each register. You should make the <code>initialize-stack</code> operation initialize all the register stacks.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.12.</strong>  The simulator can be used to help determine the data paths required for implementing a machine with a given controller. Extend the assembler to store the following information in the machine model:</p>
<p></p>
<ul>
<li>a list of all instructions, with duplicates removed, sorted by instruction type (<code>assign</code>, <code>goto</code>, and so on);</li>
<li>a list (without duplicates) of the registers used to hold entry points (these are the registers referenced by <code>goto</code> instructions);</li>
<li>a list (without duplicates) of the registers that are <code>save</code>d or <code>restore</code>d;</li>
<li>for each register, a list (without duplicates) of the sources from which it is assigned (for example, the sources for register <code>val</code> in the factorial machine of figure <a href="book-Z-H-31.html#%_fig_5.11">5.11</a> are <code>(const 1)</code> and <code>((op *) (reg n) (reg val))</code>).</li>
</ul>
<p>Extend the message-passing interface to the machine to provide access to this new information. To test your analyzer, define the Fibonacci machine from figure <a href="book-Z-H-31.html#%_fig_5.12">5.12</a> and examine the lists you constructed.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.13.</strong>  Modify the simulator so that it uses the controller sequence to determine what registers the machine has rather than requiring a list of registers as an argument to <code>make-machine</code>. Instead of pre-allocating the registers in <code>make-machine</code>, you can allocate them one at a time when they are first seen during assembly of the instructions.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.2.4">5.2.4  Monitoring Machine Performance</a></h3>
<p>Simulation is useful not only for verifying the correctness of a proposed machine design but also for measuring the machine's performance. For example, we can install in our simulation program a ``meter'' that measures the number of stack operations used in a computation. To do this, we modify our simulated stack to keep track of the number of times registers are saved on the stack and the maximum depth reached by the stack, and add a message to the stack's interface that prints the statistics, as shown below. We also add an operation to the basic machine model to print the stack statistics, by initializing <code>the-ops</code> in <code>make-new-machine</code> to</p>
<p></p>
<p><code>(list (list 'initialize-stack             (lambda () (stack 'initialize)))       (list 'print-stack-statistics             (lambda () (stack 'print-statistics))))</code></p>
<p></p>
<p>Here is the new version of <code>make-stack</code>:</p>
<p></p>
<p><code>(define (make-stack)   (let ((s '())         (number-pushes 0)         (max-depth 0)         (current-depth 0))     (define (push x)       (set! s (cons x s))       (set! number-pushes (+ 1 number-pushes))       (set! current-depth (+ 1 current-depth))       (set! max-depth (max current-depth max-depth)))     (define (pop)       (if (null? s)           (error &quot;Empty stack -- POP&quot;)           (let ((top (car s)))             (set! s (cdr s))             (set! current-depth (- current-depth 1))             top)))         (define (initialize)       (set! s '())       (set! number-pushes 0)       (set! max-depth 0)       (set! current-depth 0)       'done)     (define (print-statistics)       (newline)       (display (list 'total-pushes  '= number-pushes                      'maximum-depth '= max-depth)))     (define (dispatch message)       (cond ((eq? message 'push) push)             ((eq? message 'pop) (pop))             ((eq? message 'initialize) (initialize))             ((eq? message 'print-statistics)              (print-statistics))             (else              (error &quot;Unknown request -- STACK&quot; message))))     dispatch))</code></p>
<p></p>
<p></p>
<p>Exercises <a href="#%_thm_5.15">5.15</a> through <a href="#%_thm_5.19">5.19</a> describe other useful monitoring and debugging features that can be added to the register-machine simulator.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.14.</strong>  Measure the number of pushes and the maximum stack depth required to compute <em>n</em>! for various small values of <em>n</em> using the factorial machine shown in figure <a href="book-Z-H-31.html#%_fig_5.11">5.11</a>. From your data determine formulas in terms of <em>n</em> for the total number of push operations and the maximum stack depth used in computing <em>n</em>! for any <em>n</em> &gt; 1. Note that each of these is a linear function of <em>n</em> and is thus determined by two constants. In order to get the statistics printed, you will have to augment the factorial machine with instructions to initialize the stack and print the statistics. You may want to also modify the machine so that it repeatedly reads a value for <em>n</em>, computes the factorial, and prints the result (as we did for the GCD machine in figure <a href="book-Z-H-31.html#%_fig_5.4">5.4</a>), so that you will not have to repeatedly invoke <code>get-register-contents</code>, <code>set-register-contents!</code>, and <code>start</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.15.</strong>  Add <em>instruction counting</em> to the register machine simulation. That is, have the machine model keep track of the number of instructions executed. Extend the machine model's interface to accept a new message that prints the value of the instruction count and resets the count to zero.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.16.</strong>  Augment the simulator to provide for <em>instruction tracing</em>. That is, before each instruction is executed, the simulator should print the text of the instruction. Make the machine model accept <code>trace-on</code> and <code>trace-off</code> messages to turn tracing on and off.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.17.</strong>  Extend the instruction tracing of exercise <a href="#%_thm_5.16">5.16</a> so that before printing an instruction, the simulator prints any labels that immediately precede that instruction in the controller sequence. Be careful to do this in a way that does not interfere with instruction counting (exercise <a href="#%_thm_5.15">5.15</a>). You will have to make the simulator retain the necessary label information.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.18.</strong>  Modify the <code>make-register</code> procedure of section <a href="#%_sec_5.2.1">5.2.1</a> so that registers can be traced. Registers should accept messages that turn tracing on and off. When a register is traced, assigning a value to the register should print the name of the register, the old contents of the register, and the new contents being assigned. Extend the interface to the machine model to permit you to turn tracing on and off for designated machine registers.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.19.</strong>  Alyssa P. Hacker wants a <em>breakpoint</em> feature in the simulator to help her debug her machine designs. You have been hired to install this feature for her. She wants to be able to specify a place in the controller sequence where the simulator will stop and allow her to examine the state of the machine. You are to implement a procedure</p>
<p></p>
<p></p>
<p></p>
<p><code>(set-breakpoint &lt;machine&gt; &lt;label&gt; &lt;n&gt;)</code></p>
<p></p>
<p>that sets a breakpoint just before the <em>n</em>th instruction after the given label. For example,</p>
<p></p>
<p></p>
<p><code>(set-breakpoint gcd-machine 'test-b 4)</code></p>
<p></p>
<p>installs a breakpoint in <code>gcd-machine</code> just before the assignment to register <code>a</code>. When the simulator reaches the breakpoint it should print the label and the offset of the breakpoint and stop executing instructions. Alyssa can then use <code>get-register-contents</code> and <code>set-register-contents!</code> to manipulate the state of the simulated machine. She should then be able to continue execution by saying</p>
<p></p>
<p></p>
<p><code>(proceed-machine &lt;machine&gt;)</code></p>
<p></p>
<p>She should also be able to remove a specific breakpoint by means of</p>
<p></p>
<p></p>
<p><code>(cancel-breakpoint &lt;machine&gt; &lt;label&gt; &lt;n&gt;)</code></p>
<p></p>
<p>or to remove all breakpoints by means of</p>
<p></p>
<p></p>
<p><code>(cancel-all-breakpoints &lt;machine&gt;)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_727"><sup>4</sup></a> Using the <code>receive</code> procedure here is a way to get <code>extract-labels</code> to effectively return two values -- <code>labels</code> and <code>insts</code> -- without explicitly making a compound data structure to hold them. An alternative implementation, which returns an explicit pair of values, is</p>
<p></p>
<p><code>(define (extract-labels text)   (if (null? text)       (cons '() '())       (let ((result (extract-labels (cdr text))))         (let ((insts (car result)) (labels (cdr result)))           (let ((next-inst (car text)))             (if (symbol? next-inst)                 (cons insts                       (cons (make-label-entry next-inst insts) labels))                 (cons (cons (make-instruction next-inst) insts)                       labels)))))))</code></p>
<p></p>
<p>which would be called by <code>assemble</code> as follows:</p>
<p></p>
<p><code>(define (assemble controller-text machine)   (let ((result (extract-labels controller-text)))     (let ((insts (car result)) (labels (cdr result)))       (update-insts! insts labels machine)       insts)))</code></p>
<p></p>
<p>You can consider our use of <code>receive</code> as demonstrating an elegant way to return multiple values, or simply an excuse to show off a programming trick. An argument like <code>receive</code> that is the next procedure to be invoked is called a ``continuation.'' Recall that we also used continuations to implement the backtracking control structure in the <code>amb</code> evaluator in section <a href="book-Z-H-28.html#%_sec_4.3.3">4.3.3</a>.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-31.html">previous</a>, <a href="book-Z-H-33.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-32.html">previous</a>, <a href="book-Z-H-34.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_5.3">5.3  Storage Allocation and Garbage Collection</a></h2>
<p>In section <a href="book-Z-H-34.html#%_sec_5.4">5.4</a>, we will show how to implement a Scheme evaluator as a register machine. In order to simplify the discussion, we will assume that our register machines can be equipped with a <em>list-structured memory</em>, in which the basic operations for manipulating list-structured data are primitive. Postulating the existence of such a memory is a useful abstraction when one is focusing on the mechanisms of control in a Scheme interpreter, but this does not reflect a realistic view of the actual primitive data operations of contemporary computers. To obtain a more complete picture of how a Lisp system operates, we must investigate how list structure can be represented in a way that is compatible with conventional computer memories.</p>
<p>There are two considerations in implementing list structure. The first is purely an issue of representation: how to represent the ``box-and-pointer'' structure of Lisp pairs, using only the storage and addressing capabilities of typical computer memories. The second issue concerns the management of memory as a computation proceeds. The operation of a Lisp system depends crucially on the ability to continually create new data objects. These include objects that are explicitly created by the Lisp procedures being interpreted as well as structures created by the interpreter itself, such as environments and argument lists. Although the constant creation of new data objects would pose no problem on a computer with an infinite amount of rapidly addressable memory, computer memories are available only in finite sizes (more's the pity). Lisp systems thus provide an <em>automatic storage allocation</em> facility to support the illusion of an infinite memory. When a data object is no longer needed, the memory allocated to it is automatically recycled and used to construct new data objects. There are various techniques for providing such automatic storage allocation. The method we shall discuss in this section is called <em>garbage collection</em>.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.3.1">5.3.1  Memory as Vectors</a></h3>
<p></p>
<p>A conventional computer memory can be thought of as an array of cubbyholes, each of which can contain a piece of information. Each cubbyhole has a unique name, called its <em>address</em> or <em>location</em>. Typical memory systems provide two primitive operations: one that fetches the data stored in a specified location and one that assigns new data to a specified location. Memory addresses can be incremented to support sequential access to some set of the cubbyholes. More generally, many important data operations require that memory addresses be treated as data, which can be stored in memory locations and manipulated in machine registers. The representation of list structure is one application of such <em>address arithmetic</em>.</p>
<p>To model computer memory, we use a new kind of data structure called a <em>vector</em>. Abstractly, a vector is a compound data object whose individual elements can be accessed by means of an integer index in an amount of time that is independent of the index.<a href="#footnote_Temp_744"><sup>5</sup></a> In order to describe memory operations, we use two primitive Scheme procedures for manipulating vectors:</p>
<p></p>
<p></p>
<ul>
<li><code>(vector-ref &lt;vector&gt; &lt;n&gt;)</code> returns the <em>n</em>th element of the vector.</li>
<li><code>(vector-set! &lt;vector&gt; &lt;n&gt; &lt;value&gt;)</code> sets the <em>n</em>th element of the vector to the designated value.</li>
</ul>
<p>For example, if <code>v</code> is a vector, then <code>(vector-ref v 5)</code> gets the fifth entry in the vector <code>v</code> and <code>(vector-set! v 5 7)</code> changes the value of the fifth entry of the vector <code>v</code> to 7.<a href="#footnote_Temp_745"><sup>6</sup></a> For computer memory, this access can be implemented through the use of address arithmetic to combine a <em>base address</em> that specifies the beginning location of a vector in memory with an <em>index</em> that specifies the offset of a particular element of the vector.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_746">Representing Lisp data</a></h4>
<p>We can use vectors to implement the basic pair structures required for a list-structured memory. Let us imagine that computer memory is divided into two vectors: <code>the-cars</code> and <code>the-cdrs</code>. We will represent list structure as follows: A pointer to a pair is an index into the two vectors. The <code>car</code> of the pair is the entry in <code>the-cars</code> with the designated index, and the <code>cdr</code> of the pair is the entry in <code>the-cdrs</code> with the designated index. We also need a representation for objects other than pairs (such as numbers and symbols) and a way to distinguish one kind of data from another. There are many methods of accomplishing this, but they all reduce to using <em>typed pointers</em>, that is, to extending the notion of ``pointer'' to include information on data type.<a href="#footnote_Temp_747"><sup>7</sup></a> The data type enables the system to distinguish a pointer to a pair (which consists of the ``pair'' data type and an index into the memory vectors) from pointers to other kinds of data (which consist of some other data type and whatever is being used to represent data of that type). Two data objects are considered to be the same (<code>eq?</code>) if their pointers are identical.<a href="#footnote_Temp_748"><sup>8</sup></a> Figure <a href="#%_fig_5.14">5.14</a> illustrates the use of this method to represent the list <code>((1 2) 3 4)</code>, whose box-and-pointer diagram is also shown. We use letter prefixes to denote the data-type information. Thus, a pointer to the pair with index 5 is denoted <code>p5</code>, the empty list is denoted by the pointer <code>e0</code>, and a pointer to the number 4 is denoted <code>n4</code>. In the box-and-pointer diagram, we have indicated at the lower left of each pair the vector index that specifies where the <code>car</code> and <code>cdr</code> of the pair are stored. The blank locations in <code>the-cars</code> and <code>the-cdrs</code> may contain parts of other list structures (not of interest here).</p>
<p></p>
<p></p>
<p><img src="ch5-Z-G-7.gif" /></p>
<p><strong>Figure 5.14:</strong>  Box-and-pointer and memory-vector representations of the list <code>((1 2) 3 4)</code>.</p>
<p></p>
<p>A pointer to a number, such as <code>n4</code>, might consist of a type indicating numeric data together with the actual representation of the number 4.<a href="#footnote_Temp_749"><sup>9</sup></a> To deal with numbers that are too large to be represented in the fixed amount of space allocated for a single pointer, we could use a distinct <em>bignum</em> data type, for which the pointer designates a list in which the parts of the number are stored.<a href="#footnote_Temp_750"><sup>10</sup></a></p>
<p>A symbol might be represented as a typed pointer that designates a sequence of the characters that form the symbol's printed representation. This sequence is constructed by the Lisp reader when the character string is initially encountered in input. Since we want two instances of a symbol to be recognized as the ``same'' symbol by <code>eq?</code> and we want <code>eq?</code> to be a simple test for equality of pointers, we must ensure that if the reader sees the same character string twice, it will use the same pointer (to the same sequence of characters) to represent both occurrences. To accomplish this, the reader maintains a table, traditionally called the <em>obarray</em>, of all the symbols it has ever encountered. When the reader encounters a character string and is about to construct a symbol, it checks the obarray to see if it has ever before seen the same character string. If it has not, it uses the characters to construct a new symbol (a typed pointer to a new character sequence) and enters this pointer in the obarray. If the reader has seen the string before, it returns the symbol pointer stored in the obarray. This process of replacing character strings by unique pointers is called <em>interning</em> symbols.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_751">Implementing the primitive list operations</a></h4>
<p></p>
<p>Given the above representation scheme, we can replace each ``primitive'' list operation of a register machine with one or more primitive vector operations. We will use two registers, <code>the-cars</code> and <code>the-cdrs</code>, to identify the memory vectors, and will assume that <code>vector-ref</code> and <code>vector-set!</code> are available as primitive operations. We also assume that numeric operations on pointers (such as incrementing a pointer, using a pair pointer to index a vector, or adding two numbers) use only the index portion of the typed pointer.</p>
<p>For example, we can make a register machine support the instructions</p>
<p></p>
<p></p>
<p><code>(assign &lt;reg1&gt; (op car) (reg &lt;reg2&gt;))  (assign &lt;reg1&gt; (op cdr) (reg &lt;reg2&gt;))</code></p>
<p></p>
<p>if we implement these, respectively, as</p>
<p></p>
<p></p>
<p><code>(assign &lt;reg1&gt; (op vector-ref) (reg the-cars) (reg &lt;reg2&gt;))  (assign &lt;reg1&gt; (op vector-ref) (reg the-cdrs) (reg &lt;reg2&gt;))</code></p>
<p></p>
<p>The instructions</p>
<p></p>
<p></p>
<p><code>(perform (op set-car!) (reg &lt;reg1&gt;) (reg &lt;reg2&gt;))  (perform (op set-cdr!) (reg &lt;reg1&gt;) (reg &lt;reg2&gt;))</code></p>
<p></p>
<p>are implemented as</p>
<p></p>
<p><code>(perform  (op vector-set!) (reg the-cars) (reg &lt;reg1&gt;) (reg &lt;reg2&gt;))  (perform  (op vector-set!) (reg the-cdrs) (reg &lt;reg1&gt;) (reg &lt;reg2&gt;))</code></p>
<p></p>
<p></p>
<p><code>Cons</code> is performed by allocating an unused index and storing the arguments to <code>cons</code> in <code>the-cars</code> and <code>the-cdrs</code> at that indexed vector position. We presume that there is a special register, <code>free</code>, that always holds a pair pointer containing the next available index, and that we can increment the index part of that pointer to find the next free location.<a href="#footnote_Temp_752"><sup>11</sup></a> For example, the instruction</p>
<p></p>
<p></p>
<p><code>(assign &lt;reg1&gt; (op cons) (reg &lt;reg2&gt;) (reg &lt;reg3&gt;))</code></p>
<p></p>
<p>is implemented as the following sequence of vector operations:<a href="#footnote_Temp_753"><sup>12</sup></a></p>
<p></p>
<p></p>
<p><code>(perform  (op vector-set!) (reg the-cars) (reg free) (reg &lt;reg2&gt;)) (perform  (op vector-set!) (reg the-cdrs) (reg free) (reg &lt;reg3&gt;)) (assign &lt;reg1&gt; (reg free)) (assign free (op +) (reg free) (const 1))</code></p>
<p></p>
<p>The <code>eq?</code> operation</p>
<p></p>
<p></p>
<p><code>(op eq?) (reg &lt;reg1&gt;) (reg &lt;reg2&gt;)</code></p>
<p></p>
<p>simply tests the equality of all fields in the registers, and predicates such as <code>pair?</code>, <code>null?</code>, <code>symbol?</code>, and <code>number?</code> need only check the type field.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_754">Implementing stacks</a></h4>
<p>Although our register machines use stacks, we need do nothing special here, since stacks can be modeled in terms of lists. The stack can be a list of the saved values, pointed to by a special register <code>the-stack</code>. Thus, <code>(save &lt;reg&gt;)</code> can be implemented as</p>
<p></p>
<p></p>
<p><code>(assign the-stack (op cons) (reg &lt;reg&gt;) (reg the-stack))</code></p>
<p></p>
<p>Similarly, <code>(restore &lt;reg&gt;)</code> can be implemented as</p>
<p></p>
<p><code>(assign &lt;reg&gt; (op car) (reg the-stack)) (assign the-stack (op cdr) (reg the-stack))</code></p>
<p></p>
<p>and <code>(perform (op initialize-stack))</code> can be implemented as</p>
<p></p>
<p><code>(assign the-stack (const ()))</code></p>
<p></p>
<p>These operations can be further expanded in terms of the vector operations given above. In conventional computer architectures, however, it is usually advantageous to allocate the stack as a separate vector. Then pushing and popping the stack can be accomplished by incrementing or decrementing an index into that vector.</p>
<p></p>
<p><strong>Exercise 5.20.</strong>  Draw the box-and-pointer representation and the memory-vector representation (as in figure <a href="#%_fig_5.14">5.14</a>) of the list structure produced by</p>
<p></p>
<p></p>
<p><code>(define x (cons 1 2)) (define y (list x x))</code></p>
<p></p>
<p>with the <code>free</code> pointer initially <code>p1</code>. What is the final value of <code>free</code> ? What pointers represent the values of <code>x</code> and <code>y</code> ?</p>
<p></p>
<p></p>
<p><strong>Exercise 5.21.</strong>  Implement register machines for the following procedures. Assume that the list-structure memory operations are available as machine primitives.</p>
<p></p>
<p></p>
<p>a. Recursive <code>count-leaves</code>:</p>
<p></p>
<p></p>
<p><code>(define (count-leaves tree)   (cond ((null? tree) 0)         ((not (pair? tree)) 1)         (else (+ (count-leaves (car tree))                  (count-leaves (cdr tree))))))</code></p>
<p></p>
<p></p>
<p></p>
<p>b. Recursive <code>count-leaves</code> with explicit counter:</p>
<p></p>
<p></p>
<p><code>(define (count-leaves tree)   (define (count-iter tree n)     (cond ((null? tree) n)           ((not (pair? tree)) (+ n 1))           (else (count-iter (cdr tree)                             (count-iter (car tree) n)))))   (count-iter tree 0))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 5.22.</strong>  Exercise <a href="book-Z-H-22.html#%_thm_3.12">3.12</a> of section <a href="book-Z-H-22.html#%_sec_3.3.1">3.3.1</a> presented an <code>append</code> procedure that appends two lists to form a new list and an <code>append!</code> procedure that splices two lists together. Design a register machine to implement each of these procedures. Assume that the list-structure memory operations are available as primitive operations.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.3.2">5.3.2  Maintaining the Illusion of Infinite Memory</a></h3>
<p></p>
<p>The representation method outlined in section <a href="#%_sec_5.3.1">5.3.1</a> solves the problem of implementing list structure, provided that we have an infinite amount of memory. With a real computer we will eventually run out of free space in which to construct new pairs.<a href="#footnote_Temp_758"><sup>13</sup></a> However, most of the pairs generated in a typical computation are used only to hold intermediate results. After these results are accessed, the pairs are no longer needed -- they are <em>garbage</em>. For instance, the computation</p>
<p></p>
<p></p>
<p><code>(accumulate + 0 (filter odd? (enumerate-interval 0 n)))</code></p>
<p></p>
<p>constructs two lists: the enumeration and the result of filtering the enumeration. When the accumulation is complete, these lists are no longer needed, and the allocated memory can be reclaimed. If we can arrange to collect all the garbage periodically, and if this turns out to recycle memory at about the same rate at which we construct new pairs, we will have preserved the illusion that there is an infinite amount of memory.</p>
<p>In order to recycle pairs, we must have a way to determine which allocated pairs are not needed (in the sense that their contents can no longer influence the future of the computation). The method we shall examine for accomplishing this is known as <em>garbage collection</em>. Garbage collection is based on the observation that, at any moment in a Lisp interpretation, the only objects that can affect the future of the computation are those that can be reached by some succession of <code>car</code> and <code>cdr</code> operations starting from the pointers that are currently in the machine registers.<a href="#footnote_Temp_759"><sup>14</sup></a> Any memory cell that is not so accessible may be recycled.</p>
<p>There are many ways to perform garbage collection. The method we shall examine here is called <em>stop-and-copy</em>. The basic idea is to divide memory into two halves: ``working memory'' and ``free memory.'' When <code>cons</code> constructs pairs, it allocates these in working memory. When working memory is full, we perform garbage collection by locating all the useful pairs in working memory and copying these into consecutive locations in free memory. (The useful pairs are located by tracing all the <code>car</code> and <code>cdr</code> pointers, starting with the machine registers.) Since we do not copy the garbage, there will presumably be additional free memory that we can use to allocate new pairs. In addition, nothing in the working memory is needed, since all the useful pairs in it have been copied. Thus, if we interchange the roles of working memory and free memory, we can continue processing; new pairs will be allocated in the new working memory (which was the old free memory). When this is full, we can copy the useful pairs into the new free memory (which was the old working memory).<a href="#footnote_Temp_760"><sup>15</sup></a></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_761">Implementation of a stop-and-copy garbage collector</a></h4>
<p>We now use our register-machine language to describe the stop-and-copy algorithm in more detail. We will assume that there is a register called <code>root</code> that contains a pointer to a structure that eventually points at all accessible data. This can be arranged by storing the contents of all the machine registers in a pre-allocated list pointed at by <code>root</code> just before starting garbage collection.<a href="#footnote_Temp_762"><sup>16</sup></a> We also assume that, in addition to the current working memory, there is free memory available into which we can copy the useful data. The current working memory consists of vectors whose base addresses are in registers called <code>the-cars</code> and <code>the-cdrs</code>, and the free memory is in registers called <code>new-cars</code> and <code>new-cdrs</code>.</p>
<p>Garbage collection is triggered when we exhaust the free cells in the current working memory, that is, when a <code>cons</code> operation attempts to increment the <code>free</code> pointer beyond the end of the memory vector. When the garbage-collection process is complete, the <code>root</code> pointer will point into the new memory, all objects accessible from the <code>root</code> will have been moved to the new memory, and the <code>free</code> pointer will indicate the next place in the new memory where a new pair can be allocated. In addition, the roles of working memory and new memory will have been interchanged -- new pairs will be constructed in the new memory, beginning at the place indicated by <code>free</code>, and the (previous) working memory will be available as the new memory for the next garbage collection. Figure <a href="#%_fig_5.15">5.15</a> shows the arrangement of memory just before and just after garbage collection.</p>
<p></p>
<p></p>
<p><img src="ch5-Z-G-8.gif" /></p>
<p><strong>Figure 5.15:</strong>  Reconfiguration of memory by the garbage-collection process.</p>
<p></p>
<p>The state of the garbage-collection process is controlled by maintaining two pointers: <code>free</code> and <code>scan</code>. These are initialized to point to the beginning of the new memory. The algorithm begins by relocating the pair pointed at by <code>root</code> to the beginning of the new memory. The pair is copied, the <code>root</code> pointer is adjusted to point to the new location, and the <code>free</code> pointer is incremented. In addition, the old location of the pair is marked to show that its contents have been moved. This marking is done as follows: In the <code>car</code> position, we place a special tag that signals that this is an already-moved object. (Such an object is traditionally called a <em>broken heart</em>.)<a href="#footnote_Temp_763"><sup>17</sup></a> In the <code>cdr</code> position we place a <em>forwarding address</em> that points at the location to which the object has been moved.</p>
<p>After relocating the root, the garbage collector enters its basic cycle. At each step in the algorithm, the <code>scan</code> pointer (initially pointing at the relocated root) points at a pair that has been moved to the new memory but whose <code>car</code> and <code>cdr</code> pointers still refer to objects in the old memory. These objects are each relocated, and the <code>scan</code> pointer is incremented. To relocate an object (for example, the object indicated by the <code>car</code> pointer of the pair we are scanning) we check to see if the object has already been moved (as indicated by the presence of a broken-heart tag in the <code>car</code> position of the object). If the object has not already been moved, we copy it to the place indicated by <code>free</code>, update <code>free</code>, set up a broken heart at the object's old location, and update the pointer to the object (in this example, the <code>car</code> pointer of the pair we are scanning) to point to the new location. If the object has already been moved, its forwarding address (found in the <code>cdr</code> position of the broken heart) is substituted for the pointer in the pair being scanned. Eventually, all accessible objects will have been moved and scanned, at which point the <code>scan</code> pointer will overtake the <code>free</code> pointer and the process will terminate.</p>
<p></p>
<p>We can specify the stop-and-copy algorithm as a sequence of instructions for a register machine. The basic step of relocating an object is accomplished by a subroutine called <code>relocate-old-result-in-new</code>. This subroutine gets its argument, a pointer to the object to be relocated, from a register named <code>old</code>. It relocates the designated object (incrementing <code>free</code> in the process), puts a pointer to the relocated object into a register called <code>new</code>, and returns by branching to the entry point stored in the register <code>relocate-continue</code>. To begin garbage collection, we invoke this subroutine to relocate the <code>root</code> pointer, after initializing <code>free</code> and <code>scan</code>. When the relocation of <code>root</code> has been accomplished, we install the new pointer as the new <code>root</code> and enter the main loop of the garbage collector.</p>
<p></p>
<p></p>
<p><code>begin-garbage-collection   (assign free (const 0))   (assign scan (const 0))   (assign old (reg root))   (assign relocate-continue (label reassign-root))   (goto (label relocate-old-result-in-new)) reassign-root   (assign root (reg new))   (goto (label gc-loop))</code></p>
<p></p>
<p></p>
<p>In the main loop of the garbage collector we must determine whether there are any more objects to be scanned. We do this by testing whether the <code>scan</code> pointer is coincident with the <code>free</code> pointer. If the pointers are equal, then all accessible objects have been relocated, and we branch to <code>gc-flip</code>, which cleans things up so that we can continue the interrupted computation. If there are still pairs to be scanned, we call the relocate subroutine to relocate the <code>car</code> of the next pair (by placing the <code>car</code> pointer in <code>old</code>). The <code>relocate-continue</code> register is set up so that the subroutine will return to update the <code>car</code> pointer.</p>
<p></p>
<p></p>
<p><code>gc-loop   (test (op =) (reg scan) (reg free))   (branch (label gc-flip))   (assign old (op vector-ref) (reg new-cars) (reg scan))   (assign relocate-continue (label update-car))   (goto (label relocate-old-result-in-new))</code></p>
<p></p>
<p></p>
<p></p>
<p>At <code>update-car</code>, we modify the <code>car</code> pointer of the pair being scanned, then proceed to relocate the <code>cdr</code> of the pair. We return to <code>update-cdr</code> when that relocation has been accomplished. After relocating and updating the <code>cdr</code>, we are finished scanning that pair, so we continue with the main loop.</p>
<p></p>
<p></p>
<p><code>update-car   (perform    (op vector-set!) (reg new-cars) (reg scan) (reg new))   (assign old (op vector-ref) (reg new-cdrs) (reg scan))   (assign relocate-continue (label update-cdr))   (goto (label relocate-old-result-in-new))  update-cdr   (perform    (op vector-set!) (reg new-cdrs) (reg scan) (reg new))   (assign scan (op +) (reg scan) (const 1))   (goto (label gc-loop))</code></p>
<p></p>
<p></p>
<p>The subroutine <code>relocate-old-result-in-new</code> relocates objects as follows: If the object to be relocated (pointed at by <code>old</code>) is not a pair, then we return the same pointer to the object unchanged (in <code>new</code>). (For example, we may be scanning a pair whose <code>car</code> is the number 4. If we represent the <code>car</code> by <code>n4</code>, as described in section <a href="#%_sec_5.3.1">5.3.1</a>, then we want the ``relocated'' <code>car</code> pointer to still be <code>n4</code>.) Otherwise, we must perform the relocation. If the <code>car</code> position of the pair to be relocated contains a broken-heart tag, then the pair has in fact already been moved, so we retrieve the forwarding address (from the <code>cdr</code> position of the broken heart) and return this in <code>new</code>. If the pointer in <code>old</code> points at a yet-unmoved pair, then we move the pair to the first free cell in new memory (pointed at by <code>free</code>) and set up the broken heart by storing a broken-heart tag and forwarding address at the old location. <code>Relocate-old-result-in-new</code> uses a register <code>oldcr</code> to hold the <code>car</code> or the <code>cdr</code> of the object pointed at by <code>old</code>.<a href="#footnote_Temp_764"><sup>18</sup></a></p>
<p></p>
<p></p>
<p><code>relocate-old-result-in-new   (test (op pointer-to-pair?) (reg old))   (branch (label pair))   (assign new (reg old))   (goto (reg relocate-continue)) pair   (assign oldcr (op vector-ref) (reg the-cars) (reg old))   (test (op broken-heart?) (reg oldcr))   (branch (label already-moved))   (assign new (reg free)) ; new location for pair   ;; Update free</code> pointer.<br />   (assign free (op +) (reg free) (const 1))<br />   <em>;; Copy the <code>car</code> and <code>cdr</code> to new memory.</em><br />   (perform (op vector-set!)<br />            (reg new-cars) (reg new) (reg oldcr))<br />   (assign oldcr (op vector-ref) (reg the-cdrs) (reg old))<br />   (perform (op vector-set!)<br />            (reg new-cdrs) (reg new) (reg oldcr))<br />   <em>;; Construct the broken heart.</em><br />   (perform (op vector-set!)<br />            (reg the-cars) (reg old) (const broken-heart))<br />   (perform<br />    (op vector-set!) (reg the-cdrs) (reg old) (reg new))<br />   (goto (reg relocate-continue))<br /> already-moved<br />   (assign new (op vector-ref) (reg the-cdrs) (reg old))<br />   (goto (reg relocate-continue))<br /></p>
<p></p>
<p></p>
<p>At the very end of the garbage-collection process, we interchange the role of old and new memories by interchanging pointers: interchanging <code>the-cars</code> with <code>new-cars</code>, and <code>the-cdrs</code> with <code>new-cdrs</code>. We will then be ready to perform another garbage collection the next time memory runs out.</p>
<p></p>
<p></p>
<p><code>gc-flip   (assign temp (reg the-cdrs))   (assign the-cdrs (reg new-cdrs))   (assign new-cdrs (reg temp))   (assign temp (reg the-cars))   (assign the-cars (reg new-cars))   (assign new-cars (reg temp))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_744"><sup>5</sup></a> We could represent memory as lists of items. However, the access time would then not be independent of the index, since accessing the <em>n</em>th element of a list requires <em>n</em> - 1 <code>cdr</code> operations.</p>
<p><a href="#call_footnote_Temp_745"><sup>6</sup></a> For completeness, we should specify a <code>make-vector</code> operation that constructs vectors. However, in the present application we will use vectors only to model fixed divisions of the computer memory.</p>
<p><a href="#call_footnote_Temp_747"><sup>7</sup></a> This is precisely the same ``tagged data'' idea we introduced in chapter 2 for dealing with generic operations. Here, however, the data types are included at the primitive machine level rather than constructed through the use of lists.</p>
<p><a href="#call_footnote_Temp_748"><sup>8</sup></a> Type information may be encoded in a variety of ways, depending on the details of the machine on which the Lisp system is to be implemented. The execution efficiency of Lisp programs will be strongly dependent on how cleverly this choice is made, but it is difficult to formulate general design rules for good choices. The most straightforward way to implement typed pointers is to allocate a fixed set of bits in each pointer to be a <em>type field</em> that encodes the data type. Important questions to be addressed in designing such a representation include the following: How many type bits are required? How large must the vector indices be? How efficiently can the primitive machine instructions be used to manipulate the type fields of pointers? Machines that include special hardware for the efficient handling of type fields are said to have <em>tagged architectures</em>.</p>
<p><a href="#call_footnote_Temp_749"><sup>9</sup></a> This decision on the representation of numbers determines whether <code>eq?</code>, which tests equality of pointers, can be used to test for equality of numbers. If the pointer contains the number itself, then equal numbers will have the same pointer. But if the pointer contains the index of a location where the number is stored, equal numbers will be guaranteed to have equal pointers only if we are careful never to store the same number in more than one location.</p>
<p><a href="#call_footnote_Temp_750"><sup>10</sup></a> This is just like writing a number as a sequence of digits, except that each ``digit'' is a number between 0 and the largest number that can be stored in a single pointer.</p>
<p><a href="#call_footnote_Temp_752"><sup>11</sup></a> There are other ways of finding free storage. For example, we could link together all the unused pairs into a <em>free list</em>. Our free locations are consecutive (and hence can be accessed by incrementing a pointer) because we are using a compacting garbage collector, as we will see in section <a href="#%_sec_5.3.2">5.3.2</a>.</p>
<p><a href="#call_footnote_Temp_753"><sup>12</sup></a> This is essentially the implementation of <code>cons</code> in terms of <code>set-car!</code> and <code>set-cdr!</code>, as described in section <a href="book-Z-H-22.html#%_sec_3.3.1">3.3.1</a>. The operation <code>get-new-pair</code> used in that implementation is realized here by the <code>free</code> pointer.</p>
<p><a href="#call_footnote_Temp_758"><sup>13</sup></a> This may not be true eventually, because memories may get large enough so that it would be impossible to run out of free memory in the lifetime of the computer. For example, there are about 3× 10<sup>13</sup>, microseconds in a year, so if we were to <code>cons</code> once per microsecond we would need about 10<sup>15</sup> cells of memory to build a machine that could operate for 30 years without running out of memory. That much memory seems absurdly large by today's standards, but it is not physically impossible. On the other hand, processors are getting faster and a future computer may have large numbers of processors operating in parallel on a single memory, so it may be possible to use up memory much faster than we have postulated.</p>
<p><a href="#call_footnote_Temp_759"><sup>14</sup></a> We assume here that the stack is represented as a list as described in section <a href="#%_sec_5.3.1">5.3.1</a>, so that items on the stack are accessible via the pointer in the stack register.</p>
<p><a href="#call_footnote_Temp_760"><sup>15</sup></a> This idea was invented and first implemented by Minsky, as part of the implementation of Lisp for the PDP-1 at the MIT Research Laboratory of Electronics. It was further developed by Fenichel and Yochelson (1969) for use in the Lisp implementation for the Multics time-sharing system. Later, Baker (1978) developed a ``real-time'' version of the method, which does not require the computation to stop during garbage collection. Baker's idea was extended by Hewitt, Lieberman, and Moon (see Lieberman and Hewitt 1983) to take advantage of the fact that some structure is more volatile and other structure is more permanent.</p>
<p>An alternative commonly used garbage-collection technique is the <em>mark-sweep</em> method. This consists of tracing all the structure accessible from the machine registers and marking each pair we reach. We then scan all of memory, and any location that is unmarked is ``swept up'' as garbage and made available for reuse. A full discussion of the mark-sweep method can be found in Allen 1978.</p>
<p>The Minsky-Fenichel-Yochelson algorithm is the dominant algorithm in use for large-memory systems because it examines only the useful part of memory. This is in contrast to mark-sweep, in which the sweep phase must check all of memory. A second advantage of stop-and-copy is that it is a <em>compacting</em> garbage collector. That is, at the end of the garbage-collection phase the useful data will have been moved to consecutive memory locations, with all garbage pairs compressed out. This can be an extremely important performance consideration in machines with virtual memory, in which accesses to widely separated memory addresses may require extra paging operations.</p>
<p><a href="#call_footnote_Temp_762"><sup>16</sup></a> This list of registers does not include the registers used by the storage-allocation system -- <code>root</code>, <code>the-cars</code>, <code>the-cdrs</code>, and the other registers that will be introduced in this section.</p>
<p><a href="#call_footnote_Temp_763"><sup>17</sup></a> The term <em>broken heart</em> was coined by David Cressey, who wrote a garbage collector for MDL, a dialect of Lisp developed at MIT during the early 1970s.</p>
<p><a href="#call_footnote_Temp_764"><sup>18</sup></a> The garbage collector uses the low-level predicate <code>pointer-to-pair?</code> instead of the list-structure <code>pair?</code> operation because in a real system there might be various things that are treated as pairs for garbage-collection purposes. For example, in a Scheme system that conforms to the IEEE standard a procedure object may be implemented as a special kind of ``pair'' that doesn't satisfy the <code>pair?</code> predicate. For simulation purposes, <code>pointer-to-pair?</code> can be implemented as <code>pair?</code>.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-32.html">previous</a>, <a href="book-Z-H-34.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-33.html">previous</a>, <a href="book-Z-H-35.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_5.4">5.4  The Explicit-Control Evaluator</a></h2>
<p>In section <a href="book-Z-H-31.html#%_sec_5.1">5.1</a> we saw how to transform simple Scheme programs into descriptions of register machines. We will now perform this transformation on a more complex program, the metacircular evaluator of sections <a href="book-Z-H-26.html#%_sec_4.1.1">4.1.1</a>-<a href="book-Z-H-26.html#%_sec_4.1.4">4.1.4</a>, which shows how the behavior of a Scheme interpreter can be described in terms of the procedures <code>eval</code> and <code>apply</code>. The <em>explicit-control evaluator</em> that we develop in this section shows how the underlying procedure-calling and argument-passing mechanisms used in the evaluation process can be described in terms of operations on registers and stacks. In addition, the explicit-control evaluator can serve as an implementation of a Scheme interpreter, written in a language that is very similar to the native machine language of conventional computers. The evaluator can be executed by the register-machine simulator of section <a href="book-Z-H-32.html#%_sec_5.2">5.2</a>. Alternatively, it can be used as a starting point for building a machine-language implementation of a Scheme evaluator, or even a special-purpose machine for evaluating Scheme expressions. Figure <a href="#%_fig_5.16">5.16</a> shows such a hardware implementation: a silicon chip that acts as an evaluator for Scheme. The chip designers started with the data-path and controller specifications for a register machine similar to the evaluator described in this section and used design automation programs to construct the integrated-circuit layout.<a href="#footnote_Temp_765"><sup>19</sup></a></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_766">Registers and operations</a></h4>
<p>In designing the explicit-control evaluator, we must specify the operations to be used in our register machine. We described the metacircular evaluator in terms of abstract syntax, using procedures such as <code>quoted?</code> and <code>make-procedure</code>. In implementing the register machine, we could expand these procedures into sequences of elementary list-structure memory operations, and implement these operations on our register machine. However, this would make our evaluator very long, obscuring the basic structure with details. To clarify the presentation, we will include as primitive operations of the register machine the syntax procedures given in section <a href="book-Z-H-26.html#%_sec_4.1.2">4.1.2</a> and the procedures for representing environments and other run-time data given in sections <a href="book-Z-H-26.html#%_sec_4.1.3">4.1.3</a> and <a href="book-Z-H-26.html#%_sec_4.1.4">4.1.4</a>. In order to completely specify an evaluator that could be programmed in a low-level machine language or implemented in hardware, we would replace these operations by more elementary operations, using the list-structure implementation we described in section <a href="book-Z-H-33.html#%_sec_5.3">5.3</a>.</p>
<p></p>
<p></p>
<p><img src="chip.jpg" /></p>
<p><strong>Figure 5.16:</strong>  A silicon-chip implementation of an evaluator for Scheme.</p>
<p></p>
<p>Our Scheme evaluator register machine includes a stack and seven registers: <code>exp</code>, <code>env</code>, <code>val</code>, <code>continue</code>, <code>proc</code>, <code>argl</code>, and <code>unev</code>. <code>Exp</code> is used to hold the expression to be evaluated, and <code>env</code> contains the environment in which the evaluation is to be performed. At the end of an evaluation, <code>val</code> contains the value obtained by evaluating the expression in the designated environment. The <code>continue</code> register is used to implement recursion, as explained in section <a href="book-Z-H-31.html#%_sec_5.1.4">5.1.4</a>. (The evaluator needs to call itself recursively, since evaluating an expression requires evaluating its subexpressions.) The registers <code>proc</code>, <code>argl</code>, and <code>unev</code> are used in evaluating combinations.</p>
<p>We will not provide a data-path diagram to show how the registers and operations of the evaluator are connected, nor will we give the complete list of machine operations. These are implicit in the evaluator's controller, which will be presented in detail.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.4.1">5.4.1  The Core of the Explicit-Control Evaluator</a></h3>
<p>The central element in the evaluator is the sequence of instructions beginning at <code>eval-dispatch</code>. This corresponds to the <code>eval</code> procedure of the metacircular evaluator described in section <a href="book-Z-H-26.html#%_sec_4.1.1">4.1.1</a>. When the controller starts at <code>eval-dispatch</code>, it evaluates the expression specified by <code>exp</code> in the environment specified by <code>env</code>. When evaluation is complete, the controller will go to the entry point stored in <code>continue</code>, and the <code>val</code> register will hold the value of the expression. As with the metacircular <code>eval</code>, the structure of <code>eval-dispatch</code> is a case analysis on the syntactic type of the expression to be evaluated.<a href="#footnote_Temp_767"><sup>20</sup></a></p>
<p></p>
<p></p>
<p><code>eval-dispatch   (test (op self-evaluating?) (reg exp))   (branch (label ev-self-eval))   (test (op variable?) (reg exp))   (branch (label ev-variable))   (test (op quoted?) (reg exp))   (branch (label ev-quoted))   (test (op assignment?) (reg exp))   (branch (label ev-assignment))   (test (op definition?) (reg exp))   (branch (label ev-definition))   (test (op if?) (reg exp))   (branch (label ev-if))   (test (op lambda?) (reg exp))   (branch (label ev-lambda))   (test (op begin?) (reg exp))   (branch (label ev-begin))   (test (op application?) (reg exp))   (branch (label ev-application))   (goto (label unknown-expression-type))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_768">Evaluating simple expressions</a></h4>
<p>Numbers and strings (which are self-evaluating), variables, quotations, and <code>lambda</code> expressions have no subexpressions to be evaluated. For these, the evaluator simply places the correct value in the <code>val</code> register and continues execution at the entry point specified by <code>continue</code>. Evaluation of simple expressions is performed by the following controller code:</p>
<p></p>
<p></p>
<p><code>ev-self-eval   (assign val (reg exp))   (goto (reg continue)) ev-variable   (assign val (op lookup-variable-value) (reg exp) (reg env))   (goto (reg continue)) ev-quoted   (assign val (op text-of-quotation) (reg exp))   (goto (reg continue)) ev-lambda   (assign unev (op lambda-parameters) (reg exp))   (assign exp (op lambda-body) (reg exp))   (assign val (op make-procedure)               (reg unev) (reg exp) (reg env))   (goto (reg continue))</code></p>
<p></p>
<p>Observe how <code>ev-lambda</code> uses the <code>unev</code> and <code>exp</code> registers to hold the parameters and body of the lambda expression so that they can be passed to the <code>make-procedure</code> operation, along with the environment in <code>env</code>.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_769">Evaluating procedure applications</a></h4>
<p>A procedure application is specified by a combination containing an operator and operands. The operator is a subexpression whose value is a procedure, and the operands are subexpressions whose values are the arguments to which the procedure should be applied. The metacircular <code>eval</code> handles applications by calling itself recursively to evaluate each element of the combination, and then passing the results to <code>apply</code>, which performs the actual procedure application. The explicit-control evaluator does the same thing; these recursive calls are implemented by <code>goto</code> instructions, together with use of the stack to save registers that will be restored after the recursive call returns. Before each call we will be careful to identify which registers must be saved (because their values will be needed later).<a href="#footnote_Temp_770"><sup>21</sup></a></p>
<p>We begin the evaluation of an application by evaluating the operator to produce a procedure, which will later be applied to the evaluated operands. To evaluate the operator, we move it to the <code>exp</code> register and go to <code>eval-dispatch</code>. The environment in the <code>env</code> register is already the correct one in which to evaluate the operator. However, we save <code>env</code> because we will need it later to evaluate the operands. We also extract the operands into <code>unev</code> and save this on the stack. We set up <code>continue</code> so that <code>eval-dispatch</code> will resume at <code>ev-appl-did-operator</code> after the operator has been evaluated. First, however, we save the old value of <code>continue</code>, which tells the controller where to continue after the application.</p>
<p></p>
<p></p>
<p><code>ev-application   (save continue)   (save env)   (assign unev (op operands) (reg exp))   (save unev)   (assign exp (op operator) (reg exp))   (assign continue (label ev-appl-did-operator))   (goto (label eval-dispatch))</code></p>
<p></p>
<p></p>
<p>Upon returning from evaluating the operator subexpression, we proceed to evaluate the operands of the combination and to accumulate the resulting arguments in a list, held in <code>argl</code>. First we restore the unevaluated operands and the environment. We initialize <code>argl</code> to an empty list. Then we assign to the <code>proc</code> register the procedure that was produced by evaluating the operator. If there are no operands, we go directly to <code>apply-dispatch</code>. Otherwise we save <code>proc</code> on the stack and start the argument-evaluation loop:<a href="#footnote_Temp_771"><sup>22</sup></a></p>
<p></p>
<p></p>
<p><code>ev-appl-did-operator   (restore unev)                  ; the operands   (restore env)   (assign argl (op empty-arglist))   (assign proc (reg val))         ; the operator   (test (op no-operands?) (reg unev))   (branch (label apply-dispatch))   (save proc)</code></p>
<p></p>
<p></p>
<p>Each cycle of the argument-evaluation loop evaluates an operand from the list in <code>unev</code> and accumulates the result into <code>argl</code>. To evaluate an operand, we place it in the <code>exp</code> register and go to <code>eval-dispatch</code>, after setting <code>continue</code> so that execution will resume with the argument-accumulation phase. But first we save the arguments accumulated so far (held in <code>argl</code>), the environment (held in <code>env</code>), and the remaining operands to be evaluated (held in <code>unev</code>). A special case is made for the evaluation of the last operand, which is handled at <code>ev-appl-last-arg</code>.</p>
<p></p>
<p></p>
<p><code>ev-appl-operand-loop   (save argl)   (assign exp (op first-operand) (reg unev))   (test (op last-operand?) (reg unev))   (branch (label ev-appl-last-arg))   (save env)   (save unev)   (assign continue (label ev-appl-accumulate-arg))   (goto (label eval-dispatch))</code></p>
<p></p>
<p></p>
<p>When an operand has been evaluated, the value is accumulated into the list held in <code>argl</code>. The operand is then removed from the list of unevaluated operands in <code>unev</code>, and the argument-evaluation continues.</p>
<p></p>
<p></p>
<p><code>ev-appl-accumulate-arg   (restore unev)   (restore env)   (restore argl)   (assign argl (op adjoin-arg) (reg val) (reg argl))   (assign unev (op rest-operands) (reg unev))   (goto (label ev-appl-operand-loop))</code></p>
<p></p>
<p></p>
<p>Evaluation of the last argument is handled differently. There is no need to save the environment or the list of unevaluated operands before going to <code>eval-dispatch</code>, since they will not be required after the last operand is evaluated. Thus, we return from the evaluation to a special entry point <code>ev-appl-accum-last-arg</code>, which restores the argument list, accumulates the new argument, restores the saved procedure, and goes off to perform the application.<a href="#footnote_Temp_772"><sup>23</sup></a></p>
<p></p>
<p></p>
<p><code>ev-appl-last-arg   (assign continue (label ev-appl-accum-last-arg))   (goto (label eval-dispatch)) ev-appl-accum-last-arg   (restore argl)   (assign argl (op adjoin-arg) (reg val) (reg argl))   (restore proc)   (goto (label apply-dispatch))</code></p>
<p></p>
<p></p>
<p>The details of the argument-evaluation loop determine the order in which the interpreter evaluates the operands of a combination (e.g., left to right or right to left -- see exercise <a href="book-Z-H-20.html#%_thm_3.8">3.8</a>). This order is not determined by the metacircular evaluator, which inherits its control structure from the underlying Scheme in which it is implemented.<a href="#footnote_Temp_773"><sup>24</sup></a> Because the <code>first-operand</code> selector (used in <code>ev-appl-operand-loop</code> to extract successive operands from <code>unev</code>) is implemented as <code>car</code> and the <code>rest-operands</code> selector is implemented as <code>cdr</code>, the explicit-control evaluator will evaluate the operands of a combination in left-to-right order.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_774">Procedure application</a></h4>
<p></p>
<p>The entry point <code>apply-dispatch</code> corresponds to the <code>apply</code> procedure of the metacircular evaluator. By the time we get to <code>apply-dispatch</code>, the <code>proc</code> register contains the procedure to apply and <code>argl</code> contains the list of evaluated arguments to which it must be applied. The saved value of <code>continue</code> (originally passed to <code>eval-dispatch</code> and saved at <code>ev-application</code>), which tells where to return with the result of the procedure application, is on the stack. When the application is complete, the controller transfers to the entry point specified by the saved <code>continue</code>, with the result of the application in <code>val</code>. As with the metacircular <code>apply</code>, there are two cases to consider. Either the procedure to be applied is a primitive or it is a compound procedure.</p>
<p></p>
<p></p>
<p><code>apply-dispatch   (test (op primitive-procedure?) (reg proc))   (branch (label primitive-apply))   (test (op compound-procedure?) (reg proc))     (branch (label compound-apply))   (goto (label unknown-procedure-type))</code></p>
<p></p>
<p></p>
<p>We assume that each primitive is implemented so as to obtain its arguments from <code>argl</code> and place its result in <code>val</code>. To specify how the machine handles primitives, we would have to provide a sequence of controller instructions to implement each primitive and arrange for <code>primitive-apply</code> to dispatch to the instructions for the primitive identified by the contents of <code>proc</code>. Since we are interested in the structure of the evaluation process rather than the details of the primitives, we will instead just use an <code>apply-primitive-procedure</code> operation that applies the procedure in <code>proc</code> to the arguments in <code>argl</code>. For the purpose of simulating the evaluator with the simulator of section <a href="book-Z-H-32.html#%_sec_5.2">5.2</a> we use the procedure <code>apply-primitive-procedure</code>, which calls on the underlying Scheme system to perform the application, just as we did for the metacircular evaluator in section <a href="book-Z-H-26.html#%_sec_4.1.4">4.1.4</a>. After computing the value of the primitive application, we restore <code>continue</code> and go to the designated entry point.</p>
<p></p>
<p></p>
<p><code>primitive-apply   (assign val (op apply-primitive-procedure)               (reg proc)               (reg argl))   (restore continue)   (goto (reg continue))</code></p>
<p></p>
<p></p>
<p>To apply a compound procedure, we proceed just as with the metacircular evaluator. We construct a frame that binds the procedure's parameters to the arguments, use this frame to extend the environment carried by the procedure, and evaluate in this extended environment the sequence of expressions that forms the body of the procedure. <code>Ev-sequence</code>, described below in section <a href="#%_sec_5.4.2">5.4.2</a>, handles the evaluation of the sequence.</p>
<p></p>
<p></p>
<p><code>compound-apply   (assign unev (op procedure-parameters) (reg proc))   (assign env (op procedure-environment) (reg proc))   (assign env (op extend-environment)               (reg unev) (reg argl) (reg env))   (assign unev (op procedure-body) (reg proc))   (goto (label ev-sequence))</code></p>
<p></p>
<p></p>
<p><code>Compound-apply</code> is the only place in the interpreter where the <code>env</code> register is ever assigned a new value. Just as in the metacircular evaluator, the new environment is constructed from the environment carried by the procedure, together with the argument list and the corresponding list of variables to be bound.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.4.2">5.4.2  Sequence Evaluation and Tail Recursion</a></h3>
<p>The portion of the explicit-control evaluator at <code>ev-sequence</code> is analogous to the metacircular evaluator's <code>eval-sequence</code> procedure. It handles sequences of expressions in procedure bodies or in explicit <code>begin</code> expressions.</p>
<p>Explicit <code>begin</code> expressions are evaluated by placing the sequence of expressions to be evaluated in <code>unev</code>, saving <code>continue</code> on the stack, and jumping to <code>ev-sequence</code>.</p>
<p></p>
<p><code>ev-begin   (assign unev (op begin-actions) (reg exp))   (save continue)   (goto (label ev-sequence))</code></p>
<p></p>
<p>The implicit sequences in procedure bodies are handled by jumping to <code>ev-sequence</code> from <code>compound-apply</code>, at which point <code>continue</code> is already on the stack, having been saved at <code>ev-application</code>.</p>
<p>The entries at <code>ev-sequence</code> and <code>ev-sequence-continue</code> form a loop that successively evaluates each expression in a sequence. The list of unevaluated expressions is kept in <code>unev</code>. Before evaluating each expression, we check to see if there are additional expressions to be evaluated in the sequence. If so, we save the rest of the unevaluated expressions (held in <code>unev</code>) and the environment in which these must be evaluated (held in <code>env</code>) and call <code>eval-dispatch</code> to evaluate the expression. The two saved registers are restored upon the return from this evaluation, at <code>ev-sequence-continue</code>.</p>
<p>The final expression in the sequence is handled differently, at the entry point <code>ev-sequence-last-exp</code>. Since there are no more expressions to be evaluated after this one, we need not save <code>unev</code> or <code>env</code> before going to <code>eval-dispatch</code>. The value of the whole sequence is the value of the last expression, so after the evaluation of the last expression there is nothing left to do except continue at the entry point currently held on the stack (which was saved by <code>ev-application</code> or <code>ev-begin</code>.) Rather than setting up <code>continue</code> to arrange for <code>eval-dispatch</code> to return here and then restoring <code>continue</code> from the stack and continuing at that entry point, we restore <code>continue</code> from the stack before going to <code>eval-dispatch</code>, so that <code>eval-dispatch</code> will continue at that entry point after evaluating the expression.</p>
<p></p>
<p></p>
<p><code>ev-sequence   (assign exp (op first-exp) (reg unev))   (test (op last-exp?) (reg unev))   (branch (label ev-sequence-last-exp))   (save unev)   (save env)   (assign continue (label ev-sequence-continue))   (goto (label eval-dispatch)) ev-sequence-continue   (restore env)   (restore unev)   (assign unev (op rest-exps) (reg unev))   (goto (label ev-sequence)) ev-sequence-last-exp   (restore continue)   (goto (label eval-dispatch))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_775">Tail recursion</a></h4>
<p>In chapter 1 we said that the process described by a procedure such as</p>
<p></p>
<p></p>
<p><code>(define (sqrt-iter guess x)   (if (good-enough? guess x)       guess       (sqrt-iter (improve guess x)                  x)))</code></p>
<p></p>
<p>is an iterative process. Even though the procedure is syntactically recursive (defined in terms of itself), it is not logically necessary for an evaluator to save information in passing from one call to <code>sqrt-iter</code> to the next.<a href="#footnote_Temp_776"><sup>25</sup></a> An evaluator that can execute a procedure such as <code>sqrt-iter</code> without requiring increasing storage as the procedure continues to call itself is called a <em>tail-recursive</em> evaluator. The metacircular implementation of the evaluator in chapter 4 does not specify whether the evaluator is tail-recursive, because that evaluator inherits its mechanism for saving state from the underlying Scheme. With the explicit-control evaluator, however, we can trace through the evaluation process to see when procedure calls cause a net accumulation of information on the stack.</p>
<p>Our evaluator is tail-recursive, because in order to evaluate the final expression of a sequence we transfer directly to <code>eval-dispatch</code> without saving any information on the stack. Hence, evaluating the final expression in a sequence -- even if it is a procedure call (as in <code>sqrt-iter</code>, where the <code>if</code> expression, which is the last expression in the procedure body, reduces to a call to <code>sqrt-iter</code>) -- will not cause any information to be accumulated on the stack.<a href="#footnote_Temp_777"><sup>26</sup></a></p>
<p>If we did not think to take advantage of the fact that it was unnecessary to save information in this case, we might have implemented <code>eval-sequence</code> by treating all the expressions in a sequence in the same way -- saving the registers, evaluating the expression, returning to restore the registers, and repeating this until all the expressions have been evaluated:<a href="#footnote_Temp_778"><sup>27</sup></a></p>
<p></p>
<p></p>
<p><code>ev-sequence   (test (op no-more-exps?) (reg unev))   (branch (label ev-sequence-end))   (assign exp (op first-exp) (reg unev))   (save unev)   (save env)   (assign continue (label ev-sequence-continue))   (goto (label eval-dispatch)) ev-sequence-continue   (restore env)   (restore unev)   (assign unev (op rest-exps) (reg unev))   (goto (label ev-sequence)) ev-sequence-end   (restore continue)   (goto (reg continue))</code></p>
<p></p>
<p></p>
<p>This may seem like a minor change to our previous code for evaluation of a sequence: The only difference is that we go through the save-restore cycle for the last expression in a sequence as well as for the others. The interpreter will still give the same value for any expression. But this change is fatal to the tail-recursive implementation, because we must now return after evaluating the final expression in a sequence in order to undo the (useless) register saves. These extra saves will accumulate during a nest of procedure calls. Consequently, processes such as <code>sqrt-iter</code> will require space proportional to the number of iterations rather than requiring constant space. This difference can be significant. For example, with tail recursion, an infinite loop can be expressed using only the procedure-call mechanism:</p>
<p></p>
<p></p>
<p><code>(define (count n)   (newline)   (display n)   (count (+ n 1)))</code></p>
<p></p>
<p>Without tail recursion, such a procedure would eventually run out of stack space, and expressing a true iteration would require some control mechanism other than procedure call.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.4.3">5.4.3  Conditionals, Assignments, and Definitions</a></h3>
<p>As with the metacircular evaluator, special forms are handled by selectively evaluating fragments of the expression. For an <code>if</code> expression, we must evaluate the predicate and decide, based on the value of predicate, whether to evaluate the consequent or the alternative.</p>
<p>Before evaluating the predicate, we save the <code>if</code> expression itself so that we can later extract the consequent or alternative. We also save the environment, which we will need later in order to evaluate the consequent or the alternative, and we save <code>continue</code>, which we will need later in order to return to the evaluation of the expression that is waiting for the value of the <code>if</code>.</p>
<p></p>
<p></p>
<p><code>ev-if   (save exp)                    ; save expression for later   (save env)   (save continue)   (assign continue (label ev-if-decide))   (assign exp (op if-predicate) (reg exp))   (goto (label eval-dispatch))  ; evaluate the predicate</code></p>
<p></p>
<p></p>
<p>When we return from evaluating the predicate, we test whether it was true or false and, depending on the result, place either the consequent or the alternative in <code>exp</code> before going to <code>eval-dispatch</code>. Notice that restoring <code>env</code> and <code>continue</code> here sets up <code>eval-dispatch</code> to have the correct environment and to continue at the right place to receive the value of the <code>if</code> expression.</p>
<p></p>
<p></p>
<p><code>ev-if-decide   (restore continue)   (restore env)   (restore exp)   (test (op true?) (reg val))   (branch (label ev-if-consequent))  ev-if-alternative   (assign exp (op if-alternative) (reg exp))   (goto (label eval-dispatch)) ev-if-consequent   (assign exp (op if-consequent) (reg exp))   (goto (label eval-dispatch))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_779">Assignments and definitions</a></h4>
<p>Assignments are handled by <code>ev-assignment</code>, which is reached from <code>eval-dispatch</code> with the assignment expression in <code>exp</code>. The code at <code>ev-assignment</code> first evaluates the value part of the expression and then installs the new value in the environment. <code>Set-variable-value!</code> is assumed to be available as a machine operation.</p>
<p></p>
<p></p>
<p><code>ev-assignment   (assign unev (op assignment-variable) (reg exp))   (save unev)                   ; save variable for later   (assign exp (op assignment-value) (reg exp))   (save env)   (save continue)   (assign continue (label ev-assignment-1))   (goto (label eval-dispatch))  ; evaluate the assignment value ev-assignment-1   (restore continue)   (restore env)   (restore unev)   (perform    (op set-variable-value!) (reg unev) (reg val) (reg env))   (assign val (const ok))   (goto (reg continue))</code></p>
<p></p>
<p></p>
<p>Definitions are handled in a similar way:</p>
<p></p>
<p><code>ev-definition   (assign unev (op definition-variable) (reg exp))   (save unev)                   ; save variable for later   (assign exp (op definition-value) (reg exp))   (save env)   (save continue)   (assign continue (label ev-definition-1))   (goto (label eval-dispatch))  ; evaluate the definition value ev-definition-1   (restore continue)   (restore env)   (restore unev)   (perform    (op define-variable!) (reg unev) (reg val) (reg env))   (assign val (const ok))   (goto (reg continue))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 5.23.</strong>  Extend the evaluator to handle derived expressions such as <code>cond</code>, <code>let</code>, and so on (section <a href="book-Z-H-26.html#%_sec_4.1.2">4.1.2</a>). You may ``cheat'' and assume that the syntax transformers such as <code>cond-&gt;if</code> are available as machine operations.<a href="#footnote_Temp_781"><sup>28</sup></a></p>
<p></p>
<p></p>
<p><strong>Exercise 5.24.</strong>  Implement <code>cond</code> as a new basic special form without reducing it to <code>if</code>. You will have to construct a loop that tests the predicates of successive <code>cond</code> clauses until you find one that is true, and then use <code>ev-sequence</code> to evaluate the actions of the clause.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.25.</strong>  Modify the evaluator so that it uses normal-order evaluation, based on the lazy evaluator of section <a href="book-Z-H-27.html#%_sec_4.2">4.2</a>.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.4.4">5.4.4  Running the Evaluator</a></h3>
<p>With the implementation of the explicit-control evaluator we come to the end of a development, begun in chapter 1, in which we have explored successively more precise models of the evaluation process. We started with the relatively informal substitution model, then extended this in chapter 3 to the environment model, which enabled us to deal with state and change. In the metacircular evaluator of chapter 4, we used Scheme itself as a language for making more explicit the environment structure constructed during evaluation of an expression. Now, with register machines, we have taken a close look at the evaluator's mechanisms for storage management, argument passing, and control. At each new level of description, we have had to raise issues and resolve ambiguities that were not apparent at the previous, less precise treatment of evaluation. To understand the behavior of the explicit-control evaluator, we can simulate it and monitor its performance.</p>
<p>We will install a driver loop in our evaluator machine. This plays the role of the <code>driver-loop</code> procedure of section <a href="book-Z-H-26.html#%_sec_4.1.4">4.1.4</a>. The evaluator will repeatedly print a prompt, read an expression, evaluate the expression by going to <code>eval-dispatch</code>, and print the result. The following instructions form the beginning of the explicit-control evaluator's controller sequence:<a href="#footnote_Temp_784"><sup>29</sup></a></p>
<p></p>
<p></p>
<p><code>read-eval-print-loop   (perform (op initialize-stack))   (perform    (op prompt-for-input) (const &quot;;;; EC-Eval input:&quot;))   (assign exp (op read))   (assign env (op get-global-environment))   (assign continue (label print-result))   (goto (label eval-dispatch)) print-result   (perform    (op announce-output) (const &quot;;;; EC-Eval value:&quot;))   (perform (op user-print) (reg val))   (goto (label read-eval-print-loop))</code></p>
<p></p>
<p></p>
<p>When we encounter an error in a procedure (such as the ``unknown procedure type error'' indicated at <code>apply-dispatch</code>), we print an error message and return to the driver loop.<a href="#footnote_Temp_785"><sup>30</sup></a></p>
<p></p>
<p></p>
<p><code>unknown-expression-type   (assign val (const unknown-expression-type-error))   (goto (label signal-error)) unknown-procedure-type   (restore continue)    ; clean up stack (from apply-dispatch</code>)<br />   (assign val (const unknown-procedure-type-error))<br />   (goto (label signal-error))<br /> signal-error<br />   (perform (op user-print) (reg val))<br />   (goto (label read-eval-print-loop))<br /></p>
<p></p>
<p></p>
<p>For the purposes of the simulation, we initialize the stack each time through the driver loop, since it might not be empty after an error (such as an undefined variable) interrupts an evaluation.<a href="#footnote_Temp_786"><sup>31</sup></a></p>
<p>If we combine all the code fragments presented in sections <a href="#%_sec_5.4.1">5.4.1</a>-<a href="#%_sec_5.4.4">5.4.4</a>, we can create an evaluator machine model that we can run using the register-machine simulator of section <a href="book-Z-H-32.html#%_sec_5.2">5.2</a>.</p>
<p></p>
<p></p>
<p><code>(define eceval   (make-machine    '(exp env val proc argl continue unev)    eceval-operations   '(     read-eval-print-loop       &lt;entire machine controller as given above&gt;    )))</code></p>
<p></p>
<p>We must define Scheme procedures to simulate the operations used as primitives by the evaluator. These are the same procedures we used for the metacircular evaluator in section <a href="book-Z-H-26.html#%_sec_4.1">4.1</a>, together with the few additional ones defined in footnotes throughout section <a href="#%_sec_5.4">5.4</a>.</p>
<p></p>
<p><code>(define eceval-operations   (list (list 'self-evaluating? self-evaluating)         &lt;complete list of operations for eceval machine&gt;))</code></p>
<p></p>
<p></p>
<p>Finally, we can initialize the global environment and run the evaluator:</p>
<p></p>
<p><code>(define the-global-environment (setup-environment))  (start eceval) ;;; EC-Eval input: (define (append x y)   (if (null? x)       y       (cons (car x)             (append (cdr x) y)))) ;;; EC-Eval value: ok ;;; EC-Eval input: (append '(a b c) '(d e f)) ;;; EC-Eval value: (a b c d e f)</code></p>
<p></p>
<p></p>
<p>Of course, evaluating expressions in this way will take much longer than if we had directly typed them into Scheme, because of the multiple levels of simulation involved. Our expressions are evaluated by the explicit-control-evaluator machine, which is being simulated by a Scheme program, which is itself being evaluated by the Scheme interpreter.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_787">Monitoring the performance of the evaluator</a></h4>
<p>Simulation can be a powerful tool to guide the implementation of evaluators. Simulations make it easy not only to explore variations of the register-machine design but also to monitor the performance of the simulated evaluator. For example, one important factor in performance is how efficiently the evaluator uses the stack. We can observe the number of stack operations required to evaluate various expressions by defining the evaluator register machine with the version of the simulator that collects statistics on stack use (section <a href="book-Z-H-32.html#%_sec_5.2.4">5.2.4</a>), and adding an instruction at the evaluator's <code>print-result</code> entry point to print the statistics:</p>
<p></p>
<p></p>
<p><code>print-result   (perform (op print-stack-statistics)); added instruction   (perform    (op announce-output) (const &quot;;;; EC-Eval value:&quot;))   ...</code> <em>; same as before</em><br /></p>
<p></p>
<p>Interactions with the evaluator now look like this:</p>
<p></p>
<p><code>;;; EC-Eval input: (define (factorial n)   (if (= n 1)       1       (* (factorial (- n 1)) n))) (total-pushes = 3 maximum-depth = 3) ;;; EC-Eval value: ok ;;; EC-Eval input: (factorial 5) (total-pushes = 144 maximum-depth = 28) ;;; EC-Eval value: 120</code></p>
<p></p>
<p>Note that the driver loop of the evaluator reinitializes the stack at the start of each interaction, so that the statistics printed will refer only to stack operations used to evaluate the previous expression.</p>
<p></p>
<p><strong>Exercise 5.26.</strong>  Use the monitored stack to explore the tail-recursive property of the evaluator (section <a href="#%_sec_5.4.2">5.4.2</a>). Start the evaluator and define the iterative <code>factorial</code> procedure from section <a href="book-Z-H-11.html#%_sec_1.2.1">1.2.1</a>:</p>
<p></p>
<p></p>
<p><code>(define (factorial n)   (define (iter product counter)     (if (&gt; counter n)         product         (iter (* counter product)               (+ counter 1))))   (iter 1 1))</code></p>
<p></p>
<p>Run the procedure with some small values of <em>n</em>. Record the maximum stack depth and the number of pushes required to compute <em>n</em>! for each of these values.</p>
<p></p>
<p></p>
<p>a. You will find that the maximum depth required to evaluate <em>n</em>! is independent of <em>n</em>. What is that depth?</p>
<p></p>
<p></p>
<p>b. Determine from your data a formula in terms of <em>n</em> for the total number of push operations used in evaluating <em>n</em>! for any <em>n</em> &gt; 1. Note that the number of operations used is a linear function of <em>n</em> and is thus determined by two constants.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.27.</strong>  For comparison with exercise <a href="#%_thm_5.26">5.26</a>, explore the behavior of the following procedure for computing factorials recursively:</p>
<p></p>
<p><code>(define (factorial n)   (if (= n 1)       1       (* (factorial (- n 1)) n)))</code></p>
<p></p>
<p>By running this procedure with the monitored stack, determine, as a function of <em>n</em>, the maximum depth of the stack and the total number of pushes used in evaluating <em>n</em>! for <em>n</em> &gt; 1. (Again, these functions will be linear.) Summarize your experiments by filling in the following table with the appropriate expressions in terms of <em>n</em>:</p>
<p></p>
<p>Maximum depth</p>
<p>Number of pushes</p>
<p>Recursive</p>
<p>factorial</p>
<p>Iterative</p>
<p>factorial</p>
<p>The maximum depth is a measure of the amount of space used by the evaluator in carrying out the computation, and the number of pushes correlates well with the time required.</p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 5.28.</strong>  Modify the definition of the evaluator by changing <code>eval-sequence</code> as described in section <a href="#%_sec_5.4.2">5.4.2</a> so that the evaluator is no longer tail-recursive. Rerun your experiments from exercises <a href="#%_thm_5.26">5.26</a> and <a href="#%_thm_5.27">5.27</a> to demonstrate that both versions of the <code>factorial</code> procedure now require space that grows linearly with their input.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.29.</strong>  Monitor the stack operations in the tree-recursive Fibonacci computation:</p>
<p></p>
<p></p>
<p><code>(define (fib n)   (if (&lt; n 2)       n       (+ (fib (- n 1)) (fib (- n 2)))))</code></p>
<p></p>
<p>a. Give a formula in terms of <em>n</em> for the maximum depth of the stack required to compute <em>F</em><em>i</em><em>b</em>(<em>n</em>) for <em>n</em> &gt; 2. Hint: In section <a href="book-Z-H-11.html#%_sec_1.2.2">1.2.2</a> we argued that the space used by this process grows linearly with <em>n</em>.</p>
<p></p>
<p></p>
<p>b. Give a formula for the total number of pushes used to compute <em>F</em><em>i</em><em>b</em>(<em>n</em>) for <em>n</em> &gt; 2. You should find that the number of pushes (which correlates well with the time used) grows exponentially with <em>n</em>. Hint: Let <em>S</em>(<em>n</em>) be the number of pushes used in computing <em>F</em><em>i</em><em>b</em>(<em>n</em>). You should be able to argue that there is a formula that expresses <em>S</em>(<em>n</em>) in terms of <em>S</em>(<em>n</em> - 1), <em>S</em>(<em>n</em> - 2), and some fixed ``overhead'' constant <em>k</em> that is independent of <em>n</em>. Give the formula, and say what <em>k</em> is. Then show that <em>S</em>(<em>n</em>) can be expressed as <em>a</em> <em>F</em><em>i</em><em>b</em>(<em>n</em> + 1) + <em>b</em> and give the values of <em>a</em> and <em>b</em>.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.30.</strong>  Our evaluator currently catches and signals only two kinds of errors -- unknown expression types and unknown procedure types. Other errors will take us out of the evaluator read-eval-print loop. When we run the evaluator using the register-machine simulator, these errors are caught by the underlying Scheme system. This is analogous to the computer crashing when a user program makes an error.<a href="#footnote_Temp_793"><sup>32</sup></a> It is a large project to make a real error system work, but it is well worth the effort to understand what is involved here.</p>
<p></p>
<p></p>
<p>a. Errors that occur in the evaluation process, such as an attempt to access an unbound variable, could be caught by changing the lookup operation to make it return a distinguished condition code, which cannot be a possible value of any user variable. The evaluator can test for this condition code and then do what is necessary to go to <code>signal-error</code>. Find all of the places in the evaluator where such a change is necessary and fix them. This is lots of work.</p>
<p></p>
<p></p>
<p>b. Much worse is the problem of handling errors that are signaled by applying primitive procedures, such as an attempt to divide by zero or an attempt to extract the <code>car</code> of a symbol. In a professionally written high-quality system, each primitive application is checked for safety as part of the primitive. For example, every call to <code>car</code> could first check that the argument is a pair. If the argument is not a pair, the application would return a distinguished condition code to the evaluator, which would then report the failure. We could arrange for this in our register-machine simulator by making each primitive procedure check for applicability and returning an appropriate distinguished condition code on failure. Then the <code>primitive-apply</code> code in the evaluator can check for the condition code and go to <code>signal-error</code> if necessary. Build this structure and make it work. This is a major project.</p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_765"><sup>19</sup></a> See Batali et al. 1982 for more information on the chip and the method by which it was designed.</p>
<p><a href="#call_footnote_Temp_767"><sup>20</sup></a> In our controller, the dispatch is written as a sequence of <code>test</code> and <code>branch</code> instructions. Alternatively, it could have been written in a data-directed style (and in a real system it probably would have been) to avoid the need to perform sequential tests and to facilitate the definition of new expression types. A machine designed to run Lisp would probably include a <code>dispatch-on-type</code> instruction that would efficiently execute such data-directed dispatches.</p>
<p><a href="#call_footnote_Temp_770"><sup>21</sup></a> This is an important but subtle point in translating algorithms from a procedural language, such as Lisp, to a register-machine language. As an alternative to saving only what is needed, we could save all the registers (except <code>val</code>) before each recursive call. This is called a <em>framed-stack</em> discipline. This would work but might save more registers than necessary; this could be an important consideration in a system where stack operations are expensive. Saving registers whose contents will not be needed later may also hold onto useless data that could otherwise be garbage-collected, freeing space to be reused.</p>
<p><a href="#call_footnote_Temp_771"><sup>22</sup></a> We add to the evaluator data-structure procedures in section <a href="book-Z-H-26.html#%_sec_4.1.3">4.1.3</a> the following two procedures for manipulating argument lists:</p>
<p></p>
<p><code>(define (empty-arglist) '())  (define (adjoin-arg arg arglist)   (append arglist (list arg)))</code></p>
<p></p>
<p>We also use an additional syntax procedure to test for the last operand in a combination:</p>
<p></p>
<p><code>(define (last-operand? ops)   (null? (cdr ops)))</code></p>
<p></p>
<p></p>
<p><a href="#call_footnote_Temp_772"><sup>23</sup></a> The optimization of treating the last operand specially is known as <em>evlis tail recursion</em> (see Wand 1980). We could be somewhat more efficient in the argument evaluation loop if we made evaluation of the first operand a special case too. This would permit us to postpone initializing <code>argl</code> until after evaluating the first operand, so as to avoid saving <code>argl</code> in this case. The compiler in section <a href="book-Z-H-35.html#%_sec_5.5">5.5</a> performs this optimization. (Compare the <code>construct-arglist</code> procedure of section <a href="book-Z-H-35.html#%_sec_5.5.3">5.5.3</a>.)</p>
<p><a href="#call_footnote_Temp_773"><sup>24</sup></a> The order of operand evaluation in the metacircular evaluator is determined by the order of evaluation of the arguments to <code>cons</code> in the procedure <code>list-of-values</code> of section <a href="book-Z-H-26.html#%_sec_4.1.1">4.1.1</a> (see exercise <a href="book-Z-H-26.html#%_thm_4.1">4.1</a>).</p>
<p><a href="#call_footnote_Temp_776"><sup>25</sup></a> We saw in section <a href="book-Z-H-31.html#%_sec_5.1">5.1</a> how to implement such a process with a register machine that had no stack; the state of the process was stored in a fixed set of registers.</p>
<p><a href="#call_footnote_Temp_777"><sup>26</sup></a> This implementation of tail recursion in <code>ev-sequence</code> is one variety of a well-known optimization technique used by many compilers. In compiling a procedure that ends with a procedure call, one can replace the call by a jump to the called procedure's entry point. Building this strategy into the interpreter, as we have done in this section, provides the optimization uniformly throughout the language.</p>
<p><a href="#call_footnote_Temp_778"><sup>27</sup></a> We can define <code>no-more-exps?</code> as follows:</p>
<p></p>
<p><code>(define (no-more-exps? seq) (null? seq))</code></p>
<p></p>
<p></p>
<p><a href="#call_footnote_Temp_781"><sup>28</sup></a> This isn't really cheating. In an actual implementation built from scratch, we would use our explicit-control evaluator to interpret a Scheme program that performs source-level transformations like <code>cond-&gt;if</code> in a syntax phase that runs before execution.</p>
<p><a href="#call_footnote_Temp_784"><sup>29</sup></a> We assume here that <code>read</code> and the various printing operations are available as primitive machine operations, which is useful for our simulation, but completely unrealistic in practice. These are actually extremely complex operations. In practice, they would be implemented using low-level input-output operations such as transferring single characters to and from a device.</p>
<p>To support the <code>get-global-environment</code> operation we define</p>
<p></p>
<p><code>(define the-global-environment (setup-environment))  (define (get-global-environment)   the-global-environment)</code></p>
<p></p>
<p></p>
<p><a href="#call_footnote_Temp_785"><sup>30</sup></a> There are other errors that we would like the interpreter to handle, but these are not so simple. See exercise <a href="#%_thm_5.30">5.30</a>.</p>
<p><a href="#call_footnote_Temp_786"><sup>31</sup></a> We could perform the stack initialization only after errors, but doing it in the driver loop will be convenient for monitoring the evaluator's performance, as described below.</p>
<p><a href="#call_footnote_Temp_793"><sup>32</sup></a> Regrettably, this is the normal state of affairs in conventional compiler-based language systems such as C. In UNIX<sup><em>T</em><em>M</em></sup> the system ``dumps core,'' and in DOS/Windows<sup><em>T</em><em>M</em></sup> it becomes catatonic. The Macintosh<sup><em>T</em><em>M</em></sup> displays a picture of an exploding bomb and offers you the opportunity to reboot the computer -- if you're lucky.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-33.html">previous</a>, <a href="book-Z-H-35.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-34.html">previous</a>, <a href="book-Z-H-36.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h2><a href="book-Z-H-4.html#%_toc_%_sec_5.5">5.5  Compilation</a></h2>
<p>The explicit-control evaluator of section <a href="book-Z-H-34.html#%_sec_5.4">5.4</a> is a register machine whose controller interprets Scheme programs. In this section we will see how to run Scheme programs on a register machine whose controller is not a Scheme interpreter.</p>
<p>The explicit-control evaluator machine is universal -- it can carry out any computational process that can be described in Scheme. The evaluator's controller orchestrates the use of its data paths to perform the desired computation. Thus, the evaluator's data paths are universal: They are sufficient to perform any computation we desire, given an appropriate controller.<a href="#footnote_Temp_794"><sup>33</sup></a></p>
<p>Commercial general-purpose computers are register machines organized around a collection of registers and operations that constitute an efficient and convenient universal set of data paths. The controller for a general-purpose machine is an interpreter for a register-machine language like the one we have been using. This language is called the <em>native language</em> of the machine, or simply <em>machine language</em>. Programs written in machine language are sequences of instructions that use the machine's data paths. For example, the explicit-control evaluator's instruction sequence can be thought of as a machine-language program for a general-purpose computer rather than as the controller for a specialized interpreter machine.</p>
<p>There are two common strategies for bridging the gap between higher-level languages and register-machine languages. The explicit-control evaluator illustrates the strategy of interpretation. An interpreter written in the native language of a machine configures the machine to execute programs written in a language (called the <em>source language</em>) that may differ from the native language of the machine performing the evaluation. The primitive procedures of the source language are implemented as a library of subroutines written in the native language of the given machine. A program to be interpreted (called the <em>source program</em>) is represented as a data structure. The interpreter traverses this data structure, analyzing the source program. As it does so, it simulates the intended behavior of the source program by calling appropriate primitive subroutines from the library.</p>
<p>In this section, we explore the alternative strategy of <em>compilation</em>. A compiler for a given source language and machine translates a source program into an equivalent program (called the <em>object program</em>) written in the machine's native language. The compiler that we implement in this section translates programs written in Scheme into sequences of instructions to be executed using the explicit-control evaluator machine's data paths.<a href="#footnote_Temp_795"><sup>34</sup></a></p>
<p>Compared with interpretation, compilation can provide a great increase in the efficiency of program execution, as we will explain below in the overview of the compiler. On the other hand, an interpreter provides a more powerful environment for interactive program development and debugging, because the source program being executed is available at run time to be examined and modified. In addition, because the entire library of primitives is present, new programs can be constructed and added to the system during debugging.</p>
<p>In view of the complementary advantages of compilation and interpretation, modern program-development environments pursue a mixed strategy. Lisp interpreters are generally organized so that interpreted procedures and compiled procedures can call each other. This enables a programmer to compile those parts of a program that are assumed to be debugged, thus gaining the efficiency advantage of compilation, while retaining the interpretive mode of execution for those parts of the program that are in the flux of interactive development and debugging. In section <a href="#%_sec_5.5.7">5.5.7</a>, after we have implemented the compiler, we will show how to interface it with our interpreter to produce an integrated interpreter-compiler development system.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_796">An overview of the compiler</a></h4>
<p>Our compiler is much like our interpreter, both in its structure and in the function it performs. Accordingly, the mechanisms used by the compiler for analyzing expressions will be similar to those used by the interpreter. Moreover, to make it easy to interface compiled and interpreted code, we will design the compiler to generate code that obeys the same conventions of register usage as the interpreter: The environment will be kept in the <code>env</code> register, argument lists will be accumulated in <code>argl</code>, a procedure to be applied will be in <code>proc</code>, procedures will return their answers in <code>val</code>, and the location to which a procedure should return will be kept in <code>continue</code>. In general, the compiler translates a source program into an object program that performs essentially the same register operations as would the interpreter in evaluating the same source program.</p>
<p>This description suggests a strategy for implementing a rudimentary compiler: We traverse the expression in the same way the interpreter does. When we encounter a register instruction that the interpreter would perform in evaluating the expression, we do not execute the instruction but instead accumulate it into a sequence. The resulting sequence of instructions will be the object code. Observe the efficiency advantage of compilation over interpretation. Each time the interpreter evaluates an expression -- for example, <code>(f 84 96)</code> -- it performs the work of classifying the expression (discovering that this is a procedure application) and testing for the end of the operand list (discovering that there are two operands). With a compiler, the expression is analyzed only once, when the instruction sequence is generated at compile time. The object code produced by the compiler contains only the instructions that evaluate the operator and the two operands, assemble the argument list, and apply the procedure (in <code>proc</code>) to the arguments (in <code>argl</code>).</p>
<p>This is the same kind of optimization we implemented in the analyzing evaluator of section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a>. But there are further opportunities to gain efficiency in compiled code. As the interpreter runs, it follows a process that must be applicable to any expression in the language. In contrast, a given segment of compiled code is meant to execute some particular expression. This can make a big difference, for example in the use of the stack to save registers. When the interpreter evaluates an expression, it must be prepared for any contingency. Before evaluating a subexpression, the interpreter saves all registers that will be needed later, because the subexpression might require an arbitrary evaluation. A compiler, on the other hand, can exploit the structure of the particular expression it is processing to generate code that avoids unnecessary stack operations.</p>
<p>As a case in point, consider the combination <code>(f 84 96)</code>. Before the interpreter evaluates the operator of the combination, it prepares for this evaluation by saving the registers containing the operands and the environment, whose values will be needed later. The interpreter then evaluates the operator to obtain the result in <code>val</code>, restores the saved registers, and finally moves the result from <code>val</code> to <code>proc</code>. However, in the particular expression we are dealing with, the operator is the symbol <code>f</code>, whose evaluation is accomplished by the machine operation <code>lookup-variable-value</code>, which does not alter any registers. The compiler that we implement in this section will take advantage of this fact and generate code that evaluates the operator using the instruction</p>
<p></p>
<p><code>(assign proc (op lookup-variable-value) (const f) (reg env))</code></p>
<p></p>
<p>This code not only avoids the unnecessary saves and restores but also assigns the value of the lookup directly to <code>proc</code>, whereas the interpreter would obtain the result in <code>val</code> and then move this to <code>proc</code>.</p>
<p>A compiler can also optimize access to the environment. Having analyzed the code, the compiler can in many cases know in which frame a particular variable will be located and access that frame directly, rather than performing the <code>lookup-variable-value</code> search. We will discuss how to implement such variable access in section <a href="#%_sec_5.5.6">5.5.6</a>. Until then, however, we will focus on the kind of register and stack optimizations described above. There are many other optimizations that can be performed by a compiler, such as coding primitive operations ``in line'' instead of using a general <code>apply</code> mechanism (see exercise <a href="#%_thm_5.38">5.38</a>); but we will not emphasize these here. Our main goal in this section is to illustrate the compilation process in a simplified (but still interesting) context.</p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.5.1">5.5.1  Structure of the Compiler</a></h3>
<p>In section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a> we modified our original metacircular interpreter to separate analysis from execution. We analyzed each expression to produce an execution procedure that took an environment as argument and performed the required operations. In our compiler, we will do essentially the same analysis. Instead of producing execution procedures, however, we will generate sequences of instructions to be run by our register machine.</p>
<p>The procedure <code>compile</code> is the top-level dispatch in the compiler. It corresponds to the <code>eval</code> procedure of section <a href="book-Z-H-26.html#%_sec_4.1.1">4.1.1</a>, the <code>analyze</code> procedure of section <a href="book-Z-H-26.html#%_sec_4.1.7">4.1.7</a>, and the <code>eval-dispatch</code> entry point of the explicit-control-evaluator in section <a href="book-Z-H-34.html#%_sec_5.4.1">5.4.1</a>. The compiler, like the interpreters, uses the expression-syntax procedures defined in section <a href="book-Z-H-26.html#%_sec_4.1.2">4.1.2</a>.<a href="#footnote_Temp_797"><sup>35</sup></a> <code>Compile</code> performs a case analysis on the syntactic type of the expression to be compiled. For each type of expression, it dispatches to a specialized <em>code generator</em>:</p>
<p></p>
<p></p>
<p><code>(define (compile exp target linkage)   (cond ((self-evaluating? exp)          (compile-self-evaluating exp target linkage))         ((quoted? exp) (compile-quoted exp target linkage))         ((variable? exp)          (compile-variable exp target linkage))         ((assignment? exp)          (compile-assignment exp target linkage))         ((definition? exp)          (compile-definition exp target linkage))         ((if? exp) (compile-if exp target linkage))         ((lambda? exp) (compile-lambda exp target linkage))         ((begin? exp)          (compile-sequence (begin-actions exp)                            target                            linkage))         ((cond? exp) (compile (cond-&gt;if exp) target linkage))         ((application? exp)          (compile-application exp target linkage))         (else          (error &quot;Unknown expression type -- COMPILE&quot; exp))))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_798">Targets and linkages</a></h4>
<p><code>Compile</code> and the code generators that it calls take two arguments in addition to the expression to compile. There is a <em>target</em>, which specifies the register in which the compiled code is to return the value of the expression. There is also a <em>linkage descriptor</em>, which describes how the code resulting from the compilation of the expression should proceed when it has finished its execution. The linkage descriptor can require that the code do one of the following three things:</p>
<p></p>
<p></p>
<ul>
<li>continue at the next instruction in sequence (this is specified by the linkage descriptor <code>next</code>),</li>
<li>return from the procedure being compiled (this is specified by the linkage descriptor <code>return</code>), or</li>
<li>jump to a named entry point (this is specified by using the designated label as the linkage descriptor).</li>
</ul>
<p></p>
<p>For example, compiling the expression <code>5</code> (which is self-evaluating) with a target of the <code>val</code> register and a linkage of <code>next</code> should produce the instruction</p>
<p></p>
<p></p>
<p><code>(assign val (const 5))</code></p>
<p></p>
<p>Compiling the same expression with a linkage of <code>return</code> should produce the instructions</p>
<p></p>
<p></p>
<p><code>(assign val (const 5)) (goto (reg continue))</code></p>
<p></p>
<p>In the first case, execution will continue with the next instruction in the sequence. In the second case, we will return from a procedure call. In both cases, the value of the expression will be placed into the target <code>val</code> register.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_799">Instruction sequences and stack usage</a></h4>
<p></p>
<p>Each code generator returns an <em>instruction sequence</em> containing the object code it has generated for the expression. Code generation for a compound expression is accomplished by combining the output from simpler code generators for component expressions, just as evaluation of a compound expression is accomplished by evaluating the component expressions.</p>
<p>The simplest method for combining instruction sequences is a procedure called <code>append-instruction-sequences</code>. It takes as arguments any number of instruction sequences that are to be executed sequentially; it appends them and returns the combined sequence. That is, if &lt;<em><em>s</em><em>e</em><em>q</em><sub>1</sub></em>&gt; and &lt;<em><em>s</em><em>e</em><em>q</em><sub>2</sub></em>&gt; are sequences of instructions, then evaluating</p>
<p></p>
<p><code>(append-instruction-sequences &lt;seq1&gt; &lt;seq2&gt;)</code></p>
<p></p>
<p>produces the sequence</p>
<p></p>
<p><code>&lt;seq1&gt; &lt;seq2&gt;</code></p>
<p></p>
<p></p>
<p>Whenever registers might need to be saved, the compiler's code generators use <code>preserving</code>, which is a more subtle method for combining instruction sequences. <code>Preserving</code> takes three arguments: a set of registers and two instruction sequences that are to be executed sequentially. It appends the sequences in such a way that the contents of each register in the set is preserved over the execution of the first sequence, if this is needed for the execution of the second sequence. That is, if the first sequence modifies the register and the second sequence actually needs the register's original contents, then <code>preserving</code> wraps a <code>save</code> and a <code>restore</code> of the register around the first sequence before appending the sequences. Otherwise, <code>preserving</code> simply returns the appended instruction sequences. Thus, for example,</p>
<p></p>
<p><code>(preserving (list &lt;reg1&gt; &lt;reg2&gt;) &lt;seq1&gt; &lt;seq2&gt;)</code></p>
<p></p>
<p>produces one of the following four sequences of instructions, depending on how &lt;<em><em>s</em><em>e</em><em>q</em><sub>1</sub></em>&gt; and &lt;<em><em>s</em><em>e</em><em>q</em><sub>2</sub></em>&gt; use &lt;<em><em>r</em><em>e</em><em>g</em><sub>1</sub></em>&gt; and &lt;<em><em>r</em><em>e</em><em>g</em><sub>2</sub></em>&gt;:</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><img src="ch5-Z-G-9.gif" /></p>
<p></p>
<p>By using <code>preserving</code> to combine instruction sequences the compiler avoids unnecessary stack operations. This also isolates the details of whether or not to generate <code>save</code> and <code>restore</code> instructions within the <code>preserving</code> procedure, separating them from the concerns that arise in writing each of the individual code generators. In fact no <code>save</code> or <code>restore</code> instructions are explicitly produced by the code generators.</p>
<p>In principle, we could represent an instruction sequence simply as a list of instructions. <code>Append-instruction-sequences</code> could then combine instruction sequences by performing an ordinary list <code>append</code>. However, <code>preserving</code> would then be a complex operation, because it would have to analyze each instruction sequence to determine how the sequence uses its registers. <code>Preserving</code> would be inefficient as well as complex, because it would have to analyze each of its instruction sequence arguments, even though these sequences might themselves have been constructed by calls to <code>preserving</code>, in which case their parts would have already been analyzed. To avoid such repetitious analysis we will associate with each instruction sequence some information about its register use. When we construct a basic instruction sequence we will provide this information explicitly, and the procedures that combine instruction sequences will derive register-use information for the combined sequence from the information associated with the component sequences.</p>
<p>An instruction sequence will contain three pieces of information:</p>
<p></p>
<ul>
<li>the set of registers that must be initialized before the instructions in the sequence are executed (these registers are said to be <em>needed</em> by the sequence),</li>
<li>the set of registers whose values are modified by the instructions in the sequence, and</li>
<li>the actual instructions (also called <em>statements</em>) in the sequence.</li>
</ul>
<p></p>
<p>We will represent an instruction sequence as a list of its three parts. The constructor for instruction sequences is thus</p>
<p></p>
<p></p>
<p><code>(define (make-instruction-sequence needs modifies statements)   (list needs modifies statements))</code></p>
<p></p>
<p></p>
<p>For example, the two-instruction sequence that looks up the value of the variable <code>x</code> in the current environment, assigns the result to <code>val</code>, and then returns, requires registers <code>env</code> and <code>continue</code> to have been initialized, and modifies register <code>val</code>. This sequence would therefore be constructed as</p>
<p></p>
<p></p>
<p><code>(make-instruction-sequence '(env continue) '(val)  '((assign val            (op lookup-variable-value) (const x) (reg env))    (goto (reg continue))))</code></p>
<p></p>
<p></p>
<p>We sometimes need to construct an instruction sequence with no statements:</p>
<p></p>
<p><code>(define (empty-instruction-sequence)   (make-instruction-sequence '() '() '()))</code></p>
<p></p>
<p></p>
<p>The procedures for combining instruction sequences are shown in section <a href="#%_sec_5.5.4">5.5.4</a>.</p>
<p></p>
<p><strong>Exercise 5.31.</strong>  In evaluating a procedure application, the explicit-control evaluator always saves and restores the <code>env</code> register around the evaluation of the operator, saves and restores <code>env</code> around the evaluation of each operand (except the final one), saves and restores <code>argl</code> around the evaluation of each operand, and saves and restores <code>proc</code> around the evaluation of the operand sequence. For each of the following combinations, say which of these <code>save</code> and <code>restore</code> operations are superfluous and thus could be eliminated by the compiler's <code>preserving</code> mechanism:</p>
<p></p>
<p></p>
<p><code>(f 'x 'y)  ((f) 'x 'y)  (f (g 'x) y)  (f (g 'x) 'y)</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 5.32.</strong>  Using the <code>preserving</code> mechanism, the compiler will avoid saving and restoring <code>env</code> around the evaluation of the operator of a combination in the case where the operator is a symbol. We could also build such optimizations into the evaluator. Indeed, the explicit-control evaluator of section <a href="book-Z-H-34.html#%_sec_5.4">5.4</a> already performs a similar optimization, by treating combinations with no operands as a special case.</p>
<p></p>
<p></p>
<p>a. Extend the explicit-control evaluator to recognize as a separate class of expressions combinations whose operator is a symbol, and to take advantage of this fact in evaluating such expressions.</p>
<p></p>
<p></p>
<p>b. Alyssa P. Hacker suggests that by extending the evaluator to recognize more and more special cases we could incorporate all the compiler's optimizations, and that this would eliminate the advantage of compilation altogether. What do you think of this idea?</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.5.2">5.5.2  Compiling Expressions</a></h3>
<p>In this section and the next we implement the code generators to which the <code>compile</code> procedure dispatches.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_802">Compiling linkage code</a></h4>
<p>In general, the output of each code generator will end with instructions -- generated by the procedure <code>compile-linkage</code> -- that implement the required linkage. If the linkage is <code>return</code> then we must generate the instruction <code>(goto (reg continue))</code>. This needs the <code>continue</code> register and does not modify any registers. If the linkage is <code>next</code>, then we needn't include any additional instructions. Otherwise, the linkage is a label, and we generate a <code>goto</code> to that label, an instruction that does not need or modify any registers.<a href="#footnote_Temp_803"><sup>36</sup></a></p>
<p></p>
<p></p>
<p><code>(define (compile-linkage linkage)   (cond ((eq? linkage 'return)          (make-instruction-sequence '(continue) '()           '((goto (reg continue)))))         ((eq? linkage 'next)          (empty-instruction-sequence))         (else          (make-instruction-sequence '() '()           `((goto (label ,linkage)))))))</code></p>
<p></p>
<p>The linkage code is appended to an instruction sequence by <code>preserving</code> the <code>continue</code> register, since a <code>return</code> linkage will require the <code>continue</code> register: If the given instruction sequence modifies <code>continue</code> and the linkage code needs it, <code>continue</code> will be saved and restored.</p>
<p></p>
<p></p>
<p><code>(define (end-with-linkage linkage instruction-sequence)   (preserving '(continue)    instruction-sequence    (compile-linkage linkage)))</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_804">Compiling simple expressions</a></h4>
<p>The code generators for self-evaluating expressions, quotations, and variables construct instruction sequences that assign the required value to the target register and then proceed as specified by the linkage descriptor.</p>
<p></p>
<p></p>
<p><code>(define (compile-self-evaluating exp target linkage)   (end-with-linkage linkage    (make-instruction-sequence '() (list target)     `((assign ,target (const ,exp)))))) (define (compile-quoted exp target linkage)   (end-with-linkage linkage    (make-instruction-sequence '() (list target)     `((assign ,target (const ,(text-of-quotation exp))))))) (define (compile-variable exp target linkage)   (end-with-linkage linkage    (make-instruction-sequence '(env) (list target)     `((assign ,target               (op lookup-variable-value)               (const ,exp)               (reg env))))))</code></p>
<p></p>
<p>All these assignment instructions modify the target register, and the one that looks up a variable needs the <code>env</code> register.</p>
<p>Assignments and definitions are handled much as they are in the interpreter. We recursively generate code that computes the value to be assigned to the variable, and append to it a two-instruction sequence that actually sets or defines the variable and assigns the value of the whole expression (the symbol <code>ok</code>) to the target register. The recursive compilation has target <code>val</code> and linkage <code>next</code> so that the code will put its result into <code>val</code> and continue with the code that is appended after it. The appending is done preserving <code>env</code>, since the environment is needed for setting or defining the variable and the code for the variable value could be the compilation of a complex expression that might modify the registers in arbitrary ways.</p>
<p></p>
<p></p>
<p><code>(define (compile-assignment exp target linkage)   (let ((var (assignment-variable exp))         (get-value-code          (compile (assignment-value exp) 'val 'next)))     (end-with-linkage linkage      (preserving '(env)       get-value-code       (make-instruction-sequence '(env val) (list target)        `((perform (op set-variable-value!)                   (const ,var)                   (reg val)                   (reg env))          (assign ,target (const ok)))))))) (define (compile-definition exp target linkage)   (let ((var (definition-variable exp))         (get-value-code          (compile (definition-value exp) 'val 'next)))     (end-with-linkage linkage      (preserving '(env)       get-value-code       (make-instruction-sequence '(env val) (list target)        `((perform (op define-variable!)                   (const ,var)                   (reg val)                   (reg env))          (assign ,target (const ok))))))))</code></p>
<p></p>
<p>The appended two-instruction sequence requires <code>env</code> and <code>val</code> and modifies the target. Note that although we preserve <code>env</code> for this sequence, we do not preserve <code>val</code>, because the <code>get-value-code</code> is designed to explicitly place its result in <code>val</code> for use by this sequence. (In fact, if we did preserve <code>val</code>, we would have a bug, because this would cause the previous contents of <code>val</code> to be restored right after the <code>get-value-code</code> is run.)</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_805">Compiling conditional expressions</a></h4>
<p>The code for an <code>if</code> expression compiled with a given target and linkage has the form</p>
<p></p>
<p></p>
<p><code> &lt;compilation of predicate, target val</code>, linkage <code>next</code>&gt;<br />  (test (op false?) (reg val))<br />  (branch (label false-branch))<br /> true-branch<br />  &lt;<em>compilation of consequent with given target and given linkage or <code>after-if</code></em>&gt;<br /> false-branch<br />  &lt;<em>compilation of alternative with given target and linkage</em>&gt;<br /> after-if<br /></p>
<p></p>
<p></p>
<p>To generate this code, we compile the predicate, consequent, and alternative, and combine the resulting code with instructions to test the predicate result and with newly generated labels to mark the true and false branches and the end of the conditional.<a href="#footnote_Temp_806"><sup>37</sup></a> In this arrangement of code, we must branch around the true branch if the test is false. The only slight complication is in how the linkage for the true branch should be handled. If the linkage for the conditional is <code>return</code> or a label, then the true and false branches will both use this same linkage. If the linkage is <code>next</code>, the true branch ends with a jump around the code for the false branch to the label at the end of the conditional.</p>
<p></p>
<p></p>
<p><code>(define (compile-if exp target linkage)   (let ((t-branch (make-label 'true-branch))         (f-branch (make-label 'false-branch))                             (after-if (make-label 'after-if)))     (let ((consequent-linkage            (if (eq? linkage 'next) after-if linkage)))       (let ((p-code (compile (if-predicate exp) 'val 'next))             (c-code              (compile               (if-consequent exp) target consequent-linkage))             (a-code              (compile (if-alternative exp) target linkage)))         (preserving '(env continue)          p-code          (append-instruction-sequences           (make-instruction-sequence '(val) '()            `((test (op false?) (reg val))              (branch (label ,f-branch))))           (parallel-instruction-sequences            (append-instruction-sequences t-branch c-code)            (append-instruction-sequences f-branch a-code))           after-if))))))</code></p>
<p></p>
<p><code>Env</code> is preserved around the predicate code because it could be needed by the true and false branches, and <code>continue</code> is preserved because it could be needed by the linkage code in those branches. The code for the true and false branches (which are not executed sequentially) is appended using a special combiner <code>parallel-instruction-sequences</code> described in section <a href="#%_sec_5.5.4">5.5.4</a>.</p>
<p>Note that <code>cond</code> is a derived expression, so all that the compiler needs to do handle it is to apply the <code>cond-&gt;if</code> transformer (from section <a href="book-Z-H-26.html#%_sec_4.1.2">4.1.2</a>) and compile the resulting <code>if</code> expression.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_807">Compiling sequences</a></h4>
<p>The compilation of sequences (from procedure bodies or explicit <code>begin</code> expressions) parallels their evaluation. Each expression of the sequence is compiled -- the last expression with the linkage specified for the sequence, and the other expressions with linkage <code>next</code> (to execute the rest of the sequence). The instruction sequences for the individual expressions are appended to form a single instruction sequence, such that <code>env</code> (needed for the rest of the sequence) and <code>continue</code> (possibly needed for the linkage at the end of the sequence) are preserved.</p>
<p></p>
<p></p>
<p><code>(define (compile-sequence seq target linkage)   (if (last-exp? seq)       (compile (first-exp seq) target linkage)       (preserving '(env continue)        (compile (first-exp seq) target 'next)        (compile-sequence (rest-exps seq) target linkage))))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_808">Compiling <code>lambda</code> expressions</a></h4>
<p><code>Lambda</code> expressions construct procedures. The object code for a <code>lambda</code> expression must have the form</p>
<p></p>
<p></p>
<p><code>&lt;construct procedure object and assign it to target register&gt; &lt;linkage&gt;</code></p>
<p></p>
<p>When we compile the <code>lambda</code> expression, we also generate the code for the procedure body. Although the body won't be executed at the time of procedure construction, it is convenient to insert it into the object code right after the code for the <code>lambda</code>. If the linkage for the <code>lambda</code> expression is a label or <code>return</code>, this is fine. But if the linkage is <code>next</code>, we will need to skip around the code for the procedure body by using a linkage that jumps to a label that is inserted after the body. The object code thus has the form</p>
<p></p>
<p></p>
<p><code> &lt;construct procedure object and assign it to target register&gt;  &lt;code for given linkage&gt;or (goto (label after-lambda))</code><br />  &lt;<em>compilation of procedure body</em>&gt;<br /> after-lambda<br /></p>
<p></p>
<p></p>
<p><code>Compile-lambda</code> generates the code for constructing the procedure object followed by the code for the procedure body. The procedure object will be constructed at run time by combining the current environment (the environment at the point of definition) with the entry point to the compiled procedure body (a newly generated label).<a href="#footnote_Temp_809"><sup>38</sup></a></p>
<p></p>
<p></p>
<p><code>(define (compile-lambda exp target linkage)   (let ((proc-entry (make-label 'entry))         (after-lambda (make-label 'after-lambda)))     (let ((lambda-linkage            (if (eq? linkage 'next) after-lambda linkage)))       (append-instruction-sequences        (tack-on-instruction-sequence         (end-with-linkage lambda-linkage          (make-instruction-sequence '(env) (list target)           `((assign ,target                     (op make-compiled-procedure)                     (label ,proc-entry)                     (reg env)))))         (compile-lambda-body exp proc-entry))        after-lambda))))</code></p>
<p></p>
<p><code>Compile-lambda</code> uses the special combiner <code>tack-on-instruction-sequence</code> (section <a href="#%_sec_5.5.4">5.5.4</a>) rather than <code>append-instruction-sequences</code> to append the procedure body to the <code>lambda</code> expression code, because the body is not part of the sequence of instructions that will be executed when the combined sequence is entered; rather, it is in the sequence only because that was a convenient place to put it.</p>
<p><code>Compile-lambda-body</code> constructs the code for the body of the procedure. This code begins with a label for the entry point. Next come instructions that will cause the run-time evaluation environment to switch to the correct environment for evaluating the procedure body -- namely, the definition environment of the procedure, extended to include the bindings of the formal parameters to the arguments with which the procedure is called. After this comes the code for the sequence of expressions that makes up the procedure body. The sequence is compiled with linkage <code>return</code> and target <code>val</code> so that it will end by returning from the procedure with the procedure result in <code>val</code>.</p>
<p></p>
<p></p>
<p><code>(define (compile-lambda-body exp proc-entry)   (let ((formals (lambda-parameters exp)))     (append-instruction-sequences      (make-instruction-sequence '(env proc argl) '(env)       `(,proc-entry         (assign env (op compiled-procedure-env) (reg proc))         (assign env                 (op extend-environment)                 (const ,formals)                 (reg argl)                 (reg env))))      (compile-sequence (lambda-body exp) 'val 'return))))</code></p>
<p></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.5.3">5.5.3  Compiling Combinations</a></h3>
<p>The essence of the compilation process is the compilation of procedure applications. The code for a combination compiled with a given target and linkage has the form</p>
<p></p>
<p><code>&lt;compilation of operator, target proc</code>, linkage <code>next</code>&gt;<br /> &lt;<em>evaluate operands and construct argument list in <code>argl</code></em>&gt;<br /> &lt;<em>compilation of procedure call with given target and linkage</em>&gt;<br /></p>
<p></p>
<p>The registers <code>env</code>, <code>proc</code>, and <code>argl</code> may have to be saved and restored during evaluation of the operator and operands. Note that this is the only place in the compiler where a target other than <code>val</code> is specified.</p>
<p>The required code is generated by <code>compile-application</code>. This recursively compiles the operator, to produce code that puts the procedure to be applied into <code>proc</code>, and compiles the operands, to produce code that evaluates the individual operands of the application. The instruction sequences for the operands are combined (by <code>construct-arglist</code>) with code that constructs the list of arguments in <code>argl</code>, and the resulting argument-list code is combined with the procedure code and the code that performs the procedure call (produced by <code>compile-procedure-call</code>). In appending the code sequences, the <code>env</code> register must be preserved around the evaluation of the operator (since evaluating the operator might modify <code>env</code>, which will be needed to evaluate the operands), and the <code>proc</code> register must be preserved around the construction of the argument list (since evaluating the operands might modify <code>proc</code>, which will be needed for the actual procedure application). <code>Continue</code> must also be preserved throughout, since it is needed for the linkage in the procedure call.</p>
<p></p>
<p></p>
<p><code>(define (compile-application exp target linkage)   (let ((proc-code (compile (operator exp) 'proc 'next))         (operand-codes          (map (lambda (operand) (compile operand 'val 'next))               (operands exp))))     (preserving '(env continue)      proc-code      (preserving '(proc continue)       (construct-arglist operand-codes)       (compile-procedure-call target linkage)))))</code></p>
<p></p>
<p></p>
<p>The code to construct the argument list will evaluate each operand into <code>val</code> and then <code>cons</code> that value onto the argument list being accumulated in <code>argl</code>. Since we <code>cons</code> the arguments onto <code>argl</code> in sequence, we must start with the last argument and end with the first, so that the arguments will appear in order from first to last in the resulting list. Rather than waste an instruction by initializing <code>argl</code> to the empty list to set up for this sequence of evaluations, we make the first code sequence construct the initial <code>argl</code>. The general form of the argument-list construction is thus as follows:</p>
<p></p>
<p></p>
<p><code>&lt;compilation of last operand, targeted to val</code>&gt;<br /> (assign argl (op list) (reg val))<br /> &lt;<em>compilation of next operand, targeted to <code>val</code></em>&gt;<br /> (assign argl (op cons) (reg val) (reg argl))<br /> <code>...</code>&lt;<em>compilation of first operand, targeted to <code>val</code></em>&gt;<br /> (assign argl (op cons) (reg val) (reg argl))<br /></p>
<p></p>
<p><code>Argl</code> must be preserved around each operand evaluation except the first (so that arguments accumulated so far won't be lost), and <code>env</code> must be preserved around each operand evaluation except the last (for use by subsequent operand evaluations).</p>
<p>Compiling this argument code is a bit tricky, because of the special treatment of the first operand to be evaluated and the need to preserve <code>argl</code> and <code>env</code> in different places. The <code>construct-arglist</code> procedure takes as arguments the code that evaluates the individual operands. If there are no operands at all, it simply emits the instruction</p>
<p></p>
<p></p>
<p><code>(assign argl (const ()))</code></p>
<p></p>
<p>Otherwise, <code>construct-arglist</code> creates code that initializes <code>argl</code> with the last argument, and appends code that evaluates the rest of the arguments and adjoins them to <code>argl</code> in succession. In order to process the arguments from last to first, we must reverse the list of operand code sequences from the order supplied by <code>compile-application</code>.</p>
<p></p>
<p></p>
<p><code>(define (construct-arglist operand-codes)   (let ((operand-codes (reverse operand-codes)))     (if (null? operand-codes)         (make-instruction-sequence '() '(argl)          '((assign argl (const ()))))         (let ((code-to-get-last-arg                (append-instruction-sequences                 (car operand-codes)                 (make-instruction-sequence '(val) '(argl)                  '((assign argl (op list) (reg val)))))))           (if (null? (cdr operand-codes))               code-to-get-last-arg               (preserving '(env)                code-to-get-last-arg                (code-to-get-rest-args                 (cdr operand-codes)))))))) (define (code-to-get-rest-args operand-codes)   (let ((code-for-next-arg          (preserving '(argl)           (car operand-codes)           (make-instruction-sequence '(val argl) '(argl)            '((assign argl               (op cons) (reg val) (reg argl)))))))     (if (null? (cdr operand-codes))         code-for-next-arg         (preserving '(env)          code-for-next-arg          (code-to-get-rest-args (cdr operand-codes))))))</code></p>
<p></p>
<p></p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_810">Applying procedures</a></h4>
<p>After evaluating the elements of a combination, the compiled code must apply the procedure in <code>proc</code> to the arguments in <code>argl</code>. The code performs essentially the same dispatch as the <code>apply</code> procedure in the metacircular evaluator of section <a href="book-Z-H-26.html#%_sec_4.1.1">4.1.1</a> or the <code>apply-dispatch</code> entry point in the explicit-control evaluator of section <a href="book-Z-H-34.html#%_sec_5.4.1">5.4.1</a>. It checks whether the procedure to be applied is a primitive procedure or a compiled procedure. For a primitive procedure, it uses <code>apply-primitive-procedure</code>; we will see shortly how it handles compiled procedures. The procedure-application code has the following form:</p>
<p></p>
<p></p>
<p><code> (test (op primitive-procedure?) (reg proc))  (branch (label primitive-branch)) compiled-branch  &lt;code to apply compiled procedure with given target and appropriate linkage&gt; primitive-branch  (assign &lt;target&gt;          (op apply-primitive-procedure)          (reg proc)          (reg argl))  &lt;linkage&gt; after-call</code></p>
<p></p>
<p>Observe that the compiled branch must skip around the primitive branch. Therefore, if the linkage for the original procedure call was <code>next</code>, the compound branch must use a linkage that jumps to a label that is inserted after the primitive branch. (This is similar to the linkage used for the true branch in <code>compile-if</code>.)</p>
<p></p>
<p></p>
<p><code>(define (compile-procedure-call target linkage)   (let ((primitive-branch (make-label 'primitive-branch))         (compiled-branch (make-label 'compiled-branch))         (after-call (make-label 'after-call)))     (let ((compiled-linkage            (if (eq? linkage 'next) after-call linkage)))       (append-instruction-sequences        (make-instruction-sequence '(proc) '()         `((test (op primitive-procedure?) (reg proc))           (branch (label ,primitive-branch))))        (parallel-instruction-sequences         (append-instruction-sequences          compiled-branch          (compile-proc-appl target compiled-linkage))         (append-instruction-sequences          primitive-branch          (end-with-linkage linkage           (make-instruction-sequence '(proc argl)                                      (list target)            `((assign ,target                      (op apply-primitive-procedure)                      (reg proc)                      (reg argl)))))))        after-call))))</code></p>
<p></p>
<p>The primitive and compound branches, like the true and false branches in <code>compile-if</code>, are appended using <code>parallel-instruction-sequences</code> rather than the ordinary <code>append-instruction-sequences</code>, because they will not be executed sequentially.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_811">Applying compiled procedures</a></h4>
<p>The code that handles procedure application is the most subtle part of the compiler, even though the instruction sequences it generates are very short. A compiled procedure (as constructed by <code>compile-lambda</code>) has an entry point, which is a label that designates where the code for the procedure starts. The code at this entry point computes a result in <code>val</code> and returns by executing the instruction <code>(goto (reg continue))</code>. Thus, we might expect the code for a compiled-procedure application (to be generated by <code>compile-proc-appl</code>) with a given target and linkage to look like this if the linkage is a label</p>
<p></p>
<p><code> (assign continue (label proc-return))  (assign val (op compiled-procedure-entry) (reg proc))  (goto (reg val)) proc-return  (assign &lt;target&gt; (reg val))   ; included if target is not val</code><br />  (goto (label &lt;<em>linkage</em>&gt;))   <em>; linkage code</em><br /></p>
<p></p>
<p>or like this if the linkage is <code>return</code>.</p>
<p></p>
<p><code> (save continue)  (assign continue (label proc-return))  (assign val (op compiled-procedure-entry) (reg proc))  (goto (reg val)) proc-return  (assign &lt;target&gt; (reg val))   ; included if target is not val</code><br />  (restore continue)<br />  (goto (reg continue))   <em>; linkage code</em><br /></p>
<p></p>
<p>This code sets up <code>continue</code> so that the procedure will return to a label <code>proc-return</code> and jumps to the procedure's entry point. The code at <code>proc-return</code> transfers the procedure's result from <code>val</code> to the target register (if necessary) and then jumps to the location specified by the linkage. (The linkage is always <code>return</code> or a label, because <code>compile-procedure-call</code> replaces a <code>next</code> linkage for the compound-procedure branch by an <code>after-call</code> label.)</p>
<p>In fact, if the target is not <code>val</code>, that is exactly the code our compiler will generate.<a href="#footnote_Temp_812"><sup>39</sup></a> Usually, however, the target is <code>val</code> (the only time the compiler specifies a different register is when targeting the evaluation of an operator to <code>proc</code>), so the procedure result is put directly into the target register and there is no need to return to a special location that copies it. Instead, we simplify the code by setting up <code>continue</code> so that the procedure will ``return'' directly to the place specified by the caller's linkage:</p>
<p></p>
<p><code>&lt;set up continue</code> for linkage&gt;<br /> (assign val (op compiled-procedure-entry) (reg proc))<br /> (goto (reg val))<br /></p>
<p></p>
<p>If the linkage is a label, we set up <code>continue</code> so that the procedure will return to that label. (That is, the <code>(goto (reg continue))</code> the procedure ends with becomes equivalent to the <code>(goto (label &lt;linkage&gt;))</code> at <code>proc-return</code> above.)</p>
<p></p>
<p><code>(assign continue (label &lt;linkage&gt;)) (assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val))</code></p>
<p></p>
<p>If the linkage is <code>return</code>, we don't need to set up <code>continue</code> at all: It already holds the desired location. (That is, the <code>(goto (reg continue))</code> the procedure ends with goes directly to the place where the <code>(goto (reg continue))</code> at <code>proc-return</code> would have gone.)</p>
<p></p>
<p><code>(assign val (op compiled-procedure-entry) (reg proc)) (goto (reg val))</code></p>
<p></p>
<p>With this implementation of the <code>return</code> linkage, the compiler generates tail-recursive code. Calling a procedure as the final step in a procedure body does a direct transfer, without saving any information on the stack.</p>
<p>Suppose instead that we had handled the case of a procedure call with a linkage of <code>return</code> and a target of <code>val</code> as shown above for a non-<code>val</code> target. This would destroy tail recursion. Our system would still give the same value for any expression. But each time we called a procedure, we would save <code>continue</code> and return after the call to undo the (useless) save. These extra saves would accumulate during a nest of procedure calls.<a href="#footnote_Temp_813"><sup>40</sup></a></p>
<p><code>Compile-proc-appl</code> generates the above procedure-application code by considering four cases, depending on whether the target for the call is <code>val</code> and whether the linkage is <code>return</code>. Observe that the instruction sequences are declared to modify all the registers, since executing the procedure body can change the registers in arbitrary ways.<a href="#footnote_Temp_814"><sup>41</sup></a> Also note that the code sequence for the case with target <code>val</code> and linkage <code>return</code> is declared to need <code>continue</code>: Even though <code>continue</code> is not explicitly used in the two-instruction sequence, we must be sure that <code>continue</code> will have the correct value when we enter the compiled procedure.</p>
<p></p>
<p></p>
<p><code>(define (compile-proc-appl target linkage)   (cond ((and (eq? target 'val) (not (eq? linkage 'return)))          (make-instruction-sequence '(proc) all-regs            `((assign continue (label ,linkage))              (assign val (op compiled-procedure-entry)                          (reg proc))              (goto (reg val)))))         ((and (not (eq? target 'val))               (not (eq? linkage 'return)))          (let ((proc-return (make-label 'proc-return)))            (make-instruction-sequence '(proc) all-regs             `((assign continue (label ,proc-return))               (assign val (op compiled-procedure-entry)                           (reg proc))               (goto (reg val))               ,proc-return               (assign ,target (reg val))               (goto (label ,linkage))))))         ((and (eq? target 'val) (eq? linkage 'return))          (make-instruction-sequence '(proc continue) all-regs           '((assign val (op compiled-procedure-entry)                         (reg proc))             (goto (reg val)))))         ((and (not (eq? target 'val)) (eq? linkage 'return))          (error &quot;return linkage, target not val -- COMPILE&quot;                 target))))</code></p>
<p></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.5.4">5.5.4  Combining Instruction Sequences</a></h3>
<p>This section describes the details on how instruction sequences are represented and combined. Recall from section <a href="#%_sec_5.5.1">5.5.1</a> that an instruction sequence is represented as a list of the registers needed, the registers modified, and the actual instructions. We will also consider a label (symbol) to be a degenerate case of an instruction sequence, which doesn't need or modify any registers. So to determine the registers needed and modified by instruction sequences we use the selectors</p>
<p></p>
<p><code>(define (registers-needed s)   (if (symbol? s) '() (car s))) (define (registers-modified s)   (if (symbol? s) '() (cadr s))) (define (statements s)   (if (symbol? s) (list s) (caddr s)))</code></p>
<p></p>
<p>and to determine whether a given sequence needs or modifies a given register we use the predicates</p>
<p></p>
<p><code>(define (needs-register? seq reg)   (memq reg (registers-needed seq))) (define (modifies-register? seq reg)   (memq reg (registers-modified seq)))</code></p>
<p></p>
<p>In terms of these predicates and selectors, we can implement the various instruction sequence combiners used throughout the compiler.</p>
<p>The basic combiner is <code>append-instruction-sequences</code>. This takes as arguments an arbitrary number of instruction sequences that are to be executed sequentially and returns an instruction sequence whose statements are the statements of all the sequences appended together. The subtle point is to determine the registers that are needed and modified by the resulting sequence. It modifies those registers that are modified by any of the sequences; it needs those registers that must be initialized before the first sequence can be run (the registers needed by the first sequence), together with those registers needed by any of the other sequences that are not initialized (modified) by sequences preceding it.</p>
<p>The sequences are appended two at a time by <code>append-2-sequences</code>. This takes two instruction sequences <code>seq1</code> and <code>seq2</code> and returns the instruction sequence whose statements are the statements of <code>seq1</code> followed by the statements of <code>seq2</code>, whose modified registers are those registers that are modified by either <code>seq1</code> or <code>seq2</code>, and whose needed registers are the registers needed by <code>seq1</code> together with those registers needed by <code>seq2</code> that are not modified by <code>seq1</code>. (In terms of set operations, the new set of needed registers is the union of the set of registers needed by <code>seq1</code> with the set difference of the registers needed by <code>seq2</code> and the registers modified by <code>seq1</code>.) Thus, <code>append-instruction-sequences</code> is implemented as follows:</p>
<p></p>
<p></p>
<p><code>(define (append-instruction-sequences . seqs)   (define (append-2-sequences seq1 seq2)     (make-instruction-sequence      (list-union (registers-needed seq1)                  (list-difference (registers-needed seq2)                                   (registers-modified seq1)))      (list-union (registers-modified seq1)                  (registers-modified seq2))      (append (statements seq1) (statements seq2))))   (define (append-seq-list seqs)     (if (null? seqs)         (empty-instruction-sequence)         (append-2-sequences (car seqs)                             (append-seq-list (cdr seqs)))))   (append-seq-list seqs))</code></p>
<p></p>
<p></p>
<p>This procedure uses some simple operations for manipulating sets represented as lists, similar to the (unordered) set representation described in section <a href="book-Z-H-16.html#%_sec_2.3.3">2.3.3</a>:</p>
<p></p>
<p><code>(define (list-union s1 s2)   (cond ((null? s1) s2)         ((memq (car s1) s2) (list-union (cdr s1) s2))         (else (cons (car s1) (list-union (cdr s1) s2))))) (define (list-difference s1 s2)   (cond ((null? s1) '())         ((memq (car s1) s2) (list-difference (cdr s1) s2))         (else (cons (car s1)                     (list-difference (cdr s1) s2)))))</code></p>
<p></p>
<p></p>
<p><code>Preserving</code>, the second major instruction sequence combiner, takes a list of registers <code>regs</code> and two instruction sequences <code>seq1</code> and <code>seq2</code> that are to be executed sequentially. It returns an instruction sequence whose statements are the statements of <code>seq1</code> followed by the statements of <code>seq2</code>, with appropriate <code>save</code> and <code>restore</code> instructions around <code>seq1</code> to protect the registers in <code>regs</code> that are modified by <code>seq1</code> but needed by <code>seq2</code>. To accomplish this, <code>preserving</code> first creates a sequence that has the required <code>save</code>s followed by the statements of <code>seq1</code> followed by the required <code>restore</code>s. This sequence needs the registers being saved and restored in addition to the registers needed by <code>seq1</code>, and modifies the registers modified by <code>seq1</code> except for the ones being saved and restored. This augmented sequence and <code>seq2</code> are then appended in the usual way. The following procedure implements this strategy recursively, walking down the list of registers to be preserved:<a href="#footnote_Temp_815"><sup>42</sup></a></p>
<p></p>
<p><code>(define (preserving regs seq1 seq2)   (if (null? regs)       (append-instruction-sequences seq1 seq2)       (let ((first-reg (car regs)))         (if (and (needs-register? seq2 first-reg)                  (modifies-register? seq1 first-reg))             (preserving (cdr regs)              (make-instruction-sequence               (list-union (list first-reg)                           (registers-needed seq1))               (list-difference (registers-modified seq1)                                (list first-reg))               (append `((save ,first-reg))                       (statements seq1)                       `((restore ,first-reg))))              seq2)             (preserving (cdr regs) seq1 seq2)))))</code></p>
<p></p>
<p></p>
<p>Another sequence combiner, <code>tack-on-instruction-sequence</code>, is used by <code>compile-lambda</code> to append a procedure body to another sequence. Because the procedure body is not ``in line'' to be executed as part of the combined sequence, its register use has no impact on the register use of the sequence in which it is embedded. We thus ignore the procedure body's sets of needed and modified registers when we tack it onto the other sequence.</p>
<p></p>
<p></p>
<p><code>(define (tack-on-instruction-sequence seq body-seq)   (make-instruction-sequence    (registers-needed seq)    (registers-modified seq)    (append (statements seq) (statements body-seq))))</code></p>
<p></p>
<p></p>
<p><code>Compile-if</code> and <code>compile-procedure-call</code> use a special combiner called <code>parallel-instruction-sequences</code> to append the two alternative branches that follow a test. The two branches will never be executed sequentially; for any particular evaluation of the test, one branch or the other will be entered. Because of this, the registers needed by the second branch are still needed by the combined sequence, even if these are modified by the first branch.</p>
<p></p>
<p></p>
<p><code>(define (parallel-instruction-sequences seq1 seq2)   (make-instruction-sequence    (list-union (registers-needed seq1)                (registers-needed seq2))    (list-union (registers-modified seq1)                (registers-modified seq2))    (append (statements seq1) (statements seq2))))</code></p>
<p></p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.5.5">5.5.5  An Example of Compiled Code</a></h3>
<p>Now that we have seen all the elements of the compiler, let us examine an example of compiled code to see how things fit together. We will compile the definition of a recursive <code>factorial</code> procedure by calling <code>compile</code>:</p>
<p></p>
<p></p>
<p><code>(compile  '(define (factorial n)     (if (= n 1)         1         (* (factorial (- n 1)) n)))  'val  'next)</code></p>
<p></p>
<p>We have specified that the value of the <code>define</code> expression should be placed in the <code>val</code> register. We don't care what the compiled code does after executing the <code>define</code>, so our choice of <code>next</code> as the linkage descriptor is arbitrary.</p>
<p><code>Compile</code> determines that the expression is a definition, so it calls <code>compile-definition</code> to compile code to compute the value to be assigned (targeted to <code>val</code>), followed by code to install the definition, followed by code to put the value of the <code>define</code> (which is the symbol <code>ok</code>) into the target register, followed finally by the linkage code. <code>Env</code> is preserved around the computation of the value, because it is needed in order to install the definition. Because the linkage is <code>next</code>, there is no linkage code in this case. The skeleton of the compiled code is thus</p>
<p></p>
<p></p>
<p><code>  &lt;save env</code> if modified by code to compute value&gt;<br />   &lt;<em>compilation of definition value, target <code>val</code>, linkage <code>next</code></em>&gt;<br />   &lt;<em>restore <code>env</code> if saved above</em>&gt;<br />   (perform (op define-variable!)<br />            (const factorial)<br />            (reg val)<br />            (reg env))<br />   (assign val (const ok))<br /></p>
<p></p>
<p></p>
<p>The expression that is to be compiled to produce the value for the variable <code>factorial</code> is a <code>lambda</code> expression whose value is the procedure that computes factorials. <code>Compile</code> handles this by calling <code>compile-lambda</code>, which compiles the procedure body, labels it as a new entry point, and generates the instruction that will combine the procedure body at the new entry point with the run-time environment and assign the result to <code>val</code>. The sequence then skips around the compiled procedure code, which is inserted at this point. The procedure code itself begins by extending the procedure's definition environment by a frame that binds the formal parameter <code>n</code> to the procedure argument. Then comes the actual procedure body. Since this code for the value of the variable doesn't modify the <code>env</code> register, the optional <code>save</code> and <code>restore</code> shown above aren't generated. (The procedure code at <code>entry2</code> isn't executed at this point, so its use of <code>env</code> is irrelevant.) Therefore, the skeleton for the compiled code becomes</p>
<p></p>
<p></p>
<p><code>  (assign val (op make-compiled-procedure)               (label entry2)               (reg env))   (goto (label after-lambda1)) entry2   (assign env (op compiled-procedure-env) (reg proc))   (assign env (op extend-environment)               (const (n))               (reg argl)               (reg env))   &lt;compilation of procedure body&gt; after-lambda1   (perform (op define-variable!)            (const factorial)            (reg val)            (reg env))   (assign val (const ok))</code></p>
<p></p>
<p></p>
<p>A procedure body is always compiled (by <code>compile-lambda-body</code>) as a sequence with target <code>val</code> and linkage <code>return</code>. The sequence in this case consists of a single <code>if</code> expression:</p>
<p></p>
<p></p>
<p><code>(if (= n 1)     1     (* (factorial (- n 1)) n))</code></p>
<p></p>
<p><code>Compile-if</code> generates code that first computes the predicate (targeted to <code>val</code>), then checks the result and branches around the true branch if the predicate is false. <code>Env</code> and <code>continue</code> are preserved around the predicate code, since they may be needed for the rest of the <code>if</code> expression. Since the <code>if</code> expression is the final expression (and only expression) in the sequence making up the procedure body, its target is <code>val</code> and its linkage is <code>return</code>, so the true and false branches are both compiled with target <code>val</code> and linkage <code>return</code>. (That is, the value of the conditional, which is the value computed by either of its branches, is the value of the procedure.)</p>
<p></p>
<p></p>
<p><code>  &lt;save continue</code>, <code>env</code> if modified by predicate and needed by branches&gt;<br />   &lt;<em>compilation of predicate, target <code>val</code>, linkage <code>next</code></em>&gt;<br />   &lt;<em>restore <code>continue</code>, <code>env</code> if saved above</em>&gt;<br />   (test (op false?) (reg val))<br />   (branch (label false-branch4))<br /> true-branch5<br />   &lt;<em>compilation of true branch, target <code>val</code>, linkage <code>return</code></em>&gt;<br /> false-branch4<br />   &lt;<em>compilation of false branch, target <code>val</code>, linkage <code>return</code></em>&gt;<br /> after-if3<br /></p>
<p></p>
<p></p>
<p>The predicate <code>(= n 1)</code> is a procedure call. This looks up the operator (the symbol <code>=</code>) and places this value in <code>proc</code>. It then assembles the arguments <code>1</code> and the value of <code>n</code> into <code>argl</code>. Then it tests whether <code>proc</code> contains a primitive or a compound procedure, and dispatches to a primitive branch or a compound branch accordingly. Both branches resume at the <code>after-call</code> label. The requirements to preserve registers around the evaluation of the operator and operands don't result in any saving of registers, because in this case those evaluations don't modify the registers in question.</p>
<p></p>
<p></p>
<p><code>  (assign proc           (op lookup-variable-value) (const =) (reg env))   (assign val (const 1))   (assign argl (op list) (reg val))   (assign val (op lookup-variable-value) (const n) (reg env))   (assign argl (op cons) (reg val) (reg argl))   (test (op primitive-procedure?) (reg proc))   (branch (label primitive-branch17)) compiled-branch16   (assign continue (label after-call15))   (assign val (op compiled-procedure-entry) (reg proc))   (goto (reg val)) primitive-branch17   (assign val (op apply-primitive-procedure)               (reg proc)               (reg argl)) after-call15</code></p>
<p></p>
<p></p>
<p>The true branch, which is the constant 1, compiles (with target <code>val</code> and linkage <code>return</code>) to</p>
<p></p>
<p></p>
<p><code>  (assign val (const 1))   (goto (reg continue))</code></p>
<p></p>
<p>The code for the false branch is another a procedure call, where the procedure is the value of the symbol <code>*</code>, and the arguments are <code>n</code> and the result of another procedure call (a call to <code>factorial</code>). Each of these calls sets up <code>proc</code> and <code>argl</code> and its own primitive and compound branches. Figure <a href="#%_fig_5.17">5.17</a> shows the complete compilation of the definition of the <code>factorial</code> procedure. Notice that the possible <code>save</code> and <code>restore</code> of <code>continue</code> and <code>env</code> around the predicate, shown above, are in fact generated, because these registers are modified by the procedure call in the predicate and needed for the procedure call and the <code>return</code> linkage in the branches.</p>
<p><strong>Exercise 5.33.</strong>  Consider the following definition of a factorial procedure, which is slightly different from the one given above:</p>
<p></p>
<p><code>(define (factorial-alt n)   (if (= n 1)       1       (* n (factorial-alt (- n 1)))))</code></p>
<p></p>
<p>Compile this procedure and compare the resulting code with that produced for <code>factorial</code>. Explain any differences you find. Does either program execute more efficiently than the other?</p>
<p></p>
<p></p>
<p><strong>Exercise 5.34.</strong>  Compile the iterative factorial procedure</p>
<p></p>
<p><code>(define (factorial n)   (define (iter product counter)     (if (&gt; counter n)         product         (iter (* counter product)               (+ counter 1))))   (iter 1 1))</code></p>
<p></p>
<p>Annotate the resulting code, showing the essential difference between the code for iterative and recursive versions of <code>factorial</code> that makes one process build up stack space and the other run in constant stack space.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><code>;; construct the procedure and skip over code for the procedure body   (assign val           (op make-compiled-procedure) (label entry2) (reg env))   (goto (label after-lambda1))  entry2     ; calls to factorial</code> will enter here<br />   (assign env (op compiled-procedure-env) (reg proc))<br />   (assign env<br />           (op extend-environment) (const (n)) (reg argl) (reg env))<br /> <em>;; begin actual procedure body</em><br />   (save continue)<br />   (save env)<br /> <br /> <em>;; compute <code>(= n 1)</code></em><br />   (assign proc (op lookup-variable-value) (const =) (reg env))<br />   (assign val (const 1))<br />   (assign argl (op list) (reg val))<br />   (assign val (op lookup-variable-value) (const n) (reg env))<br />   (assign argl (op cons) (reg val) (reg argl))<br />   (test (op primitive-procedure?) (reg proc))<br />   (branch (label primitive-branch17))<br /> compiled-branch16<br />   (assign continue (label after-call15))<br />   (assign val (op compiled-procedure-entry) (reg proc))<br />   (goto (reg val))<br /> primitive-branch17<br />   (assign val (op apply-primitive-procedure) (reg proc) (reg argl))<br /> <br /> after-call15   <em>; <code>val</code> now contains result of <code>(= n 1)</code></em><br />   (restore env)<br />   (restore continue)<br />   (test (op false?) (reg val))<br />   (branch (label false-branch4))<br /> true-branch5  <em>; return 1</em><br />   (assign val (const 1))<br />   (goto (reg continue))<br /> <br /> false-branch4<br /> <em>;; compute and return <code>(* (factorial (- n 1)) n)</code></em><br />   (assign proc (op lookup-variable-value) (const *) (reg env))<br />   (save continue)<br />   (save proc)   <em>; save <code>*</code></em> procedure<br />   (assign val (op lookup-variable-value) (const n) (reg env))<br />   (assign argl (op list) (reg val))<br />   (save argl)   <em>; save partial argument list for <code>*</code></em><br /> <br /> <em>;; compute <code>(factorial (- n 1))</code>, which is the other argument for <code>*</code></em><br />   (assign proc<br />           (op lookup-variable-value) (const factorial) (reg env))<br />   (save proc)  <em>; save <code>factorial</code> procedure</em><br /></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.17:</strong>  Compilation of the definition of the <code>factorial</code> procedure (continued on next page).</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><code>;; compute (- n 1)</code>, which is the argument for <code>factorial</code><br />   (assign proc (op lookup-variable-value) (const -) (reg env))<br />   (assign val (const 1))<br />   (assign argl (op list) (reg val))<br />   (assign val (op lookup-variable-value) (const n) (reg env))<br />   (assign argl (op cons) (reg val) (reg argl))<br />   (test (op primitive-procedure?) (reg proc))<br />   (branch (label primitive-branch8))<br /> compiled-branch7<br />   (assign continue (label after-call6))<br />   (assign val (op compiled-procedure-entry) (reg proc))<br />   (goto (reg val))<br /> primitive-branch8<br />   (assign val (op apply-primitive-procedure) (reg proc) (reg argl))<br /> <br /> after-call6   <em>; <code>val</code> now contains result of <code>(- n 1)</code></em><br />   (assign argl (op list) (reg val))<br />   (restore proc) <em>; restore <code>factorial</code></em><br /> <em>;; apply <code>factorial</code></em><br />   (test (op primitive-procedure?) (reg proc))<br />   (branch (label primitive-branch11))<br /> compiled-branch10<br />   (assign continue (label after-call9))<br />   (assign val (op compiled-procedure-entry) (reg proc))<br />   (goto (reg val))<br /> primitive-branch11<br />   (assign val (op apply-primitive-procedure) (reg proc) (reg argl))<br /> <br /> after-call9      <em>; <code>val</code> now contains result of <code>(factorial (- n 1))</code></em><br />   (restore argl) <em>; restore partial argument list for <code>*</code></em><br />   (assign argl (op cons) (reg val) (reg argl))<br />   (restore proc) <em>; restore <code>*</code></em><br />   (restore continue)<br /> <em>;; apply <code>*</code></em> and return its value<br />   (test (op primitive-procedure?) (reg proc))<br />   (branch (label primitive-branch14))<br /> compiled-branch13<br /> <em>;; note that a compound procedure here is called tail-recursively</em><br />   (assign val (op compiled-procedure-entry) (reg proc))<br />   (goto (reg val))<br /> primitive-branch14<br />   (assign val (op apply-primitive-procedure) (reg proc) (reg argl))<br />   (goto (reg continue))<br /> after-call12<br /> after-if3<br /> after-lambda1<br /> <em>;; assign the procedure to the variable <code>factorial</code></em><br />   (perform<br />    (op define-variable!) (const factorial) (reg val) (reg env))<br />   (assign val (const ok))<br /></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.17:</strong>  (continued)</p>
<p></p>
<p></p>
<p><strong>Exercise 5.35.</strong>  What expression was compiled to produce the code shown in figure <a href="#%_fig_5.18">5.18</a>?</p>
<p></p>
<p></p>
<p><code>  (assign val (op make-compiled-procedure) (label entry16)                                            (reg env))   (goto (label after-lambda15)) entry16   (assign env (op compiled-procedure-env) (reg proc))   (assign env           (op extend-environment) (const (x)) (reg argl) (reg env))   (assign proc (op lookup-variable-value) (const +) (reg env))   (save continue)   (save proc)   (save env)   (assign proc (op lookup-variable-value) (const g) (reg env))   (save proc)   (assign proc (op lookup-variable-value) (const +) (reg env))   (assign val (const 2))   (assign argl (op list) (reg val))   (assign val (op lookup-variable-value) (const x) (reg env))   (assign argl (op cons) (reg val) (reg argl))   (test (op primitive-procedure?) (reg proc))   (branch (label primitive-branch19)) compiled-branch18   (assign continue (label after-call17))   (assign val (op compiled-procedure-entry) (reg proc))   (goto (reg val)) primitive-branch19   (assign val (op apply-primitive-procedure) (reg proc) (reg argl)) after-call17   (assign argl (op list) (reg val))   (restore proc)   (test (op primitive-procedure?) (reg proc))   (branch (label primitive-branch22)) compiled-branch21   (assign continue (label after-call20))   (assign val (op compiled-procedure-entry) (reg proc))   (goto (reg val)) primitive-branch22   (assign val (op apply-primitive-procedure) (reg proc) (reg argl))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.18:</strong>  An example of compiler output (continued on next page). See exercise <a href="#%_thm_5.35">5.35</a>.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><code>after-call20   (assign argl (op list) (reg val))   (restore env)   (assign val (op lookup-variable-value) (const x) (reg env))   (assign argl (op cons) (reg val) (reg argl))   (restore proc)   (restore continue)   (test (op primitive-procedure?) (reg proc))   (branch (label primitive-branch25)) compiled-branch24   (assign val (op compiled-procedure-entry) (reg proc))   (goto (reg val)) primitive-branch25   (assign val (op apply-primitive-procedure) (reg proc) (reg argl))   (goto (reg continue)) after-call23 after-lambda15   (perform (op define-variable!) (const f) (reg val) (reg env))   (assign val (const ok))</code></p>
<p></p>
<p></p>
<p></p>
<p><strong>Figure 5.18:</strong>  (continued)</p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 5.36.</strong>  What order of evaluation does our compiler produce for operands of a combination? Is it left-to-right, right-to-left, or some other order? Where in the compiler is this order determined? Modify the compiler so that it produces some other order of evaluation. (See the discussion of order of evaluation for the explicit-control evaluator in section <a href="book-Z-H-34.html#%_sec_5.4.1">5.4.1</a>.) How does changing the order of operand evaluation affect the efficiency of the code that constructs the argument list?</p>
<p></p>
<p></p>
<p><strong>Exercise 5.37.</strong>  One way to understand the compiler's <code>preserving</code> mechanism for optimizing stack usage is to see what extra operations would be generated if we did not use this idea. Modify <code>preserving</code> so that it always generates the <code>save</code> and <code>restore</code> operations. Compile some simple expressions and identify the unnecessary stack operations that are generated. Compare the code to that generated with the <code>preserving</code> mechanism intact.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.38.</strong>  Our compiler is clever about avoiding unnecessary stack operations, but it is not clever at all when it comes to compiling calls to the primitive procedures of the language in terms of the primitive operations supplied by the machine. For example, consider how much code is compiled to compute <code>(+ a 1)</code>: The code sets up an argument list in <code>argl</code>, puts the primitive addition procedure (which it finds by looking up the symbol <code>+</code> in the environment) into <code>proc</code>, and tests whether the procedure is primitive or compound. The compiler always generates code to perform the test, as well as code for primitive and compound branches (only one of which will be executed). We have not shown the part of the controller that implements primitives, but we presume that these instructions make use of primitive arithmetic operations in the machine's data paths. Consider how much less code would be generated if the compiler could <em>open-code</em> primitives -- that is, if it could generate code to directly use these primitive machine operations. The expression <code>(+ a 1)</code> might be compiled into something as simple as <a href="#footnote_Temp_822"><sup>43</sup></a></p>
<p></p>
<p><code>(assign val (op lookup-variable-value) (const a) (reg env)) (assign val (op +) (reg val) (const 1))</code></p>
<p></p>
<p>In this exercise we will extend our compiler to support open coding of selected primitives. Special-purpose code will be generated for calls to these primitive procedures instead of the general procedure-application code. In order to support this, we will augment our machine with special argument registers <code>arg1</code> and <code>arg2</code>. The primitive arithmetic operations of the machine will take their inputs from <code>arg1</code> and <code>arg2</code>. The results may be put into <code>val</code>, <code>arg1</code>, or <code>arg2</code>.</p>
<p>The compiler must be able to recognize the application of an open-coded primitive in the source program. We will augment the dispatch in the <code>compile</code> procedure to recognize the names of these primitives in addition to the reserved words (the special forms) it currently recognizes.<a href="#footnote_Temp_823"><sup>44</sup></a> For each special form our compiler has a code generator. In this exercise we will construct a family of code generators for the open-coded primitives.</p>
<p>a.  The open-coded primitives, unlike the special forms, all need their operands evaluated. Write a code generator <code>spread-arguments</code> for use by all the open-coding code generators. <code>Spread-arguments</code> should take an operand list and compile the given operands targeted to successive argument registers. Note that an operand may contain a call to an open-coded primitive, so argument registers will have to be preserved during operand evaluation.</p>
<p>b.  For each of the primitive procedures <code>=</code>, <code>*</code>, <code>-</code>, and <code>+</code>, write a code generator that takes a combination with that operator, together with a target and a linkage descriptor, and produces code to spread the arguments into the registers and then perform the operation targeted to the given target with the given linkage. You need only handle expressions with two operands. Make <code>compile</code> dispatch to these code generators.</p>
<p>c.  Try your new compiler on the <code>factorial</code> example. Compare the resulting code with the result produced without open coding.</p>
<p>d.  Extend your code generators for <code>+</code> and <code>*</code> so that they can handle expressions with arbitrary numbers of operands. An expression with more than two operands will have to be compiled into a sequence of operations, each with only two inputs.</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.5.6">5.5.6  Lexical Addressing</a></h3>
<p>One of the most common optimizations performed by compilers is the optimization of variable lookup. Our compiler, as we have implemented it so far, generates code that uses the <code>lookup-variable-value</code> operation of the evaluator machine. This searches for a variable by comparing it with each variable that is currently bound, working frame by frame outward through the run-time environment. This search can be expensive if the frames are deeply nested or if there are many variables. For example, consider the problem of looking up the value of <code>x</code> while evaluating the expression <code>(* x y z)</code> in an application of the procedure that is returned by</p>
<p></p>
<p></p>
<p><code>(let ((x 3) (y 4))   (lambda (a b c d e)     (let ((y (* a b x))           (z (+ c d x)))       (* x y z))))</code></p>
<p></p>
<p>Since a <code>let</code> expression is just syntactic sugar for a <code>lambda</code> combination, this expression is equivalent to</p>
<p></p>
<p></p>
<p><code>((lambda (x y)    (lambda (a b c d e)      ((lambda (y z) (* x y z))       (* a b x)       (+ c d x))))  3  4)</code></p>
<p></p>
<p>Each time <code>lookup-variable-value</code> searches for <code>x</code>, it must determine that the symbol <code>x</code> is not <code>eq?</code> to <code>y</code> or <code>z</code> (in the first frame), nor to <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, or <code>e</code> (in the second frame). We will assume, for the moment, that our programs do not use <code>define</code> -- that variables are bound only with <code>lambda</code>. Because our language is lexically scoped, the run-time environment for any expression will have a structure that parallels the lexical structure of the program in which the expression appears.<a href="#footnote_Temp_824"><sup>45</sup></a> Thus, the compiler can know, when it analyzes the above expression, that each time the procedure is applied the variable <code>x</code> in <code>(* x y z)</code> will be found two frames out from the current frame and will be the first variable in that frame.</p>
<p>We can exploit this fact by inventing a new kind of variable-lookup operation, <code>lexical-address-lookup</code>, that takes as arguments an environment and a <em>lexical address</em> that consists of two numbers: a <em>frame number</em>, which specifies how many frames to pass over, and a <em>displacement number</em>, which specifies how many variables to pass over in that frame. <code>Lexical-address-lookup</code> will produce the value of the variable stored at that lexical address relative to the current environment. If we add the <code>lexical-address-lookup</code> operation to our machine, we can make the compiler generate code that references variables using this operation, rather than <code>lookup-variable-value</code>. Similarly, our compiled code can use a new <code>lexical-address-set!</code> operation instead of <code>set-variable-value!</code>.</p>
<p>In order to generate such code, the compiler must be able to determine the lexical address of a variable it is about to compile a reference to. The lexical address of a variable in a program depends on where one is in the code. For example, in the following program, the address of <code>x</code> in expression &lt;<em>e1</em>&gt; is (2,0) -- two frames back and the first variable in the frame. At that point <code>y</code> is at address (0,0) and <code>c</code> is at address (1,2). In expression &lt;<em>e2</em>&gt;, <code>x</code> is at (1,0), <code>y</code> is at (1,1), and <code>c</code> is at (0,2).</p>
<p></p>
<p></p>
<p><code>((lambda (x y)    (lambda (a b c d e)      ((lambda (y z) &lt;e1&gt;)       &lt;e2&gt;       (+ c d x))))  3  4)</code></p>
<p></p>
<p></p>
<p>One way for the compiler to produce code that uses lexical addressing is to maintain a data structure called a <em>compile-time environment</em>. This keeps track of which variables will be at which positions in which frames in the run-time environment when a particular variable-access operation is executed. The compile-time environment is a list of frames, each containing a list of variables. (There will of course be no values bound to the variables, since values are not computed at compile time.) The compile-time environment becomes an additional argument to <code>compile</code> and is passed along to each code generator. The top-level call to <code>compile</code> uses an empty compile-time environment. When a <code>lambda</code> body is compiled, <code>compile-lambda-body</code> extends the compile-time environment by a frame containing the procedure's parameters, so that the sequence making up the body is compiled with that extended environment. At each point in the compilation, <code>compile-variable</code> and <code>compile-assignment</code> use the compile-time environment in order to generate the appropriate lexical addresses.</p>
<p>Exercises <a href="#%_thm_5.39">5.39</a> through <a href="#%_thm_5.43">5.43</a> describe how to complete this sketch of the lexical-addressing strategy in order to incorporate lexical lookup into the compiler. Exercise <a href="#%_thm_5.44">5.44</a> describes another use for the compile-time environment.</p>
<p></p>
<p><strong>Exercise 5.39.</strong>  Write a procedure <code>lexical-address-lookup</code> that implements the new lookup operation. It should take two arguments -- a lexical address and a run-time environment -- and return the value of the variable stored at the specified lexical address. <code>Lexical-address-lookup</code> should signal an error if the value of the variable is the symbol <code>*unassigned*</code>.<a href="#footnote_Temp_826"><sup>46</sup></a> Also write a procedure <code>lexical-address-set!</code> that implements the operation that changes the value of the variable at a specified lexical address.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.40.</strong>  Modify the compiler to maintain the compile-time environment as described above. That is, add a compile-time-environment argument to <code>compile</code> and the various code generators, and extend it in <code>compile-lambda-body</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.41.</strong>  Write a procedure <code>find-variable</code> that takes as arguments a variable and a compile-time environment and returns the lexical address of the variable with respect to that environment. For example, in the program fragment that is shown above, the compile-time environment during the compilation of expression &lt;<em>e1</em>&gt; is <code>((y z) (a b c d e) (x y))</code>. <code>Find-variable</code> should produce</p>
<p></p>
<p></p>
<p><code>(find-variable 'c '((y z) (a b c d e) (x y))) (1 2)  (find-variable 'x '((y z) (a b c d e) (x y))) (2 0)  (find-variable 'w '((y z) (a b c d e) (x y))) not-found</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 5.42.</strong>  Using <code>find-variable</code> from exercise <a href="#%_thm_5.41">5.41</a>, rewrite <code>compile-variable</code> and <code>compile-assignment</code> to output lexical-address instructions. In cases where <code>find-variable</code> returns <code>not-found</code> (that is, where the variable is not in the compile-time environment), you should have the code generators use the evaluator operations, as before, to search for the binding. (The only place a variable that is not found at compile time can be is in the global environment, which is part of the run-time environment but is not part of the compile-time environment.<a href="#footnote_Temp_830"><sup>47</sup></a> Thus, if you wish, you may have the evaluator operations look directly in the global environment, which can be obtained with the operation <code>(op get-global-environment)</code>, instead of having them search the whole run-time environment found in <code>env</code>.) Test the modified compiler on a few simple cases, such as the nested <code>lambda</code> combination at the beginning of this section.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.43.</strong>  We argued in section <a href="book-Z-H-26.html#%_sec_4.1.6">4.1.6</a> that internal definitions for block structure should not be considered ``real'' <code>define</code>s. Rather, a procedure body should be interpreted as if the internal variables being defined were installed as ordinary <code>lambda</code> variables initialized to their correct values using <code>set!</code>. Section <a href="book-Z-H-26.html#%_sec_4.1.6">4.1.6</a> and exercise <a href="book-Z-H-26.html#%_thm_4.16">4.16</a> showed how to modify the metacircular interpreter to accomplish this by scanning out internal definitions. Modify the compiler to perform the same transformation before it compiles a procedure body.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.44.</strong>  In this section we have focused on the use of the compile-time environment to produce lexical addresses. But there are other uses for compile-time environments. For instance, in exercise <a href="#%_thm_5.38">5.38</a> we increased the efficiency of compiled code by open-coding primitive procedures. Our implementation treated the names of open-coded procedures as reserved words. If a program were to rebind such a name, the mechanism described in exercise <a href="#%_thm_5.38">5.38</a> would still open-code it as a primitive, ignoring the new binding. For example, consider the procedure</p>
<p></p>
<p></p>
<p><code>(lambda (+ * a b x y)   (+ (* a x) (* b y)))</code></p>
<p></p>
<p>which computes a linear combination of <code>x</code> and <code>y</code>. We might call it with arguments <code>+matrix</code>, <code>*matrix</code>, and four matrices, but the open-coding compiler would still open-code the <code>+</code> and the <code>*</code> in <code>(+ (* a x) (* b y))</code> as primitive <code>+</code> and <code>*</code>. Modify the open-coding compiler to consult the compile-time environment in order to compile the correct code for expressions involving the names of primitive procedures. (The code will work correctly as long as the program does not <code>define</code> or <code>set!</code> these names.)</p>
<p></p>
<p></p>
<h3><a href="book-Z-H-4.html#%_toc_%_sec_5.5.7">5.5.7  Interfacing Compiled Code to the Evaluator</a></h3>
<p>We have not yet explained how to load compiled code into the evaluator machine or how to run it. We will assume that the explicit-control-evaluator machine has been defined as in section <a href="book-Z-H-34.html#%_sec_5.4.4">5.4.4</a>, with the additional operations specified in footnote <a href="#footnote_Temp_809">38</a>. We will implement a procedure <code>compile-and-go</code> that compiles a Scheme expression, loads the resulting object code into the evaluator machine, and causes the machine to run the code in the evaluator global environment, print the result, and enter the evaluator's driver loop. We will also modify the evaluator so that interpreted expressions can call compiled procedures as well as interpreted ones. We can then put a compiled procedure into the machine and use the evaluator to call it:</p>
<p></p>
<p></p>
<p><code>(compile-and-go  '(define (factorial n)     (if (= n 1)         1         (* (factorial (- n 1)) n))))  ;;; EC-Eval value: ok  ;;; EC-Eval input: (factorial 5) ;;; EC-Eval value: 120</code></p>
<p></p>
<p></p>
<p>To allow the evaluator to handle compiled procedures (for example, to evaluate the call to <code>factorial</code> above), we need to change the code at <code>apply-dispatch</code> (section <a href="book-Z-H-34.html#%_sec_5.4.1">5.4.1</a>) so that it recognizes compiled procedures (as distinct from compound or primitive procedures) and transfers control directly to the entry point of the compiled code:<a href="#footnote_Temp_833"><sup>48</sup></a></p>
<p></p>
<p><code>apply-dispatch   (test (op primitive-procedure?) (reg proc))   (branch (label primitive-apply))   (test (op compound-procedure?) (reg proc))     (branch (label compound-apply))   (test (op compiled-procedure?) (reg proc))     (branch (label compiled-apply))   (goto (label unknown-procedure-type)) compiled-apply   (restore continue)   (assign val (op compiled-procedure-entry) (reg proc))   (goto (reg val))</code></p>
<p></p>
<p>Note the restore of <code>continue</code> at <code>compiled-apply</code>. Recall that the evaluator was arranged so that at <code>apply-dispatch</code>, the continuation would be at the top of the stack. The compiled code entry point, on the other hand, expects the continuation to be in <code>continue</code>, so <code>continue</code> must be restored before the compiled code is executed.</p>
<p>To enable us to run some compiled code when we start the evaluator machine, we add a <code>branch</code> instruction at the beginning of the evaluator machine, which causes the machine to go to a new entry point if the <code>flag</code> register is set.<a href="#footnote_Temp_834"><sup>49</sup></a></p>
<p></p>
<p></p>
<p><code>  (branch (label external-entry))      ; branches if flag</code> is set<br /> read-eval-print-loop<br />   (perform (op initialize-stack))<br />   <code>...</code></p>
<p></p>
<p><code>External-entry</code> assumes that the machine is started with <code>val</code> containing the location of an instruction sequence that puts a result into <code>val</code> and ends with <code>(goto (reg continue))</code>. Starting at this entry point jumps to the location designated by <code>val</code>, but first assigns <code>continue</code> so that execution will return to <code>print-result</code>, which prints the value in <code>val</code> and then goes to the beginning of the evaluator's read-eval-print loop.<a href="#footnote_Temp_835"><sup>50</sup></a></p>
<p></p>
<p></p>
<p><code>external-entry   (perform (op initialize-stack))   (assign env (op get-global-environment))   (assign continue (label print-result))   (goto (reg val))</code></p>
<p></p>
<p>Now we can use the following procedure to compile a procedure definition, execute the compiled code, and run the read-eval-print loop so we can try the procedure. Because we want the compiled code to return to the location in <code>continue</code> with its result in <code>val</code>, we compile the expression with a target of <code>val</code> and a linkage of <code>return</code>. In order to transform the object code produced by the compiler into executable instructions for the evaluator register machine, we use the procedure <code>assemble</code> from the register-machine simulator (section <a href="book-Z-H-32.html#%_sec_5.2.2">5.2.2</a>). We then initialize the <code>val</code> register to point to the list of instructions, set the <code>flag</code> so that the evaluator will go to <code>external-entry</code>, and start the evaluator.</p>
<p></p>
<p></p>
<p><code>(define (compile-and-go expression)   (let ((instructions          (assemble (statements                     (compile expression 'val 'return))                    eceval)))     (set! the-global-environment (setup-environment))     (set-register-contents! eceval 'val instructions)     (set-register-contents! eceval 'flag true)     (start eceval)))</code></p>
<p></p>
<p></p>
<p>If we have set up stack monitoring, as at the end of section <a href="book-Z-H-34.html#%_sec_5.4.4">5.4.4</a>, we can examine the stack usage of compiled code:</p>
<p></p>
<p></p>
<p><code>(compile-and-go  '(define (factorial n)     (if (= n 1)         1         (* (factorial (- n 1)) n))))  (total-pushes = 0 maximum-depth = 0)  ;;; EC-Eval value: ok  ;;; EC-Eval input: (factorial 5) (total-pushes = 31 maximum-depth = 14) ;;; EC-Eval value: 120</code></p>
<p></p>
<p>Compare this example with the evaluation of <code>(factorial 5)</code> using the interpreted version of the same procedure, shown at the end of section <a href="book-Z-H-34.html#%_sec_5.4.4">5.4.4</a>. The interpreted version required 144 pushes and a maximum stack depth of 28. This illustrates the optimization that results from our compilation strategy.</p>
<p></p>
<h4><a href="book-Z-H-4.html#%_toc_%_sec_Temp_836">Interpretation and compilation</a></h4>
<p>With the programs in this section, we can now experiment with the alternative execution strategies of interpretation and compilation.<a href="#footnote_Temp_837"><sup>51</sup></a> An interpreter raises the machine to the level of the user program; a compiler lowers the user program to the level of the machine language. We can regard the Scheme language (or any programming language) as a coherent family of abstractions erected on the machine language. Interpreters are good for interactive program development and debugging because the steps of program execution are organized in terms of these abstractions, and are therefore more intelligible to the programmer. Compiled code can execute faster, because the steps of program execution are organized in terms of the machine language, and the compiler is free to make optimizations that cut across the higher-level abstractions.<a href="#footnote_Temp_838"><sup>52</sup></a></p>
<p>The alternatives of interpretation and compilation also lead to different strategies for porting languages to new computers. Suppose that we wish to implement Lisp for a new machine. One strategy is to begin with the explicit-control evaluator of section <a href="book-Z-H-34.html#%_sec_5.4">5.4</a> and translate its instructions to instructions for the new machine. A different strategy is to begin with the compiler and change the code generators so that they generate code for the new machine. The second strategy allows us to run any Lisp program on the new machine by first compiling it with the compiler running on our original Lisp system, and linking it with a compiled version of the run-time library.<a href="#footnote_Temp_839"><sup>53</sup></a> Better yet, we can compile the compiler itself, and run this on the new machine to compile other Lisp programs.<a href="#footnote_Temp_840"><sup>54</sup></a> Or we can compile one of the interpreters of section <a href="book-Z-H-26.html#%_sec_4.1">4.1</a> to produce an interpreter that runs on the new machine.</p>
<p></p>
<p><strong>Exercise 5.45.</strong>  By comparing the stack operations used by compiled code to the stack operations used by the evaluator for the same computation, we can determine the extent to which the compiler optimizes use of the stack, both in speed (reducing the total number of stack operations) and in space (reducing the maximum stack depth). Comparing this optimized stack use to the performance of a special-purpose machine for the same computation gives some indication of the quality of the compiler.</p>
<p></p>
<p></p>
<p>a. Exercise <a href="book-Z-H-34.html#%_thm_5.27">5.27</a> asked you to determine, as a function of <em>n</em>, the number of pushes and the maximum stack depth needed by the evaluator to compute <em>n</em>! using the recursive factorial procedure given above. Exercise <a href="book-Z-H-32.html#%_thm_5.14">5.14</a> asked you to do the same measurements for the special-purpose factorial machine shown in figure <a href="book-Z-H-31.html#%_fig_5.11">5.11</a>. Now perform the same analysis using the compiled <code>factorial</code> procedure.</p>
<p>Take the ratio of the number of pushes in the compiled version to the number of pushes in the interpreted version, and do the same for the maximum stack depth. Since the number of operations and the stack depth used to compute <em>n</em>! are linear in <em>n</em>, these ratios should approach constants as <em>n</em> becomes large. What are these constants? Similarly, find the ratios of the stack usage in the special-purpose machine to the usage in the interpreted version.</p>
<p>Compare the ratios for special-purpose versus interpreted code to the ratios for compiled versus interpreted code. You should find that the special-purpose machine does much better than the compiled code, since the hand-tailored controller code should be much better than what is produced by our rudimentary general-purpose compiler.</p>
<p></p>
<p></p>
<p>b. Can you suggest improvements to the compiler that would help it generate code that would come closer in performance to the hand-tailored version?</p>
<p></p>
<p></p>
<p><strong>Exercise 5.46.</strong>  Carry out an analysis like the one in exercise <a href="#%_thm_5.45">5.45</a> to determine the effectiveness of compiling the tree-recursive Fibonacci procedure</p>
<p></p>
<p></p>
<p><code>(define (fib n)   (if (&lt; n 2)       n       (+ (fib (- n 1)) (fib (- n 2)))))</code></p>
<p></p>
<p>compared to the effectiveness of using the special-purpose Fibonacci machine of figure <a href="book-Z-H-31.html#%_fig_5.12">5.12</a>. (For measurement of the interpreted performance, see exercise <a href="book-Z-H-34.html#%_thm_5.29">5.29</a>.) For Fibonacci, the time resource used is not linear in <em>n</em>; hence the ratios of stack operations will not approach a limiting value that is independent of <em>n</em>.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.47.</strong>  This section described how to modify the explicit-control evaluator so that interpreted code can call compiled procedures. Show how to modify the compiler so that compiled procedures can call not only primitive procedures and compiled procedures, but interpreted procedures as well. This requires modifying <code>compile-procedure-call</code> to handle the case of compound (interpreted) procedures. Be sure to handle all the same <code>target</code> and <code>linkage</code> combinations as in <code>compile-proc-appl</code>. To do the actual procedure application, the code needs to jump to the evaluator's <code>compound-apply</code> entry point. This label cannot be directly referenced in object code (since the assembler requires that all labels referenced by the code it is assembling be defined there), so we will add a register called <code>compapp</code> to the evaluator machine to hold this entry point, and add an instruction to initialize it:</p>
<p></p>
<p><code>  (assign compapp (label compound-apply))   (branch (label external-entry))      ; branches if flag</code> is set<br /> read-eval-print-loop<br />   <code>...</code></p>
<p></p>
<p>To test your code, start by defining a procedure <code>f</code> that calls a procedure <code>g</code>. Use <code>compile-and-go</code> to compile the definition of <code>f</code> and start the evaluator. Now, typing at the evaluator, define <code>g</code> and try to call <code>f</code>.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.48.</strong>  The <code>compile-and-go</code> interface implemented in this section is awkward, since the compiler can be called only once (when the evaluator machine is started). Augment the compiler-interpreter interface by providing a <code>compile-and-run</code> primitive that can be called from within the explicit-control evaluator as follows:</p>
<p></p>
<p></p>
<p><code>;;; EC-Eval input: (compile-and-run  '(define (factorial n)     (if (= n 1)         1         (* (factorial (- n 1)) n)))) ;;; EC-Eval value: ok ;;; EC-Eval input: (factorial 5) ;;; EC-Eval value: 120</code></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><strong>Exercise 5.49.</strong>  As an alternative to using the explicit-control evaluator's read-eval-print loop, design a register machine that performs a read-compile-execute-print loop. That is, the machine should run a loop that reads an expression, compiles it, assembles and executes the resulting code, and prints the result. This is easy to run in our simulated setup, since we can arrange to call the procedures <code>compile</code> and <code>assemble</code> as ``register-machine operations.''</p>
<p></p>
<p></p>
<p><strong>Exercise 5.50.</strong>  Use the compiler to compile the metacircular evaluator of section <a href="book-Z-H-26.html#%_sec_4.1">4.1</a> and run this program using the register-machine simulator. (To compile more than one definition at a time, you can package the definitions in a <code>begin</code>.) The resulting interpreter will run very slowly because of the multiple levels of interpretation, but getting all the details to work is an instructive exercise.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.51.</strong>  Develop a rudimentary implementation of Scheme in C (or some other low-level language of your choice) by translating the explicit-control evaluator of section <a href="book-Z-H-34.html#%_sec_5.4">5.4</a> into C. In order to run this code you will need to also provide appropriate storage-allocation routines and other run-time support.</p>
<p></p>
<p></p>
<p><strong>Exercise 5.52.</strong>  As a counterpoint to exercise <a href="#%_thm_5.51">5.51</a>, modify the compiler so that it compiles Scheme procedures into sequences of C instructions. Compile the metacircular evaluator of section <a href="book-Z-H-26.html#%_sec_4.1">4.1</a> to produce a Scheme interpreter written in C.</p>
<p></p>
<p></p>
<p></p>
<hr />
<p></p>
<p><a href="#call_footnote_Temp_794"><sup>33</sup></a> This is a theoretical statement. We are not claiming that the evaluator's data paths are a particularly convenient or efficient set of data paths for a general-purpose computer. For example, they are not very good for implementing high-performance floating-point calculations or calculations that intensively manipulate bit vectors.</p>
<p><a href="#call_footnote_Temp_795"><sup>34</sup></a> Actually, the machine that runs compiled code can be simpler than the interpreter machine, because we won't use the <code>exp</code> and <code>unev</code> registers. The interpreter used these to hold pieces of unevaluated expressions. With the compiler, however, these expressions get built into the compiled code that the register machine will run. For the same reason, we don't need the machine operations that deal with expression syntax. But compiled code will use a few additional machine operations (to represent compiled procedure objects) that didn't appear in the explicit-control evaluator machine.</p>
<p><a href="#call_footnote_Temp_797"><sup>35</sup></a> Notice, however, that our compiler is a Scheme program, and the syntax procedures that it uses to manipulate expressions are the actual Scheme procedures used with the metacircular evaluator. For the explicit-control evaluator, in contrast, we assumed that equivalent syntax operations were available as operations for the register machine. (Of course, when we simulated the register machine in Scheme, we used the actual Scheme procedures in our register machine simulation.)</p>
<p><a href="#call_footnote_Temp_803"><sup>36</sup></a> This procedure uses a feature of Lisp called <em>backquote</em> (or <em>quasiquote</em>) that is handy for constructing lists. Preceding a list with a backquote symbol is much like quoting it, except that anything in the list that is flagged with a comma is evaluated.</p>
<p>For example, if the value of <code>linkage</code> is the symbol <code>branch25</code>, then the expression <code>`((goto (label ,linkage)))</code> evaluates to the list <code>((goto (label branch25)))</code>. Similarly, if the value of <code>x</code> is the list <code>(a b c)</code>, then <code>`(1 2 ,(car x))</code> evaluates to the list <code>(1 2 a)</code>.</p>
<p><a href="#call_footnote_Temp_806"><sup>37</sup></a> We can't just use the labels <code>true-branch</code>, <code>false-branch</code>, and <code>after-if</code> as shown above, because there might be more than one <code>if</code> in the program. The compiler uses the procedure <code>make-label</code> to generate labels. <code>Make-label</code> takes a symbol as argument and returns a new symbol that begins with the given symbol. For example, successive calls to <code>(make-label 'a)</code> would return <code>a1</code>, <code>a2</code>, and so on. <code>Make-label</code> can be implemented similarly to the generation of unique variable names in the query language, as follows:</p>
<p></p>
<p><code>(define label-counter 0)  (define (new-label-number)   (set! label-counter (+ 1 label-counter))   label-counter)  (define (make-label name)   (string-&gt;symbol     (string-append (symbol-&gt;string name)                    (number-&gt;string (new-label-number)))))</code></p>
<p></p>
<p></p>
<p><a href="#call_footnote_Temp_809"><sup>38</sup></a> We need machine operations to implement a data structure for representing compiled procedures, analogous to the structure for compound procedures described in section <a href="book-Z-H-26.html#%_sec_4.1.3">4.1.3</a>:</p>
<p></p>
<p><code>(define (make-compiled-procedure entry env)   (list 'compiled-procedure entry env))  (define (compiled-procedure? proc)   (tagged-list? proc 'compiled-procedure))  (define (compiled-procedure-entry c-proc) (cadr c-proc))  (define (compiled-procedure-env c-proc) (caddr c-proc))</code></p>
<p></p>
<p></p>
<p><a href="#call_footnote_Temp_812"><sup>39</sup></a> Actually, we signal an error when the target is not <code>val</code> and the linkage is <code>return</code>, since the only place we request <code>return</code> linkages is in compiling procedures, and our convention is that procedures return their values in <code>val</code>.</p>
<p><a href="#call_footnote_Temp_813"><sup>40</sup></a> Making a compiler generate tail-recursive code might seem like a straightforward idea. But most compilers for common languages, including C and Pascal, do not do this, and therefore these languages cannot represent iterative processes in terms of procedure call alone. The difficulty with tail recursion in these languages is that their implementations use the stack to store procedure arguments and local variables as well as return addresses. The Scheme implementations described in this book store arguments and variables in memory to be garbage-collected. The reason for using the stack for variables and arguments is that it avoids the need for garbage collection in languages that would not otherwise require it, and is generally believed to be more efficient. Sophisticated Lisp compilers can, in fact, use the stack for arguments without destroying tail recursion. (See Hanson 1990 for a description.) There is also some debate about whether stack allocation is actually more efficient than garbage collection in the first place, but the details seem to hinge on fine points of computer architecture. (See Appel 1987 and Miller and Rozas 1994 for opposing views on this issue.)</p>
<p><a href="#call_footnote_Temp_814"><sup>41</sup></a> The variable <code>all-regs</code> is bound to the list of names of all the registers:</p>
<p></p>
<p><code>(define all-regs '(env proc val argl continue))</code></p>
<p></p>
<p></p>
<p><a href="#call_footnote_Temp_815"><sup>42</sup></a> Note that <code>preserving</code> calls <code>append</code> with three arguments. Though the definition of <code>append</code> shown in this book accepts only two arguments, Scheme standardly provides an <code>append</code> procedure that takes an arbitrary number of arguments.</p>
<p><a href="#call_footnote_Temp_822"><sup>43</sup></a> We have used the same symbol <code>+</code> here to denote both the source-language procedure and the machine operation. In general there will not be a one-to-one correspondence between primitives of the source language and primitives of the machine.</p>
<p><a href="#call_footnote_Temp_823"><sup>44</sup></a> Making the primitives into reserved words is in general a bad idea, since a user cannot then rebind these names to different procedures. Moreover, if we add reserved words to a compiler that is in use, existing programs that define procedures with these names will stop working. See exercise <a href="#%_thm_5.44">5.44</a> for ideas on how to avoid this problem.</p>
<p><a href="#call_footnote_Temp_824"><sup>45</sup></a> This is not true if we allow internal definitions, unless we scan them out. See exercise <a href="#%_thm_5.43">5.43</a>.</p>
<p><a href="#call_footnote_Temp_826"><sup>46</sup></a> This is the modification to variable lookup required if we implement the scanning method to eliminate internal definitions (exercise <a href="#%_thm_5.43">5.43</a>). We will need to eliminate these definitions in order for lexical addressing to work.</p>
<p><a href="#call_footnote_Temp_830"><sup>47</sup></a> Lexical addresses cannot be used to access variables in the global environment, because these names can be defined and redefined interactively at any time. With internal definitions scanned out, as in exercise <a href="#%_thm_5.43">5.43</a>, the only definitions the compiler sees are those at top level, which act on the global environment. Compilation of a definition does not cause the defined name to be entered in the compile-time environment.</p>
<p><a href="#call_footnote_Temp_833"><sup>48</sup></a> Of course, compiled procedures as well as interpreted procedures are compound (nonprimitive). For compatibility with the terminology used in the explicit-control evaluator, in this section we will use ``compound'' to mean interpreted (as opposed to compiled).</p>
<p><a href="#call_footnote_Temp_834"><sup>49</sup></a> Now that the evaluator machine starts with a <code>branch</code>, we must always initialize the <code>flag</code> register before starting the evaluator machine. To start the machine at its ordinary read-eval-print loop, we could use</p>
<p></p>
<p><code>(define (start-eceval)   (set! the-global-environment (setup-environment))   (set-register-contents! eceval 'flag false)   (start eceval))</code></p>
<p></p>
<p></p>
<p><a href="#call_footnote_Temp_835"><sup>50</sup></a> Since a compiled procedure is an object that the system may try to print, we also modify the system print operation <code>user-print</code> (from section <a href="book-Z-H-26.html#%_sec_4.1.4">4.1.4</a>) so that it will not attempt to print the components of a compiled procedure:</p>
<p></p>
<p><code>(define (user-print object)   (cond ((compound-procedure? object)          (display (list 'compound-procedure                         (procedure-parameters object)                         (procedure-body object)                         '&lt;procedure-env&gt;)))         ((compiled-procedure? object)          (display '&lt;compiled-procedure&gt;))         (else (display object))))</code></p>
<p></p>
<p></p>
<p><a href="#call_footnote_Temp_837"><sup>51</sup></a> We can do even better by extending the compiler to allow compiled code to call interpreted procedures. See exercise <a href="#%_thm_5.47">5.47</a>.</p>
<p><a href="#call_footnote_Temp_838"><sup>52</sup></a> Independent of the strategy of execution, we incur significant overhead if we insist that errors encountered in execution of a user program be detected and signaled, rather than being allowed to kill the system or produce wrong answers. For example, an out-of-bounds array reference can be detected by checking the validity of the reference before performing it. The overhead of checking, however, can be many times the cost of the array reference itself, and a programmer should weigh speed against safety in determining whether such a check is desirable. A good compiler should be able to produce code with such checks, should avoid redundant checks, and should allow programmers to control the extent and type of error checking in the compiled code.</p>
<p>Compilers for popular languages, such as C and C++, put hardly any error-checking operations into running code, so as to make things run as fast as possible. As a result, it falls to programmers to explicitly provide error checking. Unfortunately, people often neglect to do this, even in critical applications where speed is not a constraint. Their programs lead fast and dangerous lives. For example, the notorious ``Worm'' that paralyzed the Internet in 1988 exploited the UNIX<sup><em>T</em><em>M</em></sup> operating system's failure to check whether the input buffer has overflowed in the finger daemon. (See Spafford 1989.)</p>
<p><a href="#call_footnote_Temp_839"><sup>53</sup></a> Of course, with either the interpretation or the compilation strategy we must also implement for the new machine storage allocation, input and output, and all the various operations that we took as ``primitive'' in our discussion of the evaluator and compiler. One strategy for minimizing work here is to write as many of these operations as possible in Lisp and then compile them for the new machine. Ultimately, everything reduces to a small kernel (such as garbage collection and the mechanism for applying actual machine primitives) that is hand-coded for the new machine.</p>
<p><a href="#call_footnote_Temp_840"><sup>54</sup></a> This strategy leads to amusing tests of correctness of the compiler, such as checking whether the compilation of a program on the new machine, using the compiled compiler, is identical with the compilation of the program on the original Lisp system. Tracking down the source of differences is fun but often frustrating, because the results are extremely sensitive to minuscule details.</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-34.html">previous</a>, <a href="book-Z-H-36.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-35.html">previous</a>, <a href="book-Z-H-37.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h1 class="chapter"></h1>
<p> </p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_Temp_849">References</a></p>
<p></p>
<p>Abelson, Harold, Andrew Berlin, Jacob Katzenelson, William McAllister, Guillermo Rozas, Gerald Jay Sussman, and Jack Wisdom. 1992. The Supercomputer Toolkit: A general framework for special-purpose computing. <em>International Journal of High-Speed Electronics</em> 3(3):337-361.</p>
<p>Allen, John. 1978. <em>Anatomy of Lisp.</em> New York: McGraw-Hill.</p>
<p>ANSI X3.226-1994. <em>American National Standard for Information Systems -- Programming Language -- Common Lisp.</em></p>
<p>Appel, Andrew W. 1987. Garbage collection can be faster than stack allocation. <em>Information Processing Letters</em> 25(4):275-279.</p>
<p>Backus, John. 1978. Can programming be liberated from the von Neumann style? <em>Communications of the ACM</em> 21(8):613-641.</p>
<p>Baker, Henry G., Jr. 1978. List processing in real time on a serial computer. <em>Communications of the ACM</em> 21(4):280-293.</p>
<p>Batali, John, Neil Mayle, Howard Shrobe, Gerald Jay Sussman, and Daniel Weise. 1982. The Scheme-81 architecture -- System and chip. In <em>Proceedings of the MIT Conference on Advanced Research in VLSI,</em> edited by Paul Penfield, Jr. Dedham, MA: Artech House.</p>
<p>Borning, Alan. 1977. ThingLab -- An object-oriented system for building simulations using constraints. In <em>Proceedings of the 5th International Joint Conference on Artificial Intelligence.</em></p>
<p>Borodin, Alan, and Ian Munro. 1975. <em>The Computational Complexity of Algebraic and Numeric Problems.</em> New York: American Elsevier.</p>
<p>Chaitin, Gregory J. 1975. Randomness and mathematical proof. <em>Scientific American</em> 232(5):47-52.</p>
<p>Church, Alonzo. 1941. <em>The Calculi of Lambda-Conversion.</em> Princeton, N.J.: Princeton University Press.</p>
<p>Clark, Keith L. 1978. Negation as failure. In <em>Logic and Data Bases.</em> New York: Plenum Press, pp. 293-322.</p>
<p>Clinger, William. 1982. Nondeterministic call by need is neither lazy nor by name. In <em>Proceedings of the ACM Symposium on Lisp and Functional Programming,</em> pp. 226-234.</p>
<p>Clinger, William, and Jonathan Rees. 1991. Macros that work. In <em>Proceedings of the 1991 ACM Conference on Principles of Programming Languages,</em> pp. 155-162.</p>
<p>Colmerauer A., H. Kanoui, R. Pasero, and P. Roussel. 1973. Un système de communication homme-machine en français. Technical report, Groupe Intelligence Artificielle, Université d'Aix Marseille, Luminy.</p>
<p>Cormen, Thomas, Charles Leiserson, and Ronald Rivest. 1990. <em>Introduction to Algorithms.</em> Cambridge, MA: MIT Press.</p>
<p>Darlington, John, Peter Henderson, and David Turner. 1982. <em>Functional Programming and Its Applications.</em> New York: Cambridge University Press.</p>
<p>Dijkstra, Edsger W. 1968a. The structure of the ``THE'' multiprogramming system. <em>Communications of the ACM</em> 11(5):341-346.</p>
<p>Dijkstra, Edsger W. 1968b. Cooperating sequential processes. In <em>Programming Languages</em>, edited by F. Genuys. New York: Academic Press, pp. 43-112.</p>
<p>Dinesman, Howard P. 1968. <em>Superior Mathematical Puzzles</em>. New York: Simon and Schuster.</p>
<p>deKleer, Johan, Jon Doyle, Guy Steele, and Gerald J. Sussman. 1977. AMORD: Explicit control of reasoning. In <em>Proceedings of the ACM Symposium on Artificial Intelligence and Programming Languages,</em> pp. 116-125.</p>
<p>Doyle, Jon. 1979. A truth maintenance system. <em>Artificial Intelligence</em> 12:231-272.</p>
<p>Feigenbaum, Edward, and Howard Shrobe. 1993. The Japanese National Fifth Generation Project: Introduction, survey, and evaluation. In <em>Future Generation Computer Systems,</em> vol. 9, pp. 105-117.</p>
<p>Feeley, Marc. 1986. Deux approches à l'implantation du language Scheme. Masters thesis, Université de Montréal.</p>
<p>Feeley, Marc and Guy Lapalme. 1987. Using closures for code generation. <em>Journal of Computer Languages</em> 12(1):47-66.</p>
<p>Feller, William. 1957. <em>An Introduction to Probability Theory and Its Applications,</em> volume 1. New York: John Wiley &amp; Sons.</p>
<p>Fenichel, R., and J. Yochelson. 1969. A Lisp garbage collector for virtual memory computer systems. <em>Communications of the ACM</em> 12(11):611-612.</p>
<p>Floyd, Robert. 1967. Nondeterministic algorithms. <em>JACM,</em> 14(4):636-644.</p>
<p>Forbus, Kenneth D., and Johan deKleer. 1993. <em>Building Problem Solvers.</em> Cambridge, MA: MIT Press.</p>
<p>Friedman, Daniel P., and David S. Wise. 1976. CONS should not evaluate its arguments. In <em>Automata, Languages, and Programming: Third International Colloquium,</em> edited by S. Michaelson and R. Milner, pp. 257-284.</p>
<p>Friedman, Daniel P., Mitchell Wand, and Christopher T. Haynes. 1992. <em>Essentials of Programming Languages.</em> Cambridge, MA: MIT Press/McGraw-Hill.</p>
<p>Gabriel, Richard P. 1988. The Why of <em>Y</em>. <em>Lisp Pointers</em> 2(2):15-25.</p>
<p>Goldberg, Adele, and David Robson. 1983. <em>Smalltalk-80: The Language and Its Implementation.</em> Reading, MA: Addison-Wesley.</p>
<p>Gordon, Michael, Robin Milner, and Christopher Wadsworth. 1979. <em>Edinburgh LCF.</em> Lecture Notes in Computer Science, volume 78. New York: Springer-Verlag.</p>
<p>Gray, Jim, and Andreas Reuter. 1993. <em>Transaction Processing: Concepts and Models.</em> San Mateo, CA: Morgan-Kaufman.</p>
<p>Green, Cordell. 1969. Application of theorem proving to problem solving. In <em>Proceedings of the International Joint Conference on Artificial Intelligence,</em> pp. 219-240.</p>
<p>Green, Cordell, and Bertram Raphael. 1968. The use of theorem-proving techniques in question-answering systems. In <em>Proceedings of the ACM National Conference,</em> pp. 169-181.</p>
<p>Griss, Martin L. 1981. Portable Standard Lisp, a brief overview. Utah Symbolic Computation Group Operating Note 58, University of Utah.</p>
<p>Guttag, John V. 1977. Abstract data types and the development of data structures. <em>Communications of the ACM</em> 20(6):397-404.</p>
<p>Hamming, Richard W. 1980. <em>Coding and Information Theory.</em> Englewood Cliffs, N.J.: Prentice-Hall.</p>
<p>Hanson, Christopher P. 1990. Efficient stack allocation for tail-recursive languages. In <em>Proceedings of ACM Conference on Lisp and Functional Programming,</em> pp. 106-118.</p>
<p>Hanson, Christopher P. 1991. A syntactic closures macro facility. <em>Lisp Pointers,</em> 4(3).</p>
<p>Hardy, Godfrey H. 1921. Srinivasa Ramanujan. <em>Proceedings of the London Mathematical Society</em> XIX(2).</p>
<p>Hardy, Godfrey H., and E. M. Wright. 1960. <em>An Introduction to the Theory of Numbers.</em> 4th edition. New York: Oxford University Press.</p>
<p>Havender, J. 1968. Avoiding deadlocks in multi-tasking systems. <em>IBM Systems Journal</em> 7(2):74-84.</p>
<p>Hearn, Anthony C. 1969. Standard Lisp. Technical report AIM-90, Artificial Intelligence Project, Stanford University.</p>
<p>Henderson, Peter. 1980. <em>Functional Programming: Application and Implementation.</em> Englewood Cliffs, N.J.: Prentice-Hall.</p>
<p>Henderson. Peter. 1982. Functional Geometry. In <em>Conference Record of the 1982 ACM Symposium on Lisp and Functional Programming,</em> pp. 179-187.</p>
<p>Hewitt, Carl E. 1969. PLANNER: A language for proving theorems in robots. In <em>Proceedings of the International Joint Conference on Artificial Intelligence,</em> pp. 295-301.</p>
<p>Hewitt, Carl E. 1977. Viewing control structures as patterns of passing messages. <em>Journal of Artificial Intelligence</em> 8(3):323-364.</p>
<p>Hoare, C. A. R. 1972. Proof of correctness of data representations. <em>Acta Informatica</em> 1(1).</p>
<p>Hodges, Andrew. 1983. <em>Alan Turing: The Enigma.</em> New York: Simon and Schuster.</p>
<p>Hofstadter, Douglas R. 1979. <em>Gödel, Escher, Bach: An Eternal Golden Braid.</em> New York: Basic Books.</p>
<p>Hughes, R. J. M. 1990. Why functional programming matters. In <em>Research Topics in Functional Programming</em>, edited by David Turner. Reading, MA: Addison-Wesley, pp. 17-42.</p>
<p>IEEE Std 1178-1990. 1990. <em>IEEE Standard for the Scheme Programming Language.</em></p>
<p>Ingerman, Peter, Edgar Irons, Kirk Sattley, and Wallace Feurzeig; assisted by M. Lind, Herbert Kanner, and Robert Floyd. 1960. THUNKS: A way of compiling procedure statements, with some comments on procedure declarations. Unpublished manuscript. (Also, private communication from Wallace Feurzeig.)</p>
<p>Kaldewaij, Anne. 1990. <em>Programming: The Derivation of Algorithms.</em> New York: Prentice-Hall.</p>
<p>Kohlbecker, Eugene Edmund, Jr. 1986. Syntactic extensions in the programming language Lisp. Ph.D. thesis, Indiana University.</p>
<p>Konopasek, Milos, and Sundaresan Jayaraman. 1984. <em>The TK!Solver Book: A Guide to Problem-Solving in Science, Engineering, Business, and Education.</em> Berkeley, CA: Osborne/McGraw-Hill.</p>
<p>Knuth, Donald E. 1973. <em>Fundamental Algorithms.</em> Volume 1 of <em>The Art of Computer Programming.</em> 2nd edition. Reading, MA: Addison-Wesley.</p>
<p>Knuth, Donald E. 1981. <em>Seminumerical Algorithms.</em> Volume 2 of <em>The Art of Computer Programming.</em> 2nd edition. Reading, MA: Addison-Wesley.</p>
<p>Kowalski, Robert. 1973. Predicate logic as a programming language. Technical report 70, Department of Computational Logic, School of Artificial Intelligence, University of Edinburgh.</p>
<p>Kowalski, Robert. 1979. <em>Logic for Problem Solving.</em> New York: North-Holland.</p>
<p>Lamport, Leslie. 1978. Time, clocks, and the ordering of events in a distributed system. <em>Communications of the ACM</em> 21(7):558-565.</p>
<p>Lampson, Butler, J. J. Horning, R. London, J. G. Mitchell, and G. K. Popek. 1981. Report on the programming language Euclid. Technical report, Computer Systems Research Group, University of Toronto.</p>
<p>Landin, Peter. 1965. A correspondence between Algol 60 and Church's lambda notation: Part I. <em>Communications of the ACM</em> 8(2):89-101.</p>
<p>Lieberman, Henry, and Carl E. Hewitt. 1983. A real-time garbage collector based on the lifetimes of objects. <em>Communications of the ACM</em> 26(6):419-429.</p>
<p>Liskov, Barbara H., and Stephen N. Zilles. 1975. Specification techniques for data abstractions. <em>IEEE Transactions on Software Engineering</em> 1(1):7-19.</p>
<p>McAllester, David Allen. 1978. A three-valued truth-maintenance system. Memo 473, MIT Artificial Intelligence Laboratory.</p>
<p>McAllester, David Allen. 1980. An outlook on truth maintenance. Memo 551, MIT Artificial Intelligence Laboratory.</p>
<p>McCarthy, John. 1960. Recursive functions of symbolic expressions and their computation by machine. <em>Communications of the ACM</em> 3(4):184-195.</p>
<p>McCarthy, John. 1967. A basis for a mathematical theory of computation. In <em>Computer Programing and Formal Systems</em>, edited by P. Braffort and D. Hirschberg. North-Holland.</p>
<p>McCarthy, John. 1978. The history of Lisp. In <em>Proceedings of the ACM SIGPLAN Conference on the History of Programming Languages.</em></p>
<p>McCarthy, John, P. W. Abrahams, D. J. Edwards, T. P. Hart, and M. I. Levin. 1965. <em>Lisp 1.5 Programmer's Manual.</em> 2nd edition. Cambridge, MA: MIT Press.</p>
<p>McDermott, Drew, and Gerald Jay Sussman. 1972. Conniver reference manual. Memo 259, MIT Artificial Intelligence Laboratory.</p>
<p>Miller, Gary L. 1976. Riemann's Hypothesis and tests for primality. <em>Journal of Computer and System Sciences</em> 13(3):300-317.</p>
<p>Miller, James S., and Guillermo J. Rozas. 1994. Garbage collection is fast, but a stack is faster. Memo 1462, MIT Artificial Intelligence Laboratory.</p>
<p>Moon, David. 1978. MacLisp reference manual, Version 0. Technical report, MIT Laboratory for Computer Science.</p>
<p>Moon, David, and Daniel Weinreb. 1981. Lisp machine manual. Technical report, MIT Artificial Intelligence Laboratory.</p>
<p>Morris, J. H., Eric Schmidt, and Philip Wadler. 1980. Experience with an applicative string processing language. In <em>Proceedings of the 7th Annual ACM SIGACT/SIGPLAN Symposium on the Principles of Programming Languages.</em></p>
<p>Phillips, Hubert. 1934. <em>The Sphinx Problem Book</em>. London: Faber and Faber.</p>
<p>Pitman, Kent. 1983. The revised MacLisp Manual (Saturday evening edition). Technical report 295, MIT Laboratory for Computer Science.</p>
<p>Rabin, Michael O. 1980. Probabilistic algorithm for testing primality. <em>Journal of Number Theory</em> 12:128-138.</p>
<p>Raymond, Eric. 1993. <em>The New Hacker's Dictionary.</em> 2nd edition. Cambridge, MA: MIT Press.</p>
<p>Raynal, Michel. 1986. <em>Algorithms for Mutual Exclusion.</em> Cambridge, MA: MIT Press.</p>
<p>Rees, Jonathan A., and Norman I. Adams IV. 1982. T: A dialect of Lisp or, lambda: The ultimate software tool. In <em>Conference Record of the 1982 ACM Symposium on Lisp and Functional Programming,</em> pp. 114-122.</p>
<p>Rees, Jonathan, and William Clinger (eds). 1991. The revised<sup>4</sup> report on the algorithmic language Scheme. <em>Lisp Pointers,</em> 4(3).</p>
<p>Rivest, Ronald, Adi Shamir, and Leonard Adleman. 1977. A method for obtaining digital signatures and public-key cryptosystems. Technical memo LCS/TM82, MIT Laboratory for Computer Science.</p>
<p>Robinson, J. A. 1965. A machine-oriented logic based on the resolution principle. <em>Journal of the ACM</em> 12(1):23.</p>
<p>Robinson, J. A. 1983. Logic programming -- Past, present, and future. <em>New Generation Computing</em> 1:107-124.</p>
<p>Spafford, Eugene H. 1989. The Internet Worm: Crisis and aftermath. <em>Communications of the ACM</em> 32(6):678-688.</p>
<p>Steele, Guy Lewis, Jr. 1977. Debunking the ``expensive procedure call'' myth. In <em>Proceedings of the National Conference of the ACM,</em> pp. 153-62.</p>
<p>Steele, Guy Lewis, Jr. 1982. An overview of Common Lisp. In <em>Proceedings of the ACM Symposium on Lisp and Functional Programming,</em> pp. 98-107.</p>
<p>Steele, Guy Lewis, Jr. 1990. <em>Common Lisp: The Language.</em> 2nd edition. Digital Press.</p>
<p>Steele, Guy Lewis, Jr., and Gerald Jay Sussman. 1975. Scheme: An interpreter for the extended lambda calculus. Memo 349, MIT Artificial Intelligence Laboratory.</p>
<p>Steele, Guy Lewis, Jr., Donald R. Woods, Raphael A. Finkel, Mark R. Crispin, Richard M. Stallman, and Geoffrey S. Goodfellow. 1983. <em>The Hacker's Dictionary.</em> New York: Harper &amp; Row.</p>
<p>Stoy, Joseph E. 1977. <em>Denotational Semantics.</em> Cambridge, MA: MIT Press.</p>
<p>Sussman, Gerald Jay, and Richard M. Stallman. 1975. Heuristic techniques in computer-aided circuit analysis. <em>IEEE Transactions on Circuits and Systems</em> CAS-22(11):857-865.</p>
<p>Sussman, Gerald Jay, and Guy Lewis Steele Jr. 1980. Constraints -- A language for expressing almost-hierachical descriptions. <em>AI Journal</em> 14:1-39.</p>
<p>Sussman, Gerald Jay, and Jack Wisdom. 1992. Chaotic evolution of the solar system. <em>Science</em> 257:256-262.</p>
<p>Sussman, Gerald Jay, Terry Winograd, and Eugene Charniak. 1971. Microplanner reference manual. Memo 203A, MIT Artificial Intelligence Laboratory.</p>
<p>Sutherland, Ivan E. 1963. SKETCHPAD: A man-machine graphical communication system. Technical report 296, MIT Lincoln Laboratory.</p>
<p>Teitelman, Warren. 1974. Interlisp reference manual. Technical report, Xerox Palo Alto Research Center.</p>
<p>Thatcher, James W., Eric G. Wagner, and Jesse B. Wright. 1978. Data type specification: Parameterization and the power of specification techniques. In <em>Conference Record of the Tenth Annual ACM Symposium on Theory of Computing</em>, pp. 119-132. Turner, David. 1981. The future of applicative languages. In <em>Proceedings of the 3rd European Conference on Informatics,</em> Lecture Notes in Computer Science, volume 123. New York: Springer-Verlag, pp. 334-348.</p>
<p>Wand, Mitchell. 1980. Continuation-based program transformation strategies. <em>Journal of the ACM</em> 27(1):164-180.</p>
<p>Waters, Richard C. 1979. A method for analyzing loop programs. <em>IEEE Transactions on Software Engineering</em> 5(3):237-247.</p>
<p>Winograd, Terry. 1971. Procedures as a representation for data in a computer program for understanding natural language. Technical report AI TR-17, MIT Artificial Intelligence Laboratory.</p>
<p>Winston, Patrick. 1992. <em>Artificial Intelligence</em>. 3rd edition. Reading, MA: Addison-Wesley.</p>
<p>Zabih, Ramin, David McAllester, and David Chapman. 1987. Non-deterministic Lisp with dependency-directed backtracking. <em>AAAI-87</em>, pp. 59-64.</p>
<p>Zippel, Richard. 1979. Probabilistic algorithms for sparse polynomials. Ph.D. dissertation, Department of Electrical Engineering and Computer Science, MIT.</p>
<p>Zippel, Richard. 1993. <em>Effective Polynomial Computation.</em> Boston, MA: Kluwer Academic Publishers.</p>
<p></p>
<p></p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-35.html">previous</a>, <a href="book-Z-H-37.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-36.html">previous</a>, <a href="book-Z-H-38.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<h1 class="chapter"></h1>
<p> </p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_Temp_850">List of Exercises</a></p>
<p><a href="book-Z-H-10.html#%_thm_1.1">1.1</a><br /> <a href="book-Z-H-10.html#%_thm_1.2">1.2</a><br /> <a href="book-Z-H-10.html#%_thm_1.3">1.3</a><br /> <a href="book-Z-H-10.html#%_thm_1.4">1.4</a><br /> <a href="book-Z-H-10.html#%_thm_1.5">1.5</a><br /> <a href="book-Z-H-10.html#%_thm_1.6">1.6</a><br /> <a href="book-Z-H-10.html#%_thm_1.7">1.7</a><br /> <a href="book-Z-H-10.html#%_thm_1.8">1.8</a><br /> <a href="book-Z-H-11.html#%_thm_1.9">1.9</a><br /> <a href="book-Z-H-11.html#%_thm_1.10">1.10</a><br /> <a href="book-Z-H-11.html#%_thm_1.11">1.11</a><br /> <a href="book-Z-H-11.html#%_thm_1.12">1.12</a><br /> <a href="book-Z-H-11.html#%_thm_1.13">1.13</a><br /> <a href="book-Z-H-11.html#%_thm_1.14">1.14</a><br /> <a href="book-Z-H-11.html#%_thm_1.15">1.15</a><br /> <a href="book-Z-H-11.html#%_thm_1.16">1.16</a><br /> <a href="book-Z-H-11.html#%_thm_1.17">1.17</a><br /> <a href="book-Z-H-11.html#%_thm_1.18">1.18</a><br /> <a href="book-Z-H-11.html#%_thm_1.19">1.19</a><br /> <a href="book-Z-H-11.html#%_thm_1.20">1.20</a><br /> <a href="book-Z-H-11.html#%_thm_1.21">1.21</a><br /> <a href="book-Z-H-11.html#%_thm_1.22">1.22</a><br /> <a href="book-Z-H-11.html#%_thm_1.23">1.23</a><br /> <a href="book-Z-H-11.html#%_thm_1.24">1.24</a><br /> <a href="book-Z-H-11.html#%_thm_1.25">1.25</a><br /> <a href="book-Z-H-11.html#%_thm_1.26">1.26</a><br /> <a href="book-Z-H-11.html#%_thm_1.27">1.27</a><br /> <a href="book-Z-H-11.html#%_thm_1.28">1.28</a><br /> <a href="book-Z-H-12.html#%_thm_1.29">1.29</a><br /> <a href="book-Z-H-12.html#%_thm_1.30">1.30</a><br /> <a href="book-Z-H-12.html#%_thm_1.31">1.31</a><br /> <a href="book-Z-H-12.html#%_thm_1.32">1.32</a><br /> <a href="book-Z-H-12.html#%_thm_1.33">1.33</a><br /> <a href="book-Z-H-12.html#%_thm_1.34">1.34</a><br /> <a href="book-Z-H-12.html#%_thm_1.35">1.35</a><br /> <a href="book-Z-H-12.html#%_thm_1.36">1.36</a><br /> <a href="book-Z-H-12.html#%_thm_1.37">1.37</a><br /> <a href="book-Z-H-12.html#%_thm_1.38">1.38</a><br /> <a href="book-Z-H-12.html#%_thm_1.39">1.39</a><br /> <a href="book-Z-H-12.html#%_thm_1.40">1.40</a><br /> <a href="book-Z-H-12.html#%_thm_1.41">1.41</a><br /> <a href="book-Z-H-12.html#%_thm_1.42">1.42</a><br /> <a href="book-Z-H-12.html#%_thm_1.43">1.43</a><br /> <a href="book-Z-H-12.html#%_thm_1.44">1.44</a><br /> <a href="book-Z-H-12.html#%_thm_1.45">1.45</a><br /> <a href="book-Z-H-12.html#%_thm_1.46">1.46</a><br /> <a href="book-Z-H-14.html#%_thm_2.1">2.1</a><br /> <a href="book-Z-H-14.html#%_thm_2.2">2.2</a><br /> <a href="book-Z-H-14.html#%_thm_2.3">2.3</a><br /> <a href="book-Z-H-14.html#%_thm_2.4">2.4</a><br /> <a href="book-Z-H-14.html#%_thm_2.5">2.5</a><br /> <a href="book-Z-H-14.html#%_thm_2.6">2.6</a><br /> <a href="book-Z-H-14.html#%_thm_2.7">2.7</a><br /> <a href="book-Z-H-14.html#%_thm_2.8">2.8</a><br /> <a href="book-Z-H-14.html#%_thm_2.9">2.9</a><br /> <a href="book-Z-H-14.html#%_thm_2.10">2.10</a><br /> <a href="book-Z-H-14.html#%_thm_2.11">2.11</a><br /> <a href="book-Z-H-14.html#%_thm_2.12">2.12</a><br /> <a href="book-Z-H-14.html#%_thm_2.13">2.13</a><br /> <a href="book-Z-H-14.html#%_thm_2.14">2.14</a><br /> <a href="book-Z-H-14.html#%_thm_2.15">2.15</a><br /> <a href="book-Z-H-14.html#%_thm_2.16">2.16</a><br /> <a href="book-Z-H-15.html#%_thm_2.17">2.17</a><br /> <a href="book-Z-H-15.html#%_thm_2.18">2.18</a><br /> <a href="book-Z-H-15.html#%_thm_2.19">2.19</a><br /> <a href="book-Z-H-15.html#%_thm_2.20">2.20</a><br /> <a href="book-Z-H-15.html#%_thm_2.21">2.21</a><br /> <a href="book-Z-H-15.html#%_thm_2.22">2.22</a><br /> <a href="book-Z-H-15.html#%_thm_2.23">2.23</a><br /> <a href="book-Z-H-15.html#%_thm_2.24">2.24</a><br /> <a href="book-Z-H-15.html#%_thm_2.25">2.25</a><br /> <a href="book-Z-H-15.html#%_thm_2.26">2.26</a><br /> <a href="book-Z-H-15.html#%_thm_2.27">2.27</a><br /> <a href="book-Z-H-15.html#%_thm_2.28">2.28</a><br /> <a href="book-Z-H-15.html#%_thm_2.29">2.29</a><br /> <a href="book-Z-H-15.html#%_thm_2.30">2.30</a><br /> <a href="book-Z-H-15.html#%_thm_2.31">2.31</a><br /> <a href="book-Z-H-15.html#%_thm_2.32">2.32</a><br /> <a href="book-Z-H-15.html#%_thm_2.33">2.33</a><br /> <a href="book-Z-H-15.html#%_thm_2.34">2.34</a><br /> <a href="book-Z-H-15.html#%_thm_2.35">2.35</a><br /> <a href="book-Z-H-15.html#%_thm_2.36">2.36</a><br /> <a href="book-Z-H-15.html#%_thm_2.37">2.37</a><br /> <a href="book-Z-H-15.html#%_thm_2.38">2.38</a><br /> <a href="book-Z-H-15.html#%_thm_2.39">2.39</a><br /> <a href="book-Z-H-15.html#%_thm_2.40">2.40</a><br /> <a href="book-Z-H-15.html#%_thm_2.41">2.41</a><br /> <a href="book-Z-H-15.html#%_thm_2.42">2.42</a><br /> <a href="book-Z-H-15.html#%_thm_2.43">2.43</a><br /> <a href="book-Z-H-15.html#%_thm_2.44">2.44</a><br /> <a href="book-Z-H-15.html#%_thm_2.45">2.45</a><br /> <a href="book-Z-H-15.html#%_thm_2.46">2.46</a><br /> <a href="book-Z-H-15.html#%_thm_2.47">2.47</a><br /> <a href="book-Z-H-15.html#%_thm_2.48">2.48</a><br /> <a href="book-Z-H-15.html#%_thm_2.49">2.49</a><br /> <a href="book-Z-H-15.html#%_thm_2.50">2.50</a><br /> <a href="book-Z-H-15.html#%_thm_2.51">2.51</a><br /> <a href="book-Z-H-15.html#%_thm_2.52">2.52</a><br /> <a href="book-Z-H-16.html#%_thm_2.53">2.53</a><br /> <a href="book-Z-H-16.html#%_thm_2.54">2.54</a><br /> <a href="book-Z-H-16.html#%_thm_2.55">2.55</a><br /> <a href="book-Z-H-16.html#%_thm_2.56">2.56</a><br /> <a href="book-Z-H-16.html#%_thm_2.57">2.57</a><br /> <a href="book-Z-H-16.html#%_thm_2.58">2.58</a><br /> <a href="book-Z-H-16.html#%_thm_2.59">2.59</a><br /> <a href="book-Z-H-16.html#%_thm_2.60">2.60</a><br /> <a href="book-Z-H-16.html#%_thm_2.61">2.61</a><br /> <a href="book-Z-H-16.html#%_thm_2.62">2.62</a><br /> <a href="book-Z-H-16.html#%_thm_2.63">2.63</a><br /> <a href="book-Z-H-16.html#%_thm_2.64">2.64</a><br /> <a href="book-Z-H-16.html#%_thm_2.65">2.65</a><br /> <a href="book-Z-H-16.html#%_thm_2.66">2.66</a><br /> <a href="book-Z-H-16.html#%_thm_2.67">2.67</a><br /> <a href="book-Z-H-16.html#%_thm_2.68">2.68</a><br /> <a href="book-Z-H-16.html#%_thm_2.69">2.69</a><br /> <a href="book-Z-H-16.html#%_thm_2.70">2.70</a><br /> <a href="book-Z-H-16.html#%_thm_2.71">2.71</a><br /> <a href="book-Z-H-16.html#%_thm_2.72">2.72</a><br /> <a href="book-Z-H-17.html#%_thm_2.73">2.73</a><br /> <a href="book-Z-H-17.html#%_thm_2.74">2.74</a><br /> <a href="book-Z-H-17.html#%_thm_2.75">2.75</a><br /> <a href="book-Z-H-17.html#%_thm_2.76">2.76</a><br /> <a href="book-Z-H-18.html#%_thm_2.77">2.77</a><br /> <a href="book-Z-H-18.html#%_thm_2.78">2.78</a><br /> <a href="book-Z-H-18.html#%_thm_2.79">2.79</a><br /> <a href="book-Z-H-18.html#%_thm_2.80">2.80</a><br /> <a href="book-Z-H-18.html#%_thm_2.81">2.81</a><br /> <a href="book-Z-H-18.html#%_thm_2.82">2.82</a><br /> <a href="book-Z-H-18.html#%_thm_2.83">2.83</a><br /> <a href="book-Z-H-18.html#%_thm_2.84">2.84</a><br /> <a href="book-Z-H-18.html#%_thm_2.85">2.85</a><br /> <a href="book-Z-H-18.html#%_thm_2.86">2.86</a><br /> <a href="book-Z-H-18.html#%_thm_2.87">2.87</a><br /> <a href="book-Z-H-18.html#%_thm_2.88">2.88</a><br /> <a href="book-Z-H-18.html#%_thm_2.89">2.89</a><br /> <a href="book-Z-H-18.html#%_thm_2.90">2.90</a><br /> <a href="book-Z-H-18.html#%_thm_2.91">2.91</a><br /> <a href="book-Z-H-18.html#%_thm_2.92">2.92</a><br /> <a href="book-Z-H-18.html#%_thm_2.93">2.93</a><br /> <a href="book-Z-H-18.html#%_thm_2.94">2.94</a><br /> <a href="book-Z-H-18.html#%_thm_2.95">2.95</a><br /> <a href="book-Z-H-18.html#%_thm_2.96">2.96</a><br /> <a href="book-Z-H-18.html#%_thm_2.97">2.97</a><br /> <a href="book-Z-H-20.html#%_thm_3.1">3.1</a><br /> <a href="book-Z-H-20.html#%_thm_3.2">3.2</a><br /> <a href="book-Z-H-20.html#%_thm_3.3">3.3</a><br /> <a href="book-Z-H-20.html#%_thm_3.4">3.4</a><br /> <a href="book-Z-H-20.html#%_thm_3.5">3.5</a><br /> <a href="book-Z-H-20.html#%_thm_3.6">3.6</a><br /> <a href="book-Z-H-20.html#%_thm_3.7">3.7</a><br /> <a href="book-Z-H-20.html#%_thm_3.8">3.8</a><br /> <a href="book-Z-H-21.html#%_thm_3.9">3.9</a><br /> <a href="book-Z-H-21.html#%_thm_3.10">3.10</a><br /> <a href="book-Z-H-21.html#%_thm_3.11">3.11</a><br /> <a href="book-Z-H-22.html#%_thm_3.12">3.12</a><br /> <a href="book-Z-H-22.html#%_thm_3.13">3.13</a><br /> <a href="book-Z-H-22.html#%_thm_3.14">3.14</a><br /> <a href="book-Z-H-22.html#%_thm_3.15">3.15</a><br /> <a href="book-Z-H-22.html#%_thm_3.16">3.16</a><br /> <a href="book-Z-H-22.html#%_thm_3.17">3.17</a><br /> <a href="book-Z-H-22.html#%_thm_3.18">3.18</a><br /> <a href="book-Z-H-22.html#%_thm_3.19">3.19</a><br /> <a href="book-Z-H-22.html#%_thm_3.20">3.20</a><br /> <a href="book-Z-H-22.html#%_thm_3.21">3.21</a><br /> <a href="book-Z-H-22.html#%_thm_3.22">3.22</a><br /> <a href="book-Z-H-22.html#%_thm_3.23">3.23</a><br /> <a href="book-Z-H-22.html#%_thm_3.24">3.24</a><br /> <a href="book-Z-H-22.html#%_thm_3.25">3.25</a><br /> <a href="book-Z-H-22.html#%_thm_3.26">3.26</a><br /> <a href="book-Z-H-22.html#%_thm_3.27">3.27</a><br /> <a href="book-Z-H-22.html#%_thm_3.28">3.28</a><br /> <a href="book-Z-H-22.html#%_thm_3.29">3.29</a><br /> <a href="book-Z-H-22.html#%_thm_3.30">3.30</a><br /> <a href="book-Z-H-22.html#%_thm_3.31">3.31</a><br /> <a href="book-Z-H-22.html#%_thm_3.32">3.32</a><br /> <a href="book-Z-H-22.html#%_thm_3.33">3.33</a><br /> <a href="book-Z-H-22.html#%_thm_3.34">3.34</a><br /> <a href="book-Z-H-22.html#%_thm_3.35">3.35</a><br /> <a href="book-Z-H-22.html#%_thm_3.36">3.36</a><br /> <a href="book-Z-H-22.html#%_thm_3.37">3.37</a><br /> <a href="book-Z-H-23.html#%_thm_3.38">3.38</a><br /> <a href="book-Z-H-23.html#%_thm_3.39">3.39</a><br /> <a href="book-Z-H-23.html#%_thm_3.40">3.40</a><br /> <a href="book-Z-H-23.html#%_thm_3.41">3.41</a><br /> <a href="book-Z-H-23.html#%_thm_3.42">3.42</a><br /> <a href="book-Z-H-23.html#%_thm_3.43">3.43</a><br /> <a href="book-Z-H-23.html#%_thm_3.44">3.44</a><br /> <a href="book-Z-H-23.html#%_thm_3.45">3.45</a><br /> <a href="book-Z-H-23.html#%_thm_3.46">3.46</a><br /> <a href="book-Z-H-23.html#%_thm_3.47">3.47</a><br /> <a href="book-Z-H-23.html#%_thm_3.48">3.48</a><br /> <a href="book-Z-H-23.html#%_thm_3.49">3.49</a><br /> <a href="book-Z-H-24.html#%_thm_3.50">3.50</a><br /> <a href="book-Z-H-24.html#%_thm_3.51">3.51</a><br /> <a href="book-Z-H-24.html#%_thm_3.52">3.52</a><br /> <a href="book-Z-H-24.html#%_thm_3.53">3.53</a><br /> <a href="book-Z-H-24.html#%_thm_3.54">3.54</a><br /> <a href="book-Z-H-24.html#%_thm_3.55">3.55</a><br /> <a href="book-Z-H-24.html#%_thm_3.56">3.56</a><br /> <a href="book-Z-H-24.html#%_thm_3.57">3.57</a><br /> <a href="book-Z-H-24.html#%_thm_3.58">3.58</a><br /> <a href="book-Z-H-24.html#%_thm_3.59">3.59</a><br /> <a href="book-Z-H-24.html#%_thm_3.60">3.60</a><br /> <a href="book-Z-H-24.html#%_thm_3.61">3.61</a><br /> <a href="book-Z-H-24.html#%_thm_3.62">3.62</a><br /> <a href="book-Z-H-24.html#%_thm_3.63">3.63</a><br /> <a href="book-Z-H-24.html#%_thm_3.64">3.64</a><br /> <a href="book-Z-H-24.html#%_thm_3.65">3.65</a><br /> <a href="book-Z-H-24.html#%_thm_3.66">3.66</a><br /> <a href="book-Z-H-24.html#%_thm_3.67">3.67</a><br /> <a href="book-Z-H-24.html#%_thm_3.68">3.68</a><br /> <a href="book-Z-H-24.html#%_thm_3.69">3.69</a><br /> <a href="book-Z-H-24.html#%_thm_3.70">3.70</a><br /> <a href="book-Z-H-24.html#%_thm_3.71">3.71</a><br /> <a href="book-Z-H-24.html#%_thm_3.72">3.72</a><br /> <a href="book-Z-H-24.html#%_thm_3.73">3.73</a><br /> <a href="book-Z-H-24.html#%_thm_3.74">3.74</a><br /> <a href="book-Z-H-24.html#%_thm_3.75">3.75</a><br /> <a href="book-Z-H-24.html#%_thm_3.76">3.76</a><br /> <a href="book-Z-H-24.html#%_thm_3.77">3.77</a><br /> <a href="book-Z-H-24.html#%_thm_3.78">3.78</a><br /> <a href="book-Z-H-24.html#%_thm_3.79">3.79</a><br /> <a href="book-Z-H-24.html#%_thm_3.80">3.80</a><br /> <a href="book-Z-H-24.html#%_thm_3.81">3.81</a><br /> <a href="book-Z-H-24.html#%_thm_3.82">3.82</a><br /> <a href="book-Z-H-26.html#%_thm_4.1">4.1</a><br /> <a href="book-Z-H-26.html#%_thm_4.2">4.2</a><br /> <a href="book-Z-H-26.html#%_thm_4.3">4.3</a><br /> <a href="book-Z-H-26.html#%_thm_4.4">4.4</a><br /> <a href="book-Z-H-26.html#%_thm_4.5">4.5</a><br /> <a href="book-Z-H-26.html#%_thm_4.6">4.6</a><br /> <a href="book-Z-H-26.html#%_thm_4.7">4.7</a><br /> <a href="book-Z-H-26.html#%_thm_4.8">4.8</a><br /> <a href="book-Z-H-26.html#%_thm_4.9">4.9</a><br /> <a href="book-Z-H-26.html#%_thm_4.10">4.10</a><br /> <a href="book-Z-H-26.html#%_thm_4.11">4.11</a><br /> <a href="book-Z-H-26.html#%_thm_4.12">4.12</a><br /> <a href="book-Z-H-26.html#%_thm_4.13">4.13</a><br /> <a href="book-Z-H-26.html#%_thm_4.14">4.14</a><br /> <a href="book-Z-H-26.html#%_thm_4.15">4.15</a><br /> <a href="book-Z-H-26.html#%_thm_4.16">4.16</a><br /> <a href="book-Z-H-26.html#%_thm_4.17">4.17</a><br /> <a href="book-Z-H-26.html#%_thm_4.18">4.18</a><br /> <a href="book-Z-H-26.html#%_thm_4.19">4.19</a><br /> <a href="book-Z-H-26.html#%_thm_4.20">4.20</a><br /> <a href="book-Z-H-26.html#%_thm_4.21">4.21</a><br /> <a href="book-Z-H-26.html#%_thm_4.22">4.22</a><br /> <a href="book-Z-H-26.html#%_thm_4.23">4.23</a><br /> <a href="book-Z-H-26.html#%_thm_4.24">4.24</a><br /> <a href="book-Z-H-27.html#%_thm_4.25">4.25</a><br /> <a href="book-Z-H-27.html#%_thm_4.26">4.26</a><br /> <a href="book-Z-H-27.html#%_thm_4.27">4.27</a><br /> <a href="book-Z-H-27.html#%_thm_4.28">4.28</a><br /> <a href="book-Z-H-27.html#%_thm_4.29">4.29</a><br /> <a href="book-Z-H-27.html#%_thm_4.30">4.30</a><br /> <a href="book-Z-H-27.html#%_thm_4.31">4.31</a><br /> <a href="book-Z-H-27.html#%_thm_4.32">4.32</a><br /> <a href="book-Z-H-27.html#%_thm_4.33">4.33</a><br /> <a href="book-Z-H-27.html#%_thm_4.34">4.34</a><br /> <a href="book-Z-H-28.html#%_thm_4.35">4.35</a><br /> <a href="book-Z-H-28.html#%_thm_4.36">4.36</a><br /> <a href="book-Z-H-28.html#%_thm_4.37">4.37</a><br /> <a href="book-Z-H-28.html#%_thm_4.38">4.38</a><br /> <a href="book-Z-H-28.html#%_thm_4.39">4.39</a><br /> <a href="book-Z-H-28.html#%_thm_4.40">4.40</a><br /> <a href="book-Z-H-28.html#%_thm_4.41">4.41</a><br /> <a href="book-Z-H-28.html#%_thm_4.42">4.42</a><br /> <a href="book-Z-H-28.html#%_thm_4.43">4.43</a><br /> <a href="book-Z-H-28.html#%_thm_4.44">4.44</a><br /> <a href="book-Z-H-28.html#%_thm_4.45">4.45</a><br /> <a href="book-Z-H-28.html#%_thm_4.46">4.46</a><br /> <a href="book-Z-H-28.html#%_thm_4.47">4.47</a><br /> <a href="book-Z-H-28.html#%_thm_4.48">4.48</a><br /> <a href="book-Z-H-28.html#%_thm_4.49">4.49</a><br /> <a href="book-Z-H-28.html#%_thm_4.50">4.50</a><br /> <a href="book-Z-H-28.html#%_thm_4.51">4.51</a><br /> <a href="book-Z-H-28.html#%_thm_4.52">4.52</a><br /> <a href="book-Z-H-28.html#%_thm_4.53">4.53</a><br /> <a href="book-Z-H-28.html#%_thm_4.54">4.54</a><br /> <a href="book-Z-H-29.html#%_thm_4.55">4.55</a><br /> <a href="book-Z-H-29.html#%_thm_4.56">4.56</a><br /> <a href="book-Z-H-29.html#%_thm_4.57">4.57</a><br /> <a href="book-Z-H-29.html#%_thm_4.58">4.58</a><br /> <a href="book-Z-H-29.html#%_thm_4.59">4.59</a><br /> <a href="book-Z-H-29.html#%_thm_4.60">4.60</a><br /> <a href="book-Z-H-29.html#%_thm_4.61">4.61</a><br /> <a href="book-Z-H-29.html#%_thm_4.62">4.62</a><br /> <a href="book-Z-H-29.html#%_thm_4.63">4.63</a><br /> <a href="book-Z-H-29.html#%_thm_4.64">4.64</a><br /> <a href="book-Z-H-29.html#%_thm_4.65">4.65</a><br /> <a href="book-Z-H-29.html#%_thm_4.66">4.66</a><br /> <a href="book-Z-H-29.html#%_thm_4.67">4.67</a><br /> <a href="book-Z-H-29.html#%_thm_4.68">4.68</a><br /> <a href="book-Z-H-29.html#%_thm_4.69">4.69</a><br /> <a href="book-Z-H-29.html#%_thm_4.70">4.70</a><br /> <a href="book-Z-H-29.html#%_thm_4.71">4.71</a><br /> <a href="book-Z-H-29.html#%_thm_4.72">4.72</a><br /> <a href="book-Z-H-29.html#%_thm_4.73">4.73</a><br /> <a href="book-Z-H-29.html#%_thm_4.74">4.74</a><br /> <a href="book-Z-H-29.html#%_thm_4.75">4.75</a><br /> <a href="book-Z-H-29.html#%_thm_4.76">4.76</a><br /> <a href="book-Z-H-29.html#%_thm_4.77">4.77</a><br /> <a href="book-Z-H-29.html#%_thm_4.78">4.78</a><br /> <a href="book-Z-H-29.html#%_thm_4.79">4.79</a><br /> <a href="book-Z-H-31.html#%_thm_5.1">5.1</a><br /> <a href="book-Z-H-31.html#%_thm_5.2">5.2</a><br /> <a href="book-Z-H-31.html#%_thm_5.3">5.3</a><br /> <a href="book-Z-H-31.html#%_thm_5.4">5.4</a><br /> <a href="book-Z-H-31.html#%_thm_5.5">5.5</a><br /> <a href="book-Z-H-31.html#%_thm_5.6">5.6</a><br /> <a href="book-Z-H-32.html#%_thm_5.7">5.7</a><br /> <a href="book-Z-H-32.html#%_thm_5.8">5.8</a><br /> <a href="book-Z-H-32.html#%_thm_5.9">5.9</a><br /> <a href="book-Z-H-32.html#%_thm_5.10">5.10</a><br /> <a href="book-Z-H-32.html#%_thm_5.11">5.11</a><br /> <a href="book-Z-H-32.html#%_thm_5.12">5.12</a><br /> <a href="book-Z-H-32.html#%_thm_5.13">5.13</a><br /> <a href="book-Z-H-32.html#%_thm_5.14">5.14</a><br /> <a href="book-Z-H-32.html#%_thm_5.15">5.15</a><br /> <a href="book-Z-H-32.html#%_thm_5.16">5.16</a><br /> <a href="book-Z-H-32.html#%_thm_5.17">5.17</a><br /> <a href="book-Z-H-32.html#%_thm_5.18">5.18</a><br /> <a href="book-Z-H-32.html#%_thm_5.19">5.19</a><br /> <a href="book-Z-H-33.html#%_thm_5.20">5.20</a><br /> <a href="book-Z-H-33.html#%_thm_5.21">5.21</a><br /> <a href="book-Z-H-33.html#%_thm_5.22">5.22</a><br /> <a href="book-Z-H-34.html#%_thm_5.23">5.23</a><br /> <a href="book-Z-H-34.html#%_thm_5.24">5.24</a><br /> <a href="book-Z-H-34.html#%_thm_5.25">5.25</a><br /> <a href="book-Z-H-34.html#%_thm_5.26">5.26</a><br /> <a href="book-Z-H-34.html#%_thm_5.27">5.27</a><br /> <a href="book-Z-H-34.html#%_thm_5.28">5.28</a><br /> <a href="book-Z-H-34.html#%_thm_5.29">5.29</a><br /> <a href="book-Z-H-34.html#%_thm_5.30">5.30</a><br /> <a href="book-Z-H-35.html#%_thm_5.31">5.31</a><br /> <a href="book-Z-H-35.html#%_thm_5.32">5.32</a><br /> <a href="book-Z-H-35.html#%_thm_5.33">5.33</a><br /> <a href="book-Z-H-35.html#%_thm_5.34">5.34</a><br /> <a href="book-Z-H-35.html#%_thm_5.35">5.35</a><br /> <a href="book-Z-H-35.html#%_thm_5.36">5.36</a><br /> <a href="book-Z-H-35.html#%_thm_5.37">5.37</a><br /> <a href="book-Z-H-35.html#%_thm_5.38">5.38</a><br /> <a href="book-Z-H-35.html#%_thm_5.39">5.39</a><br /> <a href="book-Z-H-35.html#%_thm_5.40">5.40</a><br /> <a href="book-Z-H-35.html#%_thm_5.41">5.41</a><br /> <a href="book-Z-H-35.html#%_thm_5.42">5.42</a><br /> <a href="book-Z-H-35.html#%_thm_5.43">5.43</a><br /> <a href="book-Z-H-35.html#%_thm_5.44">5.44</a><br /> <a href="book-Z-H-35.html#%_thm_5.45">5.45</a><br /> <a href="book-Z-H-35.html#%_thm_5.46">5.46</a><br /> <a href="book-Z-H-35.html#%_thm_5.47">5.47</a><br /> <a href="book-Z-H-35.html#%_thm_5.48">5.48</a><br /> <a href="book-Z-H-35.html#%_thm_5.49">5.49</a><br /> <a href="book-Z-H-35.html#%_thm_5.50">5.50</a><br /> <a href="book-Z-H-35.html#%_thm_5.51">5.51</a><br /> <a href="book-Z-H-35.html#%_thm_5.52">5.52</a><br /></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-36.html">previous</a>, <a href="book-Z-H-38.html">next</a> page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   <a href="book-Z-H-38.html#%_index_start">index</a>]</p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-37.html">previous</a>, next page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   index]</p>
<p></p>
<h1 class="chapter"></h1>
<p> </p>
<p><a href="book-Z-H-4.html#%_toc_%_chap_Temp_851">Index</a></p>
<p></p>
<p></p>
<table>
<col width="100%" />
<tbody>
<tr class="odd">
<td align="left">Any inaccuracies in this index may be explained by the fact that it has been prepared with the help of a computer.
Donald E. Knuth, <em>Fundamental Algorithms</em> (Volume 1 of <em>The Art of Computer Programming</em>)</td>
</tr>
</tbody>
</table>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-20.html#%_idx_2872"><code>!</code> in names</a><br /> <a href="book-Z-H-16.html#%_idx_2008"><code>&quot;</code> (double quote)</a><br /> <img src="book-Z-G-D-6.gif" /> calculus, <em>see</em> lambda calculus <br /> <a href="book-Z-H-12.html#%_idx_1122"><img src="book-Z-G-D-17.gif" /> notation for mathematical function</a><br /> <img src="book-Z-G-D-9.gif" /> , <em>see</em> pi <br /> <a href="book-Z-H-12.html#%_idx_986">sum (sigma) notation</a><br /> <img src="book-Z-G-D-4.gif" /> , <em>see</em> theta <br /> <a href="book-Z-H-16.html#%_idx_2000"><code>'</code> (single quote)</a><br />     <a href="book-Z-H-26.html#%_idx_4526"><code>read</code> and</a>, <a href="book-Z-H-29.html#%_idx_5406">[2]</a><br /> <a href="book-Z-H-10.html#%_idx_168"><code>*</code> (primitive multiplication procedure)</a><br /> <a href="book-Z-H-10.html#%_idx_162"><code>+</code> (primitive addition procedure)</a><br /> <a href="book-Z-H-35.html#%_idx_6288"><code>,</code> (comma, used with backquote)</a><br /> <a href="book-Z-H-10.html#%_idx_170"><code>-</code> (primitive subtraction procedure)</a><br />     <a href="book-Z-H-10.html#%_idx_410">as negation</a><br /> <a href="book-Z-H-10.html#%_idx_176"><code>/</code> (primitive division procedure)</a><br /> <a href="book-Z-H-10.html#%_idx_394"><code>&lt;</code> (primitive numeric comparison predicate)</a><br /> <a href="book-Z-H-10.html#%_idx_396"><code>=</code> (primitive numeric equality predicate)</a><br /> <a href="book-Z-H-16.html#%_idx_2090"><code>=number?</code></a><br /> <a href="book-Z-H-18.html#%_idx_2568"><code>=zero?</code> (generic)</a><br />     <a href="book-Z-H-18.html#%_idx_2752">for polynomials</a><br /> <a href="book-Z-H-10.html#%_idx_392"><code>&gt;</code> (primitive numeric comparison predicate)</a><br /> <a href="book-Z-H-10.html#%_idx_470"><code>&gt;=</code></a>, <a href="book-Z-H-10.html#%_idx_472">[2]</a><br /> <a href="book-Z-H-10.html#%_idx_524"><code>?</code> , in predicate names</a><br /> <a href="book-Z-H-10.html#%_idx_378"><code>#f</code></a><br /> <a href="book-Z-H-10.html#%_idx_372"><code>#t</code></a><br /> <a href="book-Z-H-35.html#%_idx_6286"><code>`</code> (backquote)</a><br /> <code>;</code>, <em>see</em> semicolon</p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-9.html#%_idx_106">Abelson, Harold</a><br /> <a href="book-Z-H-10.html#%_idx_358"><code>abs</code></a>, <a href="book-Z-H-10.html#%_idx_414">[2]</a>, <a href="book-Z-H-10.html#%_idx_418">[3]</a><br /> <a href="book-Z-H-10.html#%_idx_348">absolute value</a><br /> <a href="book-Z-H-14.html#%_idx_1282">abstract data</a>, <em>see also</em> data abstraction <br /> <a href="book-Z-H-14.html#%_idx_1426">abstract models for data</a><br /> abstract syntax <br />     <a href="book-Z-H-26.html#%_idx_4236">in metacircular evaluator</a><br />     <a href="book-Z-H-29.html#%_idx_5296">in query interpreter</a><br /> abstraction, <em>see also</em> means of abstraction; data abstraction; higher-order procedures <br />     <a href="book-Z-H-12.html#%_idx_980">common pattern and</a><br />     <a href="book-Z-H-25.html#%_idx_4196">metalinguistic</a><br />     <a href="book-Z-H-10.html#%_idx_576">procedural</a><br />     <a href="book-Z-H-31.html#%_idx_5546">in register-machine design</a><br />     <a href="book-Z-H-28.html#%_idx_4924">of search in nondeterministic programming</a><br /> <a href="book-Z-H-13.html#%_idx_1264">abstraction barriers</a>, <a href="book-Z-H-14.html#%_idx_1380">[2]</a>, <a href="book-Z-H-17.html#%_idx_2286">[3]</a><br />     <a href="book-Z-H-17.html#%_idx_2304">in complex-number system</a><br />     <a href="book-Z-H-18.html#%_idx_2498">in generic arithmetic system</a><br /> <a href="book-Z-H-24.html#%_idx_3976"><code>accelerated-sequence</code></a><br /> <a href="book-Z-H-12.html#%_idx_1018"><code>accumulate</code></a>, <a href="book-Z-H-15.html#%_idx_1742">[2]</a><br />     <a href="book-Z-H-15.html#%_idx_1810">same as <code>fold-right</code></a><br /> <a href="book-Z-H-15.html#%_idx_1794"><code>accumulate-n</code></a><br /> <a href="book-Z-H-15.html#%_idx_1736">accumulator</a>, <a href="book-Z-H-20.html#%_idx_2902">[2]</a><br /> <a href="book-Z-H-11.html#%_idx_748">Áchárya, Bháscara</a><br /> <a href="book-Z-H-11.html#%_idx_708">Ackermann's function</a><br /> <a href="book-Z-H-23.html#%_idx_3642">acquire a mutex</a><br /> <a href="book-Z-H-31.html#%_idx_5534">actions, in register machine</a><br /> <a href="book-Z-H-27.html#%_idx_4722"><code>actual-value</code></a><br /> <a href="book-Z-H-29.html#%_idx_5168">Ada</a><br />     <a href="book-Z-H-11.html#%_idx_684">recursive procedures</a><br /> <a href="book-Z-H-26.html#%_idx_4646">Adams, Norman I., IV</a><br /> <a href="book-Z-H-18.html#%_idx_2504"><code>add</code> (generic)</a><br />     <a href="book-Z-H-18.html#%_idx_2710">used for polynomial coefficients</a>, <a href="book-Z-H-18.html#%_idx_2714">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3374"><code>add-action!</code></a>, <a href="book-Z-H-22.html#%_idx_3408">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4476"><code>add-binding-to-frame!</code></a><br /> <a href="book-Z-H-17.html#%_idx_2312"><code>add-complex</code></a><br /> <a href="book-Z-H-18.html#%_idx_2578"><code>add-complex-to-schemenum</code></a><br /> <a href="book-Z-H-14.html#%_idx_1488"><code>add-interval</code></a><br /> <a href="book-Z-H-27.html#%_idx_4786"><code>add-lists</code></a><br /> <a href="book-Z-H-18.html#%_idx_2674"><code>add-poly</code></a><br /> <a href="book-Z-H-14.html#%_idx_1308"><code>add-rat</code></a><br /> <a href="book-Z-H-29.html#%_idx_5382"><code>add-rule-or-assertion!</code></a><br /> <a href="book-Z-H-24.html#%_idx_3864"><code>add-streams</code></a><br /> <a href="book-Z-H-18.html#%_idx_2708"><code>add-terms</code></a><br /> <a href="book-Z-H-22.html#%_idx_3420"><code>add-to-agenda!</code></a>, <a href="book-Z-H-22.html#%_idx_3472">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1938"><code>add-vect</code></a><br /> <a href="book-Z-H-16.html#%_idx_2074"><code>addend</code></a><br /> adder <br />     <a href="book-Z-H-22.html#%_idx_3364">full</a><br />     <a href="book-Z-H-22.html#%_idx_3356">half</a><br />     <a href="book-Z-H-22.html#%_idx_3390">ripple-carry</a><br /> <a href="book-Z-H-22.html#%_idx_3532"><code>adder</code> (primitive constraint)</a><br /> <a href="book-Z-H-13.html#%_idx_1278">additivity</a>, <a href="book-Z-H-17.html#%_idx_2290">[2]</a>, <a href="book-Z-H-17.html#%_idx_2426">[3]</a>, <a href="book-Z-H-18.html#%_idx_2534">[4]</a><br /> <a href="book-Z-H-33.html#%_idx_5834">address</a><br /> <a href="book-Z-H-33.html#%_idx_5838">address arithmetic</a><br /> <a href="book-Z-H-11.html#%_idx_926">Adelman, Leonard</a><br /> <a href="book-Z-H-34.html#%_idx_6062"><code>adjoin-arg</code></a><br /> <a href="book-Z-H-16.html#%_idx_2106"><code>adjoin-set</code></a><br />     <a href="book-Z-H-16.html#%_idx_2162">binary-tree representation</a><br />     <a href="book-Z-H-16.html#%_idx_2132">ordered-list representation</a><br />     <a href="book-Z-H-16.html#%_idx_2118">unordered-list representation</a><br />     <a href="book-Z-H-16.html#%_idx_2274">for weighted sets</a><br /> <a href="book-Z-H-18.html#%_idx_2694"><code>adjoin-term</code></a>, <a href="book-Z-H-18.html#%_idx_2734">[2]</a><br /> <a href="book-Z-H-32.html#%_idx_5732"><code>advance-pc</code></a><br /> <a href="book-Z-H-22.html#%_idx_3376"><code>after-delay</code></a>, <a href="book-Z-H-22.html#%_idx_3424">[2]</a><br /> agenda, <em>see</em> digital-circuit simulation <br /> <a href="book-Z-H-11.html#%_idx_826">A'h-mose</a><br /> algebra, symbolic, <em>see</em> symbolic algebra <br /> <a href="book-Z-H-18.html#%_idx_2648">algebraic expression</a><br />     <a href="book-Z-H-16.html#%_idx_2046">differentiating</a><br />     <a href="book-Z-H-16.html#%_idx_2058">representing</a><br />     <a href="book-Z-H-16.html#%_idx_2084">simplifying</a><br /> <a href="book-Z-H-14.html#%_idx_1442">algebraic specification for data</a><br /> Algol <br />     <a href="book-Z-H-10.html#%_idx_628">block structure</a><br />     <a href="book-Z-H-24.html#%_idx_3806">call-by-name argument passing</a>, <a href="book-Z-H-27.html#%_idx_4716">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_3822">thunks</a>, <a href="book-Z-H-27.html#%_idx_4700">[2]</a><br />     <a href="book-Z-H-22.html#%_idx_3568">weakness in handling compound objects</a><br /> algorithm <br />     <a href="book-Z-H-15.html#%_idx_1780">optimal</a><br />     <a href="book-Z-H-11.html#%_idx_910">probabilistic</a>, <a href="book-Z-H-18.html#%_idx_2816">[2]</a><br /> <a href="book-Z-H-20.html#%_idx_2998">aliasing</a><br /> <a href="book-Z-H-35.html#%_idx_6374"><code>all-regs</code> (compiler)</a><br /> <a href="book-Z-H-33.html#%_idx_5960">Allen, John</a><br /> <a href="book-Z-H-10.html#%_idx_438">alternative of <code>if</code></a><br /> <a href="book-Z-H-29.html#%_idx_5338"><code>always-true</code></a><br /> <a href="book-Z-H-28.html#%_idx_4822"><code>amb</code></a><br /> <code>amb</code> evaluator, <em>see</em> nondeterministic evaluator <br /> <a href="book-Z-H-28.html#%_idx_4994"><code>ambeval</code></a><br /> <a href="book-Z-H-28.html#%_idx_4830"><code>an-element-of</code></a><br /> <a href="book-Z-H-28.html#%_idx_4832"><code>an-integer-starting-from</code></a><br /> <a href="book-Z-H-24.html#%_idx_4064">analog computer</a><br /> <code>analyze</code> <br />     <a href="book-Z-H-26.html#%_idx_4656">metacircular</a><br />     <a href="book-Z-H-28.html#%_idx_4992">nondeterministic</a><br /> <code>analyze-...</code> <br />     <a href="book-Z-H-26.html#%_idx_4658">metacircular</a>, <a href="book-Z-H-26.html#%_idx_4664">[2]</a><br />     <a href="book-Z-H-28.html#%_idx_5004">nondeterministic</a><br /> <a href="book-Z-H-28.html#%_idx_5016"><code>analyze-amb</code></a><br /> <a href="book-Z-H-26.html#%_idx_4636">analyzing evaluator</a><br />     <a href="book-Z-H-28.html#%_idx_4980">as basis for nondeterministic evaluator</a><br />     <a href="book-Z-H-26.html#%_idx_4662"><code>let</code></a><br /> <a href="book-Z-H-29.html#%_idx_5124"><code>and</code> (query language)</a><br />     <a href="book-Z-H-29.html#%_idx_5198">evaluation of</a>, <a href="book-Z-H-29.html#%_idx_5318">[2]</a>, <a href="book-Z-H-29.html#%_idx_5428">[3]</a><br /> <a href="book-Z-H-10.html#%_idx_446"><code>and</code> (special form)</a><br />     <a href="book-Z-H-10.html#%_idx_450">evaluation of</a><br />     <a href="book-Z-H-10.html#%_idx_466">why a special form</a><br />     <a href="book-Z-H-26.html#%_idx_4396">with no subexpressions</a><br /> <a href="book-Z-H-22.html#%_idx_3346">and-gate</a><br />     <a href="book-Z-H-22.html#%_idx_3382"><code>and-gate</code></a><br /> <code>angle</code> <br />     <a href="book-Z-H-17.html#%_idx_2470">data-directed</a><br />     <a href="book-Z-H-17.html#%_idx_2350">polar representation</a><br />     <a href="book-Z-H-17.html#%_idx_2334">rectangular representation</a><br />     <a href="book-Z-H-17.html#%_idx_2412">with tagged data</a><br /> <a href="book-Z-H-17.html#%_idx_2396"><code>angle-polar</code></a><br /> <a href="book-Z-H-17.html#%_idx_2384"><code>angle-rectangular</code></a><br /> <a href="book-Z-H-26.html#%_idx_4536"><code>announce-output</code></a><br /> <a href="book-Z-H-15.html#%_idx_1764">APL</a><br /> <a href="book-Z-H-35.html#%_idx_6366">Appel, Andrew W.</a><br /> <a href="book-Z-H-15.html#%_idx_1632"><code>append</code></a>, <a href="book-Z-H-15.html#%_idx_1636">[2]</a>, <a href="book-Z-H-22.html#%_idx_3164">[3]</a><br />     <a href="book-Z-H-15.html#%_idx_1768">as accumulation</a><br />     <a href="book-Z-H-22.html#%_idx_3162"><code>append!</code> vs.</a><br />     <a href="book-Z-H-35.html#%_idx_6396">with arbitrary number of arguments</a><br />     <a href="book-Z-H-33.html#%_idx_5926">as register machine</a><br />     <a href="book-Z-H-29.html#%_idx_5074">``what is'' (rules) vs. ``how to'' (procedure)</a><br /> <a href="book-Z-H-22.html#%_idx_3166"><code>append!</code></a><br />     <a href="book-Z-H-33.html#%_idx_5928">as register machine</a><br /> <a href="book-Z-H-35.html#%_idx_6260"><code>append-instruction-sequences</code></a>, <a href="book-Z-H-35.html#%_idx_6390">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5158"><code>append-to-form</code> (rules)</a><br /> <a href="book-Z-H-26.html#%_idx_4340"><code>application?</code></a><br /> <a href="book-Z-H-10.html#%_idx_342">applicative-order evaluation</a><br />     <a href="book-Z-H-10.html#%_idx_344">in Lisp</a><br />     <a href="book-Z-H-10.html#%_idx_482">normal order vs.</a>, <a href="book-Z-H-11.html#%_idx_854">[2]</a>, <a href="book-Z-H-27.html#%_idx_4682">[3]</a><br /> <a href="book-Z-H-27.html#%_idx_4724"><code>apply</code> (lazy)</a><br /> <a href="book-Z-H-26.html#%_idx_4250"><code>apply</code> (metacircular)</a><br />     <a href="book-Z-H-26.html#%_idx_4578">primitive <code>apply</code> vs.</a><br /> <a href="book-Z-H-17.html#%_idx_2458"><code>apply</code> (primitive procedure)</a><br /> <a href="book-Z-H-34.html#%_idx_6072"><code>apply-dispatch</code></a><br />     <a href="book-Z-H-35.html#%_idx_6474">modified for compiled code</a><br /> <a href="book-Z-H-17.html#%_idx_2462"><code>apply-generic</code></a><br />     <a href="book-Z-H-18.html#%_idx_2590">with coercion</a>, <a href="book-Z-H-18.html#%_idx_2626">[2]</a><br />     <a href="book-Z-H-18.html#%_idx_2636">with coercion by raising</a><br />     <a href="book-Z-H-18.html#%_idx_2632">with coercion of multiple arguments</a><br />     <a href="book-Z-H-18.html#%_idx_2638">with coercion to simplify</a><br />     <a href="book-Z-H-17.html#%_idx_2490">with message passing</a><br />     <a href="book-Z-H-18.html#%_idx_2610">with tower of types</a><br /> <a href="book-Z-H-26.html#%_idx_4248"><code>apply-primitive-procedure</code></a>, <a href="book-Z-H-26.html#%_idx_4440">[2]</a>, <a href="book-Z-H-26.html#%_idx_4514">[3]</a><br /> <a href="book-Z-H-29.html#%_idx_5358"><code>apply-rules</code></a><br /> <a href="book-Z-H-23.html#%_idx_3684">arbiter</a><br /> <a href="book-Z-H-17.html#%_idx_2322">arctangent</a><br /> <a href="book-Z-H-34.html#%_idx_6028"><code>argl</code> register</a><br /> argument passing, <em>see</em> call-by-name argument passing; call-by-need argument passing <br /> <a href="book-Z-H-10.html#%_idx_188">argument(s)</a><br />     <a href="book-Z-H-10.html#%_idx_194">arbitrary number of</a>, <a href="book-Z-H-15.html#%_idx_1652">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_4070">delayed</a><br /> <a href="book-Z-H-23.html#%_idx_3688">Aristotle's <em>De caelo</em> (Buridan's commentary on)</a><br /> arithmetic <br />     <a href="book-Z-H-33.html#%_idx_5840">address arithmetic</a><br />     <a href="book-Z-H-18.html#%_idx_2496">generic</a>, <em>see also</em> generic arithmetic operations <br />     <a href="book-Z-H-17.html#%_idx_2302">on complex numbers</a><br />     <a href="book-Z-H-14.html#%_idx_1480">on intervals</a><br />     on polynomials, <em>see</em> polynomial arithmetic <br />     <a href="book-Z-H-24.html#%_idx_3930">on power series</a>, <a href="book-Z-H-24.html#%_idx_3936">[2]</a><br />     <a href="book-Z-H-14.html#%_idx_1294">on rational numbers</a><br />     <a href="book-Z-H-10.html#%_idx_160">primitive procedures for</a><br /> <a href="book-Z-H-28.html#%_idx_4960"><code>articles</code></a><br /> <a href="book-Z-H-16.html#%_idx_2214">ASCII code</a><br /> <a href="book-Z-H-32.html#%_idx_5686"><code>assemble</code></a>, <a href="book-Z-H-32.html#%_idx_5694">[2]</a><br /> <a href="book-Z-H-32.html#%_idx_5636">assembler</a>, <a href="book-Z-H-32.html#%_idx_5682">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5240"><code>assert!</code> (query interpreter)</a><br /> <a href="book-Z-H-29.html#%_idx_5104">assertion</a><br />     <a href="book-Z-H-29.html#%_idx_5148">implicit</a><br /> <a href="book-Z-H-31.html#%_idx_5518"><code>assign</code> (in register machine)</a><br />     <a href="book-Z-H-32.html#%_idx_5720">simulating</a><br />     <a href="book-Z-H-31.html#%_idx_5556">storing label in register</a><br /> <a href="book-Z-H-32.html#%_idx_5724"><code>assign-reg-name</code></a><br /> <a href="book-Z-H-32.html#%_idx_5726"><code>assign-value-exp</code></a><br /> <a href="book-Z-H-20.html#%_idx_2836">assignment</a>, <em>see also</em> <code>set!</code> <br />     <a href="book-Z-H-20.html#%_idx_2916">benefits of</a><br />     <a href="book-Z-H-20.html#%_idx_3004">bugs associated with</a>, <a href="book-Z-H-20.html#%_idx_3022">[2]</a><br />     <a href="book-Z-H-20.html#%_idx_2976">costs of</a><br /> <a href="book-Z-H-20.html#%_idx_2842">assignment operator</a>, <em>see also</em> <code>set!</code> <br /> <a href="book-Z-H-26.html#%_idx_4296"><code>assignment-value</code></a><br /> <a href="book-Z-H-26.html#%_idx_4294"><code>assignment-variable</code></a><br /> <a href="book-Z-H-26.html#%_idx_4292"><code>assignment?</code></a><br /> <a href="book-Z-H-22.html#%_idx_3282"><code>assoc</code></a><br /> <a href="book-Z-H-17.html#%_idx_2324"><code>atan</code> (primitive procedure)</a><br /> <a href="book-Z-H-23.html#%_idx_3682">atomic operations supported in hardware</a><br /> <a href="book-Z-H-23.html#%_idx_3672">atomic requirement for <code>test-and-set!</code></a><br /> <a href="book-Z-H-17.html#%_idx_2368"><code>attach-tag</code></a><br />     <a href="book-Z-H-18.html#%_idx_2558">using Scheme data types</a><br /> <a href="book-Z-H-16.html#%_idx_2076"><code>augend</code></a><br /> <a href="book-Z-H-28.html#%_idx_4846">automagically</a><br /> <a href="book-Z-H-28.html#%_idx_4808">automatic search</a>, <em>see also</em> search <br />     <a href="book-Z-H-28.html#%_idx_4860">history of</a><br /> <a href="book-Z-H-33.html#%_idx_5832">automatic storage allocation</a><br /> <a href="book-Z-H-10.html#%_idx_516"><code>average</code></a><br /> <a href="book-Z-H-12.html#%_idx_1128">average damping</a><br /> <a href="book-Z-H-12.html#%_idx_1160"><code>average-damp</code></a><br /> <a href="book-Z-H-22.html#%_idx_3560"><code>averager</code> (constraint)</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-16.html#%_idx_2172">B-tree</a><br /> <a href="book-Z-H-35.html#%_idx_6282">backquote</a><br /> <a href="book-Z-H-28.html#%_idx_4852">backtracking</a>, <em>see also</em> nondeterministic computing <br /> <a href="book-Z-H-24.html#%_idx_4166">Backus, John</a><br /> <a href="book-Z-H-33.html#%_idx_5948">Baker, Henry G., Jr.</a><br /> <a href="book-Z-H-16.html#%_idx_2164">balanced binary tree</a>, <em>see also</em> binary tree <br /> <a href="book-Z-H-15.html#%_idx_1702">balanced mobile</a><br /> <a href="book-Z-H-20.html#%_idx_2848">bank account</a>, <a href="book-Z-H-21.html#%_idx_3124">[2]</a><br />     <a href="book-Z-H-23.html#%_idx_3626">exchanging balances</a><br />     <a href="book-Z-H-20.html#%_idx_2996">joint</a>, <a href="book-Z-H-20.html#%_idx_3026">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_4176">joint, modeled with streams</a><br />     <a href="book-Z-H-23.html#%_idx_3588">joint, with concurrent access</a><br />     <a href="book-Z-H-20.html#%_idx_2912">password-protected</a><br />     <a href="book-Z-H-23.html#%_idx_3614">serialized</a><br />     <a href="book-Z-H-24.html#%_idx_4148">stream model</a><br />     <a href="book-Z-H-23.html#%_idx_3636">transferring money</a><br /> <a href="book-Z-H-23.html#%_idx_3710">barrier synchronization</a><br /> <a href="book-Z-H-25.html#%_idx_4188">Barth, John</a><br /> Basic <br />     <a href="book-Z-H-15.html#%_idx_1546">restrictions on compound data</a><br />     <a href="book-Z-H-22.html#%_idx_3570">weakness in handling compound objects</a><br /> <a href="book-Z-H-34.html#%_idx_6004">Batali, John Dean</a><br /> <a href="book-Z-H-20.html#%_idx_2874"><code>begin</code> (special form)</a><br />     <a href="book-Z-H-20.html#%_idx_2878">implicit in consequent of <code>cond</code> and in procedure body</a><br /> <a href="book-Z-H-26.html#%_idx_4328"><code>begin-actions</code></a><br /> <a href="book-Z-H-26.html#%_idx_4326"><code>begin?</code></a><br /> <a href="book-Z-H-15.html#%_idx_1880"><code>below</code></a>, <a href="book-Z-H-15.html#%_idx_1976">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_3880">Bertrand's Hypothesis</a><br /> <a href="book-Z-H-15.html#%_idx_1878"><code>beside</code></a>, <a href="book-Z-H-15.html#%_idx_1972">[2]</a><br /> <a href="book-Z-H-33.html#%_idx_5880">bignum</a><br /> binary numbers, addition of, <em>see</em> adder <br /> <a href="book-Z-H-16.html#%_idx_2144">binary search</a><br /> <a href="book-Z-H-16.html#%_idx_2142">binary tree</a><br />     <a href="book-Z-H-16.html#%_idx_2166">balanced</a><br />     <a href="book-Z-H-16.html#%_idx_2188">converting a list to a</a><br />     <a href="book-Z-H-16.html#%_idx_2182">converting to a list</a><br />     <a href="book-Z-H-16.html#%_idx_2240">for Huffman encoding</a><br />     <a href="book-Z-H-16.html#%_idx_2150">represented with lists</a><br />     <a href="book-Z-H-16.html#%_idx_2138">sets represented as</a><br />     <a href="book-Z-H-22.html#%_idx_3310">table structured as</a><br /> <a href="book-Z-H-10.html#%_idx_588">bind</a><br /> <a href="book-Z-H-21.html#%_idx_3042">binding</a><br />     <a href="book-Z-H-26.html#%_idx_4490">deep</a><br /> <a href="book-Z-H-11.html#%_idx_740">binomial coefficients</a><br /> <a href="book-Z-H-10.html#%_idx_572">black box</a><br /> <a href="book-Z-H-10.html#%_idx_612">block structure</a>, <a href="book-Z-H-26.html#%_idx_4600">[2]</a><br />     <a href="book-Z-H-21.html#%_idx_3112">in environment model</a><br />     <a href="book-Z-H-29.html#%_idx_5448">in query language</a><br /> <a href="book-Z-H-23.html#%_idx_3664">blocked process</a><br /> <a href="book-Z-H-10.html#%_idx_324">body of a procedure</a><br /> <a href="book-Z-H-9.html#%_idx_62">Bolt Beranek and Newman Inc.</a><br /> <a href="book-Z-H-22.html#%_idx_3492">Borning, Alan</a><br /> <a href="book-Z-H-15.html#%_idx_1788">Borodin, Alan</a><br /> <a href="book-Z-H-10.html#%_idx_584">bound variable</a><br /> <a href="book-Z-H-15.html#%_idx_1528">box-and-pointer notation</a><br />     <a href="book-Z-H-15.html#%_idx_1560">end-of-list marker</a><br /> <a href="book-Z-H-31.html#%_idx_5506"><code>branch</code> (in register machine)</a><br />     <a href="book-Z-H-32.html#%_idx_5740">simulating</a><br /> <a href="book-Z-H-10.html#%_idx_258">branch of a tree</a><br /> <a href="book-Z-H-32.html#%_idx_5744"><code>branch-dest</code></a><br /> <a href="book-Z-H-32.html#%_idx_5826">breakpoint</a><br /> <a href="book-Z-H-33.html#%_idx_5980">broken heart</a><br /> <a href="book-Z-H-9.html#%_idx_18">bug</a><br />     <a href="book-Z-H-10.html#%_idx_606">capturing a free variable</a><br />     <a href="book-Z-H-20.html#%_idx_3020">order of assignments</a><br />     <a href="book-Z-H-20.html#%_idx_3002">side effect with aliasing</a><br /> <a href="book-Z-H-29.html#%_idx_5254">bureaucracy</a><br /> <a href="book-Z-H-23.html#%_idx_3686">Buridan, Jean</a><br /> <a href="book-Z-H-23.html#%_idx_3666">busy-waiting</a></p>
<p></p>
<p></p>
<p><br /> C <br />     <a href="book-Z-H-35.html#%_idx_6520">compiling Scheme into</a><br />     <a href="book-Z-H-34.html#%_idx_6186">error handling</a>, <a href="book-Z-H-35.html#%_idx_6496">[2]</a><br />     <a href="book-Z-H-11.html#%_idx_688">recursive procedures</a><br />     <a href="book-Z-H-15.html#%_idx_1550">restrictions on compound data</a><br />     <a href="book-Z-H-35.html#%_idx_6518">Scheme interpreter written in</a>, <a href="book-Z-H-35.html#%_idx_6522">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1588"><code>ca...</code>r</a><br /> <a href="book-Z-H-23.html#%_idx_3594">cache-coherence protocols</a><br /> <a href="book-Z-H-15.html#%_idx_1586"><code>cadr</code></a><br /> <a href="book-Z-H-12.html#%_idx_1108">calculator, fixed points with</a><br /> <a href="book-Z-H-24.html#%_idx_3808">call-by-name argument passing</a>, <a href="book-Z-H-27.html#%_idx_4714">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_3816">call-by-need argument passing</a>, <a href="book-Z-H-27.html#%_idx_4712">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_3902">memoization and</a><br /> <a href="book-Z-H-22.html#%_idx_3398"><code>call-each</code></a><br /> <a href="book-Z-H-10.html#%_idx_286">cancer of the semicolon</a><br /> <a href="book-Z-H-18.html#%_idx_2770">canonical form, for polynomials</a><br /> <a href="book-Z-H-10.html#%_idx_604">capturing a free variable</a><br /> <a href="book-Z-H-14.html#%_idx_1324"><code>car</code> (primitive procedure)</a><br />     <a href="book-Z-H-14.html#%_idx_1454">axiom for</a><br />     <a href="book-Z-H-33.html#%_idx_5896">implemented with vectors</a><br />     <a href="book-Z-H-15.html#%_idx_1580">as list operation</a><br />     <a href="book-Z-H-14.html#%_idx_1334">origin of the name</a><br />     <a href="book-Z-H-14.html#%_idx_1462">procedural implementation of</a>, <a href="book-Z-H-14.html#%_idx_1470">[2]</a>, <a href="book-Z-H-22.html#%_idx_3206">[3]</a>, <a href="book-Z-H-22.html#%_idx_3212">[4]</a>, <a href="book-Z-H-27.html#%_idx_4776">[5]</a><br /> <a href="book-Z-H-11.html#%_idx_912">Carmichael numbers</a>, <a href="book-Z-H-11.html#%_idx_948">[2]</a><br /> case analysis <br />     <a href="book-Z-H-26.html#%_idx_4246">data-directed programming vs.</a><br />     <a href="book-Z-H-10.html#%_idx_350">general</a>, <em>see also</em> <code>cond</code> <br />     <a href="book-Z-H-10.html#%_idx_426">with two cases (<code>if</code>)</a><br /> <a href="book-Z-H-15.html#%_idx_1590"><code>cd...</code>r</a><br /> <a href="book-Z-H-14.html#%_idx_1328"><code>cdr</code> (primitive procedure)</a><br />     <a href="book-Z-H-14.html#%_idx_1456">axiom for</a><br />     <a href="book-Z-H-33.html#%_idx_5898">implemented with vectors</a><br />     <a href="book-Z-H-15.html#%_idx_1582">as list operation</a><br />     <a href="book-Z-H-14.html#%_idx_1336">origin of the name</a><br />     <a href="book-Z-H-14.html#%_idx_1464">procedural implementation of</a>, <a href="book-Z-H-14.html#%_idx_1472">[2]</a>, <a href="book-Z-H-22.html#%_idx_3208">[3]</a>, <a href="book-Z-H-22.html#%_idx_3214">[4]</a>, <a href="book-Z-H-27.html#%_idx_4778">[5]</a><br /> <a href="book-Z-H-15.html#%_idx_1606"><code>cdr</code> down a list</a><br /> <a href="book-Z-H-23.html#%_idx_3662">cell, in serializer implementation</a><br /> <a href="book-Z-H-22.html#%_idx_3518"><code>celsius-fahrenheit-converter</code></a><br />     <a href="book-Z-H-22.html#%_idx_3566">expression-oriented</a><br /> <a href="book-Z-H-14.html#%_idx_1518"><code>center</code></a><br /> <a href="book-Z-H-20.html#%_idx_2942">Cesàro, Ernesto</a><br /> <a href="book-Z-H-24.html#%_idx_4128"><code>cesaro-stream</code></a><br /> <a href="book-Z-H-20.html#%_idx_2950"><code>cesaro-test</code></a><br /> <a href="book-Z-H-20.html#%_idx_2932">Chaitin, Gregory</a><br /> <a href="book-Z-H-11.html#%_idx_810">Chandah-sutra</a><br /> change and sameness <br />     <a href="book-Z-H-20.html#%_idx_2988">meaning of</a><br />     <a href="book-Z-H-22.html#%_idx_3182">shared data and</a><br /> changing money, <em>see</em> counting change <br /> <a href="book-Z-H-9.html#%_idx_104">chaos in the Solar System</a><br /> <a href="book-Z-H-28.html#%_idx_4904">Chapman, David</a><br /> character strings <br />     <a href="book-Z-H-29.html#%_idx_5410">primitive procedures for</a>, <a href="book-Z-H-35.html#%_idx_6320">[2]</a><br />     <a href="book-Z-H-16.html#%_idx_2006">quotation of</a><br /> <a href="book-Z-H-16.html#%_idx_2218">character, ASCII encoding</a><br /> <a href="book-Z-H-28.html#%_idx_4872">Charniak, Eugene</a><br /> <a href="book-Z-H-24.html#%_idx_3878">Chebyshev, Pafnutii L'vovich</a><br /> <a href="book-Z-H-15.html#%_idx_1848">chess, eight-queens puzzle</a>, <a href="book-Z-H-28.html#%_idx_4944">[2]</a><br /> <a href="book-Z-H-34.html#%_idx_6002">chip implementation of Scheme</a>, <a href="book-Z-H-34.html#%_idx_6014">[2]</a><br /> <a href="book-Z-H-28.html#%_idx_4858">chronological backtracking</a><br /> <a href="book-Z-H-11.html#%_idx_750">Chu Shih-chieh</a><br /> <a href="book-Z-H-14.html#%_idx_1474">Church numerals</a><br /> <a href="book-Z-H-12.html#%_idx_1056">Church, Alonzo</a>, <a href="book-Z-H-14.html#%_idx_1476">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4562">Church-Turing thesis</a><br /> circuit <br />     digital, <em>see</em> digital-circuit simulation <br />     <a href="book-Z-H-24.html#%_idx_4030">modeled with streams</a>, <a href="book-Z-H-24.html#%_idx_4088">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5274">Clark, Keith L.</a><br /> <a href="book-Z-H-10.html#%_idx_362">clause, of a <code>cond</code></a><br />     <a href="book-Z-H-26.html#%_idx_4402">additional syntax</a><br /> <a href="book-Z-H-26.html#%_idx_4378">Clinger, William</a>, <a href="book-Z-H-27.html#%_idx_4718">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5272">closed world assumption</a><br /> <a href="book-Z-H-13.html#%_idx_1266">closure</a><br />     <a href="book-Z-H-15.html#%_idx_1536">in abstract algebra</a><br />     <a href="book-Z-H-15.html#%_idx_1532">closure property of <code>cons</code></a><br />     <a href="book-Z-H-15.html#%_idx_1860">closure property of picture-language operations</a>, <a href="book-Z-H-15.html#%_idx_1886">[2]</a><br />     <a href="book-Z-H-15.html#%_idx_1542">lack of in many languages</a><br /> <a href="book-Z-H-15.html#%_idx_1872">coal, bituminous</a><br /> code <br />     <a href="book-Z-H-16.html#%_idx_2216">ASCII</a><br />     <a href="book-Z-H-16.html#%_idx_2222">fixed-length</a><br />     Huffman, <em>see</em> Huffman code <br />     <a href="book-Z-H-16.html#%_idx_2230">Morse</a><br />     <a href="book-Z-H-16.html#%_idx_2236">prefix</a><br />     <a href="book-Z-H-16.html#%_idx_2226">variable-length</a><br /> <a href="book-Z-H-35.html#%_idx_6242">code generator</a><br />     <a href="book-Z-H-35.html#%_idx_6246">arguments of</a><br />     <a href="book-Z-H-35.html#%_idx_6258">value of</a><br /> <a href="book-Z-H-18.html#%_idx_2706"><code>coeff</code></a>, <a href="book-Z-H-18.html#%_idx_2748">[2]</a><br /> <a href="book-Z-H-18.html#%_idx_2580">coercion</a><br />     <a href="book-Z-H-18.html#%_idx_2774">in algebraic manipulation</a><br />     <a href="book-Z-H-18.html#%_idx_2718">in polynomial arithmetic</a><br />     <a href="book-Z-H-18.html#%_idx_2582">procedure</a><br />     <a href="book-Z-H-18.html#%_idx_2588">table</a><br /> <a href="book-Z-H-29.html#%_idx_5054">Colmerauer, Alain</a><br /> <a href="book-Z-H-10.html#%_idx_156">combination</a><br />     <a href="book-Z-H-12.html#%_idx_1162">combination as operator of</a><br />     <a href="book-Z-H-10.html#%_idx_474">compound expression as operator of</a><br />     <a href="book-Z-H-10.html#%_idx_244">evaluation of</a><br />     <a href="book-Z-H-12.html#%_idx_1048"><code>lambda</code> expression as operator of</a><br />     <a href="book-Z-H-12.html#%_idx_1164">as operator of combination</a><br />     <a href="book-Z-H-10.html#%_idx_252">as a tree</a><br /> <a href="book-Z-H-10.html#%_idx_124">combination, means of</a>, <em>see also</em> closure <br /> <a href="book-Z-H-35.html#%_idx_6290">comma, used with backquote</a><br /> <a href="book-Z-H-15.html#%_idx_1836">comments in programs</a><br /> <a href="book-Z-H-9.html#%_idx_92">Common Lisp</a><br />     <a href="book-Z-H-15.html#%_idx_1600">treatment of <code>nil</code></a><br /> <a href="book-Z-H-33.html#%_idx_5962">compacting garbage collector</a><br /> compilation, <em>see</em> compiler <br /> <a href="book-Z-H-35.html#%_idx_6244"><code>compile</code></a><br /> <a href="book-Z-H-35.html#%_idx_6472"><code>compile-and-go</code></a>, <a href="book-Z-H-35.html#%_idx_6484">[2]</a><br /> <a href="book-Z-H-35.html#%_idx_6514"><code>compile-and-run</code></a><br /> <a href="book-Z-H-35.html#%_idx_6346"><code>compile-application</code></a><br /> <a href="book-Z-H-35.html#%_idx_6312"><code>compile-assignment</code></a><br /> <a href="book-Z-H-35.html#%_idx_6314"><code>compile-definition</code></a><br /> <a href="book-Z-H-35.html#%_idx_6324"><code>compile-if</code></a><br /> <a href="book-Z-H-35.html#%_idx_6340"><code>compile-lambda</code></a><br /> <a href="book-Z-H-35.html#%_idx_6292"><code>compile-linkage</code></a><br /> <a href="book-Z-H-35.html#%_idx_6376"><code>compile-proc-appl</code></a><br /> <a href="book-Z-H-35.html#%_idx_6350"><code>compile-procedure-call</code></a><br /> <a href="book-Z-H-35.html#%_idx_6304"><code>compile-quoted</code></a><br /> <a href="book-Z-H-35.html#%_idx_6302"><code>compile-self-evaluating</code></a><br /> <a href="book-Z-H-35.html#%_idx_6328"><code>compile-sequence</code></a><br /> <a href="book-Z-H-35.html#%_idx_6440">compile-time environment</a>, <a href="book-Z-H-35.html#%_idx_6450">[2]</a>, <a href="book-Z-H-35.html#%_idx_6452">[3]</a><br />     <a href="book-Z-H-35.html#%_idx_6464">open coding and</a><br /> <a href="book-Z-H-35.html#%_idx_6306"><code>compile-variable</code></a><br /> <a href="book-Z-H-35.html#%_idx_6476"><code>compiled-apply</code></a><br /> <a href="book-Z-H-35.html#%_idx_6336"><code>compiled-procedure-entry</code></a><br /> <a href="book-Z-H-35.html#%_idx_6338"><code>compiled-procedure-env</code></a><br /> <a href="book-Z-H-35.html#%_idx_6334"><code>compiled-procedure?</code></a><br /> <a href="book-Z-H-35.html#%_idx_6194">compiler</a><br />     <a href="book-Z-H-35.html#%_idx_6210">interpreter vs.</a>, <a href="book-Z-H-35.html#%_idx_6492">[2]</a><br />     <a href="book-Z-H-35.html#%_idx_6356">tail recursion, stack allocation, and garbage-collection</a><br /> <a href="book-Z-H-35.html#%_idx_6224">compiler for Scheme</a>, <em>see also</em> code generator; compile-time environment; instruction sequence; linkage descriptor; target register <br />     <a href="book-Z-H-35.html#%_idx_6234">analyzing evaluator vs.</a>, <a href="book-Z-H-35.html#%_idx_6238">[2]</a><br />     <a href="book-Z-H-35.html#%_idx_6308">assignments</a><br />     code generators, <em>see</em> <code>compile-...</code> <br />     <a href="book-Z-H-35.html#%_idx_6344">combinations</a><br />     <a href="book-Z-H-35.html#%_idx_6316">conditionals</a><br />     <a href="book-Z-H-35.html#%_idx_6310">definitions</a><br />     <a href="book-Z-H-35.html#%_idx_6232">efficiency</a><br />     <a href="book-Z-H-35.html#%_idx_6404">example compilation</a><br />     <a href="book-Z-H-35.html#%_idx_6226">explicit-control evaluator vs.</a>, <a href="book-Z-H-35.html#%_idx_6274">[2]</a>, <a href="book-Z-H-35.html#%_idx_6488">[3]</a><br />     <a href="book-Z-H-35.html#%_idx_6240">expression-syntax procedures</a><br />     <a href="book-Z-H-35.html#%_idx_6466">interfacing to evaluator</a><br />     <a href="book-Z-H-35.html#%_idx_6318">label generation</a><br />     <a href="book-Z-H-35.html#%_idx_6330"><code>lambda</code> expressions</a><br />     <a href="book-Z-H-35.html#%_idx_6428">lexical addressing</a><br />     <a href="book-Z-H-35.html#%_idx_6278">linkage code</a><br />     <a href="book-Z-H-35.html#%_idx_6222">machine-operation use</a><br />     <a href="book-Z-H-35.html#%_idx_6486">monitoring performance (stack use) of compiled code</a>, <a href="book-Z-H-35.html#%_idx_6506">[2]</a>, <a href="book-Z-H-35.html#%_idx_6510">[3]</a><br />     <a href="book-Z-H-35.html#%_idx_6422">open coding of primitives</a>, <a href="book-Z-H-35.html#%_idx_6458">[2]</a><br />     <a href="book-Z-H-35.html#%_idx_6416">order of operand evaluation</a><br />     <a href="book-Z-H-35.html#%_idx_6342">procedure applications</a><br />     <a href="book-Z-H-35.html#%_idx_6298">quotations</a><br />     <a href="book-Z-H-35.html#%_idx_6220">register use</a>, <a href="book-Z-H-35.html#%_idx_6228">[2]</a>, <a href="book-Z-H-35.html#%_idx_6372">[3]</a><br />     <a href="book-Z-H-35.html#%_idx_6468">running compiled code</a><br />     <a href="book-Z-H-35.html#%_idx_6448">scanning out internal definitions</a>, <a href="book-Z-H-35.html#%_idx_6456">[2]</a><br />     <a href="book-Z-H-35.html#%_idx_6296">self-evaluating expressions</a><br />     <a href="book-Z-H-35.html#%_idx_6326">sequences of expressions</a><br />     <a href="book-Z-H-35.html#%_idx_6262">stack usage</a>, <a href="book-Z-H-35.html#%_idx_6270">[2]</a>, <a href="book-Z-H-35.html#%_idx_6418">[3]</a><br />     <a href="book-Z-H-35.html#%_idx_6236">structure of</a><br />     <a href="book-Z-H-35.html#%_idx_6352">tail-recursive code generated by</a><br />     <a href="book-Z-H-35.html#%_idx_6300">variables</a><br /> <a href="book-Z-H-18.html#%_idx_2538"><code>complex</code> package</a><br /> complex numbers <br />     <a href="book-Z-H-17.html#%_idx_2340">polar representation</a><br />     <a href="book-Z-H-17.html#%_idx_2320">rectangular representation</a><br />     <a href="book-Z-H-17.html#%_idx_2306">rectangular vs. polar form</a><br />     <a href="book-Z-H-17.html#%_idx_2356">represented as tagged data</a><br /> <a href="book-Z-H-18.html#%_idx_2630"><code>complex-&gt;complex</code></a><br /> <a href="book-Z-H-17.html#%_idx_2300">complex-number arithmetic</a><br />     <a href="book-Z-H-18.html#%_idx_2540">interfaced to generic arithmetic system</a><br />     <a href="book-Z-H-17.html#%_idx_2418">structure of system</a><br /> <a href="book-Z-H-12.html#%_idx_1226">composition of functions</a><br /> <a href="book-Z-H-13.html#%_idx_1256">compound data, need for</a><br /> <a href="book-Z-H-10.html#%_idx_154">compound expression</a>, <em>see also</em> combination; special form <br />     <a href="book-Z-H-10.html#%_idx_476">as operator of combination</a><br /> <a href="book-Z-H-10.html#%_idx_296">compound procedure</a>, <em>see also</em> procedure <br />     <a href="book-Z-H-10.html#%_idx_332">used like primitive procedure</a><br /> <a href="book-Z-H-29.html#%_idx_5122">compound query</a><br />     <a href="book-Z-H-29.html#%_idx_5196">processing</a>, <a href="book-Z-H-29.html#%_idx_5316">[2]</a>, <a href="book-Z-H-29.html#%_idx_5422">[3]</a>, <a href="book-Z-H-29.html#%_idx_5430">[4]</a>, <a href="book-Z-H-29.html#%_idx_5436">[5]</a><br /> <a href="book-Z-H-34.html#%_idx_6080"><code>compound-apply</code></a><br /> <a href="book-Z-H-26.html#%_idx_4446"><code>compound-procedure?</code></a><br /> <a href="book-Z-H-26.html#%_idx_4554">computability</a>, <a href="book-Z-H-26.html#%_idx_4596">[2]</a><br /> <a href="book-Z-H-9.html#%_idx_8">computational process</a>, <em>see also</em> process <br /> <a href="book-Z-H-25.html#%_idx_4200">computer science</a>, <a href="book-Z-H-26.html#%_idx_4558">[2]</a><br />     <a href="book-Z-H-10.html#%_idx_498">mathematics vs.</a>, <a href="book-Z-H-29.html#%_idx_5036">[2]</a><br /> <a href="book-Z-H-14.html#%_idx_1286">concrete data representation</a><br /> <a href="book-Z-H-23.html#%_idx_3578">concurrency</a><br />     <a href="book-Z-H-23.html#%_idx_3600">correctness of concurrent programs</a><br />     <a href="book-Z-H-23.html#%_idx_3694">deadlock</a><br />     <a href="book-Z-H-24.html#%_idx_4162">functional programming and</a><br />     <a href="book-Z-H-23.html#%_idx_3608">mechanisms for controlling</a><br /> <a href="book-Z-H-10.html#%_idx_352"><code>cond</code> (special form)</a><br />     <a href="book-Z-H-26.html#%_idx_4400">additional clause syntax</a><br />     <a href="book-Z-H-10.html#%_idx_364">clause</a><br />     <a href="book-Z-H-10.html#%_idx_384">evaluation of</a><br />     <a href="book-Z-H-10.html#%_idx_442"><code>if</code> vs.</a><br />     <a href="book-Z-H-20.html#%_idx_2880">implicit <code>begin</code> in consequent</a><br /> <a href="book-Z-H-26.html#%_idx_4370"><code>cond-&gt;if</code></a><br /> <a href="book-Z-H-26.html#%_idx_4368"><code>cond-actions</code></a><br /> <a href="book-Z-H-26.html#%_idx_4362"><code>cond-clauses</code></a><br /> <a href="book-Z-H-26.html#%_idx_4364"><code>cond-else-clause?</code></a><br /> <a href="book-Z-H-26.html#%_idx_4366"><code>cond-predicate</code></a><br /> <a href="book-Z-H-26.html#%_idx_4360"><code>cond?</code></a><br /> conditional expression <br />     <a href="book-Z-H-10.html#%_idx_356"><code>cond</code></a><br />     <a href="book-Z-H-10.html#%_idx_424"><code>if</code></a><br /> <a href="book-Z-H-11.html#%_idx_888">congruent modulo <em>n</em></a><br /> <a href="book-Z-H-29.html#%_idx_5320"><code>conjoin</code></a><br /> <a href="book-Z-H-22.html#%_idx_3530"><code>connect</code></a>, <a href="book-Z-H-22.html#%_idx_3558">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3516">connector(s), in constraint system</a><br />     <a href="book-Z-H-22.html#%_idx_3520">operations on</a><br />     <a href="book-Z-H-22.html#%_idx_3544">representing</a><br /> <a href="book-Z-H-28.html#%_idx_4882">Conniver</a><br /> <a href="book-Z-H-14.html#%_idx_1320"><code>cons</code> (primitive procedure)</a><br />     <a href="book-Z-H-14.html#%_idx_1452">axiom for</a><br />     <a href="book-Z-H-15.html#%_idx_1534">closure property of</a><br />     <a href="book-Z-H-22.html#%_idx_3158">implemented with mutators</a><br />     <a href="book-Z-H-33.html#%_idx_5904">implemented with vectors</a><br />     <a href="book-Z-H-15.html#%_idx_1592">as list operation</a><br />     <a href="book-Z-H-14.html#%_idx_1332">meaning of the name</a><br />     <a href="book-Z-H-14.html#%_idx_1460">procedural implementation of</a>, <a href="book-Z-H-14.html#%_idx_1468">[2]</a>, <a href="book-Z-H-22.html#%_idx_3160">[3]</a>, <a href="book-Z-H-22.html#%_idx_3204">[4]</a>, <a href="book-Z-H-22.html#%_idx_3210">[5]</a>, <a href="book-Z-H-27.html#%_idx_4774">[6]</a><br /> <a href="book-Z-H-15.html#%_idx_1628"><code>cons</code> up a list</a><br /> <a href="book-Z-H-24.html#%_idx_3738"><code>cons-stream</code> (special form)</a>, <a href="book-Z-H-24.html#%_idx_3778">[2]</a><br />     <a href="book-Z-H-27.html#%_idx_4770">lazy evaluation and</a><br />     <a href="book-Z-H-24.html#%_idx_3784">why a special form</a><br /> <a href="book-Z-H-26.html#%_idx_4262">consciousness, expansion of</a><br /> consequent <br />     <a href="book-Z-H-10.html#%_idx_388">of <code>cond</code> clause</a><br />     <a href="book-Z-H-10.html#%_idx_436">of <code>if</code></a><br /> <a href="book-Z-H-31.html#%_idx_5530"><code>const</code> (in register machine)</a><br />     <a href="book-Z-H-32.html#%_idx_5772">simulating</a><br />     <a href="book-Z-H-31.html#%_idx_5618">syntax of</a><br /> <a href="book-Z-H-22.html#%_idx_3540"><code>constant</code> (primitive constraint)</a><br /> <a href="book-Z-H-31.html#%_idx_5620">constant, specifying in register machine</a><br /> <a href="book-Z-H-32.html#%_idx_5780"><code>constant-exp</code></a><br /> <a href="book-Z-H-32.html#%_idx_5782"><code>constant-exp-value</code></a><br /> <a href="book-Z-H-22.html#%_idx_3514">constraint network</a><br /> constraint(s) <br />     <a href="book-Z-H-22.html#%_idx_3512">primitive</a><br />     <a href="book-Z-H-22.html#%_idx_3484">propagation of</a><br /> <a href="book-Z-H-35.html#%_idx_6348"><code>construct-arglist</code></a><br /> <a href="book-Z-H-14.html#%_idx_1292">constructor</a><br />     <a href="book-Z-H-14.html#%_idx_1382">as abstraction barrier</a><br /> <a href="book-Z-H-17.html#%_idx_2372"><code>contents</code></a><br />     <a href="book-Z-H-18.html#%_idx_2562">using Scheme data types</a><br /> continuation <br />     <a href="book-Z-H-28.html#%_idx_4984">in nondeterministic evaluator</a>, <a href="book-Z-H-28.html#%_idx_5000">[2]</a>, <em>see also</em> failure continuation; success continuation <br />     <a href="book-Z-H-32.html#%_idx_5700">in register-machine simulator</a><br /> <a href="book-Z-H-31.html#%_idx_5554"><code>continue</code> register</a><br />     <a href="book-Z-H-34.html#%_idx_6024">in explicit-control evaluator</a><br />     <a href="book-Z-H-31.html#%_idx_5582">recursion and</a><br /> <a href="book-Z-H-12.html#%_idx_1138">continued fraction</a><br />     <a href="book-Z-H-12.html#%_idx_1146"><em>e</em> as</a><br />     <a href="book-Z-H-12.html#%_idx_1140">golden ratio as</a><br />     <a href="book-Z-H-12.html#%_idx_1152">tangent as</a><br /> <a href="book-Z-H-29.html#%_idx_5252">control structure</a><br /> <a href="book-Z-H-31.html#%_idx_5470">controller for register machine</a><br />     <a href="book-Z-H-31.html#%_idx_5488">controller diagram</a><br /> <a href="book-Z-H-13.html#%_idx_1268">conventional interface</a><br />     <a href="book-Z-H-15.html#%_idx_1720">sequence as</a><br /> <a href="book-Z-H-16.html#%_idx_2176">Cormen, Thomas H.</a><br /> <a href="book-Z-H-15.html#%_idx_1892"><code>corner-split</code></a><br /> <a href="book-Z-H-10.html#%_idx_500">correctness of a program</a><br /> <a href="book-Z-H-12.html#%_idx_1112"><code>cos</code> (primitive procedure)</a><br /> cosine <br />     <a href="book-Z-H-12.html#%_idx_1104">fixed point of</a><br />     <a href="book-Z-H-24.html#%_idx_3916">power series for</a><br /> <a href="book-Z-H-11.html#%_idx_914">cosmic radiation</a><br /> <a href="book-Z-H-11.html#%_idx_730"><code>count-change</code></a><br /> <a href="book-Z-H-15.html#%_idx_1682"><code>count-leaves</code></a>, <a href="book-Z-H-15.html#%_idx_1690">[2]</a><br />     <a href="book-Z-H-15.html#%_idx_1792">as accumulation</a><br />     <a href="book-Z-H-33.html#%_idx_5924">as register machine</a><br /> <a href="book-Z-H-22.html#%_idx_3192"><code>count-pairs</code></a><br /> <a href="book-Z-H-11.html#%_idx_728">counting change</a>, <a href="book-Z-H-15.html#%_idx_1646">[2]</a><br /> <a href="book-Z-H-23.html#%_idx_3718">credit-card accounts, international</a><br /> <a href="book-Z-H-33.html#%_idx_5982">Cressey, David</a><br /> <a href="book-Z-H-18.html#%_idx_2574">cross-type operations</a><br /> <a href="book-Z-H-11.html#%_idx_920">cryptography</a><br /> <a href="book-Z-H-11.html#%_idx_788"><code>cube</code></a>, <a href="book-Z-H-12.html#%_idx_962">[2]</a>, <a href="book-Z-H-12.html#%_idx_1194">[3]</a><br /> cube root <br />     <a href="book-Z-H-12.html#%_idx_1172">as fixed point</a><br />     <a href="book-Z-H-10.html#%_idx_560">by Newton's method</a><br /> <a href="book-Z-H-12.html#%_idx_1176"><code>cube-root</code></a><br /> <a href="book-Z-H-22.html#%_idx_3450">current time, for simulation agenda</a><br /> <a href="book-Z-H-22.html#%_idx_3422"><code>current-time</code></a>, <a href="book-Z-H-22.html#%_idx_3458">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3170">cycle in list</a><br />     <a href="book-Z-H-22.html#%_idx_3194">detecting</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-24.html#%_idx_4170">Darlington, John</a><br /> <a href="book-Z-H-9.html#%_idx_12">data</a>, <a href="book-Z-H-10.html#%_idx_130">[2]</a><br />     <a href="book-Z-H-14.html#%_idx_1284">abstract</a>, <em>see also</em> data abstraction <br />     <a href="book-Z-H-14.html#%_idx_1424">abstract models for</a><br />     <a href="book-Z-H-14.html#%_idx_1440">algebraic specification for</a><br />     <a href="book-Z-H-13.html#%_idx_1258">compound</a><br />     <a href="book-Z-H-14.html#%_idx_1288">concrete representation of</a><br />     <a href="book-Z-H-15.html#%_idx_1540">hierarchical</a>, <a href="book-Z-H-15.html#%_idx_1672">[2]</a><br />     <a href="book-Z-H-14.html#%_idx_1344">list-structured</a><br />     <a href="book-Z-H-14.html#%_idx_1414">meaning of</a><br />     mutable, <em>see</em> mutable data objects <br />     <a href="book-Z-H-10.html#%_idx_134">numerical</a><br />     <a href="book-Z-H-14.html#%_idx_1446">procedural representation of</a><br />     <a href="book-Z-H-26.html#%_idx_4542">as program</a><br />     <a href="book-Z-H-22.html#%_idx_3176">shared</a><br />     <a href="book-Z-H-16.html#%_idx_1984">symbolic</a><br />     <a href="book-Z-H-17.html#%_idx_2360">tagged</a>, <a href="book-Z-H-33.html#%_idx_5866">[2]</a><br /> <a href="book-Z-H-13.html#%_idx_1262">data abstraction</a>, <a href="book-Z-H-14.html#%_idx_1280">[2]</a>, <a href="book-Z-H-17.html#%_idx_2288">[3]</a>, <a href="book-Z-H-17.html#%_idx_2310">[4]</a>, <a href="book-Z-H-26.html#%_idx_4280">[5]</a>, <em>see also</em> metacircular evaluator <br />     <a href="book-Z-H-22.html#%_idx_3228">for queue</a><br /> data base <br />     <a href="book-Z-H-17.html#%_idx_2482">data-directed programming and</a><br />     <a href="book-Z-H-29.html#%_idx_5190">indexing</a>, <a href="book-Z-H-29.html#%_idx_5374">[2]</a><br />     <a href="book-Z-H-17.html#%_idx_2484">Insatiable Enterprises personnel</a><br />     <a href="book-Z-H-29.html#%_idx_5098">logic programming and</a><br />     <a href="book-Z-H-29.html#%_idx_5106">Microshaft personnel</a><br />     <a href="book-Z-H-16.html#%_idx_2202">as set of records</a><br /> <a href="book-Z-H-31.html#%_idx_5468">data paths for register machine</a><br />     <a href="book-Z-H-31.html#%_idx_5478">data-path diagram</a><br /> data types <br />     <a href="book-Z-H-18.html#%_idx_2552">in Lisp</a><br />     <a href="book-Z-H-24.html#%_idx_4098">in strongly typed languages</a><br /> <a href="book-Z-H-17.html#%_idx_2298">data-directed programming</a>, <a href="book-Z-H-17.html#%_idx_2424">[2]</a><br />     <a href="book-Z-H-26.html#%_idx_4244">case analysis vs.</a><br />     <a href="book-Z-H-26.html#%_idx_4388">in metacircular evaluator</a><br />     <a href="book-Z-H-29.html#%_idx_5308">in query interpreter</a><br /> <a href="book-Z-H-18.html#%_idx_2720">data-directed recursion</a><br /> <a href="book-Z-H-23.html#%_idx_3696">deadlock</a><br />     <a href="book-Z-H-23.html#%_idx_3698">avoidance</a><br />     <a href="book-Z-H-23.html#%_idx_3700">recovery</a><br /> <a href="book-Z-H-9.html#%_idx_22">debug</a><br /> <a href="book-Z-H-10.html#%_idx_542">decimal point in numbers</a><br /> <a href="book-Z-H-10.html#%_idx_492">declarative vs. imperative knowledge</a>, <a href="book-Z-H-29.html#%_idx_5030">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5070">logic programming and</a>, <a href="book-Z-H-29.html#%_idx_5256">[2]</a><br />     <a href="book-Z-H-28.html#%_idx_4816">nondeterministic computing and</a><br /> <a href="book-Z-H-16.html#%_idx_2272"><code>decode</code></a><br /> <a href="book-Z-H-10.html#%_idx_568">decomposition of program into parts</a><br /> <a href="book-Z-H-26.html#%_idx_4488">deep binding</a><br /> <a href="book-Z-H-15.html#%_idx_1692"><code>deep-reverse</code></a><br /> <a href="book-Z-H-11.html#%_idx_652">deferred operations</a><br /> <a href="book-Z-H-10.html#%_idx_224"><code>define</code> (special form)</a><br />     <a href="book-Z-H-15.html#%_idx_1650">with dotted-tail notation</a><br />     <a href="book-Z-H-21.html#%_idx_3078">environment model of</a><br />     <a href="book-Z-H-12.html#%_idx_1042"><code>lambda</code> vs.</a><br />     <a href="book-Z-H-10.html#%_idx_306">for procedures</a>, <a href="book-Z-H-12.html#%_idx_1046">[2]</a><br />     <a href="book-Z-H-26.html#%_idx_4300">syntactic sugar</a><br />     <a href="book-Z-H-10.html#%_idx_228">value of</a><br />     <a href="book-Z-H-10.html#%_idx_270">why a special form</a><br /> <code>define</code> (special form) <br />     internal, <em>see</em> internal definition <br /> <a href="book-Z-H-26.html#%_idx_4460"><code>define-variable!</code></a>, <a href="book-Z-H-26.html#%_idx_4484">[2]</a><br /> <a href="book-Z-H-12.html#%_idx_1002">definite integral</a><br />     <a href="book-Z-H-20.html#%_idx_2960">estimated with Monte Carlo simulation</a>, <a href="book-Z-H-24.html#%_idx_4142">[2]</a><br /> definition, <em>see</em> <code>define</code>; internal definition <br /> <a href="book-Z-H-26.html#%_idx_4306"><code>definition-value</code></a><br /> <a href="book-Z-H-26.html#%_idx_4304"><code>definition-variable</code></a><br /> <a href="book-Z-H-26.html#%_idx_4302"><code>definition?</code></a><br /> <a href="book-Z-H-28.html#%_idx_4898">deKleer, Johan</a>, <a href="book-Z-H-29.html#%_idx_5264">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_3768"><code>delay</code> (special form)</a><br />     <a href="book-Z-H-24.html#%_idx_4072">explicit</a><br />     <a href="book-Z-H-27.html#%_idx_4798">explicit vs. automatic</a><br />     <a href="book-Z-H-24.html#%_idx_3796">implementation using <code>lambda</code></a><br />     <a href="book-Z-H-27.html#%_idx_4768">lazy evaluation and</a><br />     <a href="book-Z-H-24.html#%_idx_3800">memoized</a>, <a href="book-Z-H-24.html#%_idx_3900">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_3786">why a special form</a><br /> <a href="book-Z-H-22.html#%_idx_3342">delay, in digital circuit</a><br /> <a href="book-Z-H-27.html#%_idx_4742"><code>delay-it</code></a><br /> <a href="book-Z-H-24.html#%_idx_4068">delayed argument</a><br /> <a href="book-Z-H-19.html#%_idx_2834">delayed evaluation</a>, <a href="book-Z-H-24.html#%_idx_3730">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_3830">assignment and</a><br />     <a href="book-Z-H-27.html#%_idx_4800">explicit vs. automatic</a><br />     <a href="book-Z-H-27.html#%_idx_4668">in lazy evaluator</a><br />     <a href="book-Z-H-24.html#%_idx_4094">normal-order evaluation and</a><br />     <a href="book-Z-H-24.html#%_idx_3826">printing and</a><br />     <a href="book-Z-H-24.html#%_idx_4056">streams and</a><br /> <a href="book-Z-H-24.html#%_idx_3772">delayed object</a><br /> <a href="book-Z-H-22.html#%_idx_3240"><code>delete-queue!</code></a>, <a href="book-Z-H-22.html#%_idx_3258">[2]</a><br /> <a href="book-Z-H-14.html#%_idx_1304"><code>denom</code></a>, <a href="book-Z-H-14.html#%_idx_1352">[2]</a><br />     <a href="book-Z-H-14.html#%_idx_1420">axiom for</a><br />     <a href="book-Z-H-14.html#%_idx_1394">reducing to lowest terms</a><br /> <a href="book-Z-H-18.html#%_idx_2726">dense polynomial</a><br /> <a href="book-Z-H-28.html#%_idx_4888">dependency-directed backtracking</a><br /> <a href="book-Z-H-23.html#%_idx_3632"><code>deposit</code> , with external serializer</a><br /> <a href="book-Z-H-20.html#%_idx_2898"><code>deposit</code> message for bank account</a><br /> <a href="book-Z-H-28.html#%_idx_4854">depth-first search</a><br /> <a href="book-Z-H-22.html#%_idx_3266">deque</a><br /> <a href="book-Z-H-12.html#%_idx_1192"><code>deriv</code> (numerical)</a><br /> <a href="book-Z-H-16.html#%_idx_2056"><code>deriv</code> (symbolic)</a><br />     <a href="book-Z-H-17.html#%_idx_2480">data-directed</a><br /> <a href="book-Z-H-12.html#%_idx_1186">derivative of a function</a><br /> <a href="book-Z-H-26.html#%_idx_4356">derived expressions in evaluator</a><br />     <a href="book-Z-H-34.html#%_idx_6116">adding to explicit-control evaluator</a><br /> <a href="book-Z-H-15.html#%_idx_1980">design, stratified</a><br /> <a href="book-Z-H-24.html#%_idx_4062">differential equation</a>, <em>see also</em> <code>solve</code> <br />     <a href="book-Z-H-24.html#%_idx_4082">second-order</a>, <a href="book-Z-H-24.html#%_idx_4084">[2]</a><br /> differentiation <br />     <a href="book-Z-H-12.html#%_idx_1190">numerical</a><br />     <a href="book-Z-H-16.html#%_idx_2048">rules for</a>, <a href="book-Z-H-16.html#%_idx_2094">[2]</a><br />     <a href="book-Z-H-16.html#%_idx_2042">symbolic</a>, <a href="book-Z-H-17.html#%_idx_2478">[2]</a><br /> <a href="book-Z-H-23.html#%_idx_3606">diffusion, simulation of</a><br /> <a href="book-Z-H-22.html#%_idx_3338">digital signal</a><br /> <a href="book-Z-H-22.html#%_idx_3328">digital-circuit simulation</a><br />     <a href="book-Z-H-22.html#%_idx_3410">agenda</a><br />     <a href="book-Z-H-22.html#%_idx_3436">agenda implementation</a><br />     <a href="book-Z-H-22.html#%_idx_3368">primitive function boxes</a><br />     <a href="book-Z-H-22.html#%_idx_3392">representing wires</a><br />     <a href="book-Z-H-22.html#%_idx_3428">sample simulation</a><br /> <a href="book-Z-H-23.html#%_idx_3658">Dijkstra, Edsger Wybe</a><br /> <a href="book-Z-H-28.html#%_idx_4932">Dinesman, Howard P.</a><br /> <a href="book-Z-H-11.html#%_idx_882">Diophantus's <em>Arithmetic</em>, Fermat's copy of</a><br /> <a href="book-Z-H-29.html#%_idx_5324"><code>disjoin</code></a><br /> dispatching <br />     <a href="book-Z-H-17.html#%_idx_2494">comparing different styles</a><br />     <a href="book-Z-H-17.html#%_idx_2430">on type</a>, <em>see also</em> data-directed programming <br /> <a href="book-Z-H-11.html#%_idx_940"><code>display</code> (primitive procedure)</a>, <a href="book-Z-H-14.html#%_idx_1358">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_3766"><code>display-line</code></a><br /> <a href="book-Z-H-24.html#%_idx_3764"><code>display-stream</code></a><br /> <a href="book-Z-H-28.html#%_idx_4934"><code>distinct?</code></a><br /> <a href="book-Z-H-18.html#%_idx_2510"><code>div</code> (generic)</a><br /> <a href="book-Z-H-17.html#%_idx_2318"><code>div-complex</code></a><br /> <a href="book-Z-H-14.html#%_idx_1500"><code>div-interval</code></a><br />     <a href="book-Z-H-14.html#%_idx_1512">division by zero</a><br /> <a href="book-Z-H-18.html#%_idx_2760"><code>div-poly</code></a><br /> <a href="book-Z-H-14.html#%_idx_1314"><code>div-rat</code></a><br /> <a href="book-Z-H-24.html#%_idx_3938"><code>div-series</code></a><br /> <a href="book-Z-H-18.html#%_idx_2762"><code>div-terms</code></a><br /> <a href="book-Z-H-11.html#%_idx_864"><code>divides?</code></a><br /> <a href="book-Z-H-24.html#%_idx_3838"><code>divisible?</code></a><br /> <a href="book-Z-H-10.html#%_idx_532">division of integers</a><br /> <a href="book-Z-H-23.html#%_idx_3690">dog, perfectly rational, behavior of</a><br /> <a href="book-Z-H-34.html#%_idx_6190">DOS/Windows</a><br /> <a href="book-Z-H-15.html#%_idx_1802"><code>dot-product</code></a><br /> dotted-tail notation <br />     <a href="book-Z-H-15.html#%_idx_1648">for procedure parameters</a>, <a href="book-Z-H-17.html#%_idx_2456">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5116">in query pattern</a>, <a href="book-Z-H-29.html#%_idx_5350">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5162">in query-language rule</a><br />     <a href="book-Z-H-29.html#%_idx_5354"><code>read</code> and</a><br /> <a href="book-Z-H-28.html#%_idx_4890">Doyle, Jon</a><br /> <a href="book-Z-H-15.html#%_idx_1948"><code>draw-line</code></a><br /> driver loop <br />     <a href="book-Z-H-34.html#%_idx_6136">in explicit-control evaluator</a><br />     <a href="book-Z-H-27.html#%_idx_4732">in lazy evaluator</a><br />     <a href="book-Z-H-26.html#%_idx_4518">in metacircular evaluator</a><br />     <a href="book-Z-H-28.html#%_idx_4908">in nondeterministic evaluator</a>, <a href="book-Z-H-28.html#%_idx_5018">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5232">in query interpreter</a>, <a href="book-Z-H-29.html#%_idx_5288">[2]</a><br /> <code>driver-loop</code> <br />     <a href="book-Z-H-27.html#%_idx_4736">for lazy evaluator</a><br />     <a href="book-Z-H-26.html#%_idx_4532">for metacircular evaluator</a><br />     <a href="book-Z-H-28.html#%_idx_5024">for nondeterministic evaluator</a></p>
<p></p>
<p></p>
<p><br /> <em>e</em> <br />     <a href="book-Z-H-12.html#%_idx_1148">as continued fraction</a><br />     <a href="book-Z-H-24.html#%_idx_4078">as solution to differential equation</a><br /> <a href="book-Z-H-24.html#%_idx_3914"><em>e</em><sup><em>x</em></sup>, power series for</a><br /> <a href="book-Z-H-24.html#%_idx_3848">Earth, measuring circumference of</a><br /> <a href="book-Z-H-15.html#%_idx_1918"><code>edge1-frame</code></a><br /> <a href="book-Z-H-15.html#%_idx_1920"><code>edge2-frame</code></a><br /> efficiency, <em>see also</em> order of growth, <em>see also</em> order of growth <br />     <a href="book-Z-H-35.html#%_idx_6230">of compilation</a><br />     <a href="book-Z-H-29.html#%_idx_5188">of data-base access</a><br />     <a href="book-Z-H-26.html#%_idx_4642">of evaluation</a><br />     <a href="book-Z-H-9.html#%_idx_100">of Lisp</a><br />     <a href="book-Z-H-29.html#%_idx_5202">of query processing</a><br />     <a href="book-Z-H-11.html#%_idx_732">of tree-recursive process</a><br /> <a href="book-Z-H-23.html#%_idx_3716">EIEIO</a><br /> <a href="book-Z-H-15.html#%_idx_1846">eight-queens puzzle</a>, <a href="book-Z-H-28.html#%_idx_4946">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_4032">electrical circuits, modeled with streams</a>, <a href="book-Z-H-24.html#%_idx_4090">[2]</a><br /> <a href="book-Z-H-16.html#%_idx_2104"><code>element-of-set?</code></a><br />     <a href="book-Z-H-16.html#%_idx_2160">binary-tree representation</a><br />     <a href="book-Z-H-16.html#%_idx_2128">ordered-list representation</a><br />     <a href="book-Z-H-16.html#%_idx_2116">unordered-list representation</a><br /> <a href="book-Z-H-10.html#%_idx_416"><code>else</code> (special symbol in <code>cond</code>)</a><br /> <a href="book-Z-H-27.html#%_idx_4672">embedded language, language design using</a><br /> <a href="book-Z-H-15.html#%_idx_1594">empty list</a><br />     <a href="book-Z-H-16.html#%_idx_2018">denoted as <code>'()</code></a><br />     <a href="book-Z-H-15.html#%_idx_1618">recognizing with <code>null?</code></a><br /> <a href="book-Z-H-24.html#%_idx_3744">empty stream</a><br /> <a href="book-Z-H-22.html#%_idx_3414"><code>empty-agenda?</code></a>, <a href="book-Z-H-22.html#%_idx_3470">[2]</a><br /> <a href="book-Z-H-34.html#%_idx_6060"><code>empty-arglist</code></a><br /> <a href="book-Z-H-35.html#%_idx_6268"><code>empty-instruction-sequence</code></a><br /> <a href="book-Z-H-22.html#%_idx_3234"><code>empty-queue?</code></a>, <a href="book-Z-H-22.html#%_idx_3250">[2]</a><br /> <a href="book-Z-H-18.html#%_idx_2696"><code>empty-termlist?</code></a>, <a href="book-Z-H-18.html#%_idx_2742">[2]</a><br /> <a href="book-Z-H-20.html#%_idx_2886">encapsulated name</a><br /> <a href="book-Z-H-21.html#%_idx_3044">enclosing environment</a><br /> <a href="book-Z-H-26.html#%_idx_4466"><code>enclosing-environment</code></a><br /> <a href="book-Z-H-16.html#%_idx_2278"><code>encode</code></a><br /> <a href="book-Z-H-15.html#%_idx_1564">end-of-list marker</a><br /> <a href="book-Z-H-14.html#%_idx_1402"><code>end-segment</code></a>, <a href="book-Z-H-15.html#%_idx_1958">[2]</a><br /> <a href="book-Z-H-35.html#%_idx_6294"><code>end-with-linkage</code></a><br /> <a href="book-Z-H-11.html#%_idx_916">engineering vs. mathematics</a><br /> <a href="book-Z-H-16.html#%_idx_2152"><code>entry</code></a><br /> <a href="book-Z-H-15.html#%_idx_1744"><code>enumerate-interval</code></a><br /> <a href="book-Z-H-15.html#%_idx_1750"><code>enumerate-tree</code></a><br /> <a href="book-Z-H-15.html#%_idx_1730">enumerator</a><br /> <a href="book-Z-H-34.html#%_idx_6020"><code>env</code> register</a><br /> <a href="book-Z-H-10.html#%_idx_240">environment</a>, <a href="book-Z-H-21.html#%_idx_3038">[2]</a><br />     compile-time, <em>see</em> compile-time environment <br />     <a href="book-Z-H-10.html#%_idx_268">as context for evaluation</a><br />     <a href="book-Z-H-21.html#%_idx_3046">enclosing</a><br />     global, <em>see</em> global environment <br />     <a href="book-Z-H-10.html#%_idx_622">lexical scoping and</a><br />     <a href="book-Z-H-29.html#%_idx_5450">in query interpreter</a><br />     <a href="book-Z-H-29.html#%_idx_5444">renaming vs.</a><br /> <a href="book-Z-H-19.html#%_idx_2832">environment model of evaluation</a>, <a href="book-Z-H-21.html#%_idx_3034">[2]</a><br />     <a href="book-Z-H-21.html#%_idx_3058">environment structure</a><br />     <a href="book-Z-H-21.html#%_idx_3114">internal definitions</a><br />     <a href="book-Z-H-21.html#%_idx_3102">local state</a><br />     <a href="book-Z-H-21.html#%_idx_3120">message passing</a><br />     <a href="book-Z-H-26.html#%_idx_4216">metacircular evaluator and</a><br />     <a href="book-Z-H-21.html#%_idx_3082">procedure-application example</a><br />     <a href="book-Z-H-21.html#%_idx_3064">rules for evaluation</a><br />     <a href="book-Z-H-21.html#%_idx_3094">tail recursion and</a><br /> <a href="book-Z-H-16.html#%_idx_2026"><code>eq?</code> (primitive procedure)</a><br />     <a href="book-Z-H-22.html#%_idx_3188">for arbitrary objects</a><br />     <a href="book-Z-H-22.html#%_idx_3186">as equality of pointers</a>, <a href="book-Z-H-33.html#%_idx_5868">[2]</a><br />     <a href="book-Z-H-33.html#%_idx_5884">implementation for symbols</a><br />     <a href="book-Z-H-33.html#%_idx_5874">numerical equality and</a><br /> <a href="book-Z-H-18.html#%_idx_2564"><code>equ?</code> (generic predicate)</a><br /> <a href="book-Z-H-14.html#%_idx_1316"><code>equal-rat?</code></a><br /> <a href="book-Z-H-16.html#%_idx_2032"><code>equal?</code></a><br /> equality <br />     <a href="book-Z-H-18.html#%_idx_2566">in generic arithmetic system</a><br />     <a href="book-Z-H-16.html#%_idx_2034">of lists</a><br />     <a href="book-Z-H-10.html#%_idx_408">of numbers</a>, <a href="book-Z-H-16.html#%_idx_2040">[2]</a>, <a href="book-Z-H-33.html#%_idx_5876">[3]</a><br />     <a href="book-Z-H-20.html#%_idx_2994">referential transparency and</a><br />     <a href="book-Z-H-16.html#%_idx_2022">of symbols</a><br /> equation, solving, <em>see</em> half-interval method; Newton's method; <code>solve</code> <br /> <a href="book-Z-H-24.html#%_idx_3846">Eratosthenes</a><br /> <a href="book-Z-H-12.html#%_idx_1088"><code>error</code> (primitive procedure)</a><br /> error handling <br />     <a href="book-Z-H-35.html#%_idx_6494">in compiled code</a><br />     <a href="book-Z-H-34.html#%_idx_6148">in explicit-control evaluator</a>, <a href="book-Z-H-34.html#%_idx_6182">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1858">Escher, Maurits Cornelis</a><br /> <a href="book-Z-H-20.html#%_idx_2962"><code>estimate-integral</code></a><br /> <a href="book-Z-H-20.html#%_idx_2948"><code>estimate-pi</code></a>, <a href="book-Z-H-20.html#%_idx_2954">[2]</a><br /> <a href="book-Z-H-11.html#%_idx_836">Euclid's Algorithm</a>, <a href="book-Z-H-31.html#%_idx_5476">[2]</a>, <em>see also</em> greatest common divisor <br />     <a href="book-Z-H-11.html#%_idx_844">order of growth</a><br />     <a href="book-Z-H-18.html#%_idx_2786">for polynomials</a><br /> <a href="book-Z-H-11.html#%_idx_838">Euclid's <em>Elements</em></a><br /> <a href="book-Z-H-24.html#%_idx_3876">Euclid's proof of infinite number of primes</a><br /> <a href="book-Z-H-18.html#%_idx_2790">Euclidean ring</a><br /> <a href="book-Z-H-12.html#%_idx_1144">Euler, Leonhard</a><br />     <a href="book-Z-H-11.html#%_idx_878">proof of Fermat's Little Theorem</a><br />     <a href="book-Z-H-24.html#%_idx_3968">series accelerator</a><br /> <a href="book-Z-H-24.html#%_idx_3970"><code>euler-transform</code></a><br /> <a href="book-Z-H-34.html#%_idx_6056"><code>ev-application</code></a><br /> <a href="book-Z-H-34.html#%_idx_6110"><code>ev-assignment</code></a><br /> <a href="book-Z-H-34.html#%_idx_6084"><code>ev-begin</code></a><br /> <a href="book-Z-H-34.html#%_idx_6114"><code>ev-definition</code></a><br /> <a href="book-Z-H-34.html#%_idx_6106"><code>ev-if</code></a><br /> <a href="book-Z-H-34.html#%_idx_6044"><code>ev-lambda</code></a><br /> <a href="book-Z-H-34.html#%_idx_6042"><code>ev-quoted</code></a><br /> <a href="book-Z-H-34.html#%_idx_6038"><code>ev-self-eval</code></a><br /> <code>ev-sequence</code> <br />     <a href="book-Z-H-34.html#%_idx_6086">with tail recursion</a><br />     <a href="book-Z-H-34.html#%_idx_6100">without tail recursion</a><br /> <a href="book-Z-H-34.html#%_idx_6040"><code>ev-variable</code></a><br /> <a href="book-Z-H-27.html#%_idx_4720"><code>eval</code> (lazy)</a><br /> <a href="book-Z-H-26.html#%_idx_4230"><code>eval</code> (metacircular)</a>, <a href="book-Z-H-26.html#%_idx_4242">[2]</a><br />     <a href="book-Z-H-26.html#%_idx_4654">analyzing version</a><br />     <a href="book-Z-H-26.html#%_idx_4392">data-directed</a><br />     <a href="book-Z-H-26.html#%_idx_4576">primitive <code>eval</code> vs.</a><br /> <a href="book-Z-H-26.html#%_idx_4572"><code>eval</code> (primitive procedure)</a><br />     <a href="book-Z-H-26.html#%_idx_4584">MIT Scheme</a><br />     <a href="book-Z-H-29.html#%_idx_5334">used in query interpreter</a><br /> <a href="book-Z-H-26.html#%_idx_4266"><code>eval-assignment</code></a><br /> <a href="book-Z-H-26.html#%_idx_4268"><code>eval-definition</code></a><br /> <a href="book-Z-H-34.html#%_idx_6034"><code>eval-dispatch</code></a><br /> <a href="book-Z-H-27.html#%_idx_4730"><code>eval-if</code> (lazy)</a><br /> <a href="book-Z-H-26.html#%_idx_4258"><code>eval-if</code> (metacircular)</a><br /> <a href="book-Z-H-26.html#%_idx_4264"><code>eval-sequence</code></a><br /> evaluation <br />     applicative-order, <em>see</em> applicative-order evaluation <br />     delayed, <em>see</em> delayed evaluation <br />     environment model of, <em>see</em> environment model of evaluation <br />     <a href="book-Z-H-34.html#%_idx_6132">models of</a><br />     normal-order, <em>see</em> normal-order evaluation <br />     <a href="book-Z-H-10.html#%_idx_246">of a combination</a><br />     <a href="book-Z-H-10.html#%_idx_452">of <code>and</code></a><br />     <a href="book-Z-H-10.html#%_idx_386">of <code>cond</code></a><br />     <a href="book-Z-H-10.html#%_idx_430">of <code>if</code></a><br />     <a href="book-Z-H-10.html#%_idx_460">of <code>or</code></a><br />     <a href="book-Z-H-10.html#%_idx_266">of primitive expressions</a><br />     <a href="book-Z-H-10.html#%_idx_274">of special forms</a><br />     order of subexpression evaluation, <em>see</em> order of evaluation <br />     substitution model of, <em>see</em> substitution model of procedure application <br /> <a href="book-Z-H-25.html#%_idx_4198">evaluator</a>, <em>see also</em> interpreter <br />     <a href="book-Z-H-26.html#%_idx_4548">as abstract machine</a><br />     <a href="book-Z-H-26.html#%_idx_4214">metacircular</a><br />     <a href="book-Z-H-26.html#%_idx_4550">as universal machine</a><br /> evaluators, <em>see</em> metacircular evaluator; analyzing evaluator; lazy evaluator; nondeterministic evaluator; query interpreter; explicit-control evaluator <br /> <a href="book-Z-H-15.html#%_idx_1724"><code>even-fibs</code></a>, <a href="book-Z-H-15.html#%_idx_1754">[2]</a><br /> <a href="book-Z-H-11.html#%_idx_804"><code>even?</code></a><br /> evening star, <em>see</em> Venus <br /> <a href="book-Z-H-22.html#%_idx_3330">event-driven simulation</a><br /> <a href="book-Z-H-34.html#%_idx_6066">evlis tail recursion</a><br /> <a href="book-Z-H-10.html#%_idx_528">exact integer</a><br /> <a href="book-Z-H-23.html#%_idx_3628"><code>exchange</code></a><br /> <a href="book-Z-H-20.html#%_idx_2870">exclamation point in names</a><br /> <a href="book-Z-H-32.html#%_idx_5670"><code>execute</code></a><br /> <code>execute-application</code> <br />     <a href="book-Z-H-26.html#%_idx_4660">metacircular</a><br />     <a href="book-Z-H-28.html#%_idx_5012">nondeterministic</a><br /> execution procedure <br />     <a href="book-Z-H-26.html#%_idx_4652">in analyzing evaluator</a><br />     <a href="book-Z-H-28.html#%_idx_4982">in nondeterministic evaluator</a>, <a href="book-Z-H-28.html#%_idx_4986">[2]</a>, <a href="book-Z-H-28.html#%_idx_5002">[3]</a><br />     <a href="book-Z-H-32.html#%_idx_5668">in register-machine simulator</a>, <a href="book-Z-H-32.html#%_idx_5716">[2]</a><br /> <a href="book-Z-H-34.html#%_idx_6018"><code>exp</code> register</a><br /> <a href="book-Z-H-26.html#%_idx_4372"><code>expand-clauses</code></a><br /> <a href="book-Z-H-34.html#%_idx_5996">explicit-control evaluator for Scheme</a><br />     <a href="book-Z-H-34.html#%_idx_6108">assignments</a><br />     <a href="book-Z-H-34.html#%_idx_6048">combinations</a><br />     <a href="book-Z-H-34.html#%_idx_6078">compound procedures</a><br />     <a href="book-Z-H-34.html#%_idx_6104">conditionals</a><br />     <a href="book-Z-H-34.html#%_idx_6032">controller</a><br />     <a href="book-Z-H-34.html#%_idx_6006">data paths</a><br />     <a href="book-Z-H-34.html#%_idx_6112">definitions</a><br />     <a href="book-Z-H-34.html#%_idx_6118">derived expressions</a><br />     <a href="book-Z-H-34.html#%_idx_6134">driver loop</a><br />     <a href="book-Z-H-34.html#%_idx_6150">error handling</a>, <a href="book-Z-H-34.html#%_idx_6184">[2]</a><br />     <a href="book-Z-H-34.html#%_idx_6036">expressions with no subexpressions to evaluate</a><br />     <a href="book-Z-H-35.html#%_idx_6208">as machine-language program</a><br />     <a href="book-Z-H-34.html#%_idx_6158">machine model</a><br />     <a href="book-Z-H-35.html#%_idx_6470">modified for compiled code</a><br />     <a href="book-Z-H-34.html#%_idx_6160">monitoring performance (stack use)</a><br />     <a href="book-Z-H-34.html#%_idx_6124">normal-order evaluation</a><br />     <a href="book-Z-H-34.html#%_idx_6058">operand evaluation</a><br />     <a href="book-Z-H-34.html#%_idx_6008">operations</a><br />     <a href="book-Z-H-35.html#%_idx_6276">optimizations (additional)</a><br />     <a href="book-Z-H-34.html#%_idx_6074">primitive procedures</a><br />     <a href="book-Z-H-34.html#%_idx_6046">procedure application</a><br />     <a href="book-Z-H-34.html#%_idx_6016">registers</a><br />     <a href="book-Z-H-34.html#%_idx_6128">running</a><br />     <a href="book-Z-H-34.html#%_idx_6082">sequences of expressions</a><br />     <a href="book-Z-H-34.html#%_idx_6120">special forms (additional)</a>, <a href="book-Z-H-34.html#%_idx_6122">[2]</a><br />     <a href="book-Z-H-34.html#%_idx_6050">stack usage</a><br />     <a href="book-Z-H-34.html#%_idx_6088">tail recursion</a>, <a href="book-Z-H-34.html#%_idx_6166">[2]</a>, <a href="book-Z-H-34.html#%_idx_6174">[3]</a><br />     <a href="book-Z-H-35.html#%_idx_6198">as universal machine</a><br /> <a href="book-Z-H-11.html#%_idx_898"><code>expmod</code></a>, <a href="book-Z-H-11.html#%_idx_944">[2]</a>, <a href="book-Z-H-11.html#%_idx_946">[3]</a><br /> <a href="book-Z-H-11.html#%_idx_782">exponential growth</a><br />     <a href="book-Z-H-11.html#%_idx_722">of tree-recursive Fibonacci-number computation</a><br /> <a href="book-Z-H-11.html#%_idx_790">exponentiation</a><br />     <a href="book-Z-H-11.html#%_idx_896">modulo <em>n</em></a><br /> expression, <em>see also</em> compound expression; primitive expression <br />     algebraic, <em>see</em> algebraic expressions <br />     <a href="book-Z-H-26.html#%_idx_4238">self-evaluating</a><br />     <a href="book-Z-H-13.html#%_idx_1272">symbolic</a>, <em>see also</em> symbol(s) <br /> <a href="book-Z-H-22.html#%_idx_3574">expression-oriented vs. imperative programming style</a><br /> <code>expt</code> <br />     <a href="book-Z-H-11.html#%_idx_794">linear iterative version</a><br />     <a href="book-Z-H-11.html#%_idx_792">linear recursive version</a><br />     <a href="book-Z-H-31.html#%_idx_5590">register machine for</a><br /> <a href="book-Z-H-26.html#%_idx_4458"><code>extend-environment</code></a>, <a href="book-Z-H-26.html#%_idx_4478">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5348"><code>extend-if-consistent</code></a><br /> <a href="book-Z-H-29.html#%_idx_5370"><code>extend-if-possible</code></a><br /> <a href="book-Z-H-35.html#%_idx_6482"><code>external-entry</code></a><br /> <a href="book-Z-H-32.html#%_idx_5688"><code>extract-labels</code></a>, <a href="book-Z-H-32.html#%_idx_5692">[2]</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-10.html#%_idx_380"><code>#f</code></a><br /> <a href="book-Z-H-11.html#%_idx_640">factorial</a>, <em>see also</em> <code>factorial</code> <br />     <a href="book-Z-H-24.html#%_idx_3890">infinite stream</a><br />     <a href="book-Z-H-26.html#%_idx_4622">with <code>letrec</code></a><br />     <a href="book-Z-H-26.html#%_idx_4626">without <code>letrec</code> or <code>define</code></a><br /> <code>factorial</code> <br />     <a href="book-Z-H-26.html#%_idx_4546">as an abstract machine</a><br />     <a href="book-Z-H-35.html#%_idx_6406">compilation of</a>, <a href="book-Z-H-35.html#%_idx_6412">[2]</a><br />     <a href="book-Z-H-21.html#%_idx_3088">environment structure in evaluating</a><br />     <a href="book-Z-H-11.html#%_idx_646">linear iterative version</a><br />     <a href="book-Z-H-11.html#%_idx_642">linear recursive version</a><br />     <a href="book-Z-H-31.html#%_idx_5490">register machine for (iterative)</a>, <a href="book-Z-H-31.html#%_idx_5532">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5572">register machine for (recursive)</a>, <a href="book-Z-H-31.html#%_idx_5586">[2]</a><br />     <a href="book-Z-H-35.html#%_idx_6508">stack usage, compiled</a><br />     <a href="book-Z-H-34.html#%_idx_6170">stack usage, interpreted</a>, <a href="book-Z-H-34.html#%_idx_6172">[2]</a><br />     <a href="book-Z-H-32.html#%_idx_5814">stack usage, register machine</a><br />     <a href="book-Z-H-20.html#%_idx_3018">with assignment</a><br />     <a href="book-Z-H-12.html#%_idx_1012">with higher-order procedures</a><br /> <a href="book-Z-H-28.html#%_idx_4990">failure continuation (nondeterministic evaluator)</a>, <a href="book-Z-H-28.html#%_idx_4998">[2]</a><br />     <a href="book-Z-H-28.html#%_idx_5014">constructed by <code>amb</code></a><br />     <a href="book-Z-H-28.html#%_idx_5008">constructed by assignment</a><br />     <a href="book-Z-H-28.html#%_idx_5020">constructed by driver loop</a><br /> <a href="book-Z-H-28.html#%_idx_4826">failure, in nondeterministic computation</a><br />     <a href="book-Z-H-28.html#%_idx_5006">bug vs.</a><br />     <a href="book-Z-H-28.html#%_idx_4840">searching and</a><br /> <a href="book-Z-H-10.html#%_idx_370">false</a><br /> <a href="book-Z-H-10.html#%_idx_382"><code>false</code></a><br /> <a href="book-Z-H-26.html#%_idx_4436"><code>false?</code></a><br /> <a href="book-Z-H-11.html#%_idx_798"><code>fast-expt</code></a><br /> <a href="book-Z-H-11.html#%_idx_906"><code>fast-prime?</code></a><br /> <a href="book-Z-H-24.html#%_idx_4058">feedback loop, modeled with streams</a><br /> <a href="book-Z-H-26.html#%_idx_4648">Feeley, Marc</a><br /> <a href="book-Z-H-29.html#%_idx_5086">Feigenbaum, Edward</a><br /> <a href="book-Z-H-33.html#%_idx_5942">Fenichel, Robert</a><br /> <a href="book-Z-H-11.html#%_idx_872">Fermat, Pierre de</a><br /> <a href="book-Z-H-11.html#%_idx_868">Fermat test for primality</a><br />     <a href="book-Z-H-11.html#%_idx_952">variant of</a><br /> <a href="book-Z-H-11.html#%_idx_886">Fermat's Little Theorem</a><br />     <a href="book-Z-H-11.html#%_idx_960">alternate form</a><br />     <a href="book-Z-H-11.html#%_idx_876">proof</a><br /> <a href="book-Z-H-11.html#%_idx_904"><code>fermat-test</code></a><br /> <a href="book-Z-H-29.html#%_idx_5378"><code>fetch-assertions</code></a><br /> <a href="book-Z-H-29.html#%_idx_5380"><code>fetch-rules</code></a><br /> <code>fib</code> <br />     <a href="book-Z-H-11.html#%_idx_726">linear iterative version</a><br />     <a href="book-Z-H-11.html#%_idx_828">logarithmic version</a><br />     <a href="book-Z-H-31.html#%_idx_5584">register machine for (tree-recursive)</a>, <a href="book-Z-H-31.html#%_idx_5588">[2]</a><br />     <a href="book-Z-H-35.html#%_idx_6512">stack usage, compiled</a><br />     <a href="book-Z-H-34.html#%_idx_6178">stack usage, interpreted</a><br />     <a href="book-Z-H-11.html#%_idx_720">tree-recursive version</a>, <a href="book-Z-H-34.html#%_idx_6180">[2]</a><br />     <a href="book-Z-H-22.html#%_idx_3322">with memoization</a><br />     <a href="book-Z-H-26.html#%_idx_4422">with named <code>let</code></a><br /> <a href="book-Z-H-11.html#%_idx_718">Fibonacci numbers</a>, <em>see also</em> <code>fib</code> <br />     <a href="book-Z-H-11.html#%_idx_846">Euclid's GCD algorithm and</a><br />     infinite stream of, <em>see</em> <code>fibs</code> <br /> <a href="book-Z-H-24.html#%_idx_3840"><code>fibs</code> (infinite stream)</a><br />     <a href="book-Z-H-24.html#%_idx_3868">implicit definition</a><br /> <a href="book-Z-H-22.html#%_idx_3226">FIFO buffer</a><br /> <a href="book-Z-H-12.html#%_idx_1026">filter</a>, <a href="book-Z-H-15.html#%_idx_1732">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1740"><code>filter</code></a><br /> <a href="book-Z-H-12.html#%_idx_1024"><code>filtered-accumulate</code></a><br /> <a href="book-Z-H-29.html#%_idx_5344"><code>find-assertions</code></a><br /> <a href="book-Z-H-11.html#%_idx_862"><code>find-divisor</code></a><br /> <a href="book-Z-H-22.html#%_idx_3416"><code>first-agenda-item</code></a>, <a href="book-Z-H-22.html#%_idx_3480">[2]</a><br /> <a href="book-Z-H-12.html#%_idx_1218">first-class elements in language</a><br /> <a href="book-Z-H-26.html#%_idx_4332"><code>first-exp</code></a><br /> <a href="book-Z-H-26.html#%_idx_4468"><code>first-frame</code></a><br /> <a href="book-Z-H-26.html#%_idx_4348"><code>first-operand</code></a><br /> <a href="book-Z-H-22.html#%_idx_3466"><code>first-segment</code></a><br /> <a href="book-Z-H-18.html#%_idx_2698"><code>first-term</code></a>, <a href="book-Z-H-18.html#%_idx_2738">[2]</a><br /> <a href="book-Z-H-12.html#%_idx_1096">fixed point</a><br />     <a href="book-Z-H-12.html#%_idx_1106">computing with calculator</a><br />     <a href="book-Z-H-12.html#%_idx_1102">of cosine</a><br />     <a href="book-Z-H-12.html#%_idx_1174">cube root as</a><br />     <a href="book-Z-H-12.html#%_idx_1240">fourth root as</a><br />     <a href="book-Z-H-12.html#%_idx_1132">golden ratio as</a><br />     <a href="book-Z-H-12.html#%_idx_1252">as iterative improvement</a><br />     <a href="book-Z-H-12.html#%_idx_1180">in Newton's method</a><br />     <a href="book-Z-H-12.html#%_idx_1244"><em>n</em>th root as</a><br />     <a href="book-Z-H-12.html#%_idx_1120">square root as</a>, <a href="book-Z-H-12.html#%_idx_1168">[2]</a>, <a href="book-Z-H-12.html#%_idx_1208">[3]</a><br />     <a href="book-Z-H-12.html#%_idx_1204">of transformed function</a><br />     <a href="book-Z-H-29.html#%_idx_5366">unification and</a><br /> <a href="book-Z-H-16.html#%_idx_2220">fixed-length code</a><br /> <a href="book-Z-H-12.html#%_idx_1100"><code>fixed-point</code></a><br />     <a href="book-Z-H-12.html#%_idx_1250">as iterative improvement</a><br /> <a href="book-Z-H-12.html#%_idx_1206"><code>fixed-point-of-transform</code></a><br /> <a href="book-Z-H-32.html#%_idx_5660"><code>flag</code> register</a><br /> <a href="book-Z-H-15.html#%_idx_1826"><code>flatmap</code></a><br /> <a href="book-Z-H-29.html#%_idx_5392"><code>flatten-stream</code></a><br /> <a href="book-Z-H-15.html#%_idx_1884"><code>flip-horiz</code></a>, <a href="book-Z-H-15.html#%_idx_1974">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1882"><code>flip-vert</code></a>, <a href="book-Z-H-15.html#%_idx_1964">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1888"><code>flipped-pairs</code></a>, <a href="book-Z-H-15.html#%_idx_1902">[2]</a>, <a href="book-Z-H-15.html#%_idx_1904">[3]</a><br /> <a href="book-Z-H-28.html#%_idx_4862">Floyd, Robert</a><br /> <a href="book-Z-H-15.html#%_idx_1814"><code>fold-left</code></a><br /> <a href="book-Z-H-15.html#%_idx_1812"><code>fold-right</code></a><br /> <a href="book-Z-H-15.html#%_idx_1670"><code>for-each</code></a>, <a href="book-Z-H-27.html#%_idx_4750">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3548"><code>for-each-except</code></a><br /> <a href="book-Z-H-28.html#%_idx_4896">Forbus, Kenneth D.</a><br /> <a href="book-Z-H-24.html#%_idx_3774"><code>force</code></a>, <a href="book-Z-H-24.html#%_idx_3798">[2]</a><br />     <a href="book-Z-H-27.html#%_idx_4708">forcing a thunk vs.</a><br /> <a href="book-Z-H-27.html#%_idx_4704">force a thunk</a><br /> <a href="book-Z-H-27.html#%_idx_4740"><code>force-it</code></a><br />     <a href="book-Z-H-27.html#%_idx_4748">memoized version</a><br /> <a href="book-Z-H-22.html#%_idx_3528"><code>forget-value!</code></a>, <a href="book-Z-H-22.html#%_idx_3556">[2]</a><br /> <a href="book-Z-H-10.html#%_idx_320">formal parameters</a><br />     <a href="book-Z-H-10.html#%_idx_580">names of</a><br />     <a href="book-Z-H-10.html#%_idx_598">scope of</a><br /> <a href="book-Z-H-10.html#%_idx_200">formatting input expressions</a><br /> <a href="book-Z-H-9.html#%_idx_40">Fortran</a>, <a href="book-Z-H-15.html#%_idx_1762">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_4168">inventor of</a><br />     <a href="book-Z-H-15.html#%_idx_1544">restrictions on compound data</a><br /> <a href="book-Z-H-33.html#%_idx_5988">forwarding address</a><br /> <a href="book-Z-H-12.html#%_idx_1238">fourth root, as fixed point</a><br /> fraction, <em>see</em> rational number(s) <br /> <a href="book-Z-H-21.html#%_idx_3040">frame (environment model)</a><br />     <a href="book-Z-H-21.html#%_idx_3098">as repository of local state</a><br />     <a href="book-Z-H-21.html#%_idx_3050">global</a><br /> <a href="book-Z-H-15.html#%_idx_1864">frame (picture language)</a>, <a href="book-Z-H-15.html#%_idx_1910">[2]</a><br />     <a href="book-Z-H-15.html#%_idx_1924">coordinate map</a><br /> <a href="book-Z-H-29.html#%_idx_5180">frame (query interpreter)</a>, <em>see also</em> pattern matching; unification <br />     <a href="book-Z-H-29.html#%_idx_5416">representation</a><br /> <a href="book-Z-H-15.html#%_idx_1926"><code>frame-coord-map</code></a><br /> <a href="book-Z-H-26.html#%_idx_4474"><code>frame-values</code></a><br /> <a href="book-Z-H-26.html#%_idx_4472"><code>frame-variables</code></a><br /> <a href="book-Z-H-34.html#%_idx_6052">framed-stack discipline</a><br /> <a href="book-Z-H-9.html#%_idx_74">Franz Lisp</a><br /> <a href="book-Z-H-33.html#%_idx_5906"><code>free</code> register</a>, <a href="book-Z-H-33.html#%_idx_5976">[2]</a><br /> <a href="book-Z-H-33.html#%_idx_5908">free list</a><br /> <a href="book-Z-H-10.html#%_idx_590">free variable</a><br />     <a href="book-Z-H-10.html#%_idx_608">capturing</a><br />     <a href="book-Z-H-10.html#%_idx_618">in internal definition</a><br /> <a href="book-Z-H-24.html#%_idx_3812">Friedman, Daniel P.</a>, <a href="book-Z-H-25.html#%_idx_4204">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1696"><code>fringe</code></a><br />     <a href="book-Z-H-15.html#%_idx_1746">as a tree enumeration</a><br /> <a href="book-Z-H-22.html#%_idx_3242"><code>front-ptr</code></a><br /> <a href="book-Z-H-22.html#%_idx_3236"><code>front-queue</code></a>, <a href="book-Z-H-22.html#%_idx_3254">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3362">full-adder</a><br />     <a href="book-Z-H-22.html#%_idx_3366"><code>full-adder</code></a><br /> function (mathematical) <br />     <a href="book-Z-H-12.html#%_idx_1124"><img src="book-Z-G-D-17.gif" /> notation for</a><br />     <a href="book-Z-H-11.html#%_idx_710">Ackermann's</a><br />     <a href="book-Z-H-12.html#%_idx_1228">composition of</a><br />     <a href="book-Z-H-12.html#%_idx_1188">derivative of</a><br />     <a href="book-Z-H-12.html#%_idx_1098">fixed point of</a><br />     <a href="book-Z-H-10.html#%_idx_490">procedure vs.</a><br />     <a href="book-Z-H-18.html#%_idx_2778">rational</a><br />     <a href="book-Z-H-12.html#%_idx_1230">repeated application of</a><br />     <a href="book-Z-H-12.html#%_idx_1232">smoothing of</a><br /> <a href="book-Z-H-22.html#%_idx_3340">function box, in digital circuit</a><br /> <a href="book-Z-H-20.html#%_idx_2978">functional programming</a>, <a href="book-Z-H-24.html#%_idx_4118">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_4164">concurrency and</a><br />     <a href="book-Z-H-24.html#%_idx_4160">functional programming languages</a><br />     <a href="book-Z-H-24.html#%_idx_4146">time and</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-26.html#%_idx_4632">Gabriel, Richard P.</a><br /> <a href="book-Z-H-33.html#%_idx_5930">garbage collection</a><br />     <a href="book-Z-H-27.html#%_idx_4744">memoization and</a><br />     <a href="book-Z-H-22.html#%_idx_3156">mutation and</a><br />     <a href="book-Z-H-35.html#%_idx_6360">tail recursion and</a><br /> garbage collector <br />     <a href="book-Z-H-33.html#%_idx_5964">compacting</a><br />     <a href="book-Z-H-33.html#%_idx_5958">mark-sweep</a><br />     <a href="book-Z-H-33.html#%_idx_5934">stop-and-copy</a><br /> GCD, <em>see</em> greatest common divisor <br /> <a href="book-Z-H-11.html#%_idx_842"><code>gcd</code></a><br />     <a href="book-Z-H-31.html#%_idx_5474">register machine for</a>, <a href="book-Z-H-32.html#%_idx_5634">[2]</a><br /> <a href="book-Z-H-18.html#%_idx_2794"><code>gcd-terms</code></a><br /> <a href="book-Z-H-35.html#%_idx_6202">general-purpose computer, as universal machine</a><br /> <a href="book-Z-H-16.html#%_idx_2280"><code>generate-huffman-tree</code></a><br /> <a href="book-Z-H-28.html#%_idx_4976">generating sentences</a><br /> <a href="book-Z-H-18.html#%_idx_2502">generic arithmetic operations</a><br />     <a href="book-Z-H-18.html#%_idx_2500">structure of system</a><br /> <a href="book-Z-H-13.html#%_idx_1274">generic operation</a><br /> <a href="book-Z-H-16.html#%_idx_2268">generic procedure</a>, <a href="book-Z-H-17.html#%_idx_2292">[2]</a><br />     <a href="book-Z-H-17.html#%_idx_2404">generic selector</a>, <a href="book-Z-H-17.html#%_idx_2422">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5170">Genesis</a><br /> <a href="book-Z-H-17.html#%_idx_2440"><code>get</code></a>, <a href="book-Z-H-22.html#%_idx_3300">[2]</a><br /> <a href="book-Z-H-32.html#%_idx_5644"><code>get-contents</code></a><br /> <a href="book-Z-H-34.html#%_idx_6140"><code>get-global-environment</code></a><br /> <a href="book-Z-H-32.html#%_idx_5680"><code>get-register</code></a><br /> <a href="book-Z-H-32.html#%_idx_5630"><code>get-register-contents</code></a>, <a href="book-Z-H-32.html#%_idx_5676">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3370"><code>get-signal</code></a>, <a href="book-Z-H-22.html#%_idx_3404">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3524"><code>get-value</code></a>, <a href="book-Z-H-22.html#%_idx_3552">[2]</a><br /> <a href="book-Z-H-9.html#%_idx_20">glitch</a><br /> <a href="book-Z-H-10.html#%_idx_242">global environment</a>, <a href="book-Z-H-21.html#%_idx_3062">[2]</a><br />     <a href="book-Z-H-26.html#%_idx_4498">in metacircular evaluator</a><br /> <a href="book-Z-H-21.html#%_idx_3048">global frame</a><br /> <a href="book-Z-H-14.html#%_idx_1430">Goguen, Joseph</a><br /> <a href="book-Z-H-11.html#%_idx_724">golden ratio</a><br />     <a href="book-Z-H-12.html#%_idx_1142">as continued fraction</a><br />     <a href="book-Z-H-12.html#%_idx_1130">as fixed point</a><br /> <a href="book-Z-H-24.html#%_idx_4108">Gordon, Michael</a><br /> <a href="book-Z-H-31.html#%_idx_5514"><code>goto</code> (in register machine)</a><br />     <a href="book-Z-H-31.html#%_idx_5558">label as destination</a><br />     <a href="book-Z-H-32.html#%_idx_5746">simulating</a><br /> <a href="book-Z-H-32.html#%_idx_5750"><code>goto-dest</code></a><br /> <a href="book-Z-H-28.html#%_idx_4962">grammar</a><br /> graphics, <em>see</em> picture language <br /> <a href="book-Z-H-23.html#%_idx_3704">Gray, Jim</a><br /> <a href="book-Z-H-11.html#%_idx_834">greatest common divisor</a>, <em>see also</em> <code>gcd</code> <br />     <a href="book-Z-H-18.html#%_idx_2798">generic</a><br />     <a href="book-Z-H-18.html#%_idx_2782">of polynomials</a><br />     <a href="book-Z-H-20.html#%_idx_2946">used to estimate <img src="book-Z-G-D-9.gif" /></a><br />     <a href="book-Z-H-14.html#%_idx_1376">used in rational-number arithmetic</a><br /> <a href="book-Z-H-29.html#%_idx_5050">Green, Cordell</a><br /> <a href="book-Z-H-9.html#%_idx_72">Griss, Martin Lewis</a><br /> <a href="book-Z-H-14.html#%_idx_1438">Guttag, John Vogel</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-22.html#%_idx_3354">half-adder</a><br />     <a href="book-Z-H-22.html#%_idx_3360"><code>half-adder</code></a><br />     <a href="book-Z-H-22.html#%_idx_3430">simulation of</a><br /> <a href="book-Z-H-12.html#%_idx_1082">half-interval method</a><br />     <a href="book-Z-H-12.html#%_idx_1092"><code>half-interval-method</code></a><br />     <a href="book-Z-H-12.html#%_idx_1184">Newton's method vs.</a><br /> <a href="book-Z-H-26.html#%_idx_4588">halting problem</a><br /> <a href="book-Z-H-26.html#%_idx_4592">Halting Theorem</a><br /> <a href="book-Z-H-16.html#%_idx_2248">Hamming, Richard Wesley</a>, <a href="book-Z-H-24.html#%_idx_3894">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4382">Hanson, Christopher P.</a>, <a href="book-Z-H-35.html#%_idx_6364">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_3882">Hardy, Godfrey Harold</a>, <a href="book-Z-H-24.html#%_idx_4012">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3522"><code>has-value?</code></a>, <a href="book-Z-H-22.html#%_idx_3550">[2]</a><br /> <a href="book-Z-H-27.html#%_idx_4690">Hassle</a><br /> <a href="book-Z-H-23.html#%_idx_3702">Havender, J.</a><br /> <a href="book-Z-H-25.html#%_idx_4208">Haynes, Christopher T.</a><br /> <a href="book-Z-H-22.html#%_idx_3276">headed list</a>, <a href="book-Z-H-22.html#%_idx_3452">[2]</a><br /> <a href="book-Z-H-9.html#%_idx_70">Hearn, Anthony C.</a><br /> <a href="book-Z-H-15.html#%_idx_1856">Henderson, Peter</a>, <a href="book-Z-H-24.html#%_idx_3858">[2]</a>, <a href="book-Z-H-24.html#%_idx_4172">[3]</a><br />     <a href="book-Z-H-24.html#%_idx_3856">Henderson diagram</a><br /> <a href="book-Z-H-19.html#%_idx_2820">Heraclitus</a><br /> <a href="book-Z-H-10.html#%_idx_512">Heron of Alexandria</a><br /> <a href="book-Z-H-11.html#%_idx_698">Hewitt, Carl Eddie</a>, <a href="book-Z-H-28.html#%_idx_4864">[2]</a>, <a href="book-Z-H-29.html#%_idx_5052">[3]</a>, <a href="book-Z-H-33.html#%_idx_5950">[4]</a><br /> <a href="book-Z-H-20.html#%_idx_2890">hiding principle</a><br /> <a href="book-Z-H-15.html#%_idx_1538">hierarchical data structures</a>, <a href="book-Z-H-15.html#%_idx_1674">[2]</a><br /> <a href="book-Z-H-18.html#%_idx_2594">hierarchy of types</a><br />     <a href="book-Z-H-18.html#%_idx_2764">in symbolic algebra</a><br />     <a href="book-Z-H-18.html#%_idx_2614">inadequacy of</a><br /> <a href="book-Z-H-25.html#%_idx_4190">high-level language, machine language vs.</a><br /> <a href="book-Z-H-12.html#%_idx_964">higher-order procedures</a><br />     <a href="book-Z-H-26.html#%_idx_4254">in metacircular evaluator</a><br />     <a href="book-Z-H-12.html#%_idx_966">procedure as argument</a><br />     <a href="book-Z-H-12.html#%_idx_1078">procedure as general method</a><br />     <a href="book-Z-H-12.html#%_idx_1156">procedure as returned value</a><br />     <a href="book-Z-H-24.html#%_idx_4096">strong typing and</a><br /> <a href="book-Z-H-16.html#%_idx_2198">Hilfinger, Paul</a><br /> <a href="book-Z-H-14.html#%_idx_1422">Hoare, Charles Antony Richard</a><br /> <a href="book-Z-H-26.html#%_idx_4566">Hodges, Andrew</a><br /> <a href="book-Z-H-26.html#%_idx_4570">Hofstadter, Douglas R.</a><br /> <a href="book-Z-H-15.html#%_idx_1778">Horner, W. G.</a><br /> <a href="book-Z-H-15.html#%_idx_1774">Horner's rule</a><br /> ``how to'' vs. ``what is'' description, <em>see</em> imperative vs. declarative knowledge <br /> <a href="book-Z-H-16.html#%_idx_2212">Huffman code</a><br />     <a href="book-Z-H-16.html#%_idx_2246">optimality of</a><br />     <a href="book-Z-H-16.html#%_idx_2284">order of growth of encoding</a><br /> <a href="book-Z-H-16.html#%_idx_2238">Huffman, David</a><br /> <a href="book-Z-H-27.html#%_idx_4792">Hughes, R. J. M.</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-14.html#%_idx_1338">IBM 704</a><br /> <a href="book-Z-H-12.html#%_idx_996"><code>identity</code></a><br /> <a href="book-Z-H-10.html#%_idx_420"><code>if</code> (special form)</a><br />     <a href="book-Z-H-10.html#%_idx_440"><code>cond</code> vs.</a><br />     <a href="book-Z-H-10.html#%_idx_428">evaluation of</a><br />     <a href="book-Z-H-10.html#%_idx_486">normal-order evaluation of</a><br />     <a href="book-Z-H-22.html#%_idx_3474">one-armed (without alternative)</a><br />     <a href="book-Z-H-10.html#%_idx_432">predicate, consequent, and alternative of</a><br />     <a href="book-Z-H-10.html#%_idx_556">why a special form</a><br /> <a href="book-Z-H-26.html#%_idx_4322"><code>if-alternative</code></a><br /> <a href="book-Z-H-26.html#%_idx_4320"><code>if-consequent</code></a><br /> <a href="book-Z-H-26.html#%_idx_4318"><code>if-predicate</code></a><br /> <a href="book-Z-H-26.html#%_idx_4316"><code>if?</code></a><br /> <code>imag-part</code> <br />     <a href="book-Z-H-17.html#%_idx_2466">data-directed</a><br />     <a href="book-Z-H-17.html#%_idx_2346">polar representation</a><br />     <a href="book-Z-H-17.html#%_idx_2330">rectangular representation</a><br />     <a href="book-Z-H-17.html#%_idx_2408">with tagged data</a><br /> <a href="book-Z-H-17.html#%_idx_2392"><code>imag-part-polar</code></a><br /> <a href="book-Z-H-17.html#%_idx_2380"><code>imag-part-rectangular</code></a><br /> <a href="book-Z-H-20.html#%_idx_3014">imperative programming</a><br /> <a href="book-Z-H-10.html#%_idx_494">imperative vs. declarative knowledge</a>, <a href="book-Z-H-29.html#%_idx_5032">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5072">logic programming and</a>, <a href="book-Z-H-29.html#%_idx_5258">[2]</a><br />     <a href="book-Z-H-28.html#%_idx_4818">nondeterministic computing and</a><br /> <a href="book-Z-H-22.html#%_idx_3576">imperative vs. expression-oriented programming style</a><br /> implementation dependencies, <em>see also</em> unspecified values <br />     <a href="book-Z-H-10.html#%_idx_546">numbers</a><br />     <a href="book-Z-H-21.html#%_idx_3068">order of subexpression evaluation</a><br /> <a href="book-Z-H-12.html#%_idx_992"><code>inc</code></a><br /> <a href="book-Z-H-10.html#%_idx_234">incremental development of programs</a><br /> <a href="book-Z-H-18.html#%_idx_2654">indeterminate of a polynomial</a><br /> <a href="book-Z-H-29.html#%_idx_5192">indexing a data base</a>, <a href="book-Z-H-29.html#%_idx_5376">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5248">inference, method of</a><br /> <a href="book-Z-H-29.html#%_idx_5368">infinite series</a><br /> <a href="book-Z-H-24.html#%_idx_3832">infinite stream(s)</a><br />     <a href="book-Z-H-24.html#%_idx_3896">merging</a>, <a href="book-Z-H-24.html#%_idx_3992">[2]</a>, <a href="book-Z-H-24.html#%_idx_4006">[3]</a>, <a href="book-Z-H-24.html#%_idx_4178">[4]</a><br />     <a href="book-Z-H-24.html#%_idx_4182">merging as a relation</a><br />     <a href="book-Z-H-24.html#%_idx_3888">of factorials</a><br />     of Fibonacci numbers, <em>see</em> <code>fibs</code> <br />     of integers, <em>see</em> <code>integers</code> <br />     <a href="book-Z-H-24.html#%_idx_3986">of pairs</a><br />     of prime numbers, <em>see</em> <code>primes</code> <br />     <a href="book-Z-H-24.html#%_idx_4126">of random numbers</a><br />     <a href="book-Z-H-24.html#%_idx_3912">representing power series</a><br />     <a href="book-Z-H-24.html#%_idx_4020">to model signals</a><br />     <a href="book-Z-H-24.html#%_idx_3960">to sum a series</a><br /> <a href="book-Z-H-16.html#%_idx_2096">infix notation, prefix notation vs.</a><br /> <a href="book-Z-H-22.html#%_idx_3536"><code>inform-about-no-value</code></a><br /> <a href="book-Z-H-22.html#%_idx_3534"><code>inform-about-value</code></a><br /> information retrieval, <em>see</em> data base <br /> <a href="book-Z-H-27.html#%_idx_4702">Ingerman, Peter</a><br /> <a href="book-Z-H-32.html#%_idx_5656"><code>initialize-stack</code> operation in register machine</a>, <a href="book-Z-H-32.html#%_idx_5808">[2]</a><br /> <code>insert!</code> <br />     <a href="book-Z-H-22.html#%_idx_3284">in one-dimensional table</a><br />     <a href="book-Z-H-22.html#%_idx_3292">in two-dimensional table</a><br /> <a href="book-Z-H-22.html#%_idx_3238"><code>insert-queue!</code></a>, <a href="book-Z-H-22.html#%_idx_3256">[2]</a><br /> <a href="book-Z-H-18.html#%_idx_2542"><code>install-complex-package</code></a><br /> <a href="book-Z-H-17.html#%_idx_2454"><code>install-polar-package</code></a><br /> <a href="book-Z-H-18.html#%_idx_2684"><code>install-polynomial-package</code></a><br /> <a href="book-Z-H-18.html#%_idx_2530"><code>install-rational-package</code></a><br /> <a href="book-Z-H-17.html#%_idx_2448"><code>install-rectangular-package</code></a><br /> <a href="book-Z-H-18.html#%_idx_2520"><code>install-scheme-number-package</code></a><br /> <a href="book-Z-H-29.html#%_idx_5304"><code>instantiate</code></a><br /> <a href="book-Z-H-29.html#%_idx_5120">instantiate a pattern</a><br /> <a href="book-Z-H-32.html#%_idx_5816">instruction counting</a><br /> <a href="book-Z-H-32.html#%_idx_5666">instruction execution procedure</a><br /> <a href="book-Z-H-35.html#%_idx_6256">instruction sequence</a>, <a href="book-Z-H-35.html#%_idx_6378">[2]</a><br /> <a href="book-Z-H-32.html#%_idx_5818">instruction tracing</a><br /> <a href="book-Z-H-32.html#%_idx_5708"><code>instruction-execution-proc</code></a><br /> <a href="book-Z-H-32.html#%_idx_5706"><code>instruction-text</code></a><br /> <a href="book-Z-H-10.html#%_idx_136">integer(s)</a><br />     <a href="book-Z-H-10.html#%_idx_534">dividing</a><br />     <a href="book-Z-H-10.html#%_idx_530">exact</a><br /> <a href="book-Z-H-18.html#%_idx_2800">integerizing factor</a><br /> <a href="book-Z-H-24.html#%_idx_3836"><code>integers</code> (infinite stream)</a><br />     <a href="book-Z-H-24.html#%_idx_3866">implicit definition</a><br />     <a href="book-Z-H-27.html#%_idx_4790">lazy-list version</a><br /> <a href="book-Z-H-24.html#%_idx_3834"><code>integers-starting-from</code></a><br /> integral, <em>see also</em> definite integral; Monte Carlo integration <br />     <a href="book-Z-H-24.html#%_idx_3920">of a power series</a><br /> <a href="book-Z-H-12.html#%_idx_1004"><code>integral</code></a>, <a href="book-Z-H-24.html#%_idx_4024">[2]</a>, <a href="book-Z-H-24.html#%_idx_4080">[3]</a><br />     <a href="book-Z-H-24.html#%_idx_4074">with delayed argument</a><br />     <a href="book-Z-H-12.html#%_idx_1032">with <code>lambda</code></a><br />     <a href="book-Z-H-27.html#%_idx_4802">lazy-list version</a><br />     <a href="book-Z-H-24.html#%_idx_4060">need for delayed evaluation</a><br /> <a href="book-Z-H-24.html#%_idx_3924"><code>integrate-series</code></a><br /> <a href="book-Z-H-34.html#%_idx_6000">integrated-circuit implementation of Scheme</a>, <a href="book-Z-H-34.html#%_idx_6012">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_4022">integrator, for signals</a><br /> <a href="book-Z-H-24.html#%_idx_4000"><code>interleave</code></a><br /> <a href="book-Z-H-29.html#%_idx_5388"><code>interleave-delayed</code></a><br /> <a href="book-Z-H-9.html#%_idx_56">Interlisp</a><br /> <a href="book-Z-H-10.html#%_idx_614">internal definition</a><br />     <a href="book-Z-H-21.html#%_idx_3116">in environment model</a><br />     <a href="book-Z-H-10.html#%_idx_616">free variable in</a><br />     <a href="book-Z-H-12.html#%_idx_1074"><code>let</code> vs.</a><br />     <a href="book-Z-H-28.html#%_idx_5010">in nondeterministic evaluator</a><br />     <a href="book-Z-H-10.html#%_idx_626">position of</a><br />     <a href="book-Z-H-26.html#%_idx_4604">restrictions on</a><br />     <a href="book-Z-H-26.html#%_idx_4608">scanning out</a><br />     <a href="book-Z-H-26.html#%_idx_4598">scope of name</a><br /> <a href="book-Z-H-35.html#%_idx_6498">Internet ``Worm''</a><br /> <a href="book-Z-H-33.html#%_idx_5888">interning symbols</a><br /> <a href="book-Z-H-9.html#%_idx_30">interpreter</a>, <em>see also</em> evaluator <br />     <a href="book-Z-H-35.html#%_idx_6212">compiler vs.</a>, <a href="book-Z-H-35.html#%_idx_6490">[2]</a><br />     <a href="book-Z-H-10.html#%_idx_206">read-eval-print loop</a><br /> <a href="book-Z-H-16.html#%_idx_2110"><code>intersection-set</code></a><br />     <a href="book-Z-H-16.html#%_idx_2196">binary-tree representation</a><br />     <a href="book-Z-H-16.html#%_idx_2130">ordered-list representation</a><br />     <a href="book-Z-H-16.html#%_idx_2120">unordered-list representation</a><br /> <a href="book-Z-H-14.html#%_idx_1478">interval arithmetic</a><br /> <a href="book-Z-H-11.html#%_idx_816">invariant quantity of an iterative process</a><br /> <a href="book-Z-H-22.html#%_idx_3344">inverter</a><br />     <a href="book-Z-H-22.html#%_idx_3378"><code>inverter</code></a><br /> iteration contructs, <em>see</em> looping constructs <br /> <a href="book-Z-H-12.html#%_idx_1246">iterative improvement</a><br /> <a href="book-Z-H-11.html#%_idx_666">iterative process</a><br />     <a href="book-Z-H-24.html#%_idx_3944">as a stream process</a><br />     <a href="book-Z-H-11.html#%_idx_818">design of algorithm</a><br />     <a href="book-Z-H-10.html#%_idx_552">implemented by procedure call</a>, <a href="book-Z-H-11.html#%_idx_694">[2]</a>, <a href="book-Z-H-34.html#%_idx_6102">[3]</a>, <em>see also</em> tail recursion <br />     <a href="book-Z-H-11.html#%_idx_672">linear</a>, <a href="book-Z-H-11.html#%_idx_772">[2]</a><br />     <a href="book-Z-H-11.html#%_idx_636">recursive process vs.</a>, <a href="book-Z-H-21.html#%_idx_3092">[2]</a>, <a href="book-Z-H-31.html#%_idx_5570">[3]</a>, <a href="book-Z-H-35.html#%_idx_6408">[4]</a><br />     <a href="book-Z-H-31.html#%_idx_5566">register machine for</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-22.html#%_idx_3506">Jayaraman, Sundaresan</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-11.html#%_idx_832">Kaldewaij, Anne</a><br /> <a href="book-Z-H-19.html#%_idx_2822">Karr, Alphonse</a><br /> <a href="book-Z-H-30.html#%_idx_5456">Kepler, Johannes</a><br /> <a href="book-Z-H-16.html#%_idx_2208"><code>key</code></a><br /> key of a record <br />     <a href="book-Z-H-16.html#%_idx_2206">in a data base</a><br />     <a href="book-Z-H-22.html#%_idx_3270">in a table</a><br />     <a href="book-Z-H-22.html#%_idx_3306">testing equality of</a><br /> <a href="book-Z-H-11.html#%_idx_746">Khayyam, Omar</a><br /> <a href="book-Z-H-11.html#%_idx_744">Knuth, Donald E.</a>, <a href="book-Z-H-11.html#%_idx_814">[2]</a>, <a href="book-Z-H-11.html#%_idx_840">[3]</a>, <a href="book-Z-H-15.html#%_idx_1776">[4]</a>, <a href="book-Z-H-20.html#%_idx_2924">[5]</a>, <a href="book-Z-H-20.html#%_idx_2944">[6]</a>, <a href="#%_idx_6794">[7]</a><br /> <a href="book-Z-H-26.html#%_idx_4376">Kohlbecker, Eugene Edmund, Jr.</a><br /> <a href="book-Z-H-20.html#%_idx_2928">Kolmogorov, A. N.</a><br /> <a href="book-Z-H-22.html#%_idx_3504">Konopasek, Milos</a><br /> <a href="book-Z-H-29.html#%_idx_5058">Kowalski, Robert</a><br /> <a href="book-Z-H-15.html#%_idx_1822">KRC</a>, <a href="book-Z-H-24.html#%_idx_3998">[2]</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-31.html#%_idx_5510"><code>label</code> (in register machine)</a><br />     <a href="book-Z-H-32.html#%_idx_5770">simulating</a><br /> <a href="book-Z-H-32.html#%_idx_5784"><code>label-exp</code></a><br /> <a href="book-Z-H-32.html#%_idx_5786"><code>label-exp-label</code></a><br /> <a href="book-Z-H-18.html#%_idx_2662">Lagrange interpolation formula</a><br /> <a href="book-Z-H-12.html#%_idx_1054"><img src="book-Z-G-D-6.gif" /> calculus (lambda calculus)</a><br /> <a href="book-Z-H-12.html#%_idx_1034"><code>lambda</code> (special form)</a><br />     <a href="book-Z-H-12.html#%_idx_1040"><code>define</code> vs.</a><br />     <a href="book-Z-H-15.html#%_idx_1656">with dotted-tail notation</a><br /> <code>lambda</code> expression <br />     <a href="book-Z-H-12.html#%_idx_1050">as operator of combination</a><br />     <a href="book-Z-H-21.html#%_idx_3076">value of</a><br /> <a href="book-Z-H-26.html#%_idx_4312"><code>lambda-body</code></a><br /> <a href="book-Z-H-26.html#%_idx_4310"><code>lambda-parameters</code></a><br /> <a href="book-Z-H-26.html#%_idx_4308"><code>lambda?</code></a><br /> <a href="book-Z-H-12.html#%_idx_1150">Lambert, J.H.</a><br /> <a href="book-Z-H-11.html#%_idx_850">Lamé, Gabriel</a><br /> <a href="book-Z-H-11.html#%_idx_848">Lamé's Theorem</a><br /> <a href="book-Z-H-23.html#%_idx_3722">Lamport, Leslie</a><br /> <a href="book-Z-H-20.html#%_idx_3006">Lampson, Butler</a><br /> <a href="book-Z-H-10.html#%_idx_280">Landin, Peter</a>, <a href="book-Z-H-24.html#%_idx_3810">[2]</a><br /> language, <em>see</em> natural language; programming language <br /> <a href="book-Z-H-26.html#%_idx_4650">Lapalme, Guy</a><br /> <a href="book-Z-H-26.html#%_idx_4330"><code>last-exp?</code></a><br /> <a href="book-Z-H-34.html#%_idx_6064"><code>last-operand?</code></a><br /> <a href="book-Z-H-15.html#%_idx_1638"><code>last-pair</code></a>, <a href="book-Z-H-22.html#%_idx_3168">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5166">rules</a><br /> <a href="book-Z-H-27.html#%_idx_4684">lazy evaluation</a><br /> <a href="book-Z-H-27.html#%_idx_4666">lazy evaluator</a><br /> <a href="book-Z-H-27.html#%_idx_4756">lazy list</a><br /> <a href="book-Z-H-27.html#%_idx_4760">lazy pair</a><br /> <a href="book-Z-H-27.html#%_idx_4794">lazy tree</a><br /> <a href="book-Z-H-16.html#%_idx_2252"><code>leaf?</code></a><br /> <a href="book-Z-H-17.html#%_idx_2364">least commitment, principle of</a><br /> <a href="book-Z-H-12.html#%_idx_1110">lecture, something to do during</a><br /> <a href="book-Z-H-16.html#%_idx_2154"><code>left-branch</code></a>, <a href="book-Z-H-16.html#%_idx_2260">[2]</a><br /> Leibniz, Baron Gottfried Wilhelm von <br />     <a href="book-Z-H-11.html#%_idx_880">proof of Fermat's Little Theorem</a><br />     <a href="book-Z-H-12.html#%_idx_976">series for <img src="book-Z-G-D-9.gif" /></a>, <a href="book-Z-H-24.html#%_idx_3952">[2]</a><br /> <a href="book-Z-H-16.html#%_idx_2178">Leiserson, Charles E.</a>, <a href="book-Z-H-24.html#%_idx_4016">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1620"><code>length</code></a><br />     <a href="book-Z-H-15.html#%_idx_1770">as accumulation</a><br />     <a href="book-Z-H-15.html#%_idx_1626">iterative version</a><br />     <a href="book-Z-H-15.html#%_idx_1624">recursive version</a><br /> <a href="book-Z-H-12.html#%_idx_1062"><code>let</code> (special form)</a><br />     <a href="book-Z-H-21.html#%_idx_3110">evaluation model</a><br />     <a href="book-Z-H-12.html#%_idx_1076">internal definition vs.</a><br />     <a href="book-Z-H-26.html#%_idx_4414">named</a><br />     <a href="book-Z-H-12.html#%_idx_1070">scope of variables</a><br />     <a href="book-Z-H-12.html#%_idx_1068">as syntactic sugar</a>, <a href="book-Z-H-21.html#%_idx_3108">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4408"><code>let*</code> (special form)</a><br /> <a href="book-Z-H-26.html#%_idx_4618"><code>letrec</code> (special form)</a><br /> <a href="book-Z-H-35.html#%_idx_6430">lexical addressing</a><br />     <a href="book-Z-H-35.html#%_idx_6434">lexical address</a><br /> <a href="book-Z-H-10.html#%_idx_620">lexical scoping</a><br />     <a href="book-Z-H-35.html#%_idx_6432">environment structure and</a><br /> <a href="book-Z-H-35.html#%_idx_6436"><code>lexical-address-lookup</code></a>, <a href="book-Z-H-35.html#%_idx_6442">[2]</a><br /> <a href="book-Z-H-35.html#%_idx_6438"><code>lexical-address-set!</code></a>, <a href="book-Z-H-35.html#%_idx_6444">[2]</a><br /> <a href="book-Z-H-33.html#%_idx_5952">Lieberman, Henry</a><br /> LIFO buffer, <em>see</em> stack <br /> line segment <br />     <a href="book-Z-H-14.html#%_idx_1396">represented as pair of points</a><br />     <a href="book-Z-H-15.html#%_idx_1952">represented as pair of vectors</a><br /> <a href="book-Z-H-11.html#%_idx_658">linear growth</a>, <a href="book-Z-H-11.html#%_idx_780">[2]</a><br /> <a href="book-Z-H-11.html#%_idx_674">linear iterative process</a><br />     <a href="book-Z-H-11.html#%_idx_770">order of growth</a><br /> <a href="book-Z-H-11.html#%_idx_662">linear recursive process</a><br />     <a href="book-Z-H-11.html#%_idx_764">order of growth</a><br /> <a href="book-Z-H-35.html#%_idx_6250">linkage descriptor</a><br /> <a href="book-Z-H-14.html#%_idx_1444">Liskov, Barbara Huberman</a><br /> Lisp <br />     <a href="book-Z-H-9.html#%_idx_38">acronym for LISt Processing</a><br />     <a href="book-Z-H-10.html#%_idx_346">applicative-order evaluation in</a><br />     <a href="book-Z-H-33.html#%_idx_5938">on DEC PDP-1</a><br />     <a href="book-Z-H-9.html#%_idx_98">efficiency of</a>, <a href="book-Z-H-10.html#%_idx_214">[2]</a><br />     <a href="book-Z-H-12.html#%_idx_1222">first-class procedures in</a><br />     <a href="book-Z-H-9.html#%_idx_96">Fortran vs.</a><br />     <a href="book-Z-H-9.html#%_idx_24">history of</a><br />     <a href="book-Z-H-18.html#%_idx_2550">internal type system</a><br />     <a href="book-Z-H-14.html#%_idx_1340">original implementation on IBM 704</a><br />     <a href="book-Z-H-10.html#%_idx_290">Pascal vs.</a><br />     <a href="book-Z-H-25.html#%_idx_4202">suitability for writing evaluators</a><br />     <a href="book-Z-H-9.html#%_idx_112">unique features of</a><br /> Lisp dialects <br />     <a href="book-Z-H-9.html#%_idx_94">Common Lisp</a><br />     <a href="book-Z-H-9.html#%_idx_76">Franz Lisp</a><br />     <a href="book-Z-H-9.html#%_idx_58">Interlisp</a><br />     <a href="book-Z-H-9.html#%_idx_48">MacLisp</a><br />     <a href="book-Z-H-33.html#%_idx_5986">MDL</a><br />     <a href="book-Z-H-9.html#%_idx_68">Portable Standard Lisp</a><br />     <a href="book-Z-H-9.html#%_idx_44">Scheme</a><br />     <a href="book-Z-H-9.html#%_idx_82">Zetalisp</a><br /> <a href="book-Z-H-29.html#%_idx_5332"><code>lisp-value</code> (query interpreter)</a><br /> <a href="book-Z-H-29.html#%_idx_5132"><code>lisp-value</code> (query language)</a>, <a href="book-Z-H-29.html#%_idx_5270">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5206">evaluation of</a>, <a href="book-Z-H-29.html#%_idx_5330">[2]</a>, <a href="book-Z-H-29.html#%_idx_5440">[3]</a><br /> <a href="book-Z-H-15.html#%_idx_1568"><code>list</code> (primitive procedure)</a><br /> <a href="book-Z-H-14.html#%_idx_1342">list structure</a><br />     <a href="book-Z-H-15.html#%_idx_1572">list vs.</a><br />     <a href="book-Z-H-22.html#%_idx_3134">mutable</a><br />     <a href="book-Z-H-33.html#%_idx_5854">represented using vectors</a><br /> <a href="book-Z-H-15.html#%_idx_1566">list(s)</a><br />     <a href="book-Z-H-35.html#%_idx_6280">backquote with</a><br />     <a href="book-Z-H-15.html#%_idx_1608"><code>cdr</code>ing down</a><br />     <a href="book-Z-H-15.html#%_idx_1634">combining with <code>append</code></a><br />     <a href="book-Z-H-15.html#%_idx_1630"><code>cons</code>ing up</a><br />     <a href="book-Z-H-16.html#%_idx_2184">converting a binary tree to a</a><br />     <a href="book-Z-H-16.html#%_idx_2190">converting to a binary tree</a><br />     empty, <em>see</em> empty list <br />     <a href="book-Z-H-16.html#%_idx_2036">equality of</a><br />     <a href="book-Z-H-22.html#%_idx_3278">headed</a>, <a href="book-Z-H-22.html#%_idx_3454">[2]</a><br />     <a href="book-Z-H-15.html#%_idx_1640">last pair of</a><br />     <a href="book-Z-H-27.html#%_idx_4758">lazy</a><br />     <a href="book-Z-H-15.html#%_idx_1622">length of</a><br />     <a href="book-Z-H-15.html#%_idx_1574">list structure vs.</a><br />     <a href="book-Z-H-15.html#%_idx_1578">manipulation with <code>car</code>, <code>cdr</code>, and <code>cons</code></a><br />     <a href="book-Z-H-15.html#%_idx_1658">mapping over</a><br />     <a href="book-Z-H-15.html#%_idx_1610"><em>n</em>th element of</a><br />     <a href="book-Z-H-15.html#%_idx_1602">operations on</a><br />     <a href="book-Z-H-15.html#%_idx_1576">printed representation of</a><br />     <a href="book-Z-H-16.html#%_idx_2012">quotation of</a><br />     <a href="book-Z-H-15.html#%_idx_1644">reversing</a><br />     <a href="book-Z-H-15.html#%_idx_1604">techniques for manipulating</a><br /> <a href="book-Z-H-16.html#%_idx_2192"><code>list-&gt;tree</code></a><br /> <a href="book-Z-H-35.html#%_idx_6394"><code>list-difference</code></a><br /> <a href="book-Z-H-27.html#%_idx_4726"><code>list-of-arg-values</code></a><br /> <a href="book-Z-H-27.html#%_idx_4728"><code>list-of-delayed-args</code></a><br /> <a href="book-Z-H-26.html#%_idx_4256"><code>list-of-values</code></a><br /> <a href="book-Z-H-15.html#%_idx_1612"><code>list-ref</code></a>, <a href="book-Z-H-27.html#%_idx_4780">[2]</a><br /> <a href="book-Z-H-33.html#%_idx_5828">list-structured memory</a><br /> <a href="book-Z-H-35.html#%_idx_6392"><code>list-union</code></a><br /> <a href="book-Z-H-29.html#%_idx_5140"><code>lives-near</code> (rule)</a>, <a href="book-Z-H-29.html#%_idx_5154">[2]</a><br /> <a href="book-Z-H-11.html#%_idx_632">local evolution of a process</a><br /> <a href="book-Z-H-10.html#%_idx_578">local name</a>, <a href="book-Z-H-12.html#%_idx_1060">[2]</a><br /> <a href="book-Z-H-20.html#%_idx_2838">local state</a><br />     <a href="book-Z-H-21.html#%_idx_3100">maintained in frames</a><br /> <a href="book-Z-H-20.html#%_idx_2844">local state variable</a><br /> <a href="book-Z-H-12.html#%_idx_1058">local variable</a><br /> <a href="book-Z-H-33.html#%_idx_5836">location</a><br /> <a href="book-Z-H-9.html#%_idx_6">Locke, John</a><br /> <a href="book-Z-H-12.html#%_idx_1134"><code>log</code> (primitive procedure)</a><br /> <a href="book-Z-H-24.html#%_idx_3982">logarithm, approximating <code>ln</code> 2</a><br /> <a href="book-Z-H-11.html#%_idx_784">logarithmic growth</a>, <a href="book-Z-H-11.html#%_idx_808">[2]</a>, <a href="book-Z-H-16.html#%_idx_2148">[3]</a><br /> <a href="book-Z-H-29.html#%_idx_5028">logic programming</a>, <em>see also</em> query language; query interpreter <br />     <a href="book-Z-H-29.html#%_idx_5084">computers for</a><br />     <a href="book-Z-H-29.html#%_idx_5040">history of</a>, <a href="book-Z-H-29.html#%_idx_5080">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5082">in Japan</a><br />     <a href="book-Z-H-29.html#%_idx_5076">logic programming languages</a><br />     <a href="book-Z-H-29.html#%_idx_5246">mathematical logic vs.</a><br /> <a href="book-Z-H-28.html#%_idx_4928">logic puzzles</a><br /> <a href="book-Z-H-22.html#%_idx_3348">logical and</a><br /> <a href="book-Z-H-22.html#%_idx_3352">logical or</a><br /> <a href="book-Z-H-22.html#%_idx_3380"><code>logical-not</code></a><br /> <code>lookup</code> <br />     <a href="book-Z-H-22.html#%_idx_3280">in one-dimensional table</a><br />     <a href="book-Z-H-16.html#%_idx_2210">in set of records</a><br />     <a href="book-Z-H-22.html#%_idx_3290">in two-dimensional table</a><br /> <a href="book-Z-H-32.html#%_idx_5714"><code>lookup-label</code></a><br /> <a href="book-Z-H-32.html#%_idx_5798"><code>lookup-prim</code></a><br /> <a href="book-Z-H-26.html#%_idx_4456"><code>lookup-variable-value</code></a>, <a href="book-Z-H-26.html#%_idx_4480">[2]</a><br />     <a href="book-Z-H-26.html#%_idx_4612">for scanned-out definitions</a><br /> <a href="book-Z-H-10.html#%_idx_554">looping constructs</a>, <a href="book-Z-H-11.html#%_idx_690">[2]</a><br />     <a href="book-Z-H-26.html#%_idx_4426">implementing in metacircular evaluator</a><br /> <a href="book-Z-H-14.html#%_idx_1506"><code>lower-bound</code></a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-35.html#%_idx_6206">machine language</a><br />     <a href="book-Z-H-25.html#%_idx_4192">high-level language vs.</a><br /> <a href="book-Z-H-34.html#%_idx_6192">Macintosh</a><br /> <a href="book-Z-H-9.html#%_idx_46">MacLisp</a><br /> <a href="book-Z-H-26.html#%_idx_4374">macro</a>, <em>see also</em> reader macro character <br /> magician, <em>see</em> numerical analyst <br /> <code>magnitude</code> <br />     <a href="book-Z-H-17.html#%_idx_2468">data-directed</a><br />     <a href="book-Z-H-17.html#%_idx_2348">polar representation</a><br />     <a href="book-Z-H-17.html#%_idx_2332">rectangular representation</a><br />     <a href="book-Z-H-17.html#%_idx_2410">with tagged data</a><br /> <a href="book-Z-H-17.html#%_idx_2394"><code>magnitude-polar</code></a><br /> <a href="book-Z-H-17.html#%_idx_2382"><code>magnitude-rectangular</code></a><br /> <a href="book-Z-H-20.html#%_idx_2896"><code>make-account</code></a><br />     <a href="book-Z-H-21.html#%_idx_3126">in environment model</a><br />     <a href="book-Z-H-23.html#%_idx_3616">with serialization</a>, <a href="book-Z-H-23.html#%_idx_3618">[2]</a>, <a href="book-Z-H-23.html#%_idx_3620">[3]</a><br /> <a href="book-Z-H-23.html#%_idx_3630"><code>make-account-and-serializer</code></a><br /> <a href="book-Z-H-20.html#%_idx_2904"><code>make-accumulator</code></a><br /> <a href="book-Z-H-22.html#%_idx_3412"><code>make-agenda</code></a>, <a href="book-Z-H-22.html#%_idx_3456">[2]</a><br /> <a href="book-Z-H-32.html#%_idx_5722"><code>make-assign</code></a><br /> <a href="book-Z-H-26.html#%_idx_4338"><code>make-begin</code></a><br /> <a href="book-Z-H-32.html#%_idx_5742"><code>make-branch</code></a><br /> <a href="book-Z-H-14.html#%_idx_1522"><code>make-center-percent</code></a><br /> <a href="book-Z-H-14.html#%_idx_1516"><code>make-center-width</code></a><br /> <a href="book-Z-H-16.html#%_idx_2258"><code>make-code-tree</code></a><br /> <a href="book-Z-H-35.html#%_idx_6332"><code>make-compiled-procedure</code></a><br /> <a href="book-Z-H-18.html#%_idx_2546"><code>make-complex-from-mag-ang</code></a><br /> <a href="book-Z-H-18.html#%_idx_2544"><code>make-complex-from-real-imag</code></a><br /> <a href="book-Z-H-22.html#%_idx_3546"><code>make-connector</code></a><br /> <a href="book-Z-H-22.html#%_idx_3172"><code>make-cycle</code></a><br /> <a href="book-Z-H-20.html#%_idx_2984"><code>make-decrementer</code></a><br /> <a href="book-Z-H-32.html#%_idx_5718"><code>make-execution-procedure</code></a><br /> <a href="book-Z-H-15.html#%_idx_1914"><code>make-frame</code></a>, <a href="book-Z-H-15.html#%_idx_1944">[2]</a>, <a href="book-Z-H-26.html#%_idx_4470">[3]</a><br /> <a href="book-Z-H-17.html#%_idx_2416"><code>make-from-mag-ang</code></a>, <a href="book-Z-H-17.html#%_idx_2474">[2]</a><br />     <a href="book-Z-H-17.html#%_idx_2492">message-passing</a><br />     <a href="book-Z-H-17.html#%_idx_2354">polar representation</a><br />     <a href="book-Z-H-17.html#%_idx_2338">rectangular representation</a><br /> <a href="book-Z-H-17.html#%_idx_2400"><code>make-from-mag-ang-polar</code></a><br /> <a href="book-Z-H-17.html#%_idx_2388"><code>make-from-mag-ang-rectangular</code></a><br /> <a href="book-Z-H-17.html#%_idx_2414"><code>make-from-real-imag</code></a>, <a href="book-Z-H-17.html#%_idx_2472">[2]</a><br />     <a href="book-Z-H-17.html#%_idx_2488">message-passing</a><br />     <a href="book-Z-H-17.html#%_idx_2352">polar representation</a><br />     <a href="book-Z-H-17.html#%_idx_2336">rectangular representation</a><br /> <a href="book-Z-H-17.html#%_idx_2398"><code>make-from-real-imag-polar</code></a><br /> <a href="book-Z-H-17.html#%_idx_2386"><code>make-from-real-imag-rectangular</code></a><br /> <a href="book-Z-H-32.html#%_idx_5748"><code>make-goto</code></a><br /> <a href="book-Z-H-26.html#%_idx_4324"><code>make-if</code></a><br /> <a href="book-Z-H-32.html#%_idx_5704"><code>make-instruction</code></a><br /> <a href="book-Z-H-35.html#%_idx_6266"><code>make-instruction-sequence</code></a><br /> <a href="book-Z-H-14.html#%_idx_1486"><code>make-interval</code></a>, <a href="book-Z-H-14.html#%_idx_1502">[2]</a><br /> <a href="book-Z-H-20.html#%_idx_3028"><code>make-joint</code></a><br /> <a href="book-Z-H-35.html#%_idx_6322"><code>make-label</code></a><br /> <a href="book-Z-H-32.html#%_idx_5712"><code>make-label-entry</code></a><br /> <a href="book-Z-H-26.html#%_idx_4314"><code>make-lambda</code></a><br /> <a href="book-Z-H-16.html#%_idx_2250"><code>make-leaf</code></a><br /> <a href="book-Z-H-16.html#%_idx_2276"><code>make-leaf-set</code></a><br /> <a href="book-Z-H-32.html#%_idx_5626"><code>make-machine</code></a>, <a href="book-Z-H-32.html#%_idx_5638">[2]</a><br /> <a href="book-Z-H-20.html#%_idx_2906"><code>make-monitored</code></a><br /> <a href="book-Z-H-23.html#%_idx_3668"><code>make-mutex</code></a><br /> <a href="book-Z-H-32.html#%_idx_5672"><code>make-new-machine</code></a><br /> <a href="book-Z-H-32.html#%_idx_5790"><code>make-operation-exp</code></a><br /> <a href="book-Z-H-32.html#%_idx_5764"><code>make-perform</code></a><br /> <a href="book-Z-H-14.html#%_idx_1406"><code>make-point</code></a><br /> <a href="book-Z-H-18.html#%_idx_2686"><code>make-poly</code></a><br /> <a href="book-Z-H-18.html#%_idx_2750"><code>make-polynomial</code></a><br /> <a href="book-Z-H-32.html#%_idx_5774"><code>make-primitive-exp</code></a><br /> <a href="book-Z-H-26.html#%_idx_4444"><code>make-procedure</code></a><br /> <a href="book-Z-H-16.html#%_idx_2070"><code>make-product</code></a>, <a href="book-Z-H-16.html#%_idx_2092">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3232"><code>make-queue</code></a>, <a href="book-Z-H-22.html#%_idx_3252">[2]</a><br /> <a href="book-Z-H-14.html#%_idx_1300"><code>make-rat</code></a>, <a href="book-Z-H-14.html#%_idx_1348">[2]</a>, <a href="book-Z-H-14.html#%_idx_1390">[3]</a><br />     <a href="book-Z-H-14.html#%_idx_1416">axiom for</a><br />     <a href="book-Z-H-14.html#%_idx_1378">reducing to lowest terms</a><br /> <a href="book-Z-H-18.html#%_idx_2532"><code>make-rational</code></a><br /> <a href="book-Z-H-32.html#%_idx_5642"><code>make-register</code></a><br /> <a href="book-Z-H-32.html#%_idx_5756"><code>make-restore</code></a><br /> <a href="book-Z-H-32.html#%_idx_5754"><code>make-save</code></a><br /> <a href="book-Z-H-18.html#%_idx_2522"><code>make-scheme-number</code></a><br /> <a href="book-Z-H-14.html#%_idx_1398"><code>make-segment</code></a>, <a href="book-Z-H-15.html#%_idx_1954">[2]</a><br /> <a href="book-Z-H-23.html#%_idx_3660"><code>make-serializer</code></a><br /> <a href="book-Z-H-20.html#%_idx_2982"><code>make-simplified-withdraw</code></a>, <a href="book-Z-H-24.html#%_idx_4150">[2]</a><br /> <a href="book-Z-H-32.html#%_idx_5650"><code>make-stack</code></a><br />     <a href="book-Z-H-32.html#%_idx_5812">with monitored stack</a><br /> <a href="book-Z-H-16.html#%_idx_2068"><code>make-sum</code></a>, <a href="book-Z-H-16.html#%_idx_2088">[2]</a><br /> <code>make-table</code> <br />     <a href="book-Z-H-22.html#%_idx_3296">message-passing implementation</a><br />     <a href="book-Z-H-22.html#%_idx_3286">one-dimensional table</a><br /> <a href="book-Z-H-24.html#%_idx_3974"><code>make-tableau</code></a><br /> <a href="book-Z-H-18.html#%_idx_2702"><code>make-term</code></a>, <a href="book-Z-H-18.html#%_idx_2744">[2]</a><br /> <a href="book-Z-H-32.html#%_idx_5736"><code>make-test</code></a><br /> <a href="book-Z-H-22.html#%_idx_3442"><code>make-time-segment</code></a><br /> <a href="book-Z-H-16.html#%_idx_2158"><code>make-tree</code></a><br /> <a href="book-Z-H-15.html#%_idx_1932"><code>make-vect</code></a><br /> <a href="book-Z-H-22.html#%_idx_3358"><code>make-wire</code></a>, <a href="book-Z-H-22.html#%_idx_3396">[2]</a>, <a href="book-Z-H-22.html#%_idx_3434">[3]</a><br /> <a href="book-Z-H-20.html#%_idx_2894"><code>make-withdraw</code></a><br />     <a href="book-Z-H-21.html#%_idx_3104">in environment model</a><br />     <a href="book-Z-H-21.html#%_idx_3106">using <code>let</code></a><br /> making change, <em>see</em> counting change <br /> <a href="book-Z-H-15.html#%_idx_1666"><code>map</code></a>, <a href="book-Z-H-27.html#%_idx_4782">[2]</a><br />     <a href="book-Z-H-15.html#%_idx_1766">as accumulation</a><br />     <a href="book-Z-H-15.html#%_idx_1664">with multiple arguments</a><br /> <a href="book-Z-H-29.html#%_idx_5412"><code>map-over-symbols</code></a><br /> <a href="book-Z-H-24.html#%_idx_4130"><code>map-successive-pairs</code></a><br /> mapping <br />     <a href="book-Z-H-15.html#%_idx_1660">over lists</a><br />     <a href="book-Z-H-15.html#%_idx_1818">nested</a>, <a href="book-Z-H-24.html#%_idx_3988">[2]</a><br />     <a href="book-Z-H-15.html#%_idx_1734">as a transducer</a><br />     <a href="book-Z-H-15.html#%_idx_1706">over trees</a><br /> <a href="book-Z-H-33.html#%_idx_5956">mark-sweep garbage collector</a><br /> mathematical function, <em>see</em> function (mathematical) <br /> mathematics <br />     <a href="book-Z-H-10.html#%_idx_496">computer science vs.</a>, <a href="book-Z-H-29.html#%_idx_5034">[2]</a><br />     <a href="book-Z-H-11.html#%_idx_918">engineering vs.</a><br /> <a href="book-Z-H-15.html#%_idx_1796">matrix, represented as sequence</a><br /> <a href="book-Z-H-15.html#%_idx_1808"><code>matrix-*-matrix</code></a><br /> <a href="book-Z-H-15.html#%_idx_1804"><code>matrix-*-vector</code></a><br /> <a href="book-Z-H-14.html#%_idx_1494"><code>max</code> (primitive procedure)</a><br /> <a href="book-Z-H-28.html#%_idx_4892">McAllester, David Allen</a>, <a href="book-Z-H-28.html#%_idx_4902">[2]</a><br /> <a href="book-Z-H-9.html#%_idx_28">McCarthy, John</a>, <a href="book-Z-H-9.html#%_idx_32">[2]</a>, <a href="book-Z-H-9.html#%_idx_36">[3]</a>, <a href="book-Z-H-28.html#%_idx_4824">[4]</a><br /> <a href="book-Z-H-28.html#%_idx_4878">McDermott, Drew</a><br /> <a href="book-Z-H-33.html#%_idx_5984">MDL</a><br /> <a href="book-Z-H-10.html#%_idx_126">means of abstraction</a><br />     <a href="book-Z-H-10.html#%_idx_232"><code>define</code></a><br /> <a href="book-Z-H-10.html#%_idx_122">means of combination</a>, <em>see also</em> closure <br /> <a href="book-Z-H-18.html#%_idx_2792">measure in a Euclidean ring</a><br /> <a href="book-Z-H-28.html#%_idx_4936"><code>member</code></a><br /> <a href="book-Z-H-22.html#%_idx_3324"><code>memo-fib</code></a><br /> <a href="book-Z-H-24.html#%_idx_3804"><code>memo-proc</code></a><br /> <a href="book-Z-H-11.html#%_idx_736">memoization</a>, <a href="book-Z-H-22.html#%_idx_3314">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_3904">call-by-need and</a><br />     <a href="book-Z-H-24.html#%_idx_3802">by <code>delay</code></a><br />     <a href="book-Z-H-27.html#%_idx_4746">garbage collection and</a><br />     <a href="book-Z-H-27.html#%_idx_4710">of thunks</a><br /> <a href="book-Z-H-22.html#%_idx_3326"><code>memoize</code></a><br /> memory <br />     <a href="book-Z-H-28.html#%_idx_4838">in 1964</a><br />     <a href="book-Z-H-33.html#%_idx_5830">list-structured</a><br /> <a href="book-Z-H-16.html#%_idx_2030"><code>memq</code></a><br /> <a href="book-Z-H-24.html#%_idx_3898"><code>merge</code></a><br /> <a href="book-Z-H-24.html#%_idx_4008"><code>merge-weighted</code></a><br /> merging infinite streams, <em>see</em> infinite stream(s) <br /> <a href="book-Z-H-14.html#%_idx_1466">message passing</a>, <a href="book-Z-H-17.html#%_idx_2486">[2]</a><br />     <a href="book-Z-H-21.html#%_idx_3122">environment model and</a><br />     <a href="book-Z-H-20.html#%_idx_2900">in bank account</a><br />     <a href="book-Z-H-22.html#%_idx_3394">in digital-circuit simulation</a><br />     <a href="book-Z-H-11.html#%_idx_704">tail recursion and</a><br /> <a href="book-Z-H-26.html#%_idx_4212">metacircular evaluator</a><br /> <a href="book-Z-H-26.html#%_idx_4210">metacircular evaluator for Scheme</a><br />     <a href="book-Z-H-26.html#%_idx_4638">analyzing version</a><br />     <a href="book-Z-H-26.html#%_idx_4384">combinations (procedure applications)</a><br />     <a href="book-Z-H-35.html#%_idx_6516">compilation of</a>, <a href="book-Z-H-35.html#%_idx_6524">[2]</a><br />     <a href="book-Z-H-26.html#%_idx_4224">data abstraction in</a>, <a href="book-Z-H-26.html#%_idx_4234">[2]</a>, <a href="book-Z-H-26.html#%_idx_4430">[3]</a>, <a href="book-Z-H-26.html#%_idx_4486">[4]</a><br />     <a href="book-Z-H-26.html#%_idx_4390">data-directed <code>eval</code></a><br />     <a href="book-Z-H-26.html#%_idx_4352">derived expressions</a><br />     <a href="book-Z-H-26.html#%_idx_4516">driver loop</a><br />     <a href="book-Z-H-26.html#%_idx_4640">efficiency of</a><br />     <a href="book-Z-H-26.html#%_idx_4218">environment model of evaluation in</a><br />     <a href="book-Z-H-26.html#%_idx_4454">environment operations</a><br />     <a href="book-Z-H-26.html#%_idx_4226"><code>eval</code> and <code>apply</code></a><br />     <a href="book-Z-H-26.html#%_idx_4220"><code>eval</code>-<code>apply</code> cycle</a>, <a href="book-Z-H-26.html#%_idx_4228">[2]</a><br />     <a href="book-Z-H-26.html#%_idx_4232">expression representation</a>, <a href="book-Z-H-26.html#%_idx_4274">[2]</a><br />     <a href="book-Z-H-26.html#%_idx_4496">global environment</a><br />     <a href="book-Z-H-26.html#%_idx_4252">higher-order procedures in</a><br />     <a href="book-Z-H-26.html#%_idx_4260">implemented language vs. implementation language</a><br />     <a href="book-Z-H-26.html#%_idx_4222">job of</a><br />     <a href="book-Z-H-26.html#%_idx_4272">order of operand evaluation</a><br />     <a href="book-Z-H-26.html#%_idx_4494">primitive procedures</a><br />     <a href="book-Z-H-26.html#%_idx_4464">representation of environments</a><br />     <a href="book-Z-H-26.html#%_idx_4438">representation of procedures</a><br />     <a href="book-Z-H-26.html#%_idx_4432">representation of true and false</a><br />     <a href="book-Z-H-26.html#%_idx_4492">running</a><br />     <a href="book-Z-H-26.html#%_idx_4394">special forms (additional)</a>, <a href="book-Z-H-26.html#%_idx_4404">[2]</a>, <a href="book-Z-H-26.html#%_idx_4406">[3]</a>, <a href="book-Z-H-26.html#%_idx_4412">[4]</a>, <a href="book-Z-H-26.html#%_idx_4420">[5]</a>, <a href="book-Z-H-26.html#%_idx_4424">[6]</a><br />     <a href="book-Z-H-26.html#%_idx_4354">special forms as derived expressions</a><br />     <a href="book-Z-H-26.html#%_idx_4278">symbolic differentiation and</a><br />     <a href="book-Z-H-26.html#%_idx_4276">syntax of evaluated language</a>, <a href="book-Z-H-26.html#%_idx_4386">[2]</a>, <a href="book-Z-H-26.html#%_idx_4428">[3]</a><br />     <a href="book-Z-H-34.html#%_idx_6094">tail recursiveness unspecified in</a><br />     <a href="book-Z-H-26.html#%_idx_4500"><code>true</code> and <code>false</code></a><br /> <a href="book-Z-H-25.html#%_idx_4194">metalinguistic abstraction</a><br /> <a href="book-Z-H-28.html#%_idx_4874">MicroPlanner</a><br /> <a href="book-Z-H-29.html#%_idx_5100">Microshaft</a><br /> <a href="book-Z-H-14.html#%_idx_1408"><code>midpoint-segment</code></a><br /> <a href="book-Z-H-11.html#%_idx_956">Miller, Gary L.</a><br /> <a href="book-Z-H-35.html#%_idx_6368">Miller, James S.</a><br /> <a href="book-Z-H-11.html#%_idx_954">Miller-Rabin test for primality</a><br /> <a href="book-Z-H-24.html#%_idx_4110">Milner, Robin</a><br /> <a href="book-Z-H-14.html#%_idx_1490"><code>min</code> (primitive procedure)</a><br /> <a href="book-Z-H-7.html#%_idx_4">Minsky, Marvin Lee</a>, <a href="book-Z-H-33.html#%_idx_5936">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1824">Miranda</a><br /> <a href="book-Z-H-29.html#%_idx_5066">MIT</a><br />     <a href="book-Z-H-9.html#%_idx_84">Artificial Intelligence Laboratory</a><br />     <a href="book-Z-H-15.html#%_idx_1866">early history of</a><br />     <a href="book-Z-H-9.html#%_idx_54">Project MAC</a><br />     <a href="book-Z-H-9.html#%_idx_34">Research Laboratory of Electronics</a>, <a href="book-Z-H-33.html#%_idx_5940">[2]</a><br /> MIT Scheme <br />     <a href="book-Z-H-24.html#%_idx_3756">the empty stream</a><br />     <a href="book-Z-H-26.html#%_idx_4580"><code>eval</code></a><br />     <a href="book-Z-H-26.html#%_idx_4610">internal definitions</a><br />     <a href="book-Z-H-10.html#%_idx_544">numbers</a><br />     <a href="book-Z-H-20.html#%_idx_2964"><code>random</code></a><br />     <a href="book-Z-H-26.html#%_idx_4582"><code>user-initial-environment</code></a><br />     <a href="book-Z-H-23.html#%_idx_3678"><code>without-interrupts</code></a><br /> <a href="book-Z-H-24.html#%_idx_4106">ML</a><br /> <a href="book-Z-H-15.html#%_idx_1700">mobile</a><br /> modeling <br />     <a href="book-Z-H-19.html#%_idx_2826">as a design strategy</a><br />     <a href="book-Z-H-10.html#%_idx_336">in science and engineering</a><br /> <a href="book-Z-H-34.html#%_idx_6130">models of evaluation</a><br /> modified registers, <em>see</em> instruction sequence <br /> <a href="book-Z-H-35.html#%_idx_6388"><code>modifies-register?</code></a><br /> <a href="book-Z-H-15.html#%_idx_1756">modularity</a>, <a href="book-Z-H-19.html#%_idx_2824">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_4184">along object boundaries</a><br />     <a href="book-Z-H-24.html#%_idx_4116">functional programs vs. objects</a><br />     <a href="book-Z-H-20.html#%_idx_2892">hiding principle</a><br />     <a href="book-Z-H-24.html#%_idx_3942">streams and</a><br />     <a href="book-Z-H-17.html#%_idx_2428">through dispatching on type</a><br />     <a href="book-Z-H-24.html#%_idx_4134">through infinite streams</a><br />     <a href="book-Z-H-20.html#%_idx_2920">through modeling with objects</a><br /> <a href="book-Z-H-11.html#%_idx_892">modulo <em>n</em></a><br /> <a href="book-Z-H-29.html#%_idx_5250"><em>modus ponens</em></a><br /> money, changing, <em>see</em> counting change <br /> <a href="book-Z-H-20.html#%_idx_2908">monitored procedure</a><br /> <a href="book-Z-H-20.html#%_idx_2956">Monte Carlo integration</a><br />     <a href="book-Z-H-24.html#%_idx_4138">stream formulation</a><br /> <a href="book-Z-H-20.html#%_idx_2936">Monte Carlo simulation</a><br />     <a href="book-Z-H-24.html#%_idx_4122">stream formulation</a><br /> <a href="book-Z-H-20.html#%_idx_2952"><code>monte-carlo</code></a><br />     <a href="book-Z-H-24.html#%_idx_4132">infinite stream</a><br /> <a href="book-Z-H-9.html#%_idx_50">Moon, David A.</a>, <a href="book-Z-H-33.html#%_idx_5954">[2]</a><br /> morning star, <em>see</em> evening star <br /> <a href="book-Z-H-20.html#%_idx_3008">Morris, J. H.</a><br /> <a href="book-Z-H-16.html#%_idx_2228">Morse code</a><br /> <a href="book-Z-H-29.html#%_idx_5262">Mouse, Minnie and Mickey</a><br /> <a href="book-Z-H-18.html#%_idx_2508"><code>mul</code> (generic)</a><br />     <a href="book-Z-H-18.html#%_idx_2716">used for polynomial coefficients</a><br /> <a href="book-Z-H-17.html#%_idx_2316"><code>mul-complex</code></a><br /> <a href="book-Z-H-14.html#%_idx_1498"><code>mul-interval</code></a><br />     <a href="book-Z-H-14.html#%_idx_1514">more efficient version</a><br /> <a href="book-Z-H-18.html#%_idx_2676"><code>mul-poly</code></a><br /> <a href="book-Z-H-14.html#%_idx_1312"><code>mul-rat</code></a><br /> <a href="book-Z-H-24.html#%_idx_3932"><code>mul-series</code></a><br /> <a href="book-Z-H-24.html#%_idx_3886"><code>mul-streams</code></a><br /> <a href="book-Z-H-18.html#%_idx_2712"><code>mul-terms</code></a><br /> <a href="book-Z-H-33.html#%_idx_5946">Multics time-sharing system</a><br /> <a href="book-Z-H-28.html#%_idx_4938"><code>multiple-dwelling</code></a><br /> <a href="book-Z-H-16.html#%_idx_2082"><code>multiplicand</code></a><br /> <a href="book-Z-H-11.html#%_idx_822">multiplication by Russian peasant method</a><br /> <code>multiplier</code> <br />     <a href="book-Z-H-22.html#%_idx_3538">primitive constraint</a><br />     <a href="book-Z-H-16.html#%_idx_2080">selector</a><br /> <a href="book-Z-H-15.html#%_idx_1790">Munro, Ian</a><br /> <a href="book-Z-H-22.html#%_idx_3128">mutable data objects</a>, <em>see also</em> queue; table <br />     <a href="book-Z-H-22.html#%_idx_3198">implemented with assignment</a><br />     <a href="book-Z-H-22.html#%_idx_3132">list structure</a><br />     <a href="book-Z-H-22.html#%_idx_3136">pairs</a><br />     <a href="book-Z-H-22.html#%_idx_3196">procedural representation of</a><br />     <a href="book-Z-H-22.html#%_idx_3190">shared data</a><br /> <a href="book-Z-H-22.html#%_idx_3130">mutator</a><br /> <a href="book-Z-H-23.html#%_idx_3640">mutex</a><br /> <a href="book-Z-H-23.html#%_idx_3646">mutual exclusion</a><br /> <a href="book-Z-H-22.html#%_idx_3174"><code>mystery</code></a></p>
<p></p>
<p></p>
<p><br /> name, <em>see also</em> local name; variable; local variable <br />     <a href="book-Z-H-20.html#%_idx_2888">encapsulated</a><br />     <a href="book-Z-H-10.html#%_idx_582">of a formal parameter</a><br />     <a href="book-Z-H-10.html#%_idx_310">of a procedure</a><br /> <a href="book-Z-H-26.html#%_idx_4416">named <code>let</code> (special form)</a><br /> naming <br />     <a href="book-Z-H-10.html#%_idx_216">of computational objects</a><br />     <a href="book-Z-H-10.html#%_idx_300">of procedures</a><br /> naming conventions <br />     <a href="book-Z-H-20.html#%_idx_2868"><code>!</code> for assignment and mutation</a><br />     <a href="book-Z-H-10.html#%_idx_520"><code>?</code> for predicates</a><br /> <a href="book-Z-H-35.html#%_idx_6204">native language of machine</a><br /> natural language <br />     parsing, <em>see</em> parsing natural language <br />     <a href="book-Z-H-16.html#%_idx_1994">quotation in</a><br /> needed registers, <em>see</em> instruction sequence <br /> <a href="book-Z-H-35.html#%_idx_6386"><code>needs-register?</code></a><br /> <a href="book-Z-H-29.html#%_idx_5328"><code>negate</code></a><br /> <a href="book-Z-H-15.html#%_idx_1584">nested applications of <code>car</code> and <code>cdr</code></a><br /> <a href="book-Z-H-10.html#%_idx_196">nested combinations</a><br /> nested definitions, <em>see</em> internal definition <br /> nested mappings, <em>see</em> mapping <br /> <a href="book-Z-H-33.html#%_idx_5992"><code>new</code> register</a><br /> <a href="book-Z-H-33.html#%_idx_5972"><code>new-cars</code> register</a><br /> <a href="book-Z-H-33.html#%_idx_5974"><code>new-cdrs</code> register</a><br /> <a href="book-Z-H-20.html#%_idx_2884"><code>new-withdraw</code></a><br /> <a href="book-Z-H-11.html#%_idx_938"><code>newline</code> (primitive procedure)</a>, <a href="book-Z-H-14.html#%_idx_1362">[2]</a><br /> Newton's method <br />     <a href="book-Z-H-10.html#%_idx_562">for cube roots</a><br />     <a href="book-Z-H-12.html#%_idx_1178">for differentiable functions</a><br />     <a href="book-Z-H-12.html#%_idx_1182">half-interval method vs.</a><br />     <a href="book-Z-H-10.html#%_idx_510">for square roots</a>, <a href="book-Z-H-12.html#%_idx_1200">[2]</a>, <a href="book-Z-H-12.html#%_idx_1212">[3]</a><br /> <a href="book-Z-H-12.html#%_idx_1196"><code>newton-transform</code></a><br /> <a href="book-Z-H-12.html#%_idx_1198"><code>newtons-method</code></a><br /> <a href="book-Z-H-35.html#%_idx_6252"><code>next</code> (linkage descriptor)</a><br /> <a href="book-Z-H-29.html#%_idx_5164"><code>next-to</code> (rules)</a><br /> <code>nil</code> <br />     <a href="book-Z-H-16.html#%_idx_2020">dispensing with</a><br />     <a href="book-Z-H-15.html#%_idx_1596">as empty list</a><br />     <a href="book-Z-H-15.html#%_idx_1562">as end-of-list marker</a><br />     <a href="book-Z-H-15.html#%_idx_1598">as ordinary variable in Scheme</a><br /> <a href="book-Z-H-34.html#%_idx_6098"><code>no-more-exps?</code></a><br /> <a href="book-Z-H-26.html#%_idx_4346"><code>no-operands?</code></a><br /> <a href="book-Z-H-10.html#%_idx_256">node of a tree</a><br /> <a href="book-Z-H-26.html#%_idx_4594">non-computable</a><br /> <a href="book-Z-H-27.html#%_idx_4686">non-strict</a><br /> <a href="book-Z-H-23.html#%_idx_3604">nondeterminism, in behavior of concurrent programs</a>, <a href="book-Z-H-24.html#%_idx_4180">[2]</a><br /> <a href="book-Z-H-28.html#%_idx_4836">nondeterministic choice point</a><br /> <a href="book-Z-H-28.html#%_idx_4806">nondeterministic computing</a><br /> <a href="book-Z-H-28.html#%_idx_4978">nondeterministic evaluator</a><br />     <a href="book-Z-H-28.html#%_idx_4970">order of operand evaluation</a><br /> <a href="book-Z-H-28.html#%_idx_4810">nondeterministic programming vs. Scheme programming</a>, <a href="book-Z-H-28.html#%_idx_4940">[2]</a>, <a href="book-Z-H-28.html#%_idx_4950">[3]</a>, <a href="book-Z-H-29.html#%_idx_5442">[4]</a><br /> nondeterministic programs <br />     <a href="book-Z-H-28.html#%_idx_4930">logic puzzles</a><br />     <a href="book-Z-H-28.html#%_idx_4812">pairs with prime sums</a><br />     <a href="book-Z-H-28.html#%_idx_4954">parsing natural language</a><br />     <a href="book-Z-H-28.html#%_idx_4914">Pythagorean triples</a>, <a href="book-Z-H-28.html#%_idx_4918">[2]</a>, <a href="book-Z-H-28.html#%_idx_4922">[3]</a><br /> <a href="book-Z-H-10.html#%_idx_340">normal-order evaluation</a><br />     <a href="book-Z-H-10.html#%_idx_480">applicative order vs.</a>, <a href="book-Z-H-11.html#%_idx_852">[2]</a>, <a href="book-Z-H-27.html#%_idx_4680">[3]</a><br />     <a href="book-Z-H-24.html#%_idx_4092">delayed evaluation and</a><br />     <a href="book-Z-H-34.html#%_idx_6126">in explicit-control evaluator</a><br />     <a href="book-Z-H-10.html#%_idx_484">of <code>if</code></a><br /> normal-order evaluator, <em>see</em> lazy evaluator <br /> <a href="book-Z-H-10.html#%_idx_462"><code>not</code> (primitive procedure)</a><br /> <a href="book-Z-H-29.html#%_idx_5130"><code>not</code> (query language)</a>, <a href="book-Z-H-29.html#%_idx_5268">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5204">evaluation of</a>, <a href="book-Z-H-29.html#%_idx_5326">[2]</a>, <a href="book-Z-H-29.html#%_idx_5438">[3]</a><br /> notation in this book <br />     <a href="book-Z-H-10.html#%_idx_314">italic symbols in expression syntax</a><br />     <a href="book-Z-H-10.html#%_idx_152">slanted characters for interpreter response</a><br /> <a href="book-Z-H-28.html#%_idx_4956"><code>nouns</code></a><br /> <a href="book-Z-H-12.html#%_idx_1242"><em>n</em>th root, as fixed point</a><br /> <a href="book-Z-H-15.html#%_idx_1614"><code>null?</code> (primitive procedure)</a><br />     <a href="book-Z-H-33.html#%_idx_5912">implemented with typed pointers</a><br /> <a href="book-Z-H-11.html#%_idx_874">number theory</a><br /> number(s) <br />     <a href="book-Z-H-10.html#%_idx_404">comparison of</a><br />     <a href="book-Z-H-10.html#%_idx_540">decimal point in</a><br />     <a href="book-Z-H-10.html#%_idx_406">equality of</a>, <a href="book-Z-H-16.html#%_idx_2038">[2]</a>, <a href="book-Z-H-33.html#%_idx_5878">[3]</a><br />     <a href="book-Z-H-18.html#%_idx_2512">in generic arithmetic system</a><br />     <a href="book-Z-H-10.html#%_idx_548">implementation dependencies</a><br />     <a href="book-Z-H-10.html#%_idx_140">integer vs. real number</a><br />     <a href="book-Z-H-10.html#%_idx_538">integer, exact</a><br />     <a href="book-Z-H-10.html#%_idx_148">in Lisp</a><br />     <a href="book-Z-H-10.html#%_idx_536">rational number</a><br /> <a href="book-Z-H-16.html#%_idx_2052"><code>number?</code> (primitive procedure)</a><br />     <a href="book-Z-H-18.html#%_idx_2554">data types and</a><br />     <a href="book-Z-H-33.html#%_idx_5916">implemented with typed pointers</a><br /> <a href="book-Z-H-14.html#%_idx_1302"><code>numer</code></a>, <a href="book-Z-H-14.html#%_idx_1350">[2]</a><br />     <a href="book-Z-H-14.html#%_idx_1418">axiom for</a><br />     <a href="book-Z-H-14.html#%_idx_1392">reducing to lowest terms</a><br /> <a href="book-Z-H-10.html#%_idx_142">numerical analysis</a><br /> <a href="book-Z-H-12.html#%_idx_1086">numerical analyst</a><br /> <a href="book-Z-H-10.html#%_idx_132">numerical data</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-33.html#%_idx_5886">obarray</a><br /> <a href="book-Z-H-35.html#%_idx_6218">object program</a><br /> <a href="book-Z-H-19.html#%_idx_2828">object(s)</a><br />     <a href="book-Z-H-20.html#%_idx_2918">benefits of modeling with</a><br />     <a href="book-Z-H-20.html#%_idx_2850">with time-varying state</a><br /> <a href="book-Z-H-18.html#%_idx_2622">object-oriented programming languages</a><br /> <a href="book-Z-H-33.html#%_idx_5990"><code>old</code> register</a><br /> <a href="book-Z-H-33.html#%_idx_5994"><code>oldcr</code> register</a><br /> <a href="book-Z-H-24.html#%_idx_3862"><code>ones</code> (infinite stream)</a><br />     <a href="book-Z-H-27.html#%_idx_4788">lazy-list version</a><br /> <a href="book-Z-H-31.html#%_idx_5522"><code>op</code> (in register machine)</a><br />     <a href="book-Z-H-32.html#%_idx_5788">simulating</a><br /> <a href="book-Z-H-35.html#%_idx_6424">open coding of primitives</a>, <a href="book-Z-H-35.html#%_idx_6460">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4344"><code>operands</code></a><br /> <a href="book-Z-H-10.html#%_idx_184">operands of a combination</a><br /> operation <br />     <a href="book-Z-H-18.html#%_idx_2572">cross-type</a><br />     <a href="book-Z-H-13.html#%_idx_1276">generic</a><br />     <a href="book-Z-H-31.html#%_idx_5472">in register machine</a><br /> <a href="book-Z-H-17.html#%_idx_2436">operation-and-type table</a><br />     <a href="book-Z-H-20.html#%_idx_2856">assignment needed for</a><br />     <a href="book-Z-H-22.html#%_idx_3298">implementing</a><br /> <a href="book-Z-H-32.html#%_idx_5792"><code>operation-exp</code></a><br /> <a href="book-Z-H-32.html#%_idx_5794"><code>operation-exp-op</code></a><br /> <a href="book-Z-H-32.html#%_idx_5796"><code>operation-exp-operands</code></a><br /> <a href="book-Z-H-26.html#%_idx_4342"><code>operator</code></a><br /> <a href="book-Z-H-10.html#%_idx_182">operator of a combination</a><br />     <a href="book-Z-H-12.html#%_idx_1166">combination as</a><br />     <a href="book-Z-H-10.html#%_idx_478">compound expression as</a><br />     <a href="book-Z-H-12.html#%_idx_1052"><code>lambda</code> expression as</a><br /> optimality <br />     <a href="book-Z-H-15.html#%_idx_1782">of Horner's rule</a><br />     <a href="book-Z-H-16.html#%_idx_2244">of Huffman code</a><br /> <a href="book-Z-H-29.html#%_idx_5128"><code>or</code> (query language)</a><br />     <a href="book-Z-H-29.html#%_idx_5200">evaluation of</a>, <a href="book-Z-H-29.html#%_idx_5322">[2]</a><br /> <a href="book-Z-H-10.html#%_idx_454"><code>or</code> (special form)</a><br />     <a href="book-Z-H-10.html#%_idx_458">evaluation of</a><br />     <a href="book-Z-H-10.html#%_idx_468">why a special form</a><br />     <a href="book-Z-H-26.html#%_idx_4398">with no subexpressions</a><br /> <a href="book-Z-H-22.html#%_idx_3350">or-gate</a><br />     <a href="book-Z-H-22.html#%_idx_3384"><code>or-gate</code></a>, <a href="book-Z-H-22.html#%_idx_3386">[2]</a><br /> <a href="book-Z-H-18.html#%_idx_2704"><code>order</code></a>, <a href="book-Z-H-18.html#%_idx_2746">[2]</a><br /> <a href="book-Z-H-11.html#%_idx_760">order notation</a><br /> order of evaluation <br />     <a href="book-Z-H-20.html#%_idx_3032">assignment and</a><br />     <a href="book-Z-H-21.html#%_idx_3066">implementation-dependent</a><br />     <a href="book-Z-H-35.html#%_idx_6414">in compiler</a><br />     <a href="book-Z-H-34.html#%_idx_6070">in explicit-control evaluator</a><br />     <a href="book-Z-H-26.html#%_idx_4270">in metacircular evaluator</a><br />     <a href="book-Z-H-20.html#%_idx_3030">in Scheme</a><br /> order of events <br />     <a href="book-Z-H-24.html#%_idx_3794">decoupling apparent from actual</a><br />     <a href="book-Z-H-23.html#%_idx_3590">indeterminacy in concurrent systems</a><br /> <a href="book-Z-H-11.html#%_idx_752">order of growth</a><br />     <a href="book-Z-H-11.html#%_idx_768">linear iterative process</a><br />     <a href="book-Z-H-11.html#%_idx_762">linear recursive process</a><br />     <a href="book-Z-H-11.html#%_idx_806">logarithmic</a><br />     <a href="book-Z-H-11.html#%_idx_774">tree-recursive process</a><br /> order of subexpression evaluation, <em>see</em> order of evaluation <br /> <a href="book-Z-H-16.html#%_idx_2126">ordered-list representation of sets</a><br /> <a href="book-Z-H-18.html#%_idx_2514">ordinary numbers (in generic arithmetic system)</a><br /> <a href="book-Z-H-15.html#%_idx_1916"><code>origin-frame</code></a><br /> <a href="book-Z-H-15.html#%_idx_1784">Ostrowski, A. M.</a><br /> <a href="book-Z-H-29.html#%_idx_5152"><code>outranked-by</code> (rule)</a>, <a href="book-Z-H-29.html#%_idx_5276">[2]</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-23.html#%_idx_3654">P operation on semaphore</a><br /> <a href="book-Z-H-17.html#%_idx_2442">package</a><br />     <a href="book-Z-H-18.html#%_idx_2536">complex-number</a><br />     <a href="book-Z-H-17.html#%_idx_2450">polar representation</a><br />     <a href="book-Z-H-18.html#%_idx_2678">polynomial</a><br />     <a href="book-Z-H-18.html#%_idx_2524">rational-number</a><br />     <a href="book-Z-H-17.html#%_idx_2444">rectangular representation</a><br />     <a href="book-Z-H-18.html#%_idx_2516">Scheme-number</a><br /> <a href="book-Z-H-15.html#%_idx_1862">painter(s)</a><br />     <a href="book-Z-H-15.html#%_idx_1898">higher-order operations</a><br />     <a href="book-Z-H-15.html#%_idx_1876">operations</a><br />     <a href="book-Z-H-15.html#%_idx_1946">represented as procedures</a><br />     <a href="book-Z-H-15.html#%_idx_1960">transforming and combining</a><br /> <a href="book-Z-H-14.html#%_idx_1318">pair(s)</a><br />     <a href="book-Z-H-14.html#%_idx_1458">axiomatic definition of</a><br />     <a href="book-Z-H-15.html#%_idx_1526">box-and-pointer notation for</a><br />     <a href="book-Z-H-24.html#%_idx_3984">infinite stream of</a><br />     <a href="book-Z-H-27.html#%_idx_4762">lazy</a><br />     <a href="book-Z-H-22.html#%_idx_3138">mutable</a><br />     <a href="book-Z-H-14.html#%_idx_1450">procedural representation of</a>, <a href="book-Z-H-22.html#%_idx_3200">[2]</a>, <a href="book-Z-H-27.html#%_idx_4772">[3]</a><br />     <a href="book-Z-H-33.html#%_idx_5852">represented using vectors</a><br />     <a href="book-Z-H-15.html#%_idx_1558">used to represent sequence</a><br />     <a href="book-Z-H-15.html#%_idx_1678">used to represent tree</a><br /> <a href="book-Z-H-15.html#%_idx_1686"><code>pair?</code> (primitive procedure)</a><br />     <a href="book-Z-H-33.html#%_idx_5910">implemented with typed pointers</a><br /> <a href="book-Z-H-24.html#%_idx_4002"><code>pairs</code></a><br /> <a href="book-Z-H-15.html#%_idx_1786">Pan, V. Y.</a><br /> <a href="book-Z-H-23.html#%_idx_3612"><code>parallel-execute</code></a><br /> <a href="book-Z-H-35.html#%_idx_6402"><code>parallel-instruction-sequences</code></a><br /> parallelism, <em>see</em> concurrency <br /> parameter, <em>see</em> formal parameters <br /> parameter passing, <em>see</em> call-by-name argument passing; call-by-need argument passing <br /> parentheses <br />     <a href="book-Z-H-10.html#%_idx_178">delimiting combination</a><br />     <a href="book-Z-H-10.html#%_idx_360">delimiting <code>cond</code> clauses</a><br />     <a href="book-Z-H-10.html#%_idx_328">in procedure definition</a><br /> <a href="book-Z-H-28.html#%_idx_4966"><code>parse</code></a><br /> <a href="book-Z-H-28.html#%_idx_4964"><code>parse-...</code></a><br /> <a href="book-Z-H-28.html#%_idx_4952">parsing natural language</a><br />     <a href="book-Z-H-28.html#%_idx_4972">real language understanding vs. toy parser</a><br /> <a href="book-Z-H-24.html#%_idx_3892"><code>partial-sums</code></a><br /> <a href="book-Z-H-10.html#%_idx_288">Pascal</a><br />     <a href="book-Z-H-24.html#%_idx_4100">lack of higher-order procedures</a><br />     <a href="book-Z-H-11.html#%_idx_686">recursive procedures</a><br />     <a href="book-Z-H-15.html#%_idx_1548">restrictions on compound data</a><br />     <a href="book-Z-H-22.html#%_idx_3572">weakness in handling compound objects</a><br /> <a href="book-Z-H-11.html#%_idx_742">Pascal, Blaise</a><br /> <a href="book-Z-H-11.html#%_idx_738">Pascal's triangle</a><br /> <a href="book-Z-H-20.html#%_idx_2914">password-protected bank account</a><br /> <a href="book-Z-H-29.html#%_idx_5112">pattern</a><br /> <a href="book-Z-H-29.html#%_idx_5176">pattern matching</a><br />     <a href="book-Z-H-29.html#%_idx_5342">implementation</a><br />     <a href="book-Z-H-29.html#%_idx_5212">unification vs.</a>, <a href="book-Z-H-29.html#%_idx_5222">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5114">pattern variable</a><br />     <a href="book-Z-H-29.html#%_idx_5298">representation of</a>, <a href="book-Z-H-29.html#%_idx_5400">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5346"><code>pattern-match</code></a><br /> <a href="book-Z-H-32.html#%_idx_5662"><code>pc</code> register</a><br /> <a href="book-Z-H-31.html#%_idx_5544"><code>perform</code> (in register machine)</a><br />     <a href="book-Z-H-32.html#%_idx_5762">simulating</a><br /> <a href="book-Z-H-32.html#%_idx_5766"><code>perform-action</code></a><br /> <a href="book-Z-H-6.html#%_idx_2">Perlis, Alan J.</a>, <a href="book-Z-H-15.html#%_idx_1552">[2]</a><br />     <a href="book-Z-H-10.html#%_idx_208">quips</a>, <a href="book-Z-H-10.html#%_idx_278">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1832">permutations of a set</a><br />     <a href="book-Z-H-15.html#%_idx_1840"><code>permutations</code></a><br /> <a href="book-Z-H-28.html#%_idx_4942">Phillips, Hubert</a><br /> <img src="book-Z-G-D-9.gif" /> (pi) <br />     <a href="book-Z-H-12.html#%_idx_1094">approximation with half-interval method</a><br />     <a href="book-Z-H-20.html#%_idx_2958">approximation with Monte Carlo integration</a>, <a href="book-Z-H-24.html#%_idx_4140">[2]</a><br />     <a href="book-Z-H-20.html#%_idx_2940">Cesàro estimate for</a>, <a href="book-Z-H-24.html#%_idx_4120">[2]</a><br />     <a href="book-Z-H-12.html#%_idx_974">Leibniz's series for</a>, <a href="book-Z-H-24.html#%_idx_3950">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_3954">stream of approximations</a><br />     <a href="book-Z-H-12.html#%_idx_1014">Wallis's formula for</a><br /> <a href="book-Z-H-24.html#%_idx_3962"><code>pi-stream</code></a><br /> <a href="book-Z-H-12.html#%_idx_978"><code>pi-sum</code></a><br />     <a href="book-Z-H-12.html#%_idx_1000">with higher-order procedures</a><br />     <a href="book-Z-H-12.html#%_idx_1030">with <code>lambda</code></a><br /> <a href="book-Z-H-15.html#%_idx_1854">picture language</a><br /> <a href="book-Z-H-11.html#%_idx_812">Pingala, Áchárya</a><br /> <a href="book-Z-H-23.html#%_idx_3582">pipelining</a><br /> <a href="book-Z-H-9.html#%_idx_52">Pitman, Kent M.</a><br /> <a href="book-Z-H-28.html#%_idx_4866">Planner</a><br /> <a href="book-Z-H-14.html#%_idx_1404">point, represented as a pair</a><br /> pointer <br />     <a href="book-Z-H-15.html#%_idx_1530">in box-and-pointer notation</a><br />     <a href="book-Z-H-33.html#%_idx_5862">typed</a><br /> <a href="book-Z-H-17.html#%_idx_2452"><code>polar</code> package</a><br /> <a href="book-Z-H-17.html#%_idx_2376"><code>polar?</code></a><br /> <a href="book-Z-H-18.html#%_idx_2664">poly</a><br /> <a href="book-Z-H-18.html#%_idx_2680"><code>polynomial</code> package</a><br /> <a href="book-Z-H-18.html#%_idx_2652">polynomial arithmetic</a><br />     <a href="book-Z-H-18.html#%_idx_2670">addition</a><br />     <a href="book-Z-H-18.html#%_idx_2758">division</a><br />     <a href="book-Z-H-18.html#%_idx_2788">Euclid's Algorithm</a><br />     <a href="book-Z-H-18.html#%_idx_2784">greatest common divisor</a>, <a href="book-Z-H-18.html#%_idx_2810">[2]</a><br />     <a href="book-Z-H-18.html#%_idx_2682">interfaced to generic arithmetic system</a><br />     <a href="book-Z-H-18.html#%_idx_2672">multiplication</a><br />     <a href="book-Z-H-18.html#%_idx_2812">probabilistic algorithm for GCD</a><br />     <a href="book-Z-H-18.html#%_idx_2780">rational functions</a><br />     <a href="book-Z-H-18.html#%_idx_2756">subtraction</a><br /> <a href="book-Z-H-18.html#%_idx_2650">polynomial(s)</a><br />     <a href="book-Z-H-18.html#%_idx_2772">canonical form</a><br />     <a href="book-Z-H-18.html#%_idx_2728">dense</a><br />     <a href="book-Z-H-15.html#%_idx_1772">evaluating with Horner's rule</a><br />     <a href="book-Z-H-18.html#%_idx_2766">hierarchy of types</a><br />     <a href="book-Z-H-18.html#%_idx_2656">indeterminate of</a><br />     <a href="book-Z-H-18.html#%_idx_2732">sparse</a><br />     <a href="book-Z-H-18.html#%_idx_2660">univariate</a><br /> <a href="book-Z-H-32.html#%_idx_5652"><code>pop</code></a><br /> <a href="book-Z-H-9.html#%_idx_66">Portable Standard Lisp</a><br /> <a href="book-Z-H-35.html#%_idx_6504">porting a language</a><br /> <a href="book-Z-H-24.html#%_idx_3910">power series, as stream</a><br />     <a href="book-Z-H-24.html#%_idx_3926">adding</a><br />     <a href="book-Z-H-24.html#%_idx_3934">dividing</a><br />     <a href="book-Z-H-24.html#%_idx_3922">integrating</a><br />     <a href="book-Z-H-24.html#%_idx_3928">multiplying</a><br /> <a href="book-Z-H-23.html#%_idx_3712">PowerPC</a><br /> <a href="book-Z-H-10.html#%_idx_390">predicate</a><br />     <a href="book-Z-H-10.html#%_idx_366">of <code>cond</code> clause</a><br />     <a href="book-Z-H-10.html#%_idx_434">of <code>if</code></a><br />     <a href="book-Z-H-10.html#%_idx_518">naming convention for</a><br /> <a href="book-Z-H-16.html#%_idx_2234">prefix code</a><br /> <a href="book-Z-H-10.html#%_idx_190">prefix notation</a><br />     <a href="book-Z-H-16.html#%_idx_2098">infix notation vs.</a><br /> <a href="book-Z-H-28.html#%_idx_4968"><code>prepositions</code></a><br /> <a href="book-Z-H-35.html#%_idx_6264"><code>preserving</code></a>, <a href="book-Z-H-35.html#%_idx_6272">[2]</a>, <a href="book-Z-H-35.html#%_idx_6398">[3]</a>, <a href="book-Z-H-35.html#%_idx_6420">[4]</a><br /> <a href="book-Z-H-10.html#%_idx_198">pretty-printing</a><br /> <a href="book-Z-H-11.html#%_idx_858">prime number(s)</a><br />     <a href="book-Z-H-11.html#%_idx_930">cryptography and</a><br />     <a href="book-Z-H-24.html#%_idx_3842">Eratosthenes's sieve for</a><br />     <a href="book-Z-H-11.html#%_idx_870">Fermat test for</a><br />     infinite stream of, <em>see</em> <code>primes</code> <br />     <a href="book-Z-H-11.html#%_idx_950">Miller-Rabin test for</a><br />     <a href="book-Z-H-11.html#%_idx_856">testing for</a><br /> <a href="book-Z-H-28.html#%_idx_4814"><code>prime-sum-pair</code></a><br /> <a href="book-Z-H-15.html#%_idx_1828"><code>prime-sum-pairs</code></a><br />     <a href="book-Z-H-24.html#%_idx_3990">infinite stream</a><br /> <a href="book-Z-H-11.html#%_idx_866"><code>prime?</code></a>, <a href="book-Z-H-24.html#%_idx_3874">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_3854"><code>primes</code> (infinite stream)</a><br />     <a href="book-Z-H-24.html#%_idx_3872">implicit definition</a><br /> <a href="book-Z-H-22.html#%_idx_3510">primitive constraints</a><br /> <a href="book-Z-H-10.html#%_idx_120">primitive expression</a><br />     <a href="book-Z-H-10.html#%_idx_264">evaluation of</a><br />     <a href="book-Z-H-10.html#%_idx_158">name of primitive procedure</a><br />     <a href="book-Z-H-10.html#%_idx_218">name of variable</a><br />     <a href="book-Z-H-10.html#%_idx_150">number</a><br /> primitive procedures (those marked <em>ns</em> are not in the IEEE Scheme standard) <br />     <a href="book-Z-H-10.html#%_idx_166"><code>*</code></a><br />     <a href="book-Z-H-10.html#%_idx_164"><code>+</code></a><br />     <a href="book-Z-H-10.html#%_idx_172"><code>-</code></a>, <a href="book-Z-H-10.html#%_idx_412">[2]</a><br />     <a href="book-Z-H-10.html#%_idx_174"><code>/</code></a><br />     <a href="book-Z-H-10.html#%_idx_400"><code>&lt;</code></a><br />     <a href="book-Z-H-10.html#%_idx_402"><code>=</code></a><br />     <a href="book-Z-H-10.html#%_idx_398"><code>&gt;</code></a><br />     <a href="book-Z-H-17.html#%_idx_2460"><code>apply</code></a><br />     <a href="book-Z-H-17.html#%_idx_2326"><code>atan</code></a><br />     <a href="book-Z-H-14.html#%_idx_1326"><code>car</code></a><br />     <a href="book-Z-H-14.html#%_idx_1330"><code>cdr</code></a><br />     <a href="book-Z-H-14.html#%_idx_1322"><code>cons</code></a><br />     <a href="book-Z-H-12.html#%_idx_1114"><code>cos</code></a><br />     <a href="book-Z-H-14.html#%_idx_1360"><code>display</code></a><br />     <a href="book-Z-H-16.html#%_idx_2028"><code>eq?</code></a><br />     <a href="book-Z-H-12.html#%_idx_1090"><code>error</code> (<em>ns</em>)</a><br />     <a href="book-Z-H-26.html#%_idx_4574"><code>eval</code> (<em>ns</em>)</a><br />     <a href="book-Z-H-15.html#%_idx_1570"><code>list</code></a><br />     <a href="book-Z-H-12.html#%_idx_1136"><code>log</code></a><br />     <a href="book-Z-H-14.html#%_idx_1496"><code>max</code></a><br />     <a href="book-Z-H-14.html#%_idx_1492"><code>min</code></a><br />     <a href="book-Z-H-14.html#%_idx_1364"><code>newline</code></a><br />     <a href="book-Z-H-10.html#%_idx_464"><code>not</code></a><br />     <a href="book-Z-H-15.html#%_idx_1616"><code>null?</code></a><br />     <a href="book-Z-H-16.html#%_idx_2054"><code>number?</code></a><br />     <a href="book-Z-H-15.html#%_idx_1688"><code>pair?</code></a><br />     <a href="book-Z-H-24.html#%_idx_3908"><code>quotient</code></a><br />     <a href="book-Z-H-11.html#%_idx_902"><code>random</code> (<em>ns</em>)</a>, <a href="book-Z-H-20.html#%_idx_2968">[2]</a><br />     <a href="book-Z-H-26.html#%_idx_4524"><code>read</code></a><br />     <a href="book-Z-H-11.html#%_idx_802"><code>remainder</code></a><br />     <a href="book-Z-H-18.html#%_idx_2644"><code>round</code></a><br />     <a href="book-Z-H-11.html#%_idx_934"><code>runtime</code> (<em>ns</em>)</a><br />     <a href="book-Z-H-22.html#%_idx_3142"><code>set-car!</code></a><br />     <a href="book-Z-H-22.html#%_idx_3146"><code>set-cdr!</code></a><br />     <a href="book-Z-H-12.html#%_idx_1118"><code>sin</code></a><br />     <a href="book-Z-H-16.html#%_idx_2062"><code>symbol?</code></a><br />     <a href="book-Z-H-33.html#%_idx_5846"><code>vector-ref</code></a><br />     <a href="book-Z-H-33.html#%_idx_5850"><code>vector-set!</code></a><br /> primitive query, <em>see</em> simple query <br /> <a href="book-Z-H-34.html#%_idx_6076"><code>primitive-apply</code></a><br /> <a href="book-Z-H-26.html#%_idx_4508"><code>primitive-implementation</code></a><br /> <a href="book-Z-H-26.html#%_idx_4510"><code>primitive-procedure-names</code></a><br /> <a href="book-Z-H-26.html#%_idx_4512"><code>primitive-procedure-objects</code></a><br /> <a href="book-Z-H-26.html#%_idx_4442"><code>primitive-procedure?</code></a>, <a href="book-Z-H-26.html#%_idx_4506">[2]</a><br /> <a href="book-Z-H-17.html#%_idx_2362">principle of least commitment</a><br /> <a href="book-Z-H-31.html#%_idx_5540"><code>print</code> operation in register machine</a><br /> <a href="book-Z-H-14.html#%_idx_1410"><code>print-point</code></a><br /> <a href="book-Z-H-22.html#%_idx_3260"><code>print-queue</code></a><br /> <a href="book-Z-H-14.html#%_idx_1370"><code>print-rat</code></a><br /> <a href="book-Z-H-34.html#%_idx_6146"><code>print-result</code></a><br />     <a href="book-Z-H-34.html#%_idx_6164">monitored-stack version</a><br /> <a href="book-Z-H-32.html#%_idx_5810"><code>print-stack-statistics</code> operation in register machine</a><br /> <a href="book-Z-H-14.html#%_idx_1356">printing, primitives for</a><br /> <a href="book-Z-H-11.html#%_idx_908">probabilistic algorithm</a>, <a href="book-Z-H-18.html#%_idx_2814">[2]</a>, <a href="book-Z-H-24.html#%_idx_3850">[3]</a><br /> <code>probe</code> <br />     <a href="book-Z-H-22.html#%_idx_3542">in constraint system</a><br />     <a href="book-Z-H-22.html#%_idx_3432">in digital-circuit simulator</a><br /> <a href="book-Z-H-34.html#%_idx_6026"><code>proc</code> register</a><br /> <a href="book-Z-H-10.html#%_idx_574">procedural abstraction</a><br /> <a href="book-Z-H-14.html#%_idx_1448">procedural representation of data</a><br />     <a href="book-Z-H-22.html#%_idx_3202">mutable data</a><br /> <a href="book-Z-H-9.html#%_idx_114">procedure</a>, <a href="book-Z-H-10.html#%_idx_128">[2]</a><br />     <a href="book-Z-H-12.html#%_idx_1044">anonymous</a><br />     <a href="book-Z-H-10.html#%_idx_192">arbitrary number of arguments</a>, <a href="book-Z-H-15.html#%_idx_1654">[2]</a><br />     <a href="book-Z-H-12.html#%_idx_968">as argument</a><br />     <a href="book-Z-H-10.html#%_idx_570">as black box</a><br />     <a href="book-Z-H-10.html#%_idx_322">body of</a><br />     <a href="book-Z-H-10.html#%_idx_298">compound</a><br />     <a href="book-Z-H-10.html#%_idx_304">creating with <code>define</code></a><br />     <a href="book-Z-H-12.html#%_idx_1038">creating with <code>lambda</code></a>, <a href="book-Z-H-21.html#%_idx_3070">[2]</a>, <a href="book-Z-H-21.html#%_idx_3074">[3]</a><br />     <a href="book-Z-H-9.html#%_idx_116">as data</a><br />     <a href="book-Z-H-10.html#%_idx_292">definition of</a><br />     <a href="book-Z-H-12.html#%_idx_1224">first-class in Lisp</a><br />     <a href="book-Z-H-10.html#%_idx_318">formal parameters of</a><br />     <a href="book-Z-H-12.html#%_idx_1080">as general method</a><br />     <a href="book-Z-H-16.html#%_idx_2270">generic</a>, <a href="book-Z-H-17.html#%_idx_2294">[2]</a><br />     higher-order, <em>see</em> higher-order procedure <br />     <a href="book-Z-H-20.html#%_idx_2882">implicit <code>begin</code> in body of</a><br />     <a href="book-Z-H-10.html#%_idx_488">mathematical function vs.</a><br />     <a href="book-Z-H-22.html#%_idx_3320">memoized</a><br />     <a href="book-Z-H-20.html#%_idx_2910">monitored</a><br />     <a href="book-Z-H-10.html#%_idx_312">name of</a><br />     <a href="book-Z-H-10.html#%_idx_302">naming (with <code>define</code>)</a><br />     <a href="book-Z-H-11.html#%_idx_630">as pattern for local evolution of a process</a><br />     <a href="book-Z-H-12.html#%_idx_1158">as returned value</a><br />     <a href="book-Z-H-32.html#%_idx_5698">returning multiple values</a><br />     <a href="book-Z-H-10.html#%_idx_600">scope of formal parameters</a><br />     <a href="book-Z-H-27.html#%_idx_4694">special form vs.</a>, <a href="book-Z-H-27.html#%_idx_4766">[2]</a><br /> procedure application <br />     <a href="book-Z-H-10.html#%_idx_180">combination denoting</a><br />     <a href="book-Z-H-21.html#%_idx_3084">environment model of</a><br />     substitution model of, <em>see</em> substitution model of procedure application <br /> <a href="book-Z-H-26.html#%_idx_4450"><code>procedure-body</code></a><br /> <a href="book-Z-H-26.html#%_idx_4452"><code>procedure-environment</code></a><br /> <a href="book-Z-H-26.html#%_idx_4448"><code>procedure-parameters</code></a><br /> <a href="book-Z-H-9.html#%_idx_10">process</a><br />     <a href="book-Z-H-11.html#%_idx_668">iterative</a><br />     <a href="book-Z-H-11.html#%_idx_676">linear iterative</a><br />     <a href="book-Z-H-11.html#%_idx_664">linear recursive</a><br />     <a href="book-Z-H-11.html#%_idx_634">local evolution of</a><br />     <a href="book-Z-H-11.html#%_idx_754">order of growth of</a><br />     <a href="book-Z-H-11.html#%_idx_656">recursive</a><br />     <a href="book-Z-H-11.html#%_idx_756">resources required by</a><br />     <a href="book-Z-H-11.html#%_idx_650">shape of</a><br />     <a href="book-Z-H-11.html#%_idx_714">tree-recursive</a><br /> <a href="book-Z-H-12.html#%_idx_1010"><code>product</code></a><br />     <a href="book-Z-H-12.html#%_idx_1022">as accumulation</a><br /> <a href="book-Z-H-16.html#%_idx_2078"><code>product?</code></a><br /> <a href="book-Z-H-9.html#%_idx_14">program</a><br />     <a href="book-Z-H-26.html#%_idx_4544">as abstract machine</a><br />     <a href="book-Z-H-15.html#%_idx_1838">comments in</a><br />     <a href="book-Z-H-26.html#%_idx_4540">as data</a><br />     <a href="book-Z-H-10.html#%_idx_236">incremental development of</a><br />     <a href="book-Z-H-10.html#%_idx_238">structure of</a>, <a href="book-Z-H-10.html#%_idx_566">[2]</a>, <a href="book-Z-H-10.html#%_idx_610">[3]</a>, <em>see also</em> abstraction barriers <br />     <a href="book-Z-H-26.html#%_idx_4564">structured with subroutines</a><br /> <a href="book-Z-H-32.html#%_idx_5664">program counter</a><br /> programming <br />     data-directed, <em>see</em> data-directed programming <br />     <a href="book-Z-H-24.html#%_idx_3792">demand-driven</a><br />     <a href="book-Z-H-10.html#%_idx_118">elements of</a><br />     functional, <em>see</em> functional programming <br />     <a href="book-Z-H-20.html#%_idx_3016">imperative</a><br />     <a href="book-Z-H-24.html#%_idx_3828">odious style</a><br /> <a href="book-Z-H-9.html#%_idx_16">programming language</a><br />     <a href="book-Z-H-27.html#%_idx_4670">design of</a><br />     <a href="book-Z-H-24.html#%_idx_4158">functional</a><br />     <a href="book-Z-H-29.html#%_idx_5078">logic</a><br />     <a href="book-Z-H-18.html#%_idx_2624">object-oriented</a><br />     <a href="book-Z-H-24.html#%_idx_4104">strongly typed</a><br />     <a href="book-Z-H-10.html#%_idx_504">very high-level</a><br /> <a href="book-Z-H-28.html#%_idx_4876">Prolog</a>, <a href="book-Z-H-29.html#%_idx_5056">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4534"><code>prompt-for-input</code></a><br /> <a href="book-Z-H-26.html#%_idx_4520">prompts</a><br />     <a href="book-Z-H-34.html#%_idx_6142">explicit-control evaluator</a><br />     <a href="book-Z-H-27.html#%_idx_4734">lazy evaluator</a><br />     <a href="book-Z-H-26.html#%_idx_4530">metacircular evaluator</a><br />     <a href="book-Z-H-28.html#%_idx_5022">nondeterministic evaluator</a><br />     <a href="book-Z-H-29.html#%_idx_5292">query interpreter</a><br /> <a href="book-Z-H-22.html#%_idx_3426"><code>propagate</code></a><br /> <a href="book-Z-H-22.html#%_idx_3482">propagation of constraints</a><br /> <a href="book-Z-H-10.html#%_idx_502">proving programs correct</a><br /> <a href="book-Z-H-20.html#%_idx_2926">pseudo-random sequence</a><br /> <a href="book-Z-H-18.html#%_idx_2802">pseudodivision of polynomials</a><br /> <a href="book-Z-H-18.html#%_idx_2804">pseudoremainder of polynomials</a><br /> <a href="book-Z-H-32.html#%_idx_5654"><code>push</code></a><br /> <a href="book-Z-H-17.html#%_idx_2438"><code>put</code></a>, <a href="book-Z-H-22.html#%_idx_3302">[2]</a><br /> puzzles <br />     <a href="book-Z-H-15.html#%_idx_1850">eight-queens puzzle</a>, <a href="book-Z-H-28.html#%_idx_4948">[2]</a><br />     <a href="book-Z-H-28.html#%_idx_4926">logic puzzles</a><br /> Pythagorean triples <br />     <a href="book-Z-H-28.html#%_idx_4912">with nondeterministic programs</a>, <a href="book-Z-H-28.html#%_idx_4916">[2]</a>, <a href="book-Z-H-28.html#%_idx_4920">[3]</a><br />     <a href="book-Z-H-24.html#%_idx_4004">with streams</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-29.html#%_idx_5228"><code>qeval</code></a>, <a href="book-Z-H-29.html#%_idx_5310">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_4186">quantum mechanics</a><br /> <a href="book-Z-H-35.html#%_idx_6284">quasiquote</a><br /> <a href="book-Z-H-15.html#%_idx_1852"><code>queens</code></a><br /> <a href="book-Z-H-29.html#%_idx_5092">query</a>, <em>see also</em> simple query; compound query <br /> <a href="book-Z-H-29.html#%_idx_5094">query interpreter</a><br />     <a href="book-Z-H-29.html#%_idx_5242">adding rule or assertion</a><br />     compound query, <em>see</em> compound query <br />     <a href="book-Z-H-29.html#%_idx_5372">data base</a><br />     <a href="book-Z-H-29.html#%_idx_5234">driver loop</a>, <a href="book-Z-H-29.html#%_idx_5290">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5452">environment structure in</a><br />     <a href="book-Z-H-29.html#%_idx_5178">frame</a>, <a href="book-Z-H-29.html#%_idx_5414">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5282">improvements to</a>, <a href="book-Z-H-29.html#%_idx_5426">[2]</a>, <a href="book-Z-H-29.html#%_idx_5432">[3]</a><br />     <a href="book-Z-H-29.html#%_idx_5260">infinite loops</a>, <a href="book-Z-H-29.html#%_idx_5284">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5302">instantiation</a><br />     <a href="book-Z-H-29.html#%_idx_5218">Lisp interpreter vs.</a>, <a href="book-Z-H-29.html#%_idx_5230">[2]</a>, <a href="book-Z-H-29.html#%_idx_5446">[3]</a><br />     <a href="book-Z-H-29.html#%_idx_5172">overview</a><br />     <a href="book-Z-H-29.html#%_idx_5174">pattern matching</a>, <a href="book-Z-H-29.html#%_idx_5340">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5300">pattern-variable representation</a>, <a href="book-Z-H-29.html#%_idx_5398">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5266">problems with <code>not</code> and <code>lisp-value</code></a>, <a href="book-Z-H-29.html#%_idx_5434">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5226">query evaluator</a>, <a href="book-Z-H-29.html#%_idx_5306">[2]</a><br />     rule, <em>see</em> rule <br />     simple query, <em>see</em> simple query <br />     <a href="book-Z-H-29.html#%_idx_5384">stream operations</a><br />     <a href="book-Z-H-29.html#%_idx_5184">streams of frames</a>, <a href="book-Z-H-29.html#%_idx_5238">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5396">syntax of query language</a><br />     <a href="book-Z-H-29.html#%_idx_5208">unification</a>, <a href="book-Z-H-29.html#%_idx_5360">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5090">query language</a>, <a href="book-Z-H-29.html#%_idx_5096">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5138">abstraction in</a><br />     compound query, <em>see</em> compound query <br />     <a href="book-Z-H-29.html#%_idx_5102">data base</a><br />     <a href="book-Z-H-29.html#%_idx_5134">equality testing in</a><br />     <a href="book-Z-H-29.html#%_idx_5280">extensions to</a>, <a href="book-Z-H-29.html#%_idx_5420">[2]</a><br />     <a href="book-Z-H-29.html#%_idx_5156">logical deductions</a><br />     <a href="book-Z-H-29.html#%_idx_5244">mathematical logic vs.</a><br />     rule, <em>see</em> rule <br />     simple query, <em>see</em> simple query <br /> <a href="book-Z-H-29.html#%_idx_5294"><code>query-driver-loop</code></a><br /> <a href="book-Z-H-10.html#%_idx_522">question mark, in predicate names</a><br /> <a href="book-Z-H-22.html#%_idx_3220">queue</a><br />     <a href="book-Z-H-22.html#%_idx_3264">double-ended</a><br />     <a href="book-Z-H-22.html#%_idx_3224">front of</a><br />     <a href="book-Z-H-22.html#%_idx_3230">operations on</a><br />     <a href="book-Z-H-22.html#%_idx_3262">procedural implementation of</a><br />     <a href="book-Z-H-22.html#%_idx_3222">rear of</a><br />     <a href="book-Z-H-22.html#%_idx_3440">in simulation agenda</a><br /> <a href="book-Z-H-16.html#%_idx_1988">quotation</a><br />     <a href="book-Z-H-16.html#%_idx_2004">of character strings</a><br />     <a href="book-Z-H-16.html#%_idx_1998">of Lisp data objects</a><br />     <a href="book-Z-H-16.html#%_idx_1992">in natural language</a><br /> <a href="book-Z-H-16.html#%_idx_2002">quotation mark, single vs. double</a><br /> <a href="book-Z-H-16.html#%_idx_2014"><code>quote</code> (special form)</a><br />     <a href="book-Z-H-26.html#%_idx_4528"><code>read</code> and</a>, <a href="book-Z-H-29.html#%_idx_5408">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4286"><code>quoted?</code></a><br /> <a href="book-Z-H-24.html#%_idx_3906"><code>quotient</code> (primitive procedure)</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-11.html#%_idx_958">Rabin, Michael O.</a><br /> <a href="book-Z-H-10.html#%_idx_514">radicand</a><br /> <a href="book-Z-H-24.html#%_idx_4010">Ramanujan numbers</a><br /> <a href="book-Z-H-24.html#%_idx_4014">Ramanujan, Srinivasa</a><br /> <a href="book-Z-H-20.html#%_idx_2934"><code>rand</code></a><br />     <a href="book-Z-H-20.html#%_idx_2974">with reset</a><br /> <a href="book-Z-H-11.html#%_idx_900"><code>random</code> (primitive procedure)</a><br />     <a href="book-Z-H-20.html#%_idx_2852">assignment needed for</a><br />     <a href="book-Z-H-20.html#%_idx_2966">MIT Scheme</a><br /> <a href="book-Z-H-20.html#%_idx_2970"><code>random-in-range</code></a><br /> <a href="book-Z-H-20.html#%_idx_2854">random-number generator</a>, <a href="book-Z-H-20.html#%_idx_2922">[2]</a><br />     <a href="book-Z-H-20.html#%_idx_2938">in Monte Carlo simulation</a><br />     <a href="book-Z-H-11.html#%_idx_894">in primality testing</a><br />     <a href="book-Z-H-20.html#%_idx_2972">with reset</a><br />     <a href="book-Z-H-24.html#%_idx_4136">with reset, stream version</a><br /> <a href="book-Z-H-24.html#%_idx_4124"><code>random-numbers</code> (infinite stream)</a><br /> <a href="book-Z-H-29.html#%_idx_5048">Raphael, Bertram</a><br /> <a href="book-Z-H-18.html#%_idx_2526"><code>rational</code> package</a><br /> <a href="book-Z-H-18.html#%_idx_2776">rational function</a><br />     <a href="book-Z-H-18.html#%_idx_2806">reducing to lowest terms</a><br /> rational number(s) <br />     <a href="book-Z-H-14.html#%_idx_1296">arithmetic operations on</a><br />     <a href="book-Z-H-10.html#%_idx_526">in MIT Scheme</a><br />     <a href="book-Z-H-14.html#%_idx_1354">printing</a><br />     <a href="book-Z-H-14.html#%_idx_1372">reducing to lowest terms</a>, <a href="book-Z-H-14.html#%_idx_1386">[2]</a><br />     <a href="book-Z-H-14.html#%_idx_1346">represented as pairs</a><br /> <a href="book-Z-H-14.html#%_idx_1298">rational-number arithmetic</a><br />     <a href="book-Z-H-18.html#%_idx_2528">interfaced to generic arithmetic system</a><br />     <a href="book-Z-H-13.html#%_idx_1260">need for compound data</a><br /> <a href="book-Z-H-27.html#%_idx_4678">Raymond, Eric</a>, <a href="book-Z-H-28.html#%_idx_4850">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_4028">RC circuit</a><br /> <a href="book-Z-H-26.html#%_idx_4522"><code>read</code> (primitive procedure)</a><br />     <a href="book-Z-H-29.html#%_idx_5352">dotted-tail notation handling by</a><br />     <a href="book-Z-H-29.html#%_idx_5404">macro characters</a><br /> <a href="book-Z-H-31.html#%_idx_5538"><code>read</code> operation in register machine</a><br /> <a href="book-Z-H-10.html#%_idx_204">read-eval-print loop</a>, <em>see also</em> driver loop <br /> <a href="book-Z-H-34.html#%_idx_6144"><code>read-eval-print-loop</code></a><br /> <a href="book-Z-H-29.html#%_idx_5402">reader macro character</a><br /> <a href="book-Z-H-10.html#%_idx_138">real number</a><br /> <code>real-part</code> <br />     <a href="book-Z-H-17.html#%_idx_2464">data-directed</a><br />     <a href="book-Z-H-17.html#%_idx_2344">polar representation</a><br />     <a href="book-Z-H-17.html#%_idx_2328">rectangular representation</a><br />     <a href="book-Z-H-17.html#%_idx_2406">with tagged data</a><br /> <a href="book-Z-H-17.html#%_idx_2390"><code>real-part-polar</code></a><br /> <a href="book-Z-H-17.html#%_idx_2378"><code>real-part-rectangular</code></a><br /> <a href="book-Z-H-22.html#%_idx_3244"><code>rear-ptr</code></a><br /> <a href="book-Z-H-32.html#%_idx_5690"><code>receive</code> procedure</a><br /> <a href="book-Z-H-16.html#%_idx_2204">record, in a data base</a><br /> <a href="book-Z-H-14.html#%_idx_1412">rectangle, representing</a><br /> <a href="book-Z-H-17.html#%_idx_2446"><code>rectangular</code> package</a><br /> <a href="book-Z-H-17.html#%_idx_2374"><code>rectangular?</code></a><br /> <a href="book-Z-H-10.html#%_idx_248">recursion</a><br />     <a href="book-Z-H-18.html#%_idx_2722">data-directed</a><br />     <a href="book-Z-H-10.html#%_idx_250">expressing complicated process</a><br />     <a href="book-Z-H-29.html#%_idx_5150">in rules</a><br />     <a href="book-Z-H-15.html#%_idx_1680">in working with trees</a><br /> <a href="book-Z-H-9.html#%_idx_26">recursion equations</a><br /> <a href="book-Z-H-26.html#%_idx_4568">recursion theory</a><br /> recursive procedure <br />     <a href="book-Z-H-10.html#%_idx_564">recursive procedure definition</a><br />     <a href="book-Z-H-11.html#%_idx_680">recursive process vs.</a><br />     <a href="book-Z-H-26.html#%_idx_4624">specifying without <code>define</code></a><br /> <a href="book-Z-H-11.html#%_idx_654">recursive process</a><br />     <a href="book-Z-H-11.html#%_idx_638">iterative process vs.</a>, <a href="book-Z-H-21.html#%_idx_3090">[2]</a>, <a href="book-Z-H-31.html#%_idx_5568">[3]</a>, <a href="book-Z-H-35.html#%_idx_6410">[4]</a><br />     <a href="book-Z-H-11.html#%_idx_660">linear</a>, <a href="book-Z-H-11.html#%_idx_766">[2]</a><br />     <a href="book-Z-H-11.html#%_idx_682">recursive procedure vs.</a><br />     <a href="book-Z-H-31.html#%_idx_5564">register machine for</a><br />     <a href="book-Z-H-11.html#%_idx_716">tree</a>, <a href="book-Z-H-11.html#%_idx_778">[2]</a><br /> <a href="book-Z-H-16.html#%_idx_2174">red-black tree</a><br /> <a href="book-Z-H-14.html#%_idx_1374">reducing to lowest terms</a>, <a href="book-Z-H-14.html#%_idx_1388">[2]</a>, <a href="book-Z-H-18.html#%_idx_2808">[3]</a><br /> <a href="book-Z-H-26.html#%_idx_4380">Rees, Jonathan A.</a>, <a href="book-Z-H-26.html#%_idx_4644">[2]</a><br /> <a href="book-Z-H-20.html#%_idx_2990">referential transparency</a><br /> <a href="book-Z-H-31.html#%_idx_5526"><code>reg</code> (in register machine)</a><br />     <a href="book-Z-H-32.html#%_idx_5768">simulating</a><br /> <a href="book-Z-H-30.html#%_idx_5458">register machine</a><br />     <a href="book-Z-H-31.html#%_idx_5536">actions</a><br />     <a href="book-Z-H-31.html#%_idx_5466">controller</a><br />     <a href="book-Z-H-31.html#%_idx_5486">controller diagram</a><br />     <a href="book-Z-H-31.html#%_idx_5464">data paths</a><br />     <a href="book-Z-H-31.html#%_idx_5480">data-path diagram</a><br />     <a href="book-Z-H-31.html#%_idx_5462">design of</a><br />     <a href="book-Z-H-31.html#%_idx_5492">language for describing</a><br />     <a href="book-Z-H-32.html#%_idx_5804">monitoring performance</a><br />     <a href="book-Z-H-32.html#%_idx_5622">simulator</a><br />     <a href="book-Z-H-31.html#%_idx_5562">stack</a><br />     <a href="book-Z-H-31.html#%_idx_5550">subroutine</a><br />     <a href="book-Z-H-31.html#%_idx_5484">test operation</a><br /> <a href="book-Z-H-32.html#%_idx_5658">register table, in simulator</a><br /> <a href="book-Z-H-30.html#%_idx_5460">register(s)</a><br />     <a href="book-Z-H-32.html#%_idx_5640">representing</a><br />     <a href="book-Z-H-32.html#%_idx_5822">tracing</a><br /> <a href="book-Z-H-32.html#%_idx_5776"><code>register-exp</code></a><br /> <a href="book-Z-H-32.html#%_idx_5778"><code>register-exp-reg</code></a><br /> register-machine language <br />     <a href="book-Z-H-31.html#%_idx_5516"><code>assign</code></a>, <a href="book-Z-H-31.html#%_idx_5598">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5504"><code>branch</code></a>, <a href="book-Z-H-31.html#%_idx_5606">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5528"><code>const</code></a>, <a href="book-Z-H-31.html#%_idx_5596">[2]</a>, <a href="book-Z-H-31.html#%_idx_5616">[3]</a><br />     <a href="book-Z-H-31.html#%_idx_5498">entry point</a><br />     <a href="book-Z-H-31.html#%_idx_5512"><code>goto</code></a>, <a href="book-Z-H-31.html#%_idx_5610">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5494">instructions</a>, <a href="book-Z-H-31.html#%_idx_5592">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5496">label</a><br />     <a href="book-Z-H-31.html#%_idx_5508"><code>label</code></a>, <a href="book-Z-H-31.html#%_idx_5608">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5520"><code>op</code></a>, <a href="book-Z-H-31.html#%_idx_5600">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5542"><code>perform</code></a>, <a href="book-Z-H-31.html#%_idx_5602">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5524"><code>reg</code></a>, <a href="book-Z-H-31.html#%_idx_5594">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5578"><code>restore</code></a>, <a href="book-Z-H-31.html#%_idx_5614">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5574"><code>save</code></a>, <a href="book-Z-H-31.html#%_idx_5612">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5500"><code>test</code></a>, <a href="book-Z-H-31.html#%_idx_5604">[2]</a><br /> <a href="book-Z-H-32.html#%_idx_5624">register-machine simulator</a><br /> <a href="book-Z-H-35.html#%_idx_6382"><code>registers-modified</code></a><br /> <a href="book-Z-H-35.html#%_idx_6380"><code>registers-needed</code></a><br /> <a href="book-Z-H-22.html#%_idx_3508">relations, computing in terms of</a>, <a href="book-Z-H-29.html#%_idx_5038">[2]</a><br /> <a href="book-Z-H-12.html#%_idx_1028">relatively prime</a><br /> <a href="book-Z-H-23.html#%_idx_3724">relativity, theory of</a><br /> <a href="book-Z-H-23.html#%_idx_3644">release a mutex</a><br /> <a href="book-Z-H-11.html#%_idx_800"><code>remainder</code> (primitive procedure)</a><br /> <a href="book-Z-H-11.html#%_idx_890">remainder modulo <em>n</em></a><br /> <a href="book-Z-H-18.html#%_idx_2796"><code>remainder-terms</code></a><br /> <a href="book-Z-H-15.html#%_idx_1842"><code>remove</code></a><br /> <a href="book-Z-H-22.html#%_idx_3418"><code>remove-first-agenda-item!</code></a>, <a href="book-Z-H-22.html#%_idx_3478">[2]</a><br /> <a href="book-Z-H-28.html#%_idx_4828"><code>require</code></a><br />     <a href="book-Z-H-28.html#%_idx_5026">as a special form</a><br /> <a href="book-Z-H-35.html#%_idx_6426">reserved words</a>, <a href="book-Z-H-35.html#%_idx_6462">[2]</a><br /> resistance <br />     <a href="book-Z-H-14.html#%_idx_1482">formula for parallel resistors</a>, <a href="book-Z-H-14.html#%_idx_1524">[2]</a><br />     <a href="book-Z-H-14.html#%_idx_1484">tolerance of resistors</a><br /> <a href="book-Z-H-29.html#%_idx_5046">resolution principle</a><br /> <a href="book-Z-H-29.html#%_idx_5060">resolution, Horn-clause</a><br /> <a href="book-Z-H-26.html#%_idx_4334"><code>rest-exps</code></a><br /> <a href="book-Z-H-26.html#%_idx_4350"><code>rest-operands</code></a><br /> <a href="book-Z-H-22.html#%_idx_3468"><code>rest-segments</code></a><br /> <a href="book-Z-H-18.html#%_idx_2700"><code>rest-terms</code></a>, <a href="book-Z-H-18.html#%_idx_2740">[2]</a><br /> <a href="book-Z-H-31.html#%_idx_5580"><code>restore</code> (in register machine)</a>, <a href="book-Z-H-32.html#%_idx_5800">[2]</a><br />     <a href="book-Z-H-33.html#%_idx_5922">implementing</a><br />     <a href="book-Z-H-32.html#%_idx_5758">simulating</a><br /> <a href="book-Z-H-35.html#%_idx_6254"><code>return</code> (linkage descriptor)</a><br /> <a href="book-Z-H-32.html#%_idx_5696">returning multiple values</a><br /> <a href="book-Z-H-23.html#%_idx_3706">Reuter, Andreas</a><br /> <a href="book-Z-H-15.html#%_idx_1642"><code>reverse</code></a><br />     <a href="book-Z-H-15.html#%_idx_1816">as folding</a><br />     <a href="book-Z-H-29.html#%_idx_5286">rules</a><br /> <a href="book-Z-H-11.html#%_idx_824">Rhind Papyrus</a><br /> <a href="book-Z-H-16.html#%_idx_2156"><code>right-branch</code></a>, <a href="book-Z-H-16.html#%_idx_2262">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1890"><code>right-split</code></a><br /> <a href="book-Z-H-22.html#%_idx_3388">ripple-carry adder</a><br /> <a href="book-Z-H-11.html#%_idx_922">Rivest, Ronald L.</a>, <a href="book-Z-H-16.html#%_idx_2180">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_4086">RLC circuit</a><br /> <a href="book-Z-H-29.html#%_idx_5068">Robinson, J. A.</a><br /> <a href="book-Z-H-15.html#%_idx_1982">robustness</a><br /> <a href="book-Z-H-16.html#%_idx_2282">rock songs, 1950s</a><br /> <a href="book-Z-H-15.html#%_idx_1868">Rogers, William Barton</a><br /> <a href="book-Z-H-33.html#%_idx_5966"><code>root</code> register</a><br /> roots of equation, <em>see</em> half-interval method; Newton's method <br /> <a href="book-Z-H-15.html#%_idx_1968"><code>rotate90</code></a><br /> <a href="book-Z-H-18.html#%_idx_2642"><code>round</code> (primitive procedure)</a><br /> <a href="book-Z-H-10.html#%_idx_144">roundoff error</a>, <a href="book-Z-H-17.html#%_idx_2308">[2]</a><br /> <a href="book-Z-H-35.html#%_idx_6370">Rozas, Guillermo Juan</a><br /> <a href="book-Z-H-11.html#%_idx_928">RSA algorithm</a><br /> <a href="book-Z-H-29.html#%_idx_5136">rule (query language)</a><br />     <a href="book-Z-H-29.html#%_idx_5216">applying</a>, <a href="book-Z-H-29.html#%_idx_5356">[2]</a>, <a href="book-Z-H-29.html#%_idx_5454">[3]</a><br />     <a href="book-Z-H-29.html#%_idx_5146">without body</a>, <a href="book-Z-H-29.html#%_idx_5160">[2]</a>, <a href="book-Z-H-29.html#%_idx_5336">[3]</a><br /> <a href="book-Z-H-15.html#%_idx_1870">Runkle, John Daniel</a><br /> <a href="book-Z-H-11.html#%_idx_932"><code>runtime</code> (primitive procedure)</a><br /> <a href="book-Z-H-11.html#%_idx_820">Russian peasant method of multiplication</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-29.html#%_idx_5142"><code>same</code> (rule)</a><br /> <a href="book-Z-H-16.html#%_idx_2066"><code>same-variable?</code></a>, <a href="book-Z-H-18.html#%_idx_2668">[2]</a><br /> sameness and change <br />     <a href="book-Z-H-20.html#%_idx_2986">meaning of</a><br />     <a href="book-Z-H-22.html#%_idx_3180">shared data and</a><br /> <a href="book-Z-H-29.html#%_idx_5126">satisfy a compound query</a><br /> <a href="book-Z-H-29.html#%_idx_5118">satisfy a pattern (simple query)</a><br /> <a href="book-Z-H-31.html#%_idx_5576"><code>save</code> (in register machine)</a>, <a href="book-Z-H-32.html#%_idx_5802">[2]</a><br />     <a href="book-Z-H-33.html#%_idx_5920">implementing</a><br />     <a href="book-Z-H-32.html#%_idx_5752">simulating</a><br /> <a href="book-Z-H-15.html#%_idx_1662"><code>scale-list</code></a>, <a href="book-Z-H-15.html#%_idx_1668">[2]</a>, <a href="book-Z-H-27.html#%_idx_4784">[3]</a><br /> <a href="book-Z-H-24.html#%_idx_3870"><code>scale-stream</code></a><br /> <a href="book-Z-H-15.html#%_idx_1708"><code>scale-tree</code></a>, <a href="book-Z-H-15.html#%_idx_1710">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1942"><code>scale-vect</code></a><br /> <a href="book-Z-H-33.html#%_idx_5978"><code>scan</code> register</a><br /> <a href="book-Z-H-26.html#%_idx_4614"><code>scan-out-defines</code></a><br /> <a href="book-Z-H-26.html#%_idx_4606">scanning out internal definitions</a><br />     <a href="book-Z-H-35.html#%_idx_6446">in compiler</a>, <a href="book-Z-H-35.html#%_idx_6454">[2]</a><br /> <a href="book-Z-H-9.html#%_idx_42">Scheme</a><br />     <a href="book-Z-H-9.html#%_idx_86">history of</a><br /> <a href="book-Z-H-34.html#%_idx_5998">Scheme chip</a>, <a href="book-Z-H-34.html#%_idx_6010">[2]</a><br /> <a href="book-Z-H-18.html#%_idx_2518"><code>scheme-number</code> package</a><br /> <a href="book-Z-H-18.html#%_idx_2584"><code>scheme-number-&gt;complex</code></a><br /> <a href="book-Z-H-18.html#%_idx_2628"><code>scheme-number-&gt;scheme-number</code></a><br /> <a href="book-Z-H-20.html#%_idx_3010">Schmidt, Eric</a><br /> <a href="book-Z-H-10.html#%_idx_594">scope of a variable</a>, <em>see also</em> lexical scoping <br />     <a href="book-Z-H-26.html#%_idx_4602">internal <code>define</code></a><br />     <a href="book-Z-H-12.html#%_idx_1072">in <code>let</code></a><br />     <a href="book-Z-H-10.html#%_idx_602">procedure's formal parameters</a><br /> search <br />     <a href="book-Z-H-16.html#%_idx_2146">of binary tree</a><br />     <a href="book-Z-H-28.html#%_idx_4856">depth-first</a><br />     <a href="book-Z-H-28.html#%_idx_4844">systematic</a><br /> <a href="book-Z-H-12.html#%_idx_1084"><code>search</code></a><br /> <a href="book-Z-H-29.html#%_idx_5108">secretary, importance of</a><br /> <a href="book-Z-H-22.html#%_idx_3446"><code>segment-queue</code></a><br /> <a href="book-Z-H-22.html#%_idx_3444"><code>segment-time</code></a><br /> <a href="book-Z-H-22.html#%_idx_3462"><code>segments</code></a><br /> <a href="book-Z-H-15.html#%_idx_1950"><code>segments-&gt;painter</code></a><br /> <a href="book-Z-H-14.html#%_idx_1290">selector</a><br />     <a href="book-Z-H-14.html#%_idx_1384">as abstraction barrier</a><br />     <a href="book-Z-H-17.html#%_idx_2402">generic</a>, <a href="book-Z-H-17.html#%_idx_2420">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4240">self-evaluating expression</a><br /> <a href="book-Z-H-26.html#%_idx_4282"><code>self-evaluating?</code></a><br /> <a href="book-Z-H-23.html#%_idx_3648">semaphore</a><br />     <a href="book-Z-H-23.html#%_idx_3692">of size <em>n</em></a><br /> <a href="book-Z-H-10.html#%_idx_284">semicolon</a><br />     <a href="book-Z-H-15.html#%_idx_1834">comment introduced by</a><br /> <a href="book-Z-H-16.html#%_idx_2232">separator code</a><br /> <a href="book-Z-H-24.html#%_idx_3966">sequence accelerator</a><br /> sequence of expressions <br />     <a href="book-Z-H-10.html#%_idx_444">in consequent of <code>cond</code></a><br />     <a href="book-Z-H-10.html#%_idx_326">in procedure body</a><br /> <a href="book-Z-H-15.html#%_idx_1554">sequence(s)</a><br />     <a href="book-Z-H-15.html#%_idx_1718">as conventional interface</a><br />     <a href="book-Z-H-15.html#%_idx_1758">as source of modularity</a><br />     <a href="book-Z-H-15.html#%_idx_1738">operations on</a><br />     <a href="book-Z-H-15.html#%_idx_1556">represented by pairs</a><br /> <a href="book-Z-H-26.html#%_idx_4336"><code>sequence-&gt;exp</code></a><br /> <a href="book-Z-H-23.html#%_idx_3634"><code>serialized-exchange</code></a><br />     <a href="book-Z-H-23.html#%_idx_3708">with deadlock avoidance</a><br /> <a href="book-Z-H-23.html#%_idx_3610">serializer</a><br />     <a href="book-Z-H-23.html#%_idx_3638">implementing</a><br />     <a href="book-Z-H-23.html#%_idx_3622">with multiple shared resources</a><br /> <a href="book-Z-H-12.html#%_idx_982">series, summation of</a><br />     <a href="book-Z-H-24.html#%_idx_3964">accelerating sequence of approximations</a><br />     <a href="book-Z-H-24.html#%_idx_3956">with streams</a><br /> <a href="book-Z-H-16.html#%_idx_2100">set</a><br />     <code>set          </code> (special form), <em>see also</em> assignment <br />     <a href="book-Z-H-16.html#%_idx_2200">data base as</a><br />     <a href="book-Z-H-16.html#%_idx_2102">operations on</a><br />     <a href="book-Z-H-15.html#%_idx_1830">permutations of</a><br />     <a href="book-Z-H-16.html#%_idx_2136">represented as binary tree</a><br />     <a href="book-Z-H-16.html#%_idx_2124">represented as ordered list</a><br />     <a href="book-Z-H-16.html#%_idx_2112">represented as unordered list</a><br />     <a href="book-Z-H-15.html#%_idx_1714">subsets of</a><br /> <a href="book-Z-H-20.html#%_idx_2860"><code>set!</code> (special form)</a><br />     <a href="book-Z-H-21.html#%_idx_3080">environment model of</a><br />     <a href="book-Z-H-20.html#%_idx_2864">value of</a><br /> <a href="book-Z-H-22.html#%_idx_3140"><code>set-car!</code> (primitive procedure)</a><br />     <a href="book-Z-H-33.html#%_idx_5900">implemented with vectors</a><br />     <a href="book-Z-H-22.html#%_idx_3216">procedural implementation of</a><br />     <a href="book-Z-H-22.html#%_idx_3148">value of</a><br /> <a href="book-Z-H-22.html#%_idx_3144"><code>set-cdr!</code> (primitive procedure)</a><br />     <a href="book-Z-H-33.html#%_idx_5902">implemented with vectors</a><br />     <a href="book-Z-H-22.html#%_idx_3218">procedural implementation of</a><br />     <a href="book-Z-H-22.html#%_idx_3152">value of</a><br /> <a href="book-Z-H-32.html#%_idx_5646"><code>set-contents!</code></a><br /> <a href="book-Z-H-22.html#%_idx_3460"><code>set-current-time!</code></a><br /> <a href="book-Z-H-22.html#%_idx_3246"><code>set-front-ptr!</code></a><br /> <a href="book-Z-H-32.html#%_idx_5710"><code>set-instruction-execution-proc!</code></a><br /> <a href="book-Z-H-22.html#%_idx_3248"><code>set-rear-ptr!</code></a><br /> <a href="book-Z-H-32.html#%_idx_5628"><code>set-register-contents!</code></a>, <a href="book-Z-H-32.html#%_idx_5678">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3464"><code>set-segments!</code></a><br /> <a href="book-Z-H-22.html#%_idx_3372"><code>set-signal!</code></a>, <a href="book-Z-H-22.html#%_idx_3406">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3526"><code>set-value!</code></a>, <a href="book-Z-H-22.html#%_idx_3554">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4462"><code>set-variable-value!</code></a>, <a href="book-Z-H-26.html#%_idx_4482">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4502"><code>setup-environment</code></a><br /> <a href="book-Z-H-21.html#%_idx_3060">shadow a binding</a><br /> <a href="book-Z-H-11.html#%_idx_924">Shamir, Adi</a><br /> <a href="book-Z-H-11.html#%_idx_648">shape of a process</a><br /> <a href="book-Z-H-22.html#%_idx_3178">shared data</a><br /> <a href="book-Z-H-23.html#%_idx_3624">shared resources</a><br /> <a href="book-Z-H-23.html#%_idx_3598">shared state</a><br /> <a href="book-Z-H-15.html#%_idx_1966"><code>shrink-to-upper-right</code></a><br /> <a href="book-Z-H-29.html#%_idx_5088">Shrobe, Howard E.</a><br /> <a href="book-Z-H-20.html#%_idx_3000">side-effect bug</a><br /> <a href="book-Z-H-24.html#%_idx_3844">sieve of Eratosthenes</a><br />     <a href="book-Z-H-24.html#%_idx_3852"><code>sieve</code></a><br /> <a href="book-Z-H-12.html#%_idx_988">sum (sigma) notation</a><br /> signal processing <br />     <a href="book-Z-H-12.html#%_idx_1236">smoothing a function</a><br />     <a href="book-Z-H-24.html#%_idx_4042">smoothing a signal</a>, <a href="book-Z-H-24.html#%_idx_4050">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_4018">stream model of</a><br />     <a href="book-Z-H-24.html#%_idx_4034">zero crossings of a signal</a>, <a href="book-Z-H-24.html#%_idx_4038">[2]</a>, <a href="book-Z-H-24.html#%_idx_4046">[3]</a><br /> <a href="book-Z-H-22.html#%_idx_3336">signal, digital</a><br /> <a href="book-Z-H-34.html#%_idx_6156"><code>signal-error</code></a><br /> <a href="book-Z-H-15.html#%_idx_1728">signal-flow diagram</a>, <a href="book-Z-H-24.html#%_idx_4026">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1726">signal-processing view of computation</a><br /> <a href="book-Z-H-29.html#%_idx_5110">simple query</a><br />     <a href="book-Z-H-29.html#%_idx_5182">processing</a>, <a href="book-Z-H-29.html#%_idx_5194">[2]</a>, <a href="book-Z-H-29.html#%_idx_5220">[3]</a>, <a href="book-Z-H-29.html#%_idx_5312">[4]</a><br /> <a href="book-Z-H-29.html#%_idx_5314"><code>simple-query</code></a><br /> <a href="book-Z-H-16.html#%_idx_2086">simplification of algebraic expressions</a><br /> <a href="book-Z-H-12.html#%_idx_1006">Simpson's Rule for numerical integration</a><br /> simulation <br />     of digital circuit, <em>see</em> digital-circuit simulation <br />     <a href="book-Z-H-22.html#%_idx_3332">event-driven</a><br />     <a href="book-Z-H-34.html#%_idx_6162">as machine-design tool</a><br />     <a href="book-Z-H-32.html#%_idx_5806">for monitoring performance of register machine</a><br />     Monte Carlo, <em>see</em> Monte Carlo simulation <br />     of register machine, <em>see</em> register-machine simulator <br /> <a href="book-Z-H-12.html#%_idx_1116"><code>sin</code> (primitive procedure)</a><br /> sine <br />     <a href="book-Z-H-11.html#%_idx_786">approximation for small angle</a><br />     <a href="book-Z-H-24.html#%_idx_3918">power series for</a><br /> <a href="book-Z-H-29.html#%_idx_5394"><code>singleton-stream</code></a><br /> <a href="book-Z-H-22.html#%_idx_3486">SKETCHPAD</a><br /> <a href="book-Z-H-11.html#%_idx_860"><code>smallest-divisor</code></a><br />     <a href="book-Z-H-11.html#%_idx_942">more efficient version</a><br /> <a href="book-Z-H-22.html#%_idx_3490">Smalltalk</a><br /> <a href="book-Z-H-12.html#%_idx_1234">smoothing a function</a><br /> <a href="book-Z-H-24.html#%_idx_4044">smoothing a signal</a>, <a href="book-Z-H-24.html#%_idx_4052">[2]</a><br /> <a href="book-Z-H-27.html#%_idx_4674">snarf</a><br /> <a href="book-Z-H-9.html#%_idx_102">Solar System's chaotic dynamics</a><br /> <a href="book-Z-H-20.html#%_idx_2930">Solomonoff, Ray</a><br /> <a href="book-Z-H-24.html#%_idx_4066"><code>solve</code> differential equation</a>, <a href="book-Z-H-24.html#%_idx_4076">[2]</a><br />     <a href="book-Z-H-27.html#%_idx_4804">lazy-list version</a><br />     <a href="book-Z-H-26.html#%_idx_4616">with scanned-out definitions</a><br /> solving equation, <em>see</em> half-interval method; Newton's method; <code>solve</code> <br /> <a href="book-Z-H-35.html#%_idx_6214">source language</a><br /> <a href="book-Z-H-35.html#%_idx_6216">source program</a><br /> <a href="book-Z-H-35.html#%_idx_6502">Spafford, Eugene H.</a><br /> <a href="book-Z-H-18.html#%_idx_2730">sparse polynomial</a><br /> <a href="book-Z-H-10.html#%_idx_272">special form</a><br />     <a href="book-Z-H-26.html#%_idx_4358">as derived expression in evaluator</a><br />     <a href="book-Z-H-10.html#%_idx_558">need for</a><br />     <a href="book-Z-H-27.html#%_idx_4692">procedure vs.</a>, <a href="book-Z-H-27.html#%_idx_4764">[2]</a><br /> special forms (those marked <em>ns</em> are not in the IEEE Scheme standard) <br />     <a href="book-Z-H-10.html#%_idx_448"><code>and</code></a><br />     <a href="book-Z-H-20.html#%_idx_2876"><code>begin</code></a><br />     <a href="book-Z-H-10.html#%_idx_354"><code>cond</code></a><br />     <a href="book-Z-H-24.html#%_idx_3776"><code>cons-stream</code> (<em>ns</em>)</a><br />     <a href="book-Z-H-10.html#%_idx_226"><code>define</code></a>, <a href="book-Z-H-10.html#%_idx_308">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_3770"><code>delay</code> (<em>ns</em>)</a><br />     <a href="book-Z-H-10.html#%_idx_422"><code>if</code></a><br />     <a href="book-Z-H-12.html#%_idx_1036"><code>lambda</code></a><br />     <a href="book-Z-H-12.html#%_idx_1064"><code>let</code></a><br />     <a href="book-Z-H-26.html#%_idx_4410"><code>let*</code></a><br />     <a href="book-Z-H-26.html#%_idx_4620"><code>letrec</code></a><br />     <a href="book-Z-H-26.html#%_idx_4418">named <code>let</code></a><br />     <a href="book-Z-H-10.html#%_idx_456"><code>or</code></a><br />     <a href="book-Z-H-16.html#%_idx_2016"><code>quote</code></a><br />     <a href="book-Z-H-20.html#%_idx_2862"><code>set!</code></a><br /> <a href="book-Z-H-15.html#%_idx_1908"><code>split</code></a><br /> <a href="book-Z-H-10.html#%_idx_550"><code>sqrt</code></a><br />     <a href="book-Z-H-10.html#%_idx_624">block structured</a><br />     <a href="book-Z-H-21.html#%_idx_3118">in environment model</a><br />     <a href="book-Z-H-12.html#%_idx_1126">as fixed point</a>, <a href="book-Z-H-12.html#%_idx_1170">[2]</a>, <a href="book-Z-H-12.html#%_idx_1210">[3]</a>, <a href="book-Z-H-12.html#%_idx_1214">[4]</a><br />     <a href="book-Z-H-12.html#%_idx_1248">as iterative improvement</a><br />     <a href="book-Z-H-12.html#%_idx_1202">with Newton's method</a>, <a href="book-Z-H-12.html#%_idx_1216">[2]</a><br />     <a href="book-Z-H-31.html#%_idx_5548">register machine for</a><br />     <a href="book-Z-H-24.html#%_idx_3980">as stream limit</a><br /> <a href="book-Z-H-24.html#%_idx_3948"><code>sqrt-stream</code></a><br /> <a href="book-Z-H-10.html#%_idx_294"><code>square</code></a><br />     <a href="book-Z-H-21.html#%_idx_3072">in environment model</a><br /> <a href="book-Z-H-10.html#%_idx_508">square root</a>, <em>see also</em> <code>sqrt</code> <br />     <a href="book-Z-H-24.html#%_idx_3946">stream of approximations</a><br /> <a href="book-Z-H-15.html#%_idx_1894"><code>square-limit</code></a>, <a href="book-Z-H-15.html#%_idx_1906">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1900"><code>square-of-four</code></a><br /> <a href="book-Z-H-22.html#%_idx_3562"><code>squarer</code> (constraint)</a>, <a href="book-Z-H-22.html#%_idx_3564">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1970"><code>squash-inwards</code></a><br /> <a href="book-Z-H-11.html#%_idx_678">stack</a><br />     <a href="book-Z-H-34.html#%_idx_6054">framed</a><br />     <a href="book-Z-H-31.html#%_idx_5560">for recursion in register machine</a><br />     <a href="book-Z-H-32.html#%_idx_5648">representing</a>, <a href="book-Z-H-33.html#%_idx_5918">[2]</a><br /> <a href="book-Z-H-35.html#%_idx_6362">stack allocation and tail recursion</a><br /> <a href="book-Z-H-32.html#%_idx_5760"><code>stack-inst-reg-name</code></a><br /> <a href="book-Z-H-22.html#%_idx_3498">Stallman, Richard M.</a>, <a href="book-Z-H-28.html#%_idx_4886">[2]</a><br /> <a href="book-Z-H-32.html#%_idx_5632"><code>start</code> register machine</a>, <a href="book-Z-H-32.html#%_idx_5674">[2]</a><br /> <a href="book-Z-H-35.html#%_idx_6478"><code>start-eceval</code></a><br /> <a href="book-Z-H-14.html#%_idx_1400"><code>start-segment</code></a>, <a href="book-Z-H-15.html#%_idx_1956">[2]</a><br /> state <br />     local, <em>see</em> local state <br />     <a href="book-Z-H-23.html#%_idx_3596">shared</a><br />     <a href="book-Z-H-24.html#%_idx_4154">vanishes in stream formulation</a><br /> <a href="book-Z-H-11.html#%_idx_670">state variable</a>, <a href="book-Z-H-20.html#%_idx_2840">[2]</a><br />     <a href="book-Z-H-20.html#%_idx_2846">local</a><br /> statements, <em>see</em> instruction sequence <br /> <a href="book-Z-H-35.html#%_idx_6384"><code>statements</code></a><br /> <a href="book-Z-H-9.html#%_idx_88">Steele, Guy Lewis Jr.</a>, <a href="book-Z-H-11.html#%_idx_700">[2]</a>, <a href="book-Z-H-20.html#%_idx_3024">[3]</a>, <a href="book-Z-H-22.html#%_idx_3500">[4]</a>, <a href="book-Z-H-27.html#%_idx_4676">[5]</a>, <a href="book-Z-H-28.html#%_idx_4848">[6]</a><br /> <a href="book-Z-H-33.html#%_idx_5932">stop-and-copy garbage collector</a><br /> <a href="book-Z-H-10.html#%_idx_338">Stoy, Joseph E.</a>, <a href="book-Z-H-11.html#%_idx_830">[2]</a>, <a href="book-Z-H-26.html#%_idx_4630">[3]</a><br /> <a href="book-Z-H-12.html#%_idx_1220">Strachey, Christopher</a><br /> <a href="book-Z-H-15.html#%_idx_1978">stratified design</a><br /> <a href="book-Z-H-19.html#%_idx_2830">stream(s)</a>, <a href="book-Z-H-24.html#%_idx_3726">[2]</a><br />     <a href="book-Z-H-24.html#%_idx_4054">delayed evaluation and</a><br />     <a href="book-Z-H-24.html#%_idx_3746">empty</a><br />     <a href="book-Z-H-24.html#%_idx_3732">implemented as delayed lists</a><br />     <a href="book-Z-H-27.html#%_idx_4754">implemented as lazy lists</a><br />     <a href="book-Z-H-24.html#%_idx_3860">implicit definition</a><br />     infinite, <em>see</em> infinite streams <br />     <a href="book-Z-H-29.html#%_idx_5186">used in query interpreter</a>, <a href="book-Z-H-29.html#%_idx_5236">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_3994"><code>stream-append</code></a><br /> <a href="book-Z-H-29.html#%_idx_5386"><code>stream-append-delayed</code></a><br /> <a href="book-Z-H-24.html#%_idx_3740"><code>stream-car</code></a>, <a href="book-Z-H-24.html#%_idx_3780">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_3742"><code>stream-cdr</code></a>, <a href="book-Z-H-24.html#%_idx_3782">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_3788"><code>stream-enumerate-interval</code></a><br /> <a href="book-Z-H-24.html#%_idx_3790"><code>stream-filter</code></a><br /> <a href="book-Z-H-29.html#%_idx_5390"><code>stream-flatmap</code></a>, <a href="book-Z-H-29.html#%_idx_5418">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_3762"><code>stream-for-each</code></a><br /> <a href="book-Z-H-24.html#%_idx_3978"><code>stream-limit</code></a><br /> <a href="book-Z-H-24.html#%_idx_3760"><code>stream-map</code></a><br />     <a href="book-Z-H-24.html#%_idx_3824">with multiple arguments</a><br /> <a href="book-Z-H-24.html#%_idx_3750"><code>stream-null?</code></a><br />     <a href="book-Z-H-24.html#%_idx_3754">in MIT Scheme</a><br /> <a href="book-Z-H-24.html#%_idx_3758"><code>stream-ref</code></a><br /> <a href="book-Z-H-24.html#%_idx_4152"><code>stream-withdraw</code></a><br /> <a href="book-Z-H-27.html#%_idx_4688">strict</a><br /> string, <em>see</em> character string <br /> <a href="book-Z-H-24.html#%_idx_4102">strongly typed language</a><br /> <a href="book-Z-H-18.html#%_idx_2506"><code>sub</code> (generic)</a><br /> <a href="book-Z-H-17.html#%_idx_2314"><code>sub-complex</code></a><br /> <a href="book-Z-H-14.html#%_idx_1508"><code>sub-interval</code></a><br /> <a href="book-Z-H-14.html#%_idx_1310"><code>sub-rat</code></a><br /> <a href="book-Z-H-15.html#%_idx_1940"><code>sub-vect</code></a><br /> <a href="book-Z-H-31.html#%_idx_5552">subroutine in register machine</a><br /> <a href="book-Z-H-15.html#%_idx_1716"><code>subsets</code> of a set</a><br /> <a href="book-Z-H-10.html#%_idx_334">substitution model of procedure application</a>, <a href="book-Z-H-21.html#%_idx_3036">[2]</a><br />     <a href="book-Z-H-20.html#%_idx_2980">inadequacy of</a><br />     <a href="book-Z-H-11.html#%_idx_644">shape of process</a><br /> <a href="book-Z-H-18.html#%_idx_2596">subtype</a><br />     <a href="book-Z-H-18.html#%_idx_2620">multiple</a><br /> <a href="book-Z-H-28.html#%_idx_4988">success continuation (nondeterministic evaluator)</a>, <a href="book-Z-H-28.html#%_idx_4996">[2]</a><br /> <a href="book-Z-H-11.html#%_idx_796">successive squaring</a><br /> <a href="book-Z-H-12.html#%_idx_990"><code>sum</code></a><br />     <a href="book-Z-H-12.html#%_idx_1020">as accumulation</a><br />     <a href="book-Z-H-12.html#%_idx_1008">iterative version</a><br /> <a href="book-Z-H-12.html#%_idx_972"><code>sum-cubes</code></a><br />     <a href="book-Z-H-12.html#%_idx_994">with higher-order procedures</a><br /> <a href="book-Z-H-12.html#%_idx_970"><code>sum-integers</code></a><br />     <a href="book-Z-H-12.html#%_idx_998">with higher-order procedures</a><br /> <a href="book-Z-H-15.html#%_idx_1722"><code>sum-odd-squares</code></a>, <a href="book-Z-H-15.html#%_idx_1752">[2]</a><br /> <a href="book-Z-H-10.html#%_idx_330"><code>sum-of-squares</code></a><br />     <a href="book-Z-H-21.html#%_idx_3086">in environment model</a><br /> <a href="book-Z-H-24.html#%_idx_3734"><code>sum-primes</code></a>, <a href="book-Z-H-24.html#%_idx_3736">[2]</a><br /> <a href="book-Z-H-16.html#%_idx_2072"><code>sum?</code></a><br /> <a href="book-Z-H-12.html#%_idx_984">summation of a series</a><br />     <a href="book-Z-H-24.html#%_idx_3958">with streams</a><br /> <a href="book-Z-H-18.html#%_idx_2600">supertype</a><br />     <a href="book-Z-H-18.html#%_idx_2618">multiple</a><br /> <a href="book-Z-H-9.html#%_idx_90">Sussman, Gerald Jay</a>, <a href="book-Z-H-9.html#%_idx_108">[2]</a>, <a href="book-Z-H-11.html#%_idx_702">[3]</a>, <a href="book-Z-H-22.html#%_idx_3496">[4]</a>, <a href="book-Z-H-28.html#%_idx_4868">[5]</a>, <a href="book-Z-H-28.html#%_idx_4880">[6]</a>, <a href="book-Z-H-28.html#%_idx_4884">[7]</a><br /> <a href="book-Z-H-16.html#%_idx_1990">Sussman, Julie Esther Mazel, nieces of</a><br /> <a href="book-Z-H-22.html#%_idx_3488">Sutherland, Ivan</a><br /> <a href="book-Z-H-16.html#%_idx_1986">symbol(s)</a><br />     <a href="book-Z-H-16.html#%_idx_2024">equality of</a><br />     <a href="book-Z-H-33.html#%_idx_5890">interning</a><br />     <a href="book-Z-H-16.html#%_idx_2010">quotation of</a><br />     <a href="book-Z-H-33.html#%_idx_5882">representation of</a><br />     <a href="book-Z-H-22.html#%_idx_3184">uniqueness of</a><br /> <a href="book-Z-H-16.html#%_idx_2254"><code>symbol-leaf</code></a><br /> <a href="book-Z-H-16.html#%_idx_2060"><code>symbol?</code> (primitive procedure)</a><br />     <a href="book-Z-H-18.html#%_idx_2556">data types and</a><br />     <a href="book-Z-H-33.html#%_idx_5914">implemented with typed pointers</a><br /> <a href="book-Z-H-18.html#%_idx_2646">symbolic algebra</a><br /> <a href="book-Z-H-16.html#%_idx_2044">symbolic differentiation</a>, <a href="book-Z-H-17.html#%_idx_2476">[2]</a><br /> <a href="book-Z-H-13.html#%_idx_1270">symbolic expression</a>, <em>see also</em> symbol(s) <br /> <a href="book-Z-H-16.html#%_idx_2264"><code>symbols</code></a><br /> <a href="book-Z-H-23.html#%_idx_3714">SYNC</a><br /> synchronization, <em>see</em> concurrency <br /> syntactic analysis, separated from execution <br />     <a href="book-Z-H-26.html#%_idx_4634">in metacircular evaluator</a><br />     <a href="book-Z-H-32.html#%_idx_5684">in register-machine simulator</a>, <a href="book-Z-H-32.html#%_idx_5730">[2]</a><br /> <a href="book-Z-H-10.html#%_idx_282">syntactic sugar</a><br />     <a href="book-Z-H-26.html#%_idx_4298"><code>define</code></a><br />     <a href="book-Z-H-12.html#%_idx_1066"><code>let</code> as</a><br />     <a href="book-Z-H-11.html#%_idx_696">looping constructs as</a><br />     <a href="book-Z-H-22.html#%_idx_3400">procedure vs. data as</a><br /> syntax, <em>see also</em> special forms <br />     abstract, <em>see</em> abstract syntax <br />     <a href="book-Z-H-10.html#%_idx_316">of expressions, describing</a><br />     <a href="book-Z-H-10.html#%_idx_276">of a programming language</a><br /> <a href="book-Z-H-22.html#%_idx_3402">syntax interface</a><br /> <a href="book-Z-H-28.html#%_idx_4842">systematic search</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-10.html#%_idx_374"><code>#t</code></a><br /> <a href="book-Z-H-22.html#%_idx_3268">table</a><br />     <a href="book-Z-H-22.html#%_idx_3274">backbone of</a><br />     <a href="book-Z-H-18.html#%_idx_2586">for coercion</a><br />     <a href="book-Z-H-17.html#%_idx_2434">for data-directed programming</a><br />     <a href="book-Z-H-22.html#%_idx_3294">local</a><br />     <a href="book-Z-H-22.html#%_idx_3308"><em>n</em>-dimensional</a><br />     <a href="book-Z-H-22.html#%_idx_3272">one-dimensional</a><br />     operation-and-type, <em>see</em> operation-and-type table <br />     <a href="book-Z-H-22.html#%_idx_3312">represented as binary tree vs. unordered list</a><br />     <a href="book-Z-H-22.html#%_idx_3304">testing equality of keys</a><br />     <a href="book-Z-H-22.html#%_idx_3288">two-dimensional</a><br />     <a href="book-Z-H-22.html#%_idx_3448">used in simulation agenda</a><br />     <a href="book-Z-H-22.html#%_idx_3318">used to store computed values</a><br /> <a href="book-Z-H-24.html#%_idx_3972">tableau</a><br /> <a href="book-Z-H-11.html#%_idx_734">tabulation</a>, <a href="book-Z-H-22.html#%_idx_3316">[2]</a><br /> <a href="book-Z-H-35.html#%_idx_6400"><code>tack-on-instruction-sequence</code></a><br /> <a href="book-Z-H-33.html#%_idx_5872">tagged architecture</a><br /> <a href="book-Z-H-17.html#%_idx_2358">tagged data</a>, <a href="book-Z-H-33.html#%_idx_5864">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4290"><code>tagged-list?</code></a><br /> <a href="book-Z-H-11.html#%_idx_692">tail recursion</a><br />     <a href="book-Z-H-35.html#%_idx_6354">compiler and</a><br />     <a href="book-Z-H-21.html#%_idx_3096">environment model of evaluation and</a><br />     <a href="book-Z-H-34.html#%_idx_6090">explicit-control evaluator and</a>, <a href="book-Z-H-34.html#%_idx_6168">[2]</a>, <a href="book-Z-H-34.html#%_idx_6176">[3]</a><br />     <a href="book-Z-H-35.html#%_idx_6358">garbage collection and</a><br />     <a href="book-Z-H-34.html#%_idx_6096">metacircular evaluator and</a><br />     <a href="book-Z-H-11.html#%_idx_706">in Scheme</a><br /> <a href="book-Z-H-34.html#%_idx_6092">tail-recursive evaluator</a><br /> tangent <br />     <a href="book-Z-H-12.html#%_idx_1154">as continued fraction</a><br />     <a href="book-Z-H-24.html#%_idx_3940">power series for</a><br /> <a href="book-Z-H-35.html#%_idx_6248">target register</a><br /> <a href="book-Z-H-23.html#%_idx_3652">Technological University of Eindhoven</a><br /> <a href="book-Z-H-9.html#%_idx_60">Teitelman, Warren</a><br /> <a href="book-Z-H-18.html#%_idx_2666">term list of polynomial</a><br />     <a href="book-Z-H-18.html#%_idx_2724">representing</a><br /> <a href="book-Z-H-18.html#%_idx_2690"><code>term-list</code></a><br /> <a href="book-Z-H-10.html#%_idx_260">terminal node of a tree</a><br /> <a href="book-Z-H-31.html#%_idx_5502"><code>test</code> (in register machine)</a><br />     <a href="book-Z-H-32.html#%_idx_5734">simulating</a><br /> <a href="book-Z-H-31.html#%_idx_5482">test operation in register machine</a><br /> <a href="book-Z-H-23.html#%_idx_3670"><code>test-and-set!</code></a>, <a href="book-Z-H-23.html#%_idx_3680">[2]</a><br /> <a href="book-Z-H-32.html#%_idx_5738"><code>test-condition</code></a><br /> <a href="book-Z-H-26.html#%_idx_4288"><code>text-of-quotation</code></a><br /> <a href="book-Z-H-14.html#%_idx_1432">Thatcher, James W.</a><br /> <a href="book-Z-H-23.html#%_idx_3650">THE Multiprogramming System</a><br /> <code>the-cars</code> <br />     <a href="book-Z-H-33.html#%_idx_5892">register</a>, <a href="book-Z-H-33.html#%_idx_5968">[2]</a><br />     <a href="book-Z-H-33.html#%_idx_5856">vector</a><br /> <code>the-cdrs</code> <br />     <a href="book-Z-H-33.html#%_idx_5894">register</a>, <a href="book-Z-H-33.html#%_idx_5970">[2]</a><br />     <a href="book-Z-H-33.html#%_idx_5858">vector</a><br /> <a href="book-Z-H-24.html#%_idx_3748"><code>the-empty-stream</code></a><br />     <a href="book-Z-H-24.html#%_idx_3752">in MIT Scheme</a><br /> <a href="book-Z-H-18.html#%_idx_2692"><code>the-empty-termlist</code></a>, <a href="book-Z-H-18.html#%_idx_2736">[2]</a><br /> <a href="book-Z-H-26.html#%_idx_4504"><code>the-global-environment</code></a>, <a href="book-Z-H-34.html#%_idx_6138">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5042">theorem proving (automatic)</a><br /> <a href="book-Z-H-11.html#%_idx_758"><img src="book-Z-G-D-4.gif" /> (<em>f</em>(<em>n</em>)) (theta of <em>f</em>(<em>n</em>))</a><br /> <a href="book-Z-H-27.html#%_idx_4696">thunk</a><br />     <a href="book-Z-H-24.html#%_idx_3818">call-by-name</a><br />     <a href="book-Z-H-24.html#%_idx_3820">call-by-need</a><br />     <a href="book-Z-H-27.html#%_idx_4706">forcing</a><br />     <a href="book-Z-H-27.html#%_idx_4738">implementation of</a><br />     <a href="book-Z-H-27.html#%_idx_4698">origin of name</a><br /> time <br />     <a href="book-Z-H-23.html#%_idx_3580">assignment and</a><br />     <a href="book-Z-H-23.html#%_idx_3720">communication and</a><br />     <a href="book-Z-H-23.html#%_idx_3584">in concurrent systems</a><br />     <a href="book-Z-H-24.html#%_idx_4144">functional programming and</a><br />     <a href="book-Z-H-28.html#%_idx_4820">in nondeterministic computing</a>, <a href="book-Z-H-28.html#%_idx_4834">[2]</a><br />     <a href="book-Z-H-23.html#%_idx_3586">purpose of</a><br /> <a href="book-Z-H-22.html#%_idx_3438">time segment, in agenda</a><br /> <a href="book-Z-H-23.html#%_idx_3674">time slicing</a><br /> <a href="book-Z-H-11.html#%_idx_936"><code>timed-prime-test</code></a><br /> <a href="book-Z-H-23.html#%_idx_3602">timing diagram</a><br /> <a href="book-Z-H-22.html#%_idx_3502">TK!Solver</a><br /> <a href="book-Z-H-18.html#%_idx_2604">tower of types</a><br /> tracing <br />     <a href="book-Z-H-32.html#%_idx_5820">instruction execution</a><br />     <a href="book-Z-H-32.html#%_idx_5824">register assignment</a><br /> <a href="book-Z-H-15.html#%_idx_1962"><code>transform-painter</code></a><br /> <a href="book-Z-H-20.html#%_idx_2992">transparency, referential</a><br /> <a href="book-Z-H-15.html#%_idx_1806"><code>transpose</code> a matrix</a><br /> tree <br />     <a href="book-Z-H-16.html#%_idx_2168">B-tree</a><br />     <a href="book-Z-H-16.html#%_idx_2140">binary</a>, <em>see also</em> binary tree <br />     <a href="book-Z-H-10.html#%_idx_254">combination viewed as</a><br />     <a href="book-Z-H-15.html#%_idx_1684">counting leaves of</a><br />     <a href="book-Z-H-15.html#%_idx_1748">enumerating leaves of</a><br />     <a href="book-Z-H-15.html#%_idx_1698">fringe of</a><br />     <a href="book-Z-H-16.html#%_idx_2242">Huffman</a><br />     <a href="book-Z-H-27.html#%_idx_4796">lazy</a><br />     <a href="book-Z-H-15.html#%_idx_1704">mapping over</a><br />     <a href="book-Z-H-16.html#%_idx_2170">red-black</a><br />     <a href="book-Z-H-15.html#%_idx_1676">represented as pairs</a><br />     <a href="book-Z-H-15.html#%_idx_1694">reversing at all levels</a><br /> <a href="book-Z-H-10.html#%_idx_262">tree accumulation</a><br /> <a href="book-Z-H-16.html#%_idx_2186"><code>tree-&gt;list...</code></a><br /> <a href="book-Z-H-15.html#%_idx_1712"><code>tree-map</code></a><br /> <a href="book-Z-H-11.html#%_idx_712">tree-recursive process</a><br />     <a href="book-Z-H-11.html#%_idx_776">order of growth</a><br /> <a href="book-Z-H-17.html#%_idx_2342">trigonometric relations</a><br /> <a href="book-Z-H-10.html#%_idx_368">true</a><br /> <a href="book-Z-H-10.html#%_idx_376"><code>true</code></a><br /> <a href="book-Z-H-26.html#%_idx_4434"><code>true?</code></a><br /> <a href="book-Z-H-10.html#%_idx_146">truncation error</a><br /> <a href="book-Z-H-28.html#%_idx_4894">truth maintenance</a><br /> <a href="book-Z-H-28.html#%_idx_4910"><code>try-again</code></a><br /> <a href="book-Z-H-26.html#%_idx_4560">Turing machine</a><br /> <a href="book-Z-H-26.html#%_idx_4556">Turing, Alan M.</a>, <a href="book-Z-H-26.html#%_idx_4590">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1820">Turner, David</a>, <a href="book-Z-H-24.html#%_idx_3996">[2]</a>, <a href="book-Z-H-24.html#%_idx_4174">[3]</a><br /> <a href="book-Z-H-33.html#%_idx_5870">type field</a><br /> <a href="book-Z-H-17.html#%_idx_2296">type tag</a>, <a href="book-Z-H-17.html#%_idx_2366">[2]</a><br />     <a href="book-Z-H-18.html#%_idx_2548">two-level</a><br /> type(s) <br />     <a href="book-Z-H-18.html#%_idx_2576">cross-type operations</a><br />     <a href="book-Z-H-17.html#%_idx_2432">dispatching on</a><br />     <a href="book-Z-H-18.html#%_idx_2768">hierarchy in symbolic algebra</a><br />     <a href="book-Z-H-18.html#%_idx_2592">hierarchy of</a><br />     <a href="book-Z-H-18.html#%_idx_2612">lowering</a>, <a href="book-Z-H-18.html#%_idx_2640">[2]</a><br />     <a href="book-Z-H-18.html#%_idx_2616">multiple subtype and supertype</a><br />     <a href="book-Z-H-18.html#%_idx_2608">raising</a>, <a href="book-Z-H-18.html#%_idx_2634">[2]</a><br />     <a href="book-Z-H-18.html#%_idx_2598">subtype</a><br />     <a href="book-Z-H-18.html#%_idx_2602">supertype</a><br />     <a href="book-Z-H-18.html#%_idx_2606">tower of</a><br /> <a href="book-Z-H-24.html#%_idx_4114">type-inferencing mechanism</a><br /> <a href="book-Z-H-17.html#%_idx_2370"><code>type-tag</code></a><br />     <a href="book-Z-H-18.html#%_idx_2560">using Scheme data types</a><br /> <a href="book-Z-H-33.html#%_idx_5860">typed pointer</a><br /> <a href="book-Z-H-10.html#%_idx_202">typing input expressions</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-21.html#%_idx_3054">unbound variable</a><br /> <a href="book-Z-H-34.html#%_idx_6030"><code>unev</code> register</a><br /> <a href="book-Z-H-29.html#%_idx_5210">unification</a><br />     <a href="book-Z-H-29.html#%_idx_5044">discovery of algorithm</a><br />     <a href="book-Z-H-29.html#%_idx_5362">implementation</a><br />     <a href="book-Z-H-29.html#%_idx_5214">pattern matching vs.</a>, <a href="book-Z-H-29.html#%_idx_5224">[2]</a><br /> <a href="book-Z-H-29.html#%_idx_5364"><code>unify-match</code></a><br /> <a href="book-Z-H-16.html#%_idx_2108"><code>union-set</code></a><br />     <a href="book-Z-H-16.html#%_idx_2194">binary-tree representation</a><br />     <a href="book-Z-H-16.html#%_idx_2134">ordered-list representation</a><br />     <a href="book-Z-H-16.html#%_idx_2122">unordered-list representation</a><br /> <a href="book-Z-H-29.html#%_idx_5424"><code>unique</code> (query language)</a><br /> <a href="book-Z-H-15.html#%_idx_1844"><code>unique-pairs</code></a><br /> <a href="book-Z-H-15.html#%_idx_1922">unit square</a><br /> <a href="book-Z-H-18.html#%_idx_2658">univariate polynomial</a><br /> <a href="book-Z-H-26.html#%_idx_4552">universal machine</a><br />     <a href="book-Z-H-35.html#%_idx_6196">explicit-control evaluator as</a><br />     <a href="book-Z-H-35.html#%_idx_6200">general-purpose computer as</a><br /> <a href="book-Z-H-9.html#%_idx_78">University of California at Berkeley</a><br /> <a href="book-Z-H-29.html#%_idx_5064">University of Edinburgh</a><br /> <a href="book-Z-H-29.html#%_idx_5062">University of Marseille</a><br /> <a href="book-Z-H-34.html#%_idx_6188">UNIX</a>, <a href="book-Z-H-35.html#%_idx_6500">[2]</a><br /> <a href="book-Z-H-34.html#%_idx_6152"><code>unknown-expression-type</code></a><br /> <a href="book-Z-H-34.html#%_idx_6154"><code>unknown-procedure-type</code></a><br /> <a href="book-Z-H-16.html#%_idx_2114">unordered-list representation of sets</a><br /> unspecified values <br />     <a href="book-Z-H-10.html#%_idx_230"><code>define</code></a><br />     <a href="book-Z-H-14.html#%_idx_1366"><code>display</code></a><br />     <a href="book-Z-H-22.html#%_idx_3476"><code>if</code> without alternative</a><br />     <a href="book-Z-H-14.html#%_idx_1368"><code>newline</code></a><br />     <a href="book-Z-H-20.html#%_idx_2866"><code>set!</code></a><br />     <a href="book-Z-H-22.html#%_idx_3150"><code>set-car!</code></a><br />     <a href="book-Z-H-22.html#%_idx_3154"><code>set-cdr!</code></a><br /> <a href="book-Z-H-15.html#%_idx_1896"><code>up-split</code></a><br /> <a href="book-Z-H-32.html#%_idx_5702"><code>update-insts!</code></a><br /> <a href="book-Z-H-14.html#%_idx_1504"><code>upper-bound</code></a><br /> <a href="book-Z-H-27.html#%_idx_4752">upward compatibility</a><br /> <a href="book-Z-H-26.html#%_idx_4586"><code>user-initial-environment</code> (MIT Scheme)</a><br /> <a href="book-Z-H-26.html#%_idx_4538"><code>user-print</code></a><br />     <a href="book-Z-H-35.html#%_idx_6480">modified for compiled code</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-23.html#%_idx_3656">V operation on semaphore</a><br /> <a href="book-Z-H-34.html#%_idx_6022"><code>val</code> register</a><br /> value <br />     <a href="book-Z-H-10.html#%_idx_186">of a combination</a><br />     <a href="book-Z-H-10.html#%_idx_212">of an expression</a>, <em>see also</em> unspecified values <br /> <a href="book-Z-H-32.html#%_idx_5728"><code>value-proc</code></a><br /> <a href="book-Z-H-10.html#%_idx_220">variable</a>, <em>see also</em> local variable <br />     <a href="book-Z-H-10.html#%_idx_586">bound</a><br />     <a href="book-Z-H-10.html#%_idx_592">free</a><br />     <a href="book-Z-H-10.html#%_idx_596">scope of</a>, <em>see also</em> scope of a variable <br />     <a href="book-Z-H-21.html#%_idx_3056">unbound</a><br />     <a href="book-Z-H-10.html#%_idx_222">value of</a>, <a href="book-Z-H-21.html#%_idx_3052">[2]</a><br /> <a href="book-Z-H-18.html#%_idx_2688"><code>variable</code></a><br /> <a href="book-Z-H-16.html#%_idx_2224">variable-length code</a><br /> <a href="book-Z-H-16.html#%_idx_2064"><code>variable?</code></a>, <a href="book-Z-H-26.html#%_idx_4284">[2]</a><br /> <a href="book-Z-H-33.html#%_idx_5842">vector (data structure)</a><br /> vector (mathematical) <br />     <a href="book-Z-H-15.html#%_idx_1800">operations on</a>, <a href="book-Z-H-15.html#%_idx_1930">[2]</a><br />     <a href="book-Z-H-15.html#%_idx_1912">in picture-language frame</a><br />     <a href="book-Z-H-15.html#%_idx_1928">represented as pair</a><br />     <a href="book-Z-H-15.html#%_idx_1798">represented as sequence</a><br /> <a href="book-Z-H-33.html#%_idx_5844"><code>vector-ref</code> (primitive procedure)</a><br /> <a href="book-Z-H-33.html#%_idx_5848"><code>vector-set!</code> (primitive procedure)</a><br /> <a href="book-Z-H-16.html#%_idx_1996">Venus</a><br /> <a href="book-Z-H-28.html#%_idx_4958"><code>verbs</code></a><br /> <a href="book-Z-H-10.html#%_idx_506">very high-level language</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-20.html#%_idx_3012">Wadler, Philip</a><br /> <a href="book-Z-H-24.html#%_idx_4112">Wadsworth, Christopher</a><br /> <a href="book-Z-H-14.html#%_idx_1434">Wagner, Eric G.</a><br /> <a href="book-Z-H-15.html#%_idx_1874">Walker, Francis Amasa</a><br /> <a href="book-Z-H-12.html#%_idx_1016">Wallis, John</a><br /> <a href="book-Z-H-25.html#%_idx_4206">Wand, Mitchell</a>, <a href="book-Z-H-34.html#%_idx_6068">[2]</a><br /> <a href="book-Z-H-15.html#%_idx_1760">Waters, Richard C.</a><br /> <a href="book-Z-H-16.html#%_idx_2266"><code>weight</code></a><br /> <a href="book-Z-H-16.html#%_idx_2256"><code>weight-leaf</code></a><br /> <a href="book-Z-H-13.html#%_idx_1254">Weyl, Hermann</a><br /> ``what is'' vs. ``how to'' description, <em>see</em> declarative vs. imperative knowledge <br /> <a href="book-Z-H-29.html#%_idx_5144"><code>wheel</code> (rule)</a>, <a href="book-Z-H-29.html#%_idx_5278">[2]</a><br /> <a href="book-Z-H-14.html#%_idx_1520"><code>width</code></a><br /> <a href="book-Z-H-14.html#%_idx_1510">width of an interval</a><br /> <a href="book-Z-H-10.html#%_idx_210">Wilde, Oscar (Perlis's paraphrase of)</a><br /> <a href="book-Z-H-11.html#%_idx_884">Wiles, Andrew</a><br /> <a href="book-Z-H-28.html#%_idx_4870">Winograd, Terry</a><br /> <a href="book-Z-H-28.html#%_idx_4906">Winston, Patrick Henry</a>, <a href="book-Z-H-28.html#%_idx_4974">[2]</a><br /> <a href="book-Z-H-22.html#%_idx_3334">wire, in digital circuit</a><br /> <a href="book-Z-H-9.html#%_idx_110">Wisdom, Jack</a><br /> <a href="book-Z-H-24.html#%_idx_3814">Wise, David S.</a><br /> <a href="book-Z-H-14.html#%_idx_1306">wishful thinking</a>, <a href="book-Z-H-16.html#%_idx_2050">[2]</a><br /> <a href="book-Z-H-20.html#%_idx_2858"><code>withdraw</code></a><br />     <a href="book-Z-H-23.html#%_idx_3592">problems in concurrent system</a><br /> <a href="book-Z-H-23.html#%_idx_3676"><code>without-interrupts</code></a><br /> <a href="book-Z-H-24.html#%_idx_3728">world line of a particle</a>, <a href="book-Z-H-24.html#%_idx_4156">[2]</a><br /> <a href="book-Z-H-24.html#%_idx_3884">Wright, E. M.</a><br /> <a href="book-Z-H-14.html#%_idx_1436">Wright, Jesse B.</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-15.html#%_idx_1934"><code>xcor-vect</code></a><br /> <a href="book-Z-H-9.html#%_idx_64">Xerox Palo Alto Research Center</a>, <a href="book-Z-H-22.html#%_idx_3494">[2]</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-26.html#%_idx_4628"><em>Y</em> operator</a><br /> <a href="book-Z-H-15.html#%_idx_1936"><code>ycor-vect</code></a><br /> <a href="book-Z-H-33.html#%_idx_5944">Yochelson, Jerome C.</a></p>
<p></p>
<p></p>
<p><br /> <a href="book-Z-H-28.html#%_idx_4900">Zabih, Ramin</a><br /> <a href="book-Z-H-24.html#%_idx_4036">zero crossings of a signal</a>, <a href="book-Z-H-24.html#%_idx_4040">[2]</a>, <a href="book-Z-H-24.html#%_idx_4048">[3]</a><br /> <a href="book-Z-H-18.html#%_idx_2570">zero test (generic)</a><br />     <a href="book-Z-H-18.html#%_idx_2754">for polynomials</a><br /> <a href="book-Z-H-9.html#%_idx_80">Zetalisp</a><br /> <a href="book-Z-H-14.html#%_idx_1428">Zilles, Stephen N.</a><br /> <a href="book-Z-H-18.html#%_idx_2818">Zippel, Richard E.</a></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>[Go to <a href="book.html">first</a>, <a href="book-Z-H-37.html">previous</a>, next page;   <a href="book-Z-H-4.html#%_toc_start">contents</a>;   index]</p>
