import argparse
import hashlib
import lxml.etree as etree
import sqlite3
import sys
from zipfile import ZipFile

def write_text_to_file(all_text):
    "Just a test for text extraction, might be useful later."
    f = open("testfile", "w", encoding="utf8")
    for parno, text in enumerate(all_text):
        paragraph = ''.join(text)
        if paragraph:
            # Write non-empy paragraphs only.
            f.write(str(parno) + ":\t")
            f.write(paragraph)
            f.write("\n\n")
    f.close()

def open_db(db_file):
    conn = sqlite3.connect(db_file)
    return conn, conn.cursor()
    
def write_to_db(db_name, fname, all_text):
    '''
    Opens database and writes text to it.
    Database must already exist and have tables called
    files and text, as defined in odt_db.sql.
    '''
    try:
        conn, cursor = open_db(db_file)
        cursor.execute("insert into files values(NULL,?)", (fname,))
        cursor.execute("select id from files where name=?", (fname,))
        file_id = cursor.fetchone()[0] # ignores dups

        for par_no, text in enumerate(all_text):
            paragraph = ''.join(text)
            if paragraph:
                hasher = hashlib.md5()
                hasher.update(bytes(paragraph, encoding="utf8"))
                digest = hasher.digest()
                cursor.execute("insert into text values(?,?,?,?)",
                               (file_id, par_no, digest, paragraph,))
        conn.commit()
    finally:
        cursor.close()

def extract_text(odt_file):
    z = ZipFile(odt_file)
    doc = etree.parse(z.open("content.xml"))

    try:
        root = doc.getroot()
        ns = root.nsmap
        # nsmap is all the namespace prefixes in the document.
    
        for elem in root.xpath("//text:p[text:span]",
                               namespaces=ns):
            etree.strip_tags(elem, '{{{}}}span'.format(ns['text']))
            # You have to write {{ to get a literal { in
            # a format string. The inner pair {} is the
            # actual formatting character.

        all_text = (elem.itertext() for elem in
                    root.xpath("//text:p", namespaces=ns))
        return all_text
    finally:
        z.close()
    
if __name__ == "__main__":
    # if len(sys.argv) != 3:
    #     print(sys.argv[1])
    #     print(sys.argv[2])
    #     print("Usage: <database> <odt>")
    #     sys.exit()

    # db_file = sys.argv[1]
    # odt_file = sys.argv[2]

    # all_text = extract_text(odt_file)
    # write_to_db(db_file, odt_file, all_text)

    parser = argparse.ArgumentParser()
    parser.add_argument("database",
                        help='''
                        The sqlite database in which to store the
                        files.
                        It should already be initialized with a files
                        table and a text table.
                        ''')
    parser.add_argument("-p", "--pattern",
                        help='''
                        A regular expression pattern for files
                        which should be included.
                        ''')
    parser.add_argument("-x", "--exclude",
                        nargs='*',
                        help='''
                        A list of files and directories which
                        should not be included.
                        ''')

    # TODO: Separate out the database connection process from
    # write_to_db. We want to keep the same cursor and the same
    # connection, but parse and write multiple files.
    
#  for path, dirs, files in os.walk(os.getcwd()):
# ...   print(path)
# ...   for f in files:
# ...     if ".odt" in f: print("\t{}".format(f))
